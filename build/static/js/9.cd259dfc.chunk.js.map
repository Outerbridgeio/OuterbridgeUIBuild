{"version":3,"sources":["utils/genericHelper.js","ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","ui-component/extended/AnimateButton.js","ui-component/dialog/ExpandDataDialog.js","hooks/useScriptRef.js","utils/useNotifier.js","ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","ui-component/dialog/EditVariableDialog.js","views/inputs/ArrayInputParameters.js","views/inputs/OptionParamsResponse.js","views/inputs/AsyncSelectWrapper.js","views/inputs/InputParameters.js","api/credential.js","api/oauth2.js","views/inputs/CredentialInput.js","api/contracts.js","views/contracts/ContractDialog.js","assets/images/contract_empty.svg","views/contracts/index.js"],"names":["numberOrExpressionRegex","getAvailableNodeIdsForVariable","nodes","edges","targetNodeId","reverse","graph","nodeDependencies","i","length","nodeId","id","source","target","Object","prototype","hasOwnProperty","call","push","constructNodeDirectedGraph","exploreNodes","nodeQueue","exploredNodes","shift","parentNodeIds","inputEdges","filter","edg","targetHandle","includes","j","neighbourNodeIds","neighNodeId","getAllConnectedNodesFromTarget","setPath","Set","delete","generateWebhookEndpoint","characters","Array","from","map","charAt","Math","floor","random","join","getUniqueNodeId","nodeData","totalSameNodes","data","name","checkIfNodeLabelUnique","nodeLabel","label","initializeNodeData","nodeParams","initialValues","input","default","type","newObj","array","submit","addAnchors","newNodeId","incoming","outgoing","inputAnchors","newInput","outputAnchors","newOutput","getUniqueNodeLabel","actions","credentials","networks","inputParameters","getEdgeLabelName","sourceSplit","split","checkMultipleTriggers","node","convertDateStringToDateObject","dateString","undefined","date","moment","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","splitDataURI","getFolderName","base64ArrayStr","base64Array","JSON","parse","filenames","filename","e","generateExportFlowData","flowData","selected","newNodeData","wallet","credentialMethod","isHideRegisteredCredential","params","paramsType","nodeFlowData","clonedParams","selectedCredentialMethodOption","options","find","opt","hideRegisteredCredential","handleCredentialParams","reorganizedParams","nPrm","lodash","cloneDeep","prm","copyToClipboard","src","isArray","navigator","clipboard","writeText","stringify","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","setData","error","setError","loading","setLoading","request","result","AnimateButton","offset1","offset2","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","ExpandDataDialog","show","dialogProps","onCancel","onCopyClick","enableClipboard","portalElement","document","getElementById","component","open","fullWidth","maxWidth","onClose","fontSize","createPortal","useScriptRef","scripted","useRef","useEffect","current","displayed","useNotifier","dispatch","useDispatch","notifications","useSelector","state","notifier","useSnackbar","enqueueSnackbar","closeSnackbar","React","forEach","key","message","dismissed","event","reason","myKey","onExited","removeSnackbar","WorkflowCard","Card","CardContent","Grid","container","item","justifyContent","Skeleton","width","height","my","CardWrapper","styled","backgroundColor","color","darkTextPrimary","overflow","position","cursor","ItemCard","isLoading","images","onClick","chipSX","padding","activeWorkflowSX","success","dark","light","getNetworkItem","network","ntw","Box","p","style","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontWeight","mt","mb","flexGrow","whiteSpace","textOverflow","substring","slice","executionCount","deployed","Chip","marginTop","img","objectFit","alt","EditVariableDialog","onConfirm","inputValue","setInputValue","setInput","expanded","setExpanded","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","copiedVariableBody","setCopiedVariableBody","languages","js","languageType","setLanguageType","onMouseUp","selectionEnd","value","cursorPosition","textBeforeCursorPosition","textAfterCursorPosition","onClipboardCopy","namespaces","namespace","returnVariablePath","test","endsWith","values","inputValues","arrayItemBody","arrayItemValues","arrayItemInput","toString","json","flex","ml","grey","maxHeight","overflowX","onValueChange","code","placeholder","highlight","onBlur","minHeight","textareaClassName","hideVariables","availableNodesForVariable","marginLeft","pl","pr","py","breakpoints","down","top","index","onChange","isExpanded","expandIcon","collapsed","outputResponses","output","size","right","dialogProp","onExpandDialogClicked","cancelButtonName","updateArrayValues","updateInitialValues","arrayItemIndex","updateValues","onSave","confirmButtonName","StyledPopper","Popper","autocompleteClasses","listbox","boxSizing","margin","DateCustomInput","paddingTop","paddingBottom","paddingRight","paddingLeft","textAlign","opacity","propTypes","PropTypes","string","func","ArrayInputParameters","arrayParams","arrayGroupName","errors","onArrayInputChange","onArrayInputBlur","onArrayItemRemove","onArrayItemMouseUp","onEditVariableDialogOpen","customization","processUpdateValues","inputName","onInputChange","onInputBlur","valueIndex","path","_","Fab","main","splice","onRemoveClick","paramIndex","FormControl","Boolean","Stack","description","Tooltip","placement","IconButton","Info","marginBottom","Button","startIcon","hidden","files","file","reader","FileReader","onload","evt","readAsDataURL","handleFileUpload","setFieldValue","directory","webkitdirectory","readFile","fileIndex","webkitRelativePath","handleFolderUpload","onScroll","stopPropagation","customInput","showTimeSelect","isClearable","timeInputLabel","dateFormat","toISOString","OutlinedInput","Switch","checked","inputProps","availableOptions","Autocomplete","freeSolo","onOpen","option","selection","PopperComponent","renderInput","TextField","renderOption","props","OptionParamsResponse","getSelectedValue","getSelectedOptionInputParams","selectedOption","getSelectedOptionExampleParams","exampleParameters","getSelectedOptionExampleResponse","exampleResponse","dangerouslySetInnerHTML","__html","AsyncSelectWrapper","loadMethod","loadFromDbCollections","onMenuOpen","onSetError","customStyles","provided","isSelected","control","singleValue","menuList","asyncOptions","setAsyncOptions","styles","formatOptionLabel","context","getOptionLabel","getOptionValue","loadOptions","callback","post","then","response","returnOptions","toBeDeleteOptions","displayTypes","displayType","displayOptions","keys","comparisonValue","replace","groundValue","get","RegExp","showHideOptions","toLowerCase","defaultOptions","bottom","fontStyle","formatErrorMessage","InputParameters","nodeParamsValidation","valueChanged","onSubmit","setVariableSelectorState","scriptedRef","onChanged","findMatchingOptions","enableReinitialize","validationSchema","Yup","shape","setErrors","setStatus","setSubmitting","err","console","handleBlur","handleChange","handleSubmit","isSubmitting","noValidate","overwriteValues","multiline","rows","maxRows","minRows","arrayParamItems","templateArray","arrayItemsValues","variableState","body","disableElevation","arrayItems","arrayName","onAddArrayItem","disabled","nodeCredentialName","client","isEncrypted","credentialBody","put","credentialId","ADD_NEW_CREDENTIAL","CredentialInput","initialParams","initialValidation","paramsChanged","credentialValidation","setCredentialValidation","credentialValues","setCredentialValues","setNodeCredentialName","credentialParams","setCredentialParams","credentialOptions","setCredentialOptions","oAuth2RedirectURL","setOAuth2RedirectURL","getCredentialParamsApi","useApi","credentialApi","getRegisteredCredentialsApi","getSpecificCredentialApi","getCredentialRequestBody","Error","credentialData","credParamName","clearCredentialParams","updateParams","every","paramItem","clearCredentialParamsValues","registeredCredential","onDeleteCredential","openOAuth2PopUpWindow","oAuth2PopupURL","left","window","screenX","outerWidth","screenY","outerHeight","url","_id","validationKey","updateValidation","required","updateYupValidation","newCredentialParams","unshift","isAddNewCredential","oauth2Api","popUpWindow","oAuth2Completed","removeEventListener","submitValues","close","addEventListener","selectedCredential","redirectURLResp","ContractDialog","enqueueSnackbarAction","closeSnackbarAction","contract_details","contractDetails","setContractDetails","contractData","setContractData","contractParams","setContractParams","contractValues","setContractValues","contractValidation","setContractValidation","invalidAddress","setInvalidAddress","invalidABI","setInvalidABI","isReadyToAdd","setIsReadyToAdd","isEditVariableDialogOpen","setEditVariableDialog","editVariableDialogProps","setEditVariableDialogProps","contractParamsType","getSpecificContractApi","contractsApi","handleAccordionChange","reset","addNewContract","createNewContractBody","contractInfo","abi","providerCredential","getTime","persist","saveContract","saveContractBody","deleteContract","fetchABI","formValues","selectedNetwork","uri","resp","updateContractData","status","indexOf","paramType","ethers","utils","isAddress","updateFormValues","initializeFormValuesAndParams","optional","setYupValidation","transformContractResponse","contractResponseData","checkIsReadyToAdd","Dialog","DialogTitle","DialogContent","icon","networkExplorers","Accordion","AccordionSummary","Avatar","typography","smallAvatar","background","AccordionDetails","Divider","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","originalParam","updateContractDetails","DialogActions","Contracts","showDialog","setShowDialog","setDialogProps","getAllContractsApi","spacing","gridSpacing","lg","md","sm","xs","ContractEmptySVG"],"mappings":"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","file":"static/js/9.cd259dfc.chunk.js","sourcesContent":["import lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport const numberOrExpressionRegex = /^(\\d+\\.?\\d*|{{.*}})$/; //return true if string consists only numbers OR expression {{}}\r\n\r\nexport const constructNodeDirectedGraph = (nodes, edges, reverse=false) => {\r\n\r\n    const graph = {};\r\n    const nodeDependencies = {};\r\n\r\n    // Initialize node dependencies and graph\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const nodeId = nodes[i].id;\r\n        nodeDependencies[nodeId] = 0;\r\n        graph[nodeId] = [];\r\n    }\r\n\r\n    for (let i = 0; i < edges.length; i+=1 ) {\r\n        const source = edges[i].source;\r\n        const target = edges[i].target;\r\n\r\n        if (Object.prototype.hasOwnProperty.call(graph, source)) {\r\n            graph[source].push(target);\r\n        } else {\r\n            graph[source] = [target];\r\n        }\r\n\r\n        if (reverse) {\r\n            if (Object.prototype.hasOwnProperty.call(graph, target)) {\r\n                graph[target].push(source);\r\n            } else {\r\n                graph[target] = [source];\r\n            }\r\n        }\r\n\r\n        nodeDependencies[target] += 1;\r\n    }\r\n\r\n    return { graph, nodeDependencies };\r\n}\r\n\r\n// Find starting node with 0 dependencies\r\nexport const findStartingNodeIds = (nodes, nodeDependencies) => {\r\n    const startingNodeIds = [];\r\n    Object.keys(nodeDependencies).forEach((nodeId) => {\r\n        if (nodeDependencies[nodeId] === 0) {\r\n            const node = nodes.find((nd) => nd.id === nodeId);\r\n            if (node && node.data && node.data.type && (node.data.type === 'trigger' || node.data.type === 'webhook')) {\r\n                startingNodeIds.push(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    return startingNodeIds;\r\n}\r\n\r\n// Backtrack function to find all paths from start to target node\r\nexport const getAllPathsFromStartToTarget = (startNodeId, targetNodeId, graph) => {\r\n    const paths = [];\r\n    const visitedNodeIds = new Set();\r\n\r\n    const DFS = (currentNodeId, endNodeId, tempPath) => {\r\n        if (currentNodeId === endNodeId) {\r\n            paths.push(lodash.cloneDeep(tempPath));\r\n            return;\r\n        }\r\n\r\n        const neighbourNodeIds = graph[currentNodeId];\r\n        visitedNodeIds.add(currentNodeId);\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i+=1 ) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (!visitedNodeIds.has(neighNodeId)) {\r\n                tempPath.push(neighNodeId);\r\n                DFS(neighNodeId, endNodeId, tempPath);\r\n                tempPath.pop();\r\n            }\r\n        }\r\n        visitedNodeIds.delete(currentNodeId);\r\n    }\r\n\r\n    DFS(startNodeId, targetNodeId, [startNodeId]);\r\n    return paths;\r\n}\r\n\r\n// Breadth First Search to get all connected parent nodes from target\r\nexport const getAllConnectedNodesFromTarget = (targetNodeId, edges, graph) => {\r\n\r\n    const nodeQueue = [];\r\n    const exploredNodes = [];\r\n\r\n    nodeQueue.push(targetNodeId);\r\n    exploredNodes.push(targetNodeId);\r\n\r\n    while (nodeQueue.length) {\r\n\r\n        const nodeId = nodeQueue.shift() || '';\r\n        const parentNodeIds = [];\r\n\r\n        const inputEdges = edges.filter((edg) => (edg.target === nodeId && edg.targetHandle.includes('-input-')));\r\n        if (inputEdges && inputEdges.length) {\r\n            for (let j = 0; j < inputEdges.length; j+=1 ) {\r\n                parentNodeIds.push(inputEdges[j].source);\r\n            }\r\n        }\r\n\r\n        const neighbourNodeIds = graph[nodeId];\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i+=1 ) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (parentNodeIds.includes(neighNodeId)) {\r\n                if (!exploredNodes.includes(neighNodeId)) {\r\n                    exploredNodes.push(neighNodeId);\r\n                    nodeQueue.push(neighNodeId);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return exploredNodes;\r\n}\r\n\r\nexport const getAvailableNodeIdsForVariable = (nodes, edges, targetNodeId) => {\r\n    const { graph } = constructNodeDirectedGraph(nodes, edges, true);\r\n    const exploreNodes = getAllConnectedNodesFromTarget(targetNodeId, edges, graph);\r\n    const setPath = new Set(exploreNodes);\r\n    setPath.delete(targetNodeId);\r\n    return [...setPath];\r\n}\r\n\r\nexport const generateWebhookEndpoint = () => {\r\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n    const webhookEndpoint = Array.from({ length: 15 }).map(() => {\r\n        return characters.charAt(\r\n            Math.floor(Math.random() * characters.length),\r\n        );\r\n    }).join('');\r\n    return webhookEndpoint;\r\n}\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1;\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return nodeId;\r\n};\r\n\r\nconst getUniqueNodeLabel = (nodeData, nodes) => {\r\n\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique label\r\n    let nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            totalSameNodes += 1;\r\n            nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return totalSameNodes === 0 ? nodeData.label : nodeLabel;\r\n};\r\n\r\nexport const checkIfNodeLabelUnique = (nodeLabel, nodes) => {\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const initializeNodeData = (nodeParams) => {\r\n\r\n    const initialValues = {};\r\n\r\n    for (let i = 0; i < nodeParams.length; i+= 1) {\r\n        const input = nodeParams[i];\r\n\r\n        // Load from nodeParams default values\r\n        initialValues[input.name] = input.default || ''; \r\n\r\n        // Special case for array, always initialize the item if default is not set\r\n        if (input.type === 'array' && !input.default) {\r\n            const newObj = {};\r\n            for (let j = 0; j < input.array.length; j+= 1) {\r\n                newObj[input.array[j].name] = input.array[j].default || '';\r\n            }\r\n            initialValues[input.name] = [newObj];\r\n        }\r\n    }\r\n    \r\n    initialValues.submit = null;\r\n    \r\n    return initialValues;\r\n};\r\n\r\nexport const addAnchors = (nodeData, nodes, newNodeId) => {\r\n    const incoming = nodeData.incoming || 0;\r\n    const outgoing = nodeData.outgoing || 0;\r\n\r\n    const inputAnchors = [];\r\n    for (let i = 0; i < incoming; i+=1 ) {\r\n        const newInput = {\r\n            id: `${newNodeId}-input-${i}`\r\n        };\r\n        inputAnchors.push(newInput);\r\n    }\r\n\r\n    const outputAnchors = [];\r\n    for (let i = 0; i < outgoing; i+=1 ) {\r\n        const newOutput = {\r\n            id: `${newNodeId}-output-${i}`\r\n        };\r\n        outputAnchors.push(newOutput);\r\n    }\r\n    \r\n    nodeData.inputAnchors = inputAnchors;\r\n    nodeData.outputAnchors = outputAnchors;\r\n    nodeData.label = getUniqueNodeLabel(nodeData, nodes);\r\n    \r\n    if (nodeData.actions) nodeData.actions = initializeNodeData(nodeData.actions);\r\n    if (nodeData.credentials) nodeData.credentials = initializeNodeData(nodeData.credentials);\r\n    if (nodeData.networks) nodeData.networks = initializeNodeData(nodeData.networks);\r\n    if (nodeData.inputParameters) nodeData.inputParameters = initializeNodeData(nodeData.inputParameters);\r\n\r\n    return nodeData;\r\n};\r\n\r\nexport const getEdgeLabelName = (source) => {\r\n    const sourceSplit = source.split(\"-\");\r\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\r\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length-1];\r\n        return outputAnchorsIndex === '0' ? 'true' : 'false';\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const checkMultipleTriggers = (nodes) => {\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.type === 'webhook' || node.data.type === 'trigger') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined;\r\n\r\n    const date = moment(dateString);\r\n    if (!date.isValid) return undefined;\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes());\r\n}\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    const splitDataURI = fileBase64.split(',');\r\n    const filename = splitDataURI[splitDataURI.length-1].split(':')[1];\r\n    return filename;\r\n}\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr);\r\n        const filenames = [];\r\n        for (let i = 0; i < base64Array.length; i+=1 ) {\r\n            const fileBase64 = base64Array[i];\r\n            const splitDataURI = fileBase64.split(',');\r\n            const filename = splitDataURI[splitDataURI.length-1].split(':')[1];\r\n            filenames.push(filename);\r\n        }\r\n        return filenames.length ? filenames.join(',') : '';\r\n    } catch(e) {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes;\r\n    const edges = flowData.edges;\r\n    \r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        nodes[i].selected = false;\r\n        const node = nodes[i];\r\n        const newNodeData = {\r\n            label: node.data.label,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            inputAnchors: node.data.inputAnchors,\r\n            outputAnchors: node.data.outputAnchors,\r\n            selected: false,\r\n        }\r\n        if (node.data.inputParameters) {\r\n            newNodeData.inputParameters = {...node.data.inputParameters, submit: null};\r\n            if (node.data.inputParameters.wallet) delete newNodeData.inputParameters.wallet;\r\n        }\r\n        if (node.data.actions) {\r\n            newNodeData.actions = {...node.data.actions, submit: null};\r\n            if (node.data.actions.wallet) delete newNodeData.actions.wallet;\r\n        }\r\n        if (node.data.networks) {\r\n            newNodeData.networks = {...node.data.networks, submit: null};\r\n            if (node.data.networks.wallet) delete newNodeData.networks.wallet;\r\n        }\r\n        if (node.data.credentials && node.data.credentials.credentialMethod) {\r\n            newNodeData.credentials = {credentialMethod: node.data.credentials.credentialMethod, submit: null};\r\n            if (node.data.credentials.wallet) delete newNodeData.credentials.wallet;\r\n        }\r\n\r\n        nodes[i].data = newNodeData;\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    };\r\n    return exportJson;\r\n}\r\n\r\nconst isHideRegisteredCredential = (params, paramsType, nodeFlowData) => {\r\n\r\n    if (!nodeFlowData[paramsType] || !nodeFlowData[paramsType]['credentialMethod']) return undefined;\r\n    let clonedParams = params;\r\n\r\n    for (let i = 0; i < clonedParams.length; i+= 1) {\r\n        const input = clonedParams[i];\r\n        if (input.type === 'options') {\r\n            const selectedCredentialMethodOption = input.options.find((opt) => opt.name === nodeFlowData[paramsType]['credentialMethod']);\r\n            if (\r\n                selectedCredentialMethodOption && \r\n                selectedCredentialMethodOption !== undefined && \r\n                selectedCredentialMethodOption.hideRegisteredCredential\r\n            ) return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const handleCredentialParams = (nodeParams, paramsType, reorganizedParams, nodeFlowData) => {\r\n    if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') === undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        !isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Add hard-coded registeredCredential params\r\n        nodeParams.push({\r\n            name: 'registeredCredential',\r\n        });\r\n\r\n    } else if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') !== undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n\r\n    } else if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') === undefined\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n    }\r\n    return nodeParams;\r\n}\r\n\r\nexport const copyToClipboard = (e) => {\r\n    const src = e.src;\r\n    if (Array.isArray(src) || typeof src === 'object') {\r\n        navigator.clipboard.writeText(JSON.stringify(src, null, '  '));\r\n    } else {\r\n        navigator.clipboard.writeText(src);\r\n    }\r\n}","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import axios from \"axios\";\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});\r\n\r\nexport default apiClient;\r\n","import { useState } from \"react\";\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true);\r\n        try {\r\n            const result = await apiFunc(...args);\r\n            setData(result.data);\r\n        } catch (err) {\r\n            setError(err || \"Unexpected Error!\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    };\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\r\n    let offset1;\r\n    let offset2;\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset;\r\n            offset2 = 0;\r\n            break;\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0;\r\n            offset2 = offset;\r\n            break;\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2);\r\n    const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                };\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n    }\r\n});\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n};\r\n\r\nexport default AnimateButton;\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { \r\n    Dialog, \r\n    DialogContent, \r\n    DialogTitle \r\n} from '@mui/material';\r\nimport ReactJson from 'react-json-view'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\nconst ExpandDataDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onCopyClick,\r\n    enableClipboard,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"md\"\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {!enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={e => copyToClipboard(e)} />}\r\n                {enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={e => onCopyClick(e, dialogProps.node)} />}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nExpandDataDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onCopyClick: PropTypes.func,\r\n    enableClipboard: PropTypes.bool,\r\n};\r\n\r\nexport default ExpandDataDialog;\r\n\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true);\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false;\r\n        },\r\n        []\r\n    );\r\n\r\n    return scripted;\r\n};\r\n\r\nexport default useScriptRef;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeSnackbar } from 'store/actions';\r\n\r\nlet displayed = [];\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifier = useSelector((state) => state.notifier);\r\n    const { notifications } = notifier;\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id];\r\n    };\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter(key => id !== key)];\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey));\r\n                    removeDisplayed(myKey);\r\n                },\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\r\n};\r\n\r\nexport default useNotifier;","// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\nexport default WorkflowCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Box, Grid, Chip, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard';\r\n\r\n// Const\r\nimport { networks } from \"store/constant\";\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}));\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme();\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    };\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    };\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction=\"column\">\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                    <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                </div>}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction=\"row\">\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontSize: '1rem',\r\n                                            fontWeight: 500,\r\n                                            color: theme.palette.secondary[200],\r\n                                            overflow: 'hidden',\r\n                                            whiteSpace: 'nowrap',\r\n                                            textOverflow: 'ellipsis',\r\n                                            maxWidth: 250\r\n                                        }}\r\n                                    >\r\n                                        {`${data.address.substring(0,8)}...${data.address.slice(-4)}`}\r\n                                    </Typography>)}\r\n                                    {data.flowData && (\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontSize: '1rem',\r\n                                            fontWeight: 500,\r\n                                            color: theme.palette.secondary[200]\r\n                                        }}\r\n                                    >\r\n                                        Total Executions: {data.executionCount || '0'}\r\n                                    </Typography>)}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label=\"Deployed\" sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip label={getNetworkItem(data.network).label} sx={{...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }} />\r\n                                </Grid>\r\n                            )}\r\n                            {images && <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                {images.map((img) => (\r\n                                    <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                        <img style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }} alt='' src={img} />\r\n                                    </div>\r\n                                ))}\r\n                            </div>}\r\n                            \r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default ItemCard;\r\n","import { createPortal } from 'react-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n    Button, \r\n    Dialog, \r\n    DialogActions,\r\n    DialogContent, \r\n    IconButton,\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ReactJson from 'react-json-view';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { IconArrowsMaximize } from '@tabler/icons';\r\nimport ExpandDataDialog from './ExpandDataDialog';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nimport './EditVariableDialog.css';\r\n\r\nconst isPositiveNumeric = (value) =>  /^\\d+$/.test(value);\r\n\r\nconst EditVariableDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onConfirm,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [input, setInput] = useState(null);\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false);\r\n    const [expandDialogProps, setExpandDialogProps] = useState({});\r\n    const [copiedVariableBody, setCopiedVariableBody] = useState({});\r\n    const [languageType, setLanguageType] = useState(languages.js);\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false);\r\n    };\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        };\r\n        setExpandDialogProps(dialogProp);\r\n        setShowExpandDialog(true);\r\n    };\r\n\r\n    const onMouseUp = (e) => {\r\n        if (e.target && e.target.selectionEnd && e.target.value) {\r\n            const cursorPosition = e.target.selectionEnd;\r\n            const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n            const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n            const body = {\r\n                textBeforeCursorPosition, \r\n                textAfterCursorPosition,\r\n            }\r\n            setCopiedVariableBody(body);\r\n        } else {\r\n            setCopiedVariableBody({});\r\n        }\r\n    }\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace;\r\n        let returnVariablePath = `${node.id}`;\r\n        for (let i = 0; i < namespaces.length; i+=1 ) {\r\n            const namespace = namespaces[i];\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1);\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`;\r\n                } else {\r\n                    returnVariablePath += namespace;\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.';\r\n                }\r\n            }\r\n        }\r\n        if (copiedVariableBody) {\r\n            let newInput = '';\r\n            if (copiedVariableBody.textBeforeCursorPosition === undefined && copiedVariableBody.textAfterCursorPosition === undefined)\r\n                newInput = `${inputValue}${`{{${returnVariablePath}}}`}`;\r\n            else\r\n                newInput = `${copiedVariableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${copiedVariableBody.textAfterCursorPosition}`;\r\n            setInputValue(newInput);\r\n        }\r\n    };\r\n\r\n    const onSave = (value) => {\r\n        // ArrayInputParameter\r\n        if (dialogProps.arrayItemBody) {\r\n            const updateArrayValues = {\r\n                ...dialogProps.arrayItemBody.arrayItemValues,\r\n                [dialogProps.arrayItemBody.arrayItemInput.name]: value\r\n            };\r\n            const updateInitialValues = dialogProps.arrayItemBody.initialValues;\r\n            updateInitialValues[dialogProps.arrayItemBody.arrayItemIndex] = updateArrayValues;\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: updateInitialValues\r\n            };\r\n            onConfirm(updateValues);\r\n        }\r\n        else {\r\n            // InputParameter\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: value,\r\n                submit: null\r\n            };\r\n            onConfirm(updateValues);\r\n        }\r\n    }\r\n\r\n     // Handle Accordian\r\n     useEffect(() => {\r\n        if(dialogProps.values && dialogProps.input) {\r\n            let inputValues = dialogProps.values;\r\n            let input = dialogProps.input;\r\n            if (dialogProps.arrayItemBody) {\r\n                inputValues = dialogProps.arrayItemBody.arrayItemValues;\r\n                input = dialogProps.arrayItemBody.arrayItemInput;\r\n            }\r\n            setInput(input);\r\n            setInputValue(inputValues[input.name].toString() || '');\r\n            if (input.type === 'json' || input.type === 'string' || input.type === 'number') \r\n                setLanguageType(languages.json);\r\n            if (input.type === 'code')\r\n                setLanguageType(languages.js);\r\n        }\r\n       \r\n    }, [dialogProps]);\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                {input && (input.type === 'json' || input.type === 'string' || \r\n                input.type === 'number' || input.type === 'code') &&\r\n                <div style={{ flex: 1 }}>\r\n                    <Typography sx={{ mb: 2, ml: 1 }} variant=\"h4\">Input</Typography>\r\n                    <PerfectScrollbar \r\n                        style={{ \r\n                            border: '1px solid',\r\n                            borderColor: theme.palette.grey['500'],\r\n                            borderRadius: '12px', \r\n                            height: '100%', \r\n                            maxHeight: 'calc(100vh - 220px)', \r\n                            overflowX: 'hidden',\r\n                            backgroundColor: 'white'\r\n                        }}>\r\n                        <Editor\r\n                            value={inputValue}\r\n                            onValueChange={code => setInputValue(code)}\r\n                            placeholder={input.placeholder}\r\n                            highlight={code => highlight(code, languageType)}\r\n                            onMouseUp={e => onMouseUp(e)}\r\n                            onBlur={e => onMouseUp(e)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontSize: '0.875rem',\r\n                                minHeight: 'calc(100vh - 220px)',\r\n                                width: '100%',\r\n                            }}\r\n                            textareaClassName=\"editor__textarea\"\r\n                        />\r\n                    </PerfectScrollbar>\r\n                </div>\r\n                }\r\n                {!dialogProps.hideVariables && (<div style={{ flex: 1 }}>\r\n                    <Typography sx={{ mb: 2, ml: 2 }} variant=\"h4\">Variables</Typography>\r\n                    {dialogProps.availableNodesForVariable.length === 0 && \r\n                    <div style={{ padding: 10, marginLeft: 10 }}>\r\n                        <span>No Variables. Try connect to other nodes. </span>\r\n                    </div>}\r\n                    {dialogProps.availableNodesForVariable.length > 0 &&\r\n                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                        <Box sx={{ pl: 2, pr: 2 }}>\r\n                            <List\r\n                                sx={{\r\n                                    width: '100%',\r\n                                    py: 0,\r\n                                    borderRadius: '10px',\r\n                                    [theme.breakpoints.down('md')]: {\r\n                                        maxWidth: 300\r\n                                    },\r\n                                    '& .MuiListItemSecondaryAction-root': {\r\n                                        top: 22\r\n                                    },\r\n                                    '& .MuiDivider-root': {\r\n                                        my: 0\r\n                                    },\r\n                                    '& .list-container': {\r\n                                        pl: 7\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {dialogProps.availableNodesForVariable.map((node, index) => (\r\n                                    <Box key={index}>\r\n                                        <Accordion expanded={expanded === node.data.label} onChange={handleAccordionChange(node.data.label)}>\r\n                                            <AccordionSummary\r\n                                                expandIcon={<ExpandMoreIcon />}\r\n                                                aria-controls={`${node.data.label}-content`}\r\n                                                id={`${node.data.label}-header`}\r\n                                            >\r\n                                                <Typography variant=\"h5\">\r\n                                                    {node.data.label}\r\n                                                </Typography>\r\n                                            </AccordionSummary>\r\n                                            <AccordionDetails>\r\n                                                <div style={{position: 'relative'}}>\r\n                                                    <ReactJson collapsed src={(node.data.outputResponses && node.data.outputResponses.output)? node.data.outputResponses.output : {}} enableClipboard={e => onClipboardCopy(e, node)}/>\r\n                                                    <IconButton \r\n                                                        size=\"small\" \r\n                                                        sx={{ \r\n                                                            height: 25, \r\n                                                            width: 25, \r\n                                                            position: 'absolute', \r\n                                                            top: -5, \r\n                                                            right: 5 \r\n                                                        }}\r\n                                                        title=\"Expand Variable\"\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => onExpandDialogClicked((node.data.outputResponses && node.data.outputResponses.output) ? node.data.outputResponses.output : {}, node)}\r\n                                                    >\r\n                                                        <IconArrowsMaximize />\r\n                                                    </IconButton>\r\n                                                </div>\r\n                                            </AccordionDetails>\r\n                                        </Accordion>\r\n                                    </Box>\r\n                                ))}\r\n                            </List>\r\n                        </Box>\r\n                    </PerfectScrollbar>}\r\n                </div>)}\r\n                <ExpandDataDialog\r\n                    enableClipboard\r\n                    show={showExpandDialog}\r\n                    dialogProps={expandDialogProps}\r\n                    onCancel={() => setShowExpandDialog(false)}\r\n                    onCopyClick={(e, node) => {\r\n                        onClipboardCopy(e, node);\r\n                        setShowExpandDialog(false);\r\n                    }}                                                \r\n                ></ExpandDataDialog>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>\r\n                    {dialogProps.cancelButtonName}\r\n                </Button>\r\n                <Button variant=\"contained\" onClick={() => onSave(inputValue)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nEditVariableDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func,\r\n};\r\n\r\nexport default EditVariableDialog;\r\n\r\n","import { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Switch,\r\n    Fab,\r\n    FormControl,\r\n    Tooltip,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Stack,\r\n    IconButton,\r\n    Button,\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// icons\r\nimport { IconX, IconUpload } from '@tabler/icons';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport Editor from 'react-simple-code-editor';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button \r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type='button'\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n    {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string, \r\n    onClick: PropTypes.func, \r\n};\r\n\r\n// ==============================|| ARRAY INPUT PARAMETERS ||============================== //\r\n\r\nconst ArrayInputParameters = ({ \r\n    initialValues, \r\n    arrayParams,\r\n    paramsType,\r\n    arrayGroupName,\r\n    errors, \r\n    onArrayInputChange, \r\n    onArrayInputBlur, \r\n    onArrayItemRemove,\r\n    onArrayItemMouseUp,\r\n    onEditVariableDialogOpen,\r\n}) => {\r\n     \r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    const processUpdateValues = (inputValue, inputName, values, index) => {\r\n        const updateArrayValues = {\r\n            ...values,\r\n            [inputName]: inputValue\r\n        };\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues[index] = updateArrayValues;\r\n        return updateInitialValues;\r\n    };\r\n\r\n    const onInputChange = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputChange(updateInitialValues);\r\n    }\r\n\r\n    const onInputBlur = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputBlur(updateInitialValues);\r\n    }\r\n\r\n    const onRemoveClick = (index) => {\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues.splice(index, 1);\r\n        onArrayItemRemove(updateInitialValues);\r\n        onArrayItemMouseUp(false);\r\n    }\r\n\r\n    const onMouseUp = (e, inputName, valueIndex) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${arrayGroupName}[${valueIndex}].${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition, \r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        };\r\n        onArrayItemMouseUp(true, body);\r\n    }\r\n\r\n    const handleFolderUpload = (e, onInputChange, values, inputName, index) => {\r\n\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if( fileIndex >= files.length ) {\r\n                onInputChange(JSON.stringify(base64Array), inputName, values, index)\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload= (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex+1, lodash.cloneDeep(base64Array));\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    };\r\n\r\n    const handleFileUpload = (e, onInputChange, values, inputName, index) => {\r\n\r\n        if (!e.target.files) {\r\n          return;\r\n        }\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n    \r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n            const value = result + `,filename:${name}`;\r\n            onInputChange(value, inputName, values, index)\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    return (\r\n        <>\r\n            {arrayParams.map((_, index) => {\r\n                \r\n                const params = arrayParams[index] || [];\r\n                const values = initialValues[index] || {};\r\n\r\n                return (\r\n                    <Box \r\n                        sx={{\r\n                            p: 2, \r\n                            mb: 2, \r\n                            backgroundColor: theme.palette.secondary.light, \r\n                            borderRadius: `${customization.borderRadius}px`,\r\n                            position: 'relative'\r\n                        }}\r\n                        key={index}\r\n                    >\r\n                        {arrayParams.length > 1 && (\r\n                        <Fab \r\n                            sx={{ \r\n                                minHeight: 30, \r\n                                height: 30, width: 30, \r\n                                backgroundColor: theme.palette.secondary.light, \r\n                                color: theme.palette.secondary.main, \r\n                                position: 'absolute', \r\n                                right: -10, top: -10 \r\n                            }} \r\n                            size=\"small\" \r\n                            onClick={() => onRemoveClick(index)}\r\n                        >\r\n                            <IconX />\r\n                        </Fab>\r\n                        )}\r\n\r\n                    {params.map((input, paramIndex) => {\r\n\r\n                        if (input.type === 'file' || input.type === 'folder') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n\r\n                                {input.type === 'file' && \r\n                                <span \r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        color: theme.palette.grey['800'],\r\n                                        marginBottom: '1rem'\r\n                                    }}>\r\n                                    {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload' }\r\n                                </span>}\r\n\r\n                                {input.type === 'folder' && \r\n                                <span \r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        color: theme.palette.grey['800'],\r\n                                        marginBottom: '1rem'\r\n                                    }}>\r\n                                    {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload' }\r\n                                </span>}\r\n\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    component=\"label\"\r\n                                    fullWidth\r\n                                    startIcon={<IconUpload />}\r\n                                    sx={{ marginRight: \"1rem\" }}\r\n                                >\r\n                                    {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                    {input.type === 'file' && \r\n                                    <input\r\n                                        type=\"file\"\r\n                                        hidden\r\n                                        onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName, index)}\r\n                                    />}\r\n                                    {input.type === 'folder' && \r\n                                    <input\r\n                                        type=\"file\"\r\n                                        directory=\"\"\r\n                                        webkitdirectory=\"\"\r\n                                        hidden\r\n                                        onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName, index)}\r\n                                    />}\r\n                                </Button>\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'json' || input.type === 'code') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                    <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                        variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values, index)}>\r\n                                        Edit Variables\r\n                                    </Button>\r\n                                </Stack>\r\n                                <PerfectScrollbar \r\n                                    style={{ \r\n                                        border: '1px solid',\r\n                                        borderColor: theme.palette.grey['500'],\r\n                                        borderRadius: '12px', \r\n                                        height: '200px', \r\n                                        maxHeight: '200px', \r\n                                        overflowX: 'hidden',\r\n                                        backgroundColor: 'white'\r\n                                    }}\r\n                                    onScroll={e => e.stopPropagation()}\r\n                                    >\r\n                                    <Editor\r\n                                        placeholder={input.placeholder}\r\n                                        value={values[inputName] || ''}\r\n                                        onBlur={e => {\r\n                                            onInputBlur(e.target.value, inputName, values, index);\r\n                                            onMouseUp(e, inputName, index);\r\n                                        }}\r\n                                        onValueChange={code => onInputChange(code, inputName, values, index)}\r\n                                        onMouseUp={e => onMouseUp(e, inputName, index)}\r\n                                        highlight={code => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                        padding={10}\r\n                                        style={{\r\n                                            fontSize: '0.875rem',\r\n                                            minHeight: '200px',\r\n                                            width: '100%',\r\n                                        }}\r\n                                        textareaClassName=\"editor__textarea\"\r\n                                    />\r\n                                </PerfectScrollbar>\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'date') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <DatePicker \r\n                                    customInput={<DateCustomInput />}\r\n                                    selected={convertDateStringToDateObject(values[inputName]) || null} \r\n                                    showTimeSelect\r\n                                    isClearable\r\n                                    timeInputLabel=\"Time:\"\r\n                                    dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                    onChange={(date) => {\r\n                                        const inputValue = date ? date.toISOString() : null;\r\n                                        onInputChange(inputValue, inputName, values, index);\r\n                                        onArrayItemMouseUp(false);\r\n                                    }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                    {(input.type === 'string' || input.type === 'number') && (\r\n                                    <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                        variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values, index)}>\r\n                                        Edit Variables\r\n                                    </Button>\r\n                                    )}\r\n                                </Stack>\r\n                                <OutlinedInput\r\n                                    id={inputName}\r\n                                    type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                    value={values[inputName] || ''}\r\n                                    placeholder={input.placeholder}\r\n                                    name={inputName}\r\n                                    onBlur={(e) => {\r\n                                        const inputValue = e.target.value;\r\n                                        onInputBlur(inputValue, inputName, values, index);\r\n                                        onMouseUp(e, inputName, index);\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        const inputValue = e.target.value;\r\n                                        onInputChange(inputValue, inputName, values, index);\r\n                                    }}\r\n                                    onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'boolean') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Switch\r\n                                    checked={!!values[inputName]}\r\n                                    onChange={(event) => {\r\n                                        onInputChange(event.target.checked, inputName, values, index)\r\n                                    }}\r\n                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'options') {\r\n\r\n                            const inputName = input.name;\r\n                            const availableOptions = input.options || [];\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth\r\n                                sx={{ mb: 1, mt: 1 }}\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Autocomplete\r\n                                    id={inputName}\r\n                                    freeSolo\r\n                                    onOpen={() => onArrayItemMouseUp(false)}\r\n                                    options={availableOptions}\r\n                                    value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                    onChange={(e, selection) => {\r\n                                        const value = selection ? selection.name : \"\";\r\n                                        onInputBlur(value, inputName, values, index)\r\n                                    }}\r\n                                    PopperComponent={StyledPopper}\r\n                                    renderInput={(params) => (\r\n                                        <TextField \r\n                                            {...params}\r\n                                            value={values[inputName]}\r\n                                            error={errors && errors.length > 0 && errors[index] ?\r\n                                                Boolean(errors[index][inputName]) : false\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                    renderOption={(props, option) => (\r\n                                        <Box component=\"li\" {...props}>\r\n                                            <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                    {option.label} \r\n                                                </Typography>\r\n                                                {option.description &&\r\n                                                    <Typography sx={{p: 1}}>\r\n                                                        {option.description} \r\n                                                    </Typography>\r\n                                                }\r\n                                            </div>\r\n                                        </Box>\r\n                                    )}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n                        return null\r\n                    })}\r\n                    </Box>\r\n                )}\r\n            )} \r\n        </>\r\n    );\r\n};\r\n\r\nArrayInputParameters.propTypes = {\r\n    initialValues: PropTypes.array, \r\n    arrayParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    arrayGroupName: PropTypes.string,\r\n    errors: PropTypes.array, \r\n    onArrayInputChange: PropTypes.func, \r\n    onArrayInputBlur: PropTypes.func,\r\n    onArrayItemRemove: PropTypes.func,\r\n    onArrayItemMouseUp: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func, \r\n};\r\n\r\nexport default ArrayInputParameters;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './OptionParamsResponse.css';\r\n\r\n// ==============================|| OPTION PARAMS RESPONSE ||============================== //\r\n\r\nconst OptionParamsResponse = ({\r\n    value,\r\n    options,\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const getSelectedValue = (value) => options.find((option) => option.name === value);\r\n\r\n    const getSelectedOptionInputParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.inputParameters || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getSelectedOptionExampleParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleParameters || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getSelectedOptionExampleResponse = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleResponse || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getSelectedValue(value) && getSelectedOptionInputParams(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Parameters\r\n                    </Typography>\r\n                    <div className='params' dangerouslySetInnerHTML={{ __html: getSelectedOptionInputParams(value) }} />\r\n                </Box>\r\n            )}\r\n            \r\n            {getSelectedValue(value) && getSelectedOptionExampleParams(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2, \r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Example Parameters\r\n                    </Typography>\r\n                    <ReactJson \r\n                        collapsed \r\n                        src={JSON.parse(getSelectedOptionExampleParams(value))}\r\n                        enableClipboard={e => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleResponse(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2, \r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Example Response\r\n                    </Typography>\r\n                    <ReactJson \r\n                        collapsed \r\n                        src={getSelectedOptionExampleResponse(value)}\r\n                        enableClipboard={e => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nOptionParamsResponse.propTypes = {\r\n    value: PropTypes.string,\r\n    options: PropTypes.array,\r\n};\r\n\r\nexport default OptionParamsResponse;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Stack, IconButton, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport AsyncSelect from 'react-select/async';\r\nimport axios from \"axios\";\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons';\r\n\r\n// Constant\r\nimport { baseURL } from 'store/constant';\r\n\r\n\r\n// ==============================|| ASYNC SELECT WRAPPER ||============================== //\r\n\r\nconst AsyncSelectWrapper = ({\r\n    title,\r\n    description,\r\n    value,\r\n    loadMethod,\r\n    loadFromDbCollections,\r\n    nodeFlowData,\r\n    error,\r\n    onChange,\r\n    onMenuOpen,\r\n    onSetError,\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const customStyles = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            paddingTop: 15,\r\n            paddingBottom: 15,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            cursor: 'pointer',\r\n            fontWeight: '500',\r\n            backgroundColor: state.isSelected ? theme.palette.primary.light : '',\r\n            color: 'black',\r\n            \"&:hover\": {\r\n                backgroundColor: theme.palette.grey['200']\r\n            },\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            cursor: 'text',\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 6,\r\n            paddingLeft: 6,\r\n            borderRadius: 12,\r\n            \"&:hover\": {\r\n                borderColor: theme.palette.grey['700']\r\n            },\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            fontWeight: '600',\r\n        }),\r\n        menuList: (provided) => ({\r\n            ...provided,\r\n            boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n            borderRadius: '10px',\r\n        }),\r\n    }\r\n    \r\n    const [asyncOptions, setAsyncOptions] = useState([]);\r\n\r\n    const getSelectedValue = (value) => asyncOptions.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n  \r\n    const formatErrorMessage = (error) => {\r\n        if (error) return `*${error.replace(/[\"]/g, \"\")}`;\r\n        return \"\"\r\n    }\r\n\r\n    const showHideOptions = (options) => {\r\n\r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n        const displayTypes = ['show', 'hide'];\r\n\r\n        for (let x = 0; x < displayTypes.length; x+= 1) {\r\n            const displayType = displayTypes[x];\r\n\r\n            for (let i = 0; i < returnOptions.length; i+= 1) {\r\n                const option = returnOptions[i];\r\n                const displayOptions = option[displayType];\r\n        \r\n                if (displayOptions) {\r\n                    Object.keys(displayOptions).forEach((path) => {\r\n                        const comparisonValue = displayOptions[path];\r\n\r\n                        if (path.includes(\"$index\")) {\r\n                            path = path.replace(\"$index\", index);\r\n                        }\r\n                        const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n                        if (Array.isArray(comparisonValue)) {\r\n                            if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        } else if (typeof comparisonValue === 'string') {\r\n                            if (displayType === 'show' && !((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && ((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i+= 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    }\r\n\r\n    const loadOptions = (inputValue, callback) => {\r\n        axios.post(\r\n            `${baseURL}/api/v1/node-load-method/${nodeFlowData.name}`,\r\n            {...nodeFlowData, loadMethod, loadFromDbCollections}\r\n        ).then((response) => {\r\n            const data = response.data;\r\n            const filteredOption = (data || []).filter((i) =>\r\n                i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n            );\r\n            const options = showHideOptions(filteredOption);\r\n            setAsyncOptions(options);\r\n            callback(options);\r\n        });\r\n    }\r\n\r\n    const formatOptionLabel = ({ label, description }, {context}) => (\r\n        <>\r\n        {context === 'menu' && <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>{label}</div>\r\n            {description && <span style={{ fontWeight: 400, paddingTop: 10, paddingBottom: 10 }}>{description}</span>}\r\n        </div>}\r\n        {context === 'value' && <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>{label}</div>\r\n        </div>}\r\n        </>\r\n    );\r\n\r\n    useEffect(() => () => setAsyncOptions([]), []);\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            const selectedOption = asyncOptions.find((option) => option.name === value)\r\n            if (!selectedOption) {\r\n                onSetError();\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [asyncOptions]); \r\n\r\n    return (\r\n        <>\r\n            <Stack direction=\"row\">\r\n                <Typography variant=\"overline\">{title}</Typography>\r\n                {description && (\r\n                <Tooltip title={description} placement=\"right\">\r\n                    <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                </Tooltip>\r\n                )}\r\n            </Stack>\r\n            <div style={{position: 'relative'}}>\r\n                <AsyncSelect\r\n                    key={JSON.stringify(nodeFlowData)} // to reload async select whenever flowdata changed\r\n                    styles={customStyles}\r\n                    value={getSelectedValue(value) || getDefaultOptionValue()}\r\n                    formatOptionLabel={formatOptionLabel}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionValue={(option) => option.name}\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onChange={onChange}\r\n                    onMenuOpen={onMenuOpen}\r\n                />\r\n                <button \r\n                    style={{ \r\n                        minHeight: 10, \r\n                        height: 27, width: 30, \r\n                        backgroundColor: '#FAFAFA',\r\n                        color: theme.palette.grey['500'], \r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        margin: 'auto',\r\n                        border: 'none',\r\n                        cursor: 'pointer'                        \r\n                    }} \r\n                    title=\"Clear Selection\"\r\n                    type='button'\r\n                    onClick={() => onChange(null)}\r\n                >\r\n                    <IconX />\r\n                </button>\r\n            </div> \r\n            {error && (\r\n                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>{formatErrorMessage(error)}</span>\r\n            )}\r\n\r\n            <OptionParamsResponse value={value} options={asyncOptions} />\r\n        </>\r\n    );\r\n}\r\n\r\nAsyncSelectWrapper.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    value: PropTypes.string,\r\n    loadMethod: PropTypes.string,\r\n    loadFromDbCollections: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    error: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onMenuOpen: PropTypes.func,\r\n    onSetError: PropTypes.func,\r\n};\r\n\r\nexport default AsyncSelectWrapper;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    Stack,\r\n    FormControl,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Switch,\r\n    IconButton,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// project imports\r\nimport useScriptRef from 'hooks/useScriptRef';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport ArrayInputParameters from './ArrayInputParameters';\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\nimport AsyncSelectWrapper from './AsyncSelectWrapper';\r\n\r\n// icons\r\nimport { IconPlus, IconUpload } from '@tabler/icons';\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button \r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type='button'\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n    {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string, \r\n    onClick: PropTypes.func, \r\n};\r\n\r\n// ==============================|| INPUT PARAMETERS ||============================== //\r\n\r\nconst InputParameters = ({ \r\n    params, \r\n    paramsType, \r\n    initialValues, \r\n    nodeParamsValidation, \r\n    nodeFlowData,\r\n    valueChanged, \r\n    onSubmit,\r\n    setVariableSelectorState,\r\n    onEditVariableDialogOpen,\r\n    ...others \r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    const scriptedRef = useScriptRef();\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const onMouseUp = (e, inputName) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition, \r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType,\r\n        }\r\n        setVariableSelectorState(true, body);\r\n    }\r\n\r\n    const onAddArrayItem = (values, arrayItems, arrayName) => {\r\n        const updateValues = {\r\n            ...values,\r\n            [arrayName]: arrayItems\r\n        }\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const handleFolderUpload = (e, setFieldValue, values, inputName) => {\r\n\r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if( fileIndex >= files.length ) {\r\n                setFieldValue(inputName, JSON.stringify(base64Array));\r\n                const overwriteValues = {\r\n                    ...values,\r\n                    [inputName]: JSON.stringify(base64Array)\r\n                };\r\n                onChanged(overwriteValues);\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload= (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex+1, lodash.cloneDeep(base64Array));\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    }\r\n\r\n    const handleFileUpload = (e, setFieldValue, values, inputName) => {\r\n        \r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n    \r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n\r\n            const value = result + `,filename:${name}`;\r\n            setFieldValue(inputName, value);\r\n            const overwriteValues = {\r\n                ...values,\r\n                [inputName]: value\r\n            };\r\n            onChanged(overwriteValues);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={initialValues}\r\n                validationSchema={Yup.object().shape(nodeParamsValidation)}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    setVariableSelectorState(false);\r\n                    try {\r\n                        if (scriptedRef.current) {\r\n                            values.submit = true;\r\n                            setStatus({ success: true });\r\n                            setSubmitting(false);\r\n                            onSubmit(values, paramsType);\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n                        {params.map((input) => {\r\n\r\n                            if (input.type === 'file' || input.type === 'folder') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    \r\n                                    {input.type === 'file' && \r\n                                    <span \r\n                                        style={{\r\n                                            fontWeight: 'bold',\r\n                                            color: theme.palette.grey['800'],\r\n                                            marginBottom: '1rem'\r\n                                        }}>\r\n                                        {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload' }\r\n                                    </span>}\r\n\r\n                                    {input.type === 'folder' && \r\n                                    <span \r\n                                        style={{\r\n                                            fontWeight: 'bold',\r\n                                            color: theme.palette.grey['800'],\r\n                                            marginBottom: '1rem'\r\n                                        }}>\r\n                                        {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload' }\r\n                                    </span>}\r\n\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        component=\"label\"\r\n                                        fullWidth\r\n                                        startIcon={<IconUpload />}\r\n                                        sx={{ marginRight: \"1rem\" }}\r\n                                    >\r\n                                        {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                        {input.type === 'file' && \r\n                                        <input\r\n                                            type=\"file\"\r\n                                            hidden\r\n                                            onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName)}\r\n                                        />}\r\n                                        {input.type === 'folder' && \r\n                                        <input\r\n                                            type=\"file\"\r\n                                            directory=\"\"\r\n                                            webkitdirectory=\"\"\r\n                                            hidden\r\n                                            onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName)}\r\n                                        />}\r\n                                    </Button>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'json' || input.type === 'code') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                        <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                            variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values)}>\r\n                                            Edit Variables\r\n                                        </Button>\r\n                                    </Stack>\r\n                                    <PerfectScrollbar \r\n                                        style={{ \r\n                                            border: '1px solid',\r\n                                            borderColor: theme.palette.grey['500'],\r\n                                            borderRadius: '12px', \r\n                                            height: '200px', \r\n                                            maxHeight: '200px', \r\n                                            overflowX: 'hidden',\r\n                                            backgroundColor: 'white'\r\n                                        }}\r\n                                        onScroll={e => e.stopPropagation()}\r\n                                        >\r\n                                        <Editor\r\n                                            placeholder={input.placeholder}\r\n                                            value={values[inputName] || ''}\r\n                                            onBlur={e => {\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: e.target.value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                                onMouseUp(e, inputName);\r\n                                            }}\r\n                                            onValueChange={code => {\r\n                                                setFieldValue(inputName, code);\r\n                                            }}\r\n                                            onMouseUp={e => onMouseUp(e, inputName)}\r\n                                            highlight={code => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                            padding={10}\r\n                                            style={{\r\n                                                fontSize: '0.875rem',\r\n                                                minHeight: '200px',\r\n                                                width: '100%',\r\n                                            }}\r\n                                            textareaClassName=\"editor__textarea\"\r\n                                        />\r\n                                    </PerfectScrollbar>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'date') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <DatePicker \r\n                                        customInput={<DateCustomInput />}\r\n                                        selected={convertDateStringToDateObject(values[inputName]) || null} \r\n                                        showTimeSelect\r\n                                        isClearable\r\n                                        timeInputLabel=\"Time:\"\r\n                                        dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                        onChange={(date) => {\r\n                                            const value = date ? date.toISOString() : null;\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                           \r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                        {(input.type === 'string' || input.type === 'number') && (\r\n                                        <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                            variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values)}>\r\n                                            Edit Variables\r\n                                        </Button>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <OutlinedInput\r\n                                        id={inputName}\r\n                                        type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                        placeholder={input.placeholder}\r\n                                        multiline={!!input.rows}\r\n                                        maxRows={input.rows || 0}\r\n                                        minRows={input.rows || 0}\r\n                                        value={values[inputName] || ''}\r\n                                        name={inputName}\r\n                                        onBlur={e => {\r\n                                            handleBlur(e);\r\n                                            onChanged(values);\r\n                                            onMouseUp(e, inputName);\r\n                                        }}\r\n                                        onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Switch\r\n                                        checked={!!values[inputName]}\r\n                                        onChange={(event) => {\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, event.target.checked);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: event.target.checked\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'asyncOptions') {\r\n                                const inputName = input.name;\r\n                                return (\r\n                                    <FormControl \r\n                                        key={inputName}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                    >\r\n                                        <AsyncSelectWrapper \r\n                                            title={input.label}\r\n                                            description={input.description}\r\n                                            value={values[inputName]}\r\n                                            loadMethod={input.loadMethod}\r\n                                            loadFromDbCollections={input.loadFromDbCollections || []}\r\n                                            nodeFlowData={nodeFlowData}\r\n                                            error={JSON.stringify(errors[inputName])}\r\n                                            onChange={(selection) => {\r\n                                                const value = selection ? selection.name : \"\";\r\n                                                setFieldValue(inputName, value);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onMenuOpen={() => setVariableSelectorState(false)}\r\n                                            onSetError={() => {\r\n                                                const value = \"\";\r\n                                                setFieldValue(inputName, value);\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n                                const inputName = input.name;\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        onOpen={() => setVariableSelectorState(false)}\r\n                                        options={input.options || []}\r\n                                        value={findMatchingOptions(input.options, values[inputName]) || getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        onInputChange={(e, value) => {\r\n                                            if (!value) setFieldValue(inputName, \"\");\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                    <OptionParamsResponse value={values[inputName]} options={input.options || []} />\r\n                                </FormControl>)\r\n                            }\r\n                            \r\n                            if (input.type === 'array') {\r\n\r\n                                const arrayParamItems = input.arrayParams;\r\n                                const templateArray = input.array;\r\n                                const inputName = input.name;\r\n                                const arrayItemsValues = values[inputName] || [];\r\n\r\n                                return (\r\n                                    <Stack sx={{mt: 1}} key={inputName}>\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                            <Tooltip title={input.description} placement=\"right\">\r\n                                                <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                            </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <ArrayInputParameters \r\n                                            initialValues={arrayItemsValues}\r\n                                            arrayParams={arrayParamItems}\r\n                                            paramsType={paramsType}\r\n                                            arrayGroupName={inputName}\r\n                                            errors={errors[inputName] ? errors[inputName] : []} \r\n                                            onArrayInputChange={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                            }}\r\n                                            onArrayInputBlur={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: updateInitialValues\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onArrayItemRemove={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: updateInitialValues\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onArrayItemMouseUp={(variableState, body) => {\r\n                                                if (body) setVariableSelectorState(variableState, body);\r\n                                                else setVariableSelectorState(variableState);\r\n                                            }}\r\n                                            onEditVariableDialogOpen={(arrayItemInput, arrayItemValues, arrayItemIndex) => {\r\n                                                const arrayItemBody = {\r\n                                                    arrayItemInput,\r\n                                                    arrayItemValues,\r\n                                                    arrayItemIndex,\r\n                                                    initialValues: arrayItemsValues\r\n                                                }\r\n                                                onEditVariableDialogOpen(input, values, arrayItemBody);\r\n                                            }}\r\n                                        />\r\n                                        <Box key={inputName} sx={{ mb: 2 }}>\r\n                                            <AnimateButton>\r\n                                                <Button\r\n                                                    disableElevation\r\n                                                    fullWidth\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"secondary\"\r\n                                                    startIcon={<IconPlus />}\r\n                                                    onClick={() => {\r\n                                                        setVariableSelectorState(false);\r\n                                                        let newObj = {};\r\n                                                        if (input.default && input.default.length) {\r\n                                                            newObj = input.default[0];\r\n                                                        } else {\r\n                                                            for (let i = 0; i < templateArray.length; i+= 1) {\r\n                                                                newObj[templateArray[i].name] = templateArray[i].default || '';\r\n                                                            }\r\n                                                        }\r\n                                                        arrayItemsValues.push(newObj);\r\n                                                        onAddArrayItem(values, arrayItemsValues, inputName);\r\n                                                    }}\r\n                                                >\r\n                                                    Add {input.label}\r\n                                                </Button>\r\n                                            </AnimateButton>\r\n                                        </Box>\r\n                                    </Stack>\r\n                                )\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    Continue\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nInputParameters.propTypes = {\r\n    params: PropTypes.array, \r\n    paramsType: PropTypes.string, \r\n    initialValues: PropTypes.object,\r\n    nodeParamsValidation: PropTypes.object, \r\n    nodeFlowData: PropTypes.object,\r\n    valueChanged: PropTypes.func, \r\n    onSubmit: PropTypes.func, \r\n    setVariableSelectorState: PropTypes.func, \r\n    onEditVariableDialogOpen: PropTypes.func, \r\n};\r\n\r\nexport default InputParameters;\r\n","import client from \"./client\";\r\n\r\nconst getCredentials = (nodeCredentialName) => client.get(\"/credentials\", { params: { nodeCredentialName } });\r\n\r\nconst getCredentialParams = (name) => client.get(`/node-credentials/${name}`);\r\n\r\nconst getSpecificCredential = (id, isEncrypted) => client.get(`/credentials/${id}`, { params: { isEncrypted } });\r\n\r\nconst createNewCredential = (credentialBody) => client.post(`/credentials`, credentialBody); //credentialBody: ICredential \r\n\r\nconst updateCredential = (id, credentialBody) => client.put(`/credentials/${id}`, credentialBody); //credentialBody: ICredential\r\n\r\nconst deleteCredential = (id) => client.delete(`/credentials/${id}`);\r\n\r\nexport default {\r\n    getCredentials,\r\n    getCredentialParams,\r\n    getSpecificCredential,\r\n    createNewCredential,\r\n    updateCredential,\r\n    deleteCredential,\r\n};\r\n","import client from \"./client\";\r\n\r\nconst geOAuth2PopupURL = (credentialId) => client.get(\"/oauth2\", { params: { credentialId } });\r\nconst geOAuth2RedirectURL = () => client.get(\"/oauth2-redirecturl\");\r\n\r\nexport default {\r\n    geOAuth2PopupURL,\r\n    geOAuth2RedirectURL,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    Stack,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    IconButton,\r\n    Switch,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// API\r\nimport credentialApi from \"api/credential\";\r\nimport oauth2Api from \"api/oauth2\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\nimport useScriptRef from 'hooks/useScriptRef';\r\n\r\n// icons\r\nimport { IconTrash, IconCopy } from '@tabler/icons';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\nconst ADD_NEW_CREDENTIAL = '+ Add New Credential';\r\n\r\n// ==============================|| CREDENTIAL INPUT ||============================== //\r\n\r\nconst CredentialInput = ({ \r\n    initialParams,\r\n    paramsType,\r\n    initialValues, \r\n    initialValidation, \r\n    valueChanged, \r\n    paramsChanged,\r\n    onSubmit,\r\n    ...others \r\n}) => {\r\n    const scriptedRef = useScriptRef();\r\n    const theme = useTheme();\r\n\r\n    const [credentialValidation, setCredentialValidation] = useState({});\r\n    const [credentialValues, setCredentialValues] = useState({});\r\n    const [nodeCredentialName, setNodeCredentialName] = useState('');\r\n    const [credentialParams, setCredentialParams] = useState([]);\r\n    const [credentialOptions, setCredentialOptions] = useState([]);\r\n    const [oAuth2RedirectURL, setOAuth2RedirectURL] = useState('');\r\n\r\n    const getCredentialParamsApi = useApi(credentialApi.getCredentialParams);\r\n    const getRegisteredCredentialsApi = useApi(credentialApi.getCredentials);\r\n    const getSpecificCredentialApi = useApi(credentialApi.getSpecificCredential);\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const getCredentialRequestBody = (values) => {\r\n        if (credentialParams.length === 0) throw new Error('Credential params empty');\r\n        \r\n        const credentialData = {};\r\n        for (let i = 0; i < credentialParams.length; i+=1 ) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in values) credentialData[credParamName] = values[credParamName];\r\n        }\r\n        delete credentialData.name;\r\n\r\n        const credBody = {\r\n            name: values.name,\r\n            nodeCredentialName: values.credentialMethod,\r\n            credentialData\r\n        };\r\n\r\n        return credBody;\r\n    }\r\n\r\n    const updateYupValidation = (inputName, validationKey) => {\r\n        const updateValidation = {\r\n            ...credentialValidation,\r\n            [inputName]: Yup.object({[validationKey]: Yup.string().required(`${inputName} is required`) })\r\n        };\r\n        setCredentialValidation(updateValidation);\r\n    };\r\n\r\n    const clearCredentialParams = () => {\r\n        const updateParams = initialParams.filter(item => credentialParams.every(paramItem => item.name !== paramItem.name));\r\n        setCredentialParams([]);\r\n        setOAuth2RedirectURL('');\r\n\r\n        paramsChanged(updateParams, paramsType);\r\n    }\r\n\r\n    const clearCredentialParamsValues = (value) => {\r\n        let updateValues = JSON.parse(JSON.stringify(credentialValues));\r\n        \r\n        for (let i = 0; i < credentialParams.length; i+=1 ) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in updateValues) delete updateValues[credParamName];\r\n        }\r\n        updateValues = {\r\n            ...updateValues,\r\n            registeredCredential: value\r\n        };\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n    \r\n    const onDeleteCredential = async(credentialId) => {\r\n        const response = await credentialApi.deleteCredential(credentialId);\r\n        if (response.data) {\r\n            clearCredentialParams();\r\n            clearCredentialParamsValues('');\r\n        }\r\n    }\r\n\r\n    const openOAuth2PopUpWindow = (oAuth2PopupURL) => {\r\n        const windowWidth = 500;\r\n        const windowHeight = 400;\r\n        const left = window.screenX + (window.outerWidth - windowWidth) / 2;\r\n        const top = window.screenY + (window.outerHeight - windowHeight) / 2.5;\r\n        const title = `Connect Credential`;\r\n        const url = oAuth2PopupURL;\r\n        const popup = window.open(url, title, `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`);\r\n        return popup;\r\n    }\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    // getRegisteredCredentialsApi successful\r\n    useEffect(() => {\r\n        if (getRegisteredCredentialsApi.data) {\r\n            const credentialOptions = [];\r\n            if (getRegisteredCredentialsApi.data.length) {\r\n                for (let i = 0; i < getRegisteredCredentialsApi.data.length; i+=1 ) {\r\n                    credentialOptions.push({\r\n                        _id: getRegisteredCredentialsApi.data[i]._id,\r\n                        name: getRegisteredCredentialsApi.data[i].name,\r\n                    });\r\n                }\r\n            }\r\n            credentialOptions.push({\r\n                name: ADD_NEW_CREDENTIAL\r\n            });\r\n            setCredentialOptions(credentialOptions);\r\n            if (initialParams.find((prm) => prm.name === 'registeredCredential')) {\r\n                updateYupValidation('registeredCredential', 'name');\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getRegisteredCredentialsApi.data]);\r\n\r\n\r\n    // getCredentialParamsApi successful\r\n    useEffect(() => {\r\n        if (getCredentialParamsApi.data) {\r\n\r\n            const newCredentialParams = getCredentialParamsApi.data.credentials;\r\n\r\n            const credentialNameParam = {\r\n\t\t\t\tlabel: 'Credential Name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '',\r\n            };\r\n\r\n            newCredentialParams.unshift(credentialNameParam);\r\n\r\n            setCredentialParams(newCredentialParams);\r\n\r\n            const updateParams = initialParams;\r\n\r\n            for (let i = 0; i < newCredentialParams.length; i+=1 ) {\r\n                const credParamName = newCredentialParams[i].name;\r\n                if (initialParams.find((prm) => prm.name === credParamName) === undefined) {\r\n                    updateParams.push(newCredentialParams[i]);\r\n                }\r\n            }\r\n            paramsChanged(updateParams, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getCredentialParamsApi.data]);\r\n\r\n\r\n    // getSpecificCredentialApi successful\r\n    useEffect(() => {\r\n        if (getSpecificCredentialApi.data) {\r\n            const updateValues = {\r\n                ...credentialValues,\r\n                ...getSpecificCredentialApi.data.credentialData,\r\n                name: getSpecificCredentialApi.data.name,\r\n            };\r\n            valueChanged(updateValues, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificCredentialApi.data]);\r\n\r\n\r\n    // Initialize values\r\n    useEffect(() => {\r\n        setCredentialValues(initialValues);\r\n        if (initialValues && initialValues.credentialMethod) {\r\n            getRegisteredCredentialsApi.request(initialValues.credentialMethod);\r\n            setNodeCredentialName(initialValues.credentialMethod);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [initialValues]);\r\n\r\n\r\n    // Initialize validation\r\n    useEffect(() => {\r\n        setCredentialValidation(initialValidation);\r\n    \r\n    }, [initialValidation]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={credentialValues}\r\n                validationSchema={Yup.object().shape(credentialValidation)}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    try {\r\n                        if (scriptedRef.current) {\r\n                            const isAddNewCredential = values && values.registeredCredential && values.registeredCredential.name === ADD_NEW_CREDENTIAL;\r\n                          \r\n                            if (!isAddNewCredential && (credentialParams.length === 0 || !values.credentialMethod)) {\r\n                                onSubmit(values.credentialMethod ? {...values, submit: true} : {submit: true}, paramsType);\r\n                                setStatus({ success: true });\r\n                                setSubmitting(false);\r\n                            \r\n                            } else {\r\n                                const body = getCredentialRequestBody(values);\r\n                                let response;\r\n                                if (isAddNewCredential) {\r\n                                    response = await credentialApi.createNewCredential(body);\r\n                                } else {\r\n                                    response = await credentialApi.updateCredential(values.registeredCredential._id, body);\r\n                                }\r\n                                if (response.data) {\r\n\r\n                                    // Open oAuth2 window\r\n                                    if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                        const oAuth2PopupURL = await oauth2Api.geOAuth2PopupURL(response.data._id);\r\n                                        const popUpWindow = openOAuth2PopUpWindow(oAuth2PopupURL.data);\r\n\r\n                                        const oAuth2Completed = async(event) => {\r\n                                            if (event.data === 'success') {\r\n                                                window.removeEventListener('message', oAuth2Completed, false);\r\n\r\n                                                const submitValues = {\r\n                                                    credentialMethod: values.credentialMethod,\r\n                                                    registeredCredential: {\r\n                                                        _id: response.data._id,\r\n                                                        name: response.data.name,\r\n                                                    },\r\n                                                    submit: true\r\n                                                }\r\n                                                clearCredentialParams();\r\n                                                onSubmit(submitValues, paramsType);\r\n                                                setStatus({ success: true });\r\n                                                setSubmitting(false);\r\n\r\n                                                if (popUpWindow) {\r\n                                                    popUpWindow.close();\r\n                                                }\r\n                                            }\r\n                                        };\r\n                                        window.addEventListener('message', oAuth2Completed, false);\r\n                                        return;\r\n                                    }\r\n\r\n                                    const submitValues = {\r\n                                        credentialMethod: values.credentialMethod,\r\n                                        registeredCredential: {\r\n                                            _id: response.data._id,\r\n                                            name: response.data.name,\r\n                                        },\r\n                                        submit: true\r\n                                    }\r\n                                    clearCredentialParams();\r\n                                    onSubmit(submitValues, paramsType);\r\n                                    setStatus({ success: true });\r\n                                    setSubmitting(false);\r\n                                } else {\r\n                                    throw new Error(response);\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n\r\n                        {initialParams.map((input) => {\r\n\r\n                            if (input.type === 'options') {\r\n\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        options={availableOptions}\r\n                                        value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                            clearCredentialParams();\r\n                                            if (selection) {\r\n                                                getRegisteredCredentialsApi.request(value);\r\n                                                setNodeCredentialName(value);\r\n                                            } else {\r\n                                                setCredentialOptions([]);\r\n                                            }\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        {initialParams.find((prm) => prm.name === 'registeredCredential') && (\r\n                        <FormControl \r\n                            fullWidth\r\n                            sx={{ mb: 1, mt: 1 }}\r\n                        >\r\n                            <Stack direction=\"row\">\r\n                                <Typography variant=\"overline\">Registered Credential</Typography>\r\n                                <Tooltip title=\"Select previously registered credential OR add new credential\" placement=\"right\">\r\n                                    <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                </Tooltip>\r\n                            </Stack>\r\n                            <Autocomplete\r\n                                id=\"registered-credential\"\r\n                                freeSolo\r\n                                options={credentialOptions}\r\n                                value={values.registeredCredential && values.credentialMethod ? values.registeredCredential : \" \"}\r\n                                getOptionLabel={(option) => option.name || \" \"}\r\n                                onChange={async(e, selectedCredential) => {\r\n                                    setFieldValue('registeredCredential', selectedCredential !== null ? selectedCredential : initialValues.registeredCredential);\r\n                                    const overwriteValues = {\r\n                                        ...values,\r\n                                        registeredCredential: selectedCredential\r\n                                    };\r\n                                    onChanged(overwriteValues);\r\n                                    if (selectedCredential) {\r\n                                        if (selectedCredential.name !== ADD_NEW_CREDENTIAL) {\r\n                                            getSpecificCredentialApi.request(selectedCredential._id);\r\n                                        } else {\r\n                                            clearCredentialParamsValues(selectedCredential);\r\n                                        }\r\n                                        getCredentialParamsApi.request(nodeCredentialName);\r\n                                        if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                            const redirectURLResp = await oauth2Api.geOAuth2RedirectURL();\r\n                                            if (redirectURLResp.data) setOAuth2RedirectURL(redirectURLResp.data);\r\n                                        }\r\n                                    }\r\n                                }}\r\n                                onInputChange={(e, value) => {\r\n                                    if (!value) {\r\n                                        clearCredentialParams();\r\n                                        clearCredentialParamsValues('');\r\n                                    }\r\n                                }}\r\n                                onBlur={handleBlur}\r\n                                PopperComponent={StyledPopper}\r\n                                renderInput={(params) => (\r\n                                    <TextField \r\n                                        {...params}\r\n                                        value={values.registeredCredential}\r\n                                        error={Boolean(errors.registeredCredential)}\r\n                                    />\r\n                                )}\r\n                                renderOption={(props, option) => (\r\n                                    <Box component=\"li\" {...props}>\r\n                                        <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                            <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                {option.name} \r\n                                            </Typography>\r\n                                        </div>\r\n                                    </Box>\r\n                                )}\r\n                            />\r\n                            {errors.registeredCredential && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*Registered Credential is required</span>}\r\n                        </FormControl>\r\n                        )}\r\n\r\n                        {values && values.registeredCredential && values.registeredCredential._id && (\r\n                        <Button sx={{ mb: 2 }} size=\"small\" variant=\"outlined\" startIcon={<IconTrash size={15} />} onClick={() => onDeleteCredential(values.registeredCredential._id)}>\r\n                            Delete Credential\r\n                        </Button>)}\r\n\r\n                        {oAuth2RedirectURL &&\r\n                        <div>\r\n                            <Typography variant=\"overline\">OAuth2 Redirect URL</Typography>\r\n                            <Stack direction=\"row\">\r\n                                <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{oAuth2RedirectURL}</Typography>\r\n                                <IconButton title=\"Copy URL\" color=\"primary\" onClick={() => navigator.clipboard.writeText(oAuth2RedirectURL)}>\r\n                                    <IconCopy />\r\n                                </IconButton>\r\n                            </Stack>\r\n                        </div>}\r\n\r\n                        {values.credentialMethod && credentialParams.map((input) => {\r\n\r\n                            if (input.type === 'json') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <PerfectScrollbar \r\n                                        style={{ \r\n                                            border: '1px solid',\r\n                                            borderColor: theme.palette.grey['500'],\r\n                                            borderRadius: '12px', \r\n                                            height: '200px', \r\n                                            maxHeight: '200px', \r\n                                            overflowX: 'hidden',\r\n                                            backgroundColor: 'white'\r\n                                        }}\r\n                                        onScroll={e => e.stopPropagation()}\r\n                                        >\r\n                                        <Editor\r\n                                            placeholder={input.placeholder}\r\n                                            value={values[inputName] || ''}\r\n                                            onBlur={e => {\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: e.target.value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onValueChange={code => {\r\n                                                setFieldValue(inputName, code);\r\n                                            }}\r\n                                            highlight={code => highlight(code, languages.json)}\r\n                                            padding={10}\r\n                                            style={{\r\n                                                fontSize: '0.875rem',\r\n                                                minHeight: '200px',\r\n                                                width: '100%',\r\n                                            }}\r\n                                            textareaClassName=\"editor__textarea\"\r\n                                        />\r\n                                    </PerfectScrollbar>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <OutlinedInput\r\n                                        id={inputName}\r\n                                        type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                        value={values[inputName] || ''}\r\n                                        placeholder={input.placeholder}\r\n                                        name={inputName}\r\n                                        onBlur={e => {\r\n                                            handleBlur(e);\r\n                                            onChanged(values);\r\n                                        }}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Switch\r\n                                        checked={!!values[inputName]}\r\n                                        onChange={(event) => {\r\n                                            setFieldValue(inputName, event.target.checked);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: event.target.checked\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        options={availableOptions}\r\n                                        value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    {values && values.registeredCredential && \r\n                                    (values.registeredCredential.name === ADD_NEW_CREDENTIAL || credentialParams.length) ? \r\n                                    'Save and Continue' : 'Continue'}\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nCredentialInput.propTypes = {\r\n    initialParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object, \r\n    initialValidation: PropTypes.object, \r\n    valueChanged: PropTypes.func, \r\n    paramsChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default CredentialInput;\r\n","import client from \"./client\";\r\n\r\nconst getAllContracts = () => client.get(\"/contracts\");\r\n\r\nconst getSpecificContract = (id) => client.get(`/contracts/${id}`);\r\n\r\nconst createNewContract = (body) => client.post(`/contracts`, body); // body: IContract\r\n\r\nconst updateContract = (id, body) => client.put(`/contracts/${id}`, body); // body: IContract\r\n\r\nconst getContractABI = (body) => client.post(`/contracts/getabi`, body); //body: IContractRequestBody\r\n\r\nconst deleteContract = (id) => client.delete(`/contracts/${id}`);\r\n\r\nexport default {\r\n    getAllContracts,\r\n    getSpecificContract,\r\n    createNewContract,\r\n    updateContract,\r\n    getContractABI,\r\n    deleteContract,\r\n};\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { \r\n    enqueueSnackbar as enqueueSnackbarAction,\r\n    closeSnackbar as closeSnackbarAction,\r\n} from 'store/actions';\r\n\r\nimport {\r\n    Avatar,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Divider,\r\n    Chip,\r\n    Typography,\r\n    Button, \r\n    Dialog, \r\n    DialogActions,\r\n    DialogContent, \r\n    DialogTitle,\r\n    Stack,\r\n    IconButton,\r\n} from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport * as Yup from 'yup';\r\nimport lodash from 'lodash';\r\nimport { ethers } from 'ethers';\r\n\r\n// project imports\r\nimport InputParameters from 'views/inputs/InputParameters';\r\nimport CredentialInput from 'views/inputs/CredentialInput';\r\nimport EditVariableDialog from 'ui-component/dialog/EditVariableDialog';\r\n\r\n// Icons\r\nimport { IconExclamationMark, IconCheck, IconX, IconArrowUpRightCircle, IconCopy } from '@tabler/icons';\r\n\r\n// API\r\nimport contractsApi from \"api/contracts\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// Const\r\nimport { contract_details, networks, networkExplorers } from \"store/constant\";\r\n\r\n// utils\r\nimport { handleCredentialParams, initializeNodeData } from 'utils/genericHelper';\r\nimport useNotifier from 'utils/useNotifier';\r\n\r\nconst ContractDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onConfirm\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier();\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args));\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args));\r\n\r\n    const [contractDetails, setContractDetails] = useState(contract_details);\r\n    const [contractData, setContractData] = useState({});\r\n    const [contractParams, setContractParams] = useState([]);\r\n    const [contractValues, setContractValues] = useState({});\r\n    const [contractValidation, setContractValidation] = useState({});\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [invalidAddress, setInvalidAddress] = useState(false);\r\n    const [invalidABI, setInvalidABI] = useState('');\r\n    const [isReadyToAdd, setIsReadyToAdd] = useState(false);\r\n    const [isEditVariableDialogOpen, setEditVariableDialog] = useState(false);\r\n    const [editVariableDialogProps, setEditVariableDialogProps] = useState({});\r\n    const contractParamsType = ['networks', 'credentials', 'contractInfo'];\r\n\r\n    const getSpecificContractApi = useApi(contractsApi.getSpecificContract);\r\n    \r\n    const handleAccordionChange = (expanded) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? expanded : false);\r\n    };\r\n\r\n    const reset = () => {\r\n        setContractData({});\r\n        setContractParams([]);\r\n        setContractValues({});\r\n        setContractValidation({});\r\n        setInvalidAddress(false);\r\n        setInvalidABI('');\r\n        setIsReadyToAdd(false);\r\n        setExpanded(false);\r\n    }\r\n\r\n    const checkIsReadyToAdd = () => {\r\n        for (let i = 0; i < contractParamsType.length; i+= 1) {\r\n            const paramType = contractParamsType[i];\r\n            if (!contractData[paramType] || !contractData[paramType].submit) {\r\n                setIsReadyToAdd(false);\r\n                return;\r\n            }\r\n        }\r\n        setIsReadyToAdd(true);\r\n    };\r\n\r\n    const onEditVariableDialogOpen = (input, values, arrayItemBody) => {\r\n        const dialogProps = {\r\n            input,\r\n            values,\r\n            arrayItemBody,\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            hideVariables: true\r\n        }\r\n\r\n        setEditVariableDialogProps(dialogProps);\r\n        setEditVariableDialog(true);\r\n    }\r\n\r\n    const addNewContract = async() => {\r\n        const createNewContractBody = {\r\n            network: contractData.networks.network,\r\n            name: contractData.contractInfo.name,\r\n            abi: contractData.contractInfo.abi,\r\n            address: contractData.contractInfo.address,\r\n            providerCredential: JSON.stringify(contractData.credentials)\r\n        }\r\n        const createResp = await contractsApi.createNewContract(createNewContractBody);\r\n        if (createResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'New contract added',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to add new contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const saveContract = async() => {\r\n        const saveContractBody = {\r\n            network: contractData.networks.network,\r\n            name: contractData.contractInfo.name,\r\n            abi: contractData.contractInfo.abi,\r\n            address: contractData.contractInfo.address,\r\n            providerCredential: JSON.stringify(contractData.credentials)\r\n        }\r\n        const saveResp = await contractsApi.updateContract(dialogProps.id, saveContractBody);\r\n        if (saveResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Contract saved',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to save contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const deleteContract = async() => {\r\n        const deleteResp = await contractsApi.deleteContract(dialogProps.id);\r\n        if (deleteResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Contract deleted',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to delete contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const fetchABI = async(formValues, paramsType) => {\r\n        const selectedNetwork = networks.find((network) => network.name === contractData.networks.network);\r\n        if (!selectedNetwork) return;\r\n\r\n        const body = {\r\n            ...contractData,\r\n            networks: {\r\n                ...contractData.networks,\r\n                uri: selectedNetwork.uri || ''\r\n            }\r\n        }\r\n\r\n        const resp = await contractsApi.getContractABI(body);\r\n        if (!resp.data) {\r\n            const updateContractData = {\r\n                ...contractData,\r\n                [paramsType]: {...formValues, submit: null}\r\n            };\r\n            setContractData(updateContractData);\r\n            setInvalidABI('Unable to fetch ABI');\r\n            return;\r\n        } else {\r\n            const status = resp.data.status;\r\n            if (status === '0') {\r\n                setInvalidABI('Unable to fetch ABI');\r\n                return;\r\n            }\r\n            const abi = resp.data.result;\r\n            setInvalidABI('');\r\n            return abi === 'Invalid API Key' ? undefined : abi;\r\n        }\r\n    }\r\n    \r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateContractData = {\r\n            ...contractData,\r\n            [paramsType]: formValues\r\n        };\r\n\r\n        const index = contractParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== contractParamsType.length - 1) {\r\n            for (let i = index+1; i < contractParamsType.length; i+= 1) {\r\n                const paramType = contractParamsType[i];\r\n                if (updateContractData[paramType]) updateContractData[paramType].submit = null;\r\n            }\r\n        }\r\n        \r\n        setContractData(updateContractData);\r\n    };\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n\r\n        // Because formParams options can be changed due to show hide options, \r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod');\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod');\r\n        \r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = contractDetails[paramsType].find((param) => param.name === 'credentialMethod');\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options;\r\n            }\r\n        }\r\n\r\n        const updateContractDetails = {\r\n            ...contractDetails,\r\n            [paramsType]: formParams\r\n        };\r\n        setContractDetails(updateContractDetails);\r\n    };\r\n\r\n    const onSubmit = async(formValues, paramsType) => {\r\n        if (formValues.address) {\r\n            if (ethers.utils.isAddress(formValues.address)) {\r\n                setInvalidAddress(false);\r\n                const abi = await fetchABI(formValues, paramsType);\r\n                if (abi) {\r\n                    const updateFormValues = {\r\n                        submit: true,\r\n                        ...formValues\r\n                    };\r\n                    updateFormValues.abi = abi;\r\n                    const updateContractData = {\r\n                        ...contractData,\r\n                        [paramsType]: updateFormValues\r\n                    };\r\n                    setContractData(updateContractData);\r\n                } else {\r\n                    const updateContractData = {\r\n                        ...contractData,\r\n                        [paramsType]: {...formValues, submit: null}\r\n                    };\r\n                    setContractData(updateContractData);\r\n                }\r\n            }\r\n            else {\r\n                setInvalidAddress(true);\r\n                const updateContractData = {\r\n                    ...contractData,\r\n                    [paramsType]: {...formValues, submit: null}\r\n                };\r\n                setContractData(updateContractData);\r\n            }\r\n        } else {\r\n            const updateContractData = {\r\n                ...contractData,\r\n                [paramsType]: formValues\r\n            };\r\n            setContractData(updateContractData);\r\n        }\r\n\r\n        const index = contractParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== contractParamsType.length - 1) {\r\n            setExpanded(contractParamsType[index+1]);\r\n        }\r\n    };\r\n\r\n    const showHideOptions = (displayType, options) => {\r\n       \r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n\r\n        for (let i = 0; i < returnOptions.length; i+= 1) {\r\n            const option = returnOptions[i];\r\n            const displayOptions = option[displayType];\r\n\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n                    const comparisonValue = displayOptions[path];\r\n                    const groundValue = lodash.get(contractData, path, '');\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i+= 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    }\r\n\r\n    const displayOptions = (params) => {\r\n      \r\n        let clonedParams = params;\r\n\r\n        for (let i = 0; i < clonedParams.length; i+= 1) {\r\n            const input = clonedParams[i];\r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', input.options);\r\n                input.options = showHideOptions('hide', input.options);\r\n            }\r\n        }\r\n      \r\n        return clonedParams;\r\n    };\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {};\r\n        for (let i = 0; i < params.length; i+= 1) {\r\n            const input = params[i];\r\n            if (input.type === 'string' && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if (input.type === 'number' && !input.optional) {\r\n                validationSchema[input.name] = Yup.number().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if ((input.type === 'options' || input.type === 'asyncOptions') && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            }\r\n        }\r\n        return validationSchema;\r\n    };\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n\r\n        const initialValues = {};\r\n        let contractParams = displayOptions(lodash.cloneDeep(contractDetails[paramsType] || []));\r\n        contractParams = handleCredentialParams(contractParams, paramsType, contractDetails[paramsType], contractData);\r\n       \r\n        for (let i = 0; i < contractParams.length; i+= 1) {\r\n            const input = contractParams[i];\r\n\r\n            // Load from contractData values\r\n            if (paramsType in contractData && input.name in contractData[paramsType]) {\r\n                initialValues[input.name] = contractData[paramsType][input.name];\r\n         \r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name]);\r\n                    if (!optionVal) delete initialValues[input.name];\r\n                }\r\n            } else {\r\n                // Load from contractParams default values\r\n                initialValues[input.name] = input.default || '';\r\n            }\r\n        }\r\n        \r\n        initialValues.submit = null;\r\n        \r\n        setContractValues(initialValues);\r\n        setContractValidation(setYupValidation(contractParams));\r\n        setContractParams(contractParams);\r\n    };\r\n\r\n    const transformContractResponse = (contractResponseData, contractDetails) => {\r\n        const contractData = {\r\n            networks: {},\r\n            credentials: {},\r\n            contractInfo: {}\r\n        }\r\n\r\n        if (contractResponseData) {\r\n            contractData.networks = { network: contractResponseData.network, submit: true };\r\n            contractData.contractInfo = { ...contractResponseData, submit: true };\r\n            if (contractResponseData.providerCredential) {\r\n                try {\r\n                    contractData.credentials = JSON.parse(contractResponseData.providerCredential);\r\n                } catch(e) { \r\n                    console.error(e); \r\n                }\r\n            }\r\n        } else {\r\n            contractData.networks = initializeNodeData(contractDetails.networks);\r\n            contractData.credentials = initializeNodeData(contractDetails.credentials);\r\n            contractData.contractInfo = initializeNodeData(contractDetails.contractInfo);\r\n        }\r\n        return contractData;\r\n    }\r\n\r\n    // Get Contract Details from API\r\n    useEffect(() => {\r\n        if (getSpecificContractApi.data) {\r\n            const contractResponseData = getSpecificContractApi.data;\r\n            setContractData(transformContractResponse(contractResponseData));\r\n            setExpanded('networks');\r\n        }\r\n\r\n    }, [getSpecificContractApi.data]); \r\n\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (show && dialogProps.type === 'ADD') {\r\n            reset();\r\n            setContractData(transformContractResponse(null, contractDetails));\r\n            setExpanded('networks');\r\n\r\n        } else if (show && dialogProps.type === 'EDIT' && dialogProps.id) {\r\n            reset();\r\n            getSpecificContractApi.request(dialogProps.id);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show, dialogProps]); \r\n\r\n    \r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (contractDetails && contractData && expanded) {\r\n            initializeFormValuesAndParams(expanded);\r\n            checkIsReadyToAdd();\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [contractDetails, contractData, expanded]);\r\n\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n\r\n                {dialogProps.type === 'ADD' && <Chip sx={{mb: 1}} icon={<IconExclamationMark />} label=\"You can only add contract which has been publicly verified\" color=\"warning\" />}\r\n                \r\n                {contractData && contractData.contractInfo && contractData.contractInfo.address && dialogProps.type === 'EDIT' && \r\n                <Box sx={{ p: 2 }}>\r\n                    <Typography sx={{ p: 1 }} variant=\"overline\">ADDRESS</Typography>\r\n                    <Stack direction=\"row\" sx={{ p: 1 }}>\r\n                        <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{contractData.contractInfo.address}</Typography>\r\n                        <IconButton title=\"Copy Address\" color=\"primary\" onClick={() => navigator.clipboard.writeText(contractData.contractInfo.address)}>\r\n                            <IconCopy />\r\n                        </IconButton>\r\n                        <IconButton title=\"Open in Block Explorer\" color=\"primary\" onClick={() => window.open(`${networkExplorers[contractData.networks.network]}/address/${contractData.contractInfo.address}`, \"_blank\")}>\r\n                            <IconArrowUpRightCircle />\r\n                        </IconButton>\r\n                    </Stack>\r\n                </Box>}\r\n\r\n                {/* networks */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"networks-content\"\r\n                            id=\"networks-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Networks\r\n                            </Typography>\r\n                            {contractData && contractData.networks && contractData.networks.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters \r\n                                paramsType=\"networks\"\r\n                                params={contractParams} \r\n                                initialValues={contractValues} \r\n                                nodeParamsValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* credentials */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'credentials'} onChange={handleAccordionChange('credentials')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"credentials-content\"\r\n                            id=\"credentials-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Credentials\r\n                            </Typography>\r\n                            {contractData && contractData.credentials && contractData.credentials.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <CredentialInput \r\n                                paramsType=\"credentials\"\r\n                                initialParams={contractParams} \r\n                                initialValues={contractValues} \r\n                                initialValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                paramsChanged={paramsChanged}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* contractInfo */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'contractInfo'} onChange={handleAccordionChange('contractInfo')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"contractInfo-content\"\r\n                            id=\"contractInfo-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Contract Details\r\n                            </Typography>\r\n                            {contractData && contractData.contractInfo && contractData.contractInfo.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters \r\n                                paramsType=\"contractInfo\"\r\n                                params={contractParams} \r\n                                initialValues={contractValues}\r\n                                nodeParamsValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                            {invalidAddress && <Chip sx={{mt: 2, mb: 1}} icon={<IconX />} label=\"Invalid Contract Address\" color=\"error\" />}\r\n                            {invalidABI && <Chip sx={{mt: 2, mb: 1, ml: invalidAddress ? 2 : 0}} icon={<IconX />} label={invalidABI} color=\"error\" />}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n                <EditVariableDialog \r\n                    key={JSON.stringify(editVariableDialogProps)} \r\n                    show={isEditVariableDialogOpen}\r\n                    dialogProps={editVariableDialogProps}\r\n                    onCancel={() => setEditVariableDialog(false)}\r\n                    onConfirm={(updateValues) => {\r\n                        valueChanged(updateValues, expanded);\r\n                        setEditVariableDialog(false);\r\n                    }}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>\r\n                    {dialogProps.cancelButtonName}\r\n                </Button>\r\n                {dialogProps.type === 'EDIT' && <Button \r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                    onClick={() => deleteContract()}\r\n                >\r\n                    Delete\r\n                </Button>}\r\n                <Button \r\n                    variant=\"contained\" \r\n                    disabled={!isReadyToAdd} \r\n                    onClick={() => dialogProps.type === 'ADD' ? addNewContract() : saveContract()}\r\n                >\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nContractDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func,\r\n};\r\n\r\nexport default ContractDialog;\r\n\r\n","export default __webpack_public_path__ + \"static/media/contract_empty.2c9c811e.svg\";","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ItemCard from 'ui-component/cards/ItemCard';\r\nimport ContractDialog from './ContractDialog';\r\nimport ContractEmptySVG from 'assets/images/contract_empty.svg';\r\n\r\n// const\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// API\r\nimport contractsApi from \"api/contracts\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// ==============================|| CONTRACTS ||============================== //\r\n\r\nconst Contracts = () => {\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [showDialog, setShowDialog] = useState(false);\r\n    const [dialogProps, setDialogProps] = useState({});\r\n\r\n    const getAllContractsApi = useApi(contractsApi.getAllContracts);\r\n\r\n    const addNew = () => {\r\n        const dialogProp = {\r\n            title: 'Add New Contract',\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add'\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const edit = (id) => {\r\n        const dialogProp = {\r\n            title: 'Edit Contract',\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            id\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n    \r\n    const onConfirm = () => {\r\n        setShowDialog(false);\r\n        getAllContractsApi.request();\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllContractsApi.request();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllContractsApi.loading);\r\n    }, [getAllContractsApi.loading]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <MainCard>\r\n            <Stack flexDirection=\"row\">\r\n                <h1>Contracts</h1>\r\n                <Grid sx={{ mb: 1.25 }} container direction=\"row\">\r\n                    <Box sx={{ flexGrow: 1 }} />\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" sx={{ color: 'white' }} onClick={addNew}>\r\n                            Add New\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Stack>\r\n            <Grid container spacing={gridSpacing}>\r\n                {!isLoading && getAllContractsApi.data && getAllContractsApi.data.map((data, index) => (\r\n                    <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                        <ItemCard \r\n                            isLoading={isLoading}\r\n                            onClick={() => edit(data._id)} \r\n                            data={data}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            {!isLoading && (!getAllContractsApi.data || getAllContractsApi.data.length === 0) && (\r\n                <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection=\"column\">\r\n                    <Box sx={{ p: 2, height: 'auto' }}>\r\n                        <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={ContractEmptySVG} alt=\"ContractEmptySVG\" />\r\n                    </Box>\r\n                    <div>No Contracts Yet</div>\r\n                </Stack>\r\n            )}\r\n        </MainCard>\r\n        <ContractDialog\r\n            show={showDialog}\r\n            dialogProps={dialogProps}\r\n            onCancel={() => setShowDialog(false)}\r\n            onConfirm={onConfirm}\r\n        >\r\n        </ContractDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Contracts;\r\n"],"sourceRoot":""}