{"version":3,"sources":["ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","api/workflows.js","ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","assets/images/workflow_empty.svg","views/workflows/index.js"],"names":["headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","data","setData","error","setError","loading","setLoading","request","result","getAllWorkflows","client","get","getSpecificWorkflow","shortId","createNewWorkflow","body","post","updateWorkflow","put","deployWorkflow","deleteWorkflow","delete","testWorkflow","startingNodeId","WorkflowCard","Card","CardContent","Grid","container","direction","item","justifyContent","Skeleton","width","height","my","CardWrapper","styled","backgroundColor","color","darkTextPrimary","overflow","position","cursor","ItemCard","isLoading","images","onClick","chipSX","padding","activeWorkflowSX","success","dark","light","getNetworkItem","network","networks","find","ntw","name","Box","p","style","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontSize","fontWeight","mt","mb","flexGrow","whiteSpace","textOverflow","maxWidth","substring","slice","flowData","executionCount","deployed","Chip","label","marginTop","map","img","objectFit","alt","src","Workflows","navigate","useNavigate","setImages","getAllWorkflowsApi","useApi","workflowsApi","useEffect","workflows","i","length","flowDataStr","nodes","JSON","parse","j","imageSrc","includes","push","e","console","Stack","Button","spacing","gridSpacing","index","lg","md","sm","xs","WorkflowEmptySVG"],"mappings":"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","file":"static/js/10.4b6e1c24.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import axios from \"axios\";\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});\r\n\r\nexport default apiClient;\r\n","import { useState } from \"react\";\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true);\r\n        try {\r\n            const result = await apiFunc(...args);\r\n            setData(result.data);\r\n        } catch (err) {\r\n            setError(err || \"Unexpected Error!\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    };\r\n};\r\n","import client from \"./client\";\r\n\r\nconst getAllWorkflows = () => client.get(\"/workflows\");\r\n\r\nconst getSpecificWorkflow = (shortId) => client.get(`/workflows/${shortId}`);\r\n\r\nconst createNewWorkflow = (body) => client.post(`/workflows`, body); //body: IWorkflow\r\n\r\nconst updateWorkflow = (shortId, body) => client.put(`/workflows/${shortId}`, body); //body: IWorkflow\r\n\r\nconst deployWorkflow = (shortId, body) => client.post(`/workflows/deploy/${shortId}`, body || {}); //body: { halt: boolean }\r\n\r\nconst testWorkflow = (startingNodeId, body) => client.post(`/workflows/test/${startingNodeId}`, body); //body: ITestWorkflowBody\r\n\r\nconst deleteWorkflow = (shortId) => client.delete(`/workflows/${shortId}`);\r\n\r\nexport default {\r\n    getAllWorkflows,\r\n    getSpecificWorkflow,\r\n    createNewWorkflow,\r\n    updateWorkflow,\r\n    deployWorkflow,\r\n    deleteWorkflow,\r\n    testWorkflow\r\n};\r\n","// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\nexport default WorkflowCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Box, Grid, Chip, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard';\r\n\r\n// Const\r\nimport { networks } from \"store/constant\";\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}));\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme();\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    };\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    };\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction=\"column\">\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                    <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                </div>}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction=\"row\">\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontSize: '1rem',\r\n                                            fontWeight: 500,\r\n                                            color: theme.palette.secondary[200],\r\n                                            overflow: 'hidden',\r\n                                            whiteSpace: 'nowrap',\r\n                                            textOverflow: 'ellipsis',\r\n                                            maxWidth: 250\r\n                                        }}\r\n                                    >\r\n                                        {`${data.address.substring(0,8)}...${data.address.slice(-4)}`}\r\n                                    </Typography>)}\r\n                                    {data.flowData && (\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontSize: '1rem',\r\n                                            fontWeight: 500,\r\n                                            color: theme.palette.secondary[200]\r\n                                        }}\r\n                                    >\r\n                                        Total Executions: {data.executionCount || '0'}\r\n                                    </Typography>)}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label=\"Deployed\" sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip label={getNetworkItem(data.network).label} sx={{...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }} />\r\n                                </Grid>\r\n                            )}\r\n                            {images && <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                {images.map((img) => (\r\n                                    <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                        <img style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }} alt='' src={img} />\r\n                                    </div>\r\n                                ))}\r\n                            </div>}\r\n                            \r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default ItemCard;\r\n","export default __webpack_public_path__ + \"static/media/workflow_empty.55ef149b.svg\";","import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ItemCard from 'ui-component/cards/ItemCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport WorkflowEmptySVG from 'assets/images/workflow_empty.svg';\r\n\r\n// API\r\nimport workflowsApi from \"api/workflows\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// const\r\nimport { baseURL } from 'store/constant';\r\n\r\n// ==============================|| WORKFLOWS ||============================== //\r\n\r\nconst Workflows = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [images, setImages] = useState({});\r\n \r\n    const getAllWorkflowsApi = useApi(workflowsApi.getAllWorkflows);\r\n\r\n    const addNew = () => {\r\n        navigate('/canvas');\r\n    };\r\n\r\n    const goToCanvas = (selectedWorkflow) => {\r\n        navigate(`/canvas/${selectedWorkflow.shortId}`);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllWorkflowsApi.request();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllWorkflowsApi.loading);\r\n    }, [getAllWorkflowsApi.loading]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (getAllWorkflowsApi.data) {\r\n            try {\r\n                const workflows = getAllWorkflowsApi.data;\r\n                const images = {};\r\n\r\n                for (let i = 0; i < workflows.length; i+=1 ) {\r\n                    const flowDataStr = workflows[i].flowData;\r\n                    const flowData = JSON.parse(flowDataStr);\r\n                    const nodes = flowData.nodes || [];\r\n                    images[workflows[i].shortId] = [];\r\n\r\n                    for (let j = 0; j < nodes.length; j+=1 ) {\r\n                        const imageSrc = `${baseURL}/api/v1/node-icon/${nodes[j].data.name}`;\r\n                        if (!images[workflows[i].shortId].includes(imageSrc)) {\r\n                            images[workflows[i].shortId].push(imageSrc);\r\n                        }\r\n                    }\r\n                }\r\n                setImages(images);\r\n\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n\r\n    }, [getAllWorkflowsApi.data]);\r\n\r\n    return (\r\n        <MainCard>\r\n            <Stack flexDirection=\"row\">\r\n                <h1>Workflows</h1>\r\n                <Grid sx={{ mb: 1.25 }} container direction=\"row\">\r\n                    <Box sx={{ flexGrow: 1 }} />\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" sx={{ color: 'white' }} onClick={addNew}>\r\n                            Add New\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Stack>\r\n            <Grid container spacing={gridSpacing}>\r\n                {!isLoading && getAllWorkflowsApi.data && getAllWorkflowsApi.data.map((data, index) => (\r\n                    <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                        <ItemCard \r\n                            onClick={() => goToCanvas(data)} \r\n                            data={data}\r\n                            images={images[data.shortId]}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            {!isLoading && (!getAllWorkflowsApi.data || getAllWorkflowsApi.data.length === 0) && (\r\n                <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection=\"column\">\r\n                    <Box sx={{ p: 2, height: 'auto' }}>\r\n                        <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={WorkflowEmptySVG} alt=\"WorkflowEmptySVG\" />\r\n                    </Box>\r\n                    <div>No Workflows Yet</div>\r\n                </Stack>\r\n            )}\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default Workflows;\r\n"],"sourceRoot":""}