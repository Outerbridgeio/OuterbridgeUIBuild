{"version":3,"sources":["ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","api/wallets.js","views/wallets/WalletDialog.js","assets/images/wallet_empty.svg","views/wallets/index.js"],"names":["WorkflowCard","Card","CardContent","Grid","container","direction","item","justifyContent","Skeleton","variant","width","height","sx","my","CardWrapper","styled","MainCard","backgroundColor","color","theme","darkTextPrimary","overflow","position","boxShadow","cursor","ItemCard","isLoading","data","images","onClick","useTheme","chipSX","padding","activeWorkflowSX","palette","success","dark","light","getNetworkItem","network","networks","find","ntw","name","border","content","Box","p","style","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontSize","fontWeight","mt","mb","flexGrow","secondary","whiteSpace","textOverflow","maxWidth","substring","slice","flowData","executionCount","deployed","Chip","label","marginTop","map","img","objectFit","alt","src","client","get","id","body","post","put","delete","WalletDialog","show","dialogProps","onCancel","onConfirm","portalElement","document","getElementById","dispatch","useDispatch","useNotifier","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","useState","wallet_details","walletDetails","setWalletDetails","walletData","setWalletData","walletParams","setWalletParams","walletValues","setWalletValues","walletValidation","setWalletValidation","walletCredential","setWalletCredential","expanded","setExpanded","isReadyToAdd","setIsReadyToAdd","isEditVariableDialogOpen","setEditVariableDialog","editVariableDialogProps","setEditVariableDialogProps","walletParamsType","getSpecificWalletApi","useApi","walletsApi","getWalletCredentialApi","handleAccordionChange","event","isExpanded","reset","onEditVariableDialogOpen","input","values","arrayItemBody","cancelButtonName","confirmButtonName","hideVariables","addNewWallet","type","createNewWalletBody","walletInfo","providerCredential","JSON","stringify","credentials","privateKey","message","options","key","Date","getTime","Math","random","action","Button","persist","saveWallet","saveWalletBody","deleteWallet","valueChanged","formValues","paramsType","updateWalletData","index","indexOf","length","i","paramType","submit","onSubmit","showHideOptions","displayType","returnOptions","toBeDeleteOptions","option","displayOptions","Object","keys","forEach","path","comparisonValue","groundValue","lodash","Array","isArray","includes","push","filter","opt","initializeFormValuesAndParams","initialValues","params","clonedParams","cloneDeep","handleCredentialParams","privateKeyField","default","validationSchema","optional","Yup","required","setYupValidation","transformWalletResponse","walletResponseData","parse","e","console","error","initializeNodeData","useEffect","walletCredResponseData","request","checkIsReadyToAdd","component","Dialog","open","onClose","DialogTitle","title","DialogContent","balance","Stack","primary","IconButton","navigator","clipboard","writeText","window","networkExplorers","mnemonic","size","ml","startIcon","Accordion","onChange","AccordionSummary","expandIcon","Avatar","typography","smallAvatar","background","AccordionDetails","InputParameters","nodeParamsValidation","setVariableSelectorState","Divider","CredentialInput","initialParams","initialValidation","paramsChanged","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","undefined","originalParam","updateWalletDetails","EditVariableDialog","updateValues","DialogActions","disabled","createPortal","Wallets","setLoading","showDialog","setShowDialog","setDialogProps","getAllWalletsApi","loading","mr","main","spacing","gridSpacing","lg","md","sm","xs","_id","WalletEmptySVG"],"mappings":"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","file":"static/js/12.d35006ab.chunk.js","sourcesContent":["// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material'\r\nimport Skeleton from '@mui/material/Skeleton'\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction='column'>\r\n                <Grid item>\r\n                    <Grid container justifyContent='space-between'>\r\n                        <Grid item>\r\n                            <Skeleton variant='rectangular' width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant='rectangular' width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant='rectangular' sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant='rectangular' height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n)\r\n\r\nexport default WorkflowCard\r\n","import PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles'\r\nimport { Box, Grid, Chip, Typography } from '@mui/material'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard'\r\n\r\n// Const\r\nimport { networks } from 'store/constant'\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}))\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme()\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    }\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    }\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction='column'>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && (\r\n                                    <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                        <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                    </div>\r\n                                )}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction='row'>\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200],\r\n                                                overflow: 'hidden',\r\n                                                whiteSpace: 'nowrap',\r\n                                                textOverflow: 'ellipsis',\r\n                                                maxWidth: 250\r\n                                            }}\r\n                                        >\r\n                                            {`${data.address.substring(0, 8)}...${data.address.slice(-4)}`}\r\n                                        </Typography>\r\n                                    )}\r\n                                    {data.flowData && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200]\r\n                                            }}\r\n                                        >\r\n                                            Total Executions: {data.executionCount || '0'}\r\n                                        </Typography>\r\n                                    )}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label='Deployed' sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip\r\n                                        label={getNetworkItem(data.network).label}\r\n                                        sx={{ ...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            {images && (\r\n                                <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                    {images.map((img) => (\r\n                                        <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                            <img\r\n                                                style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\r\n                                                alt=''\r\n                                                src={img}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default ItemCard\r\n","import client from './client'\r\n\r\nconst getAllWallets = () => client.get('/wallets')\r\n\r\nconst getSpecificWallet = (id) => client.get(`/wallets/${id}`)\r\n\r\nconst createNewWallet = (body) => client.post(`/wallets`, body) //body: IWallet\r\n\r\nconst updateWallet = (id, body) => client.put(`/wallets/${id}`, body) //body: IWallet\r\n\r\nconst deleteWallet = (id) => client.delete(`/wallets/${id}`)\r\n\r\nconst getWalletCredential = (id) => client.get(`/wallets/credential/${id}`)\r\n\r\nexport default {\r\n    getAllWallets,\r\n    getSpecificWallet,\r\n    createNewWallet,\r\n    updateWallet,\r\n    deleteWallet,\r\n    getWalletCredential\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\n\r\nimport {\r\n    Avatar,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Divider,\r\n    Typography,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Stack,\r\n    IconButton\r\n} from '@mui/material'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// third-party\r\nimport * as Yup from 'yup'\r\nimport lodash from 'lodash'\r\n\r\n// project imports\r\nimport InputParameters from 'views/inputs/InputParameters'\r\nimport CredentialInput from 'views/inputs/CredentialInput'\r\nimport EditVariableDialog from 'ui-component/dialog/EditVariableDialog'\r\n\r\n// Icons\r\nimport { IconCheck, IconX, IconArrowUpRightCircle, IconCopy, IconKey } from '@tabler/icons'\r\n\r\n// API\r\nimport walletsApi from 'api/wallets'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// Const\r\nimport { wallet_details, networkExplorers, privateKeyField } from 'store/constant'\r\n\r\n// utils\r\nimport { handleCredentialParams, initializeNodeData } from 'utils/genericHelper'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\nconst WalletDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const theme = useTheme()\r\n    const dispatch = useDispatch()\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [walletDetails, setWalletDetails] = useState(wallet_details)\r\n    const [walletData, setWalletData] = useState({})\r\n    const [walletParams, setWalletParams] = useState([])\r\n    const [walletValues, setWalletValues] = useState({})\r\n    const [walletValidation, setWalletValidation] = useState({})\r\n    const [walletCredential, setWalletCredential] = useState({})\r\n    const [expanded, setExpanded] = useState(false)\r\n    const [isReadyToAdd, setIsReadyToAdd] = useState(false)\r\n    const [isEditVariableDialogOpen, setEditVariableDialog] = useState(false)\r\n    const [editVariableDialogProps, setEditVariableDialogProps] = useState({})\r\n    const walletParamsType = ['networks', 'credentials', 'walletInfo']\r\n\r\n    const getSpecificWalletApi = useApi(walletsApi.getSpecificWallet)\r\n    const getWalletCredentialApi = useApi(walletsApi.getWalletCredential)\r\n\r\n    const handleAccordionChange = (expanded) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? expanded : false)\r\n    }\r\n\r\n    const reset = () => {\r\n        setWalletData({})\r\n        setWalletParams([])\r\n        setWalletValues({})\r\n        setWalletValidation({})\r\n        setWalletCredential({})\r\n        setIsReadyToAdd(false)\r\n        setExpanded(false)\r\n    }\r\n\r\n    const checkIsReadyToAdd = () => {\r\n        for (let i = 0; i < walletParamsType.length; i += 1) {\r\n            const paramType = walletParamsType[i]\r\n            if (!walletData[paramType] || !walletData[paramType].submit) {\r\n                setIsReadyToAdd(false)\r\n                return\r\n            }\r\n        }\r\n        setIsReadyToAdd(true)\r\n    }\r\n\r\n    const onEditVariableDialogOpen = (input, values, arrayItemBody) => {\r\n        const dialogProps = {\r\n            input,\r\n            values,\r\n            arrayItemBody,\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            hideVariables: true\r\n        }\r\n\r\n        setEditVariableDialogProps(dialogProps)\r\n        setEditVariableDialog(true)\r\n    }\r\n\r\n    const addNewWallet = async (type) => {\r\n        const createNewWalletBody = {\r\n            network: walletData.networks.network,\r\n            name: walletData.walletInfo.name,\r\n            providerCredential: JSON.stringify(walletData.credentials)\r\n        }\r\n        if (type === 'IMPORT') createNewWalletBody.privateKey = walletData.walletInfo.privateKey\r\n        const createResp = await walletsApi.createNewWallet(createNewWalletBody)\r\n        if (createResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'New wallet added',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onConfirm()\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to add new wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const saveWallet = async () => {\r\n        const saveWalletBody = {\r\n            network: walletData.networks.network,\r\n            name: walletData.walletInfo.name,\r\n            providerCredential: JSON.stringify(walletData.credentials)\r\n        }\r\n        const saveResp = await walletsApi.updateWallet(dialogProps.id, saveWalletBody)\r\n        if (saveResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Wallet saved',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onConfirm()\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to save wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const deleteWallet = async () => {\r\n        const deleteResp = await walletsApi.deleteWallet(dialogProps.id)\r\n        if (deleteResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Wallet deleted',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onConfirm()\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to delete wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateWalletData = {\r\n            ...walletData,\r\n            [paramsType]: formValues\r\n        }\r\n\r\n        const index = walletParamsType.indexOf(paramsType)\r\n        if (index >= 0 && index !== walletParamsType.length - 1) {\r\n            for (let i = index + 1; i < walletParamsType.length; i += 1) {\r\n                const paramType = walletParamsType[i]\r\n                if (updateWalletData[paramType]) updateWalletData[paramType].submit = null\r\n            }\r\n        }\r\n\r\n        setWalletData(updateWalletData)\r\n    }\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n        // Because formParams options can be changed due to show hide options,\r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod')\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod')\r\n\r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = walletDetails[paramsType].find((param) => param.name === 'credentialMethod')\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options\r\n            }\r\n        }\r\n\r\n        const updateWalletDetails = {\r\n            ...walletDetails,\r\n            [paramsType]: formParams\r\n        }\r\n        setWalletDetails(updateWalletDetails)\r\n    }\r\n\r\n    const onSubmit = async (formValues, paramsType) => {\r\n        const updateWalletData = {\r\n            ...walletData,\r\n            [paramsType]: formValues\r\n        }\r\n        setWalletData(updateWalletData)\r\n\r\n        const index = walletParamsType.indexOf(paramsType)\r\n        if (index >= 0 && index !== walletParamsType.length - 1) {\r\n            setExpanded(walletParamsType[index + 1])\r\n        } else if (index === walletParamsType.length - 1) {\r\n            setExpanded(false)\r\n        }\r\n    }\r\n\r\n    const showHideOptions = (displayType, options) => {\r\n        let returnOptions = options\r\n        const toBeDeleteOptions = []\r\n\r\n        for (let i = 0; i < returnOptions.length; i += 1) {\r\n            const option = returnOptions[i]\r\n            const displayOptions = option[displayType]\r\n\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n                    const comparisonValue = displayOptions[path]\r\n                    const groundValue = lodash.get(walletData, path, '')\r\n\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option)\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]))\r\n        }\r\n\r\n        return returnOptions\r\n    }\r\n\r\n    const displayOptions = (params) => {\r\n        let clonedParams = params\r\n\r\n        for (let i = 0; i < clonedParams.length; i += 1) {\r\n            const input = clonedParams[i]\r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', input.options)\r\n                input.options = showHideOptions('hide', input.options)\r\n            }\r\n        }\r\n\r\n        return clonedParams\r\n    }\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {}\r\n        for (let i = 0; i < params.length; i += 1) {\r\n            const input = params[i]\r\n            if (input.type === 'string' && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`)\r\n            } else if (input.type === 'number' && !input.optional) {\r\n                validationSchema[input.name] = Yup.number().required(`${input.label} is required. Type: ${input.type}`)\r\n            } else if ((input.type === 'options' || input.type === 'asyncOptions') && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`)\r\n            }\r\n        }\r\n        return validationSchema\r\n    }\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n        const initialValues = {}\r\n        let walletParams = displayOptions(lodash.cloneDeep(walletDetails[paramsType] || []))\r\n        walletParams = handleCredentialParams(walletParams, paramsType, walletDetails[paramsType], walletData)\r\n\r\n        if (dialogProps.type === 'IMPORT' && paramsType === 'walletInfo') {\r\n            walletParams.push(...privateKeyField)\r\n        }\r\n\r\n        for (let i = 0; i < walletParams.length; i += 1) {\r\n            const input = walletParams[i]\r\n\r\n            // Load from walletData values\r\n            if (paramsType in walletData && input.name in walletData[paramsType]) {\r\n                initialValues[input.name] = walletData[paramsType][input.name]\r\n\r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name])\r\n                    if (!optionVal) delete initialValues[input.name]\r\n                }\r\n            } else {\r\n                // Load from walletParams default values\r\n                initialValues[input.name] = input.default || ''\r\n            }\r\n        }\r\n\r\n        initialValues.submit = null\r\n\r\n        setWalletValues(initialValues)\r\n        setWalletValidation(setYupValidation(walletParams))\r\n        setWalletParams(walletParams)\r\n    }\r\n\r\n    const transformWalletResponse = (walletResponseData, walletDetails) => {\r\n        const walletData = {\r\n            networks: {},\r\n            credentials: {},\r\n            walletInfo: {}\r\n        }\r\n\r\n        if (walletResponseData) {\r\n            walletData.networks = { network: walletResponseData.network, submit: true }\r\n            walletData.walletInfo = { ...walletResponseData, submit: true }\r\n            if (walletResponseData.providerCredential) {\r\n                try {\r\n                    walletData.credentials = JSON.parse(walletResponseData.providerCredential)\r\n                } catch (e) {\r\n                    console.error(e)\r\n                }\r\n            }\r\n        } else {\r\n            walletData.networks = initializeNodeData(walletDetails.networks)\r\n            walletData.credentials = initializeNodeData(walletDetails.credentials)\r\n            walletData.walletInfo = initializeNodeData(walletDetails.walletInfo)\r\n        }\r\n        return walletData\r\n    }\r\n\r\n    // Get Wallet Details from API\r\n    useEffect(() => {\r\n        if (getSpecificWalletApi.data) {\r\n            const walletResponseData = getSpecificWalletApi.data\r\n            setWalletData(transformWalletResponse(walletResponseData))\r\n            setExpanded('networks')\r\n        }\r\n    }, [getSpecificWalletApi.data])\r\n\r\n    // Get Wallet Credential from API\r\n    useEffect(() => {\r\n        if (getWalletCredentialApi.data) {\r\n            const walletCredResponseData = getWalletCredentialApi.data\r\n            setWalletCredential(walletCredResponseData)\r\n        }\r\n    }, [getWalletCredentialApi.data])\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (show && (dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT')) {\r\n            reset()\r\n            setWalletData(transformWalletResponse(null, walletDetails))\r\n            setExpanded('networks')\r\n        } else if (show && dialogProps.type === 'EDIT' && dialogProps.id) {\r\n            reset()\r\n            getSpecificWalletApi.request(dialogProps.id)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show, dialogProps])\r\n\r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (walletDetails && walletData && expanded) {\r\n            initializeFormValuesAndParams(expanded)\r\n            checkIsReadyToAdd()\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [walletDetails, walletData, expanded])\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} onClose={onCancel} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {walletData && walletData.walletInfo && walletData.walletInfo.address && dialogProps.type === 'EDIT' && (\r\n                    <Box sx={{ p: 2 }}>\r\n                        <Typography sx={{ p: 1 }} variant='overline'>\r\n                            BALANCE\r\n                        </Typography>\r\n                        <Typography sx={{ p: 1, mb: 1 }} variant='h3'>\r\n                            {walletData.walletInfo.balance}\r\n                        </Typography>\r\n                        <Typography sx={{ p: 1 }} variant='overline'>\r\n                            ADDRESS\r\n                        </Typography>\r\n                        <Stack direction='row' sx={{ p: 1, mb: 1 }}>\r\n                            <Typography\r\n                                sx={{\r\n                                    p: 1,\r\n                                    borderRadius: 10,\r\n                                    backgroundColor: theme.palette.primary.light,\r\n                                    width: 'max-content',\r\n                                    height: 'max-content'\r\n                                }}\r\n                                variant='h5'\r\n                            >\r\n                                {walletData.walletInfo.address}\r\n                            </Typography>\r\n                            <IconButton\r\n                                title='Copy Address'\r\n                                color='primary'\r\n                                onClick={() => navigator.clipboard.writeText(walletData.walletInfo.address)}\r\n                            >\r\n                                <IconCopy />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                title='Open in Block Explorer'\r\n                                color='primary'\r\n                                onClick={() =>\r\n                                    window.open(\r\n                                        `${networkExplorers[walletData.networks.network]}/address/${walletData.walletInfo.address}`,\r\n                                        '_blank'\r\n                                    )\r\n                                }\r\n                            >\r\n                                <IconArrowUpRightCircle />\r\n                            </IconButton>\r\n                        </Stack>\r\n                        {walletCredential && walletCredential.privateKey && (\r\n                            <>\r\n                                <Typography sx={{ p: 1 }} variant='overline'>\r\n                                    PRIVATE KEY\r\n                                </Typography>\r\n                                <Stack direction='row' sx={{ p: 1, mb: 1 }}>\r\n                                    <Typography\r\n                                        sx={{\r\n                                            p: 1,\r\n                                            borderRadius: 10,\r\n                                            backgroundColor: theme.palette.primary.light,\r\n                                            width: 'max-content',\r\n                                            height: 'max-content'\r\n                                        }}\r\n                                        variant='h5'\r\n                                    >\r\n                                        {walletCredential.privateKey}\r\n                                    </Typography>\r\n                                    <IconButton\r\n                                        title='Copy Key'\r\n                                        color='primary'\r\n                                        onClick={() => navigator.clipboard.writeText(walletCredential.privateKey)}\r\n                                    >\r\n                                        <IconCopy />\r\n                                    </IconButton>\r\n                                </Stack>\r\n                            </>\r\n                        )}\r\n                        {walletCredential && walletCredential.mnemonic && (\r\n                            <>\r\n                                <Typography sx={{ p: 1 }} variant='overline'>\r\n                                    mnemonic\r\n                                </Typography>\r\n                                <Stack direction='row' sx={{ p: 1, mb: 1 }}>\r\n                                    <Typography\r\n                                        sx={{\r\n                                            p: 1,\r\n                                            borderRadius: 10,\r\n                                            backgroundColor: theme.palette.primary.light,\r\n                                            width: 'max-content',\r\n                                            height: 'max-content'\r\n                                        }}\r\n                                        variant='h5'\r\n                                    >\r\n                                        {walletCredential.mnemonic}\r\n                                    </Typography>\r\n                                    <IconButton\r\n                                        title='Copy Mnemonic'\r\n                                        color='primary'\r\n                                        onClick={() => navigator.clipboard.writeText(walletCredential.mnemonic)}\r\n                                    >\r\n                                        <IconCopy />\r\n                                    </IconButton>\r\n                                </Stack>\r\n                            </>\r\n                        )}\r\n                        {!Object.keys(walletCredential).length && (\r\n                            <Button\r\n                                size='small'\r\n                                sx={{ ml: 1 }}\r\n                                variant='contained'\r\n                                startIcon={<IconKey />}\r\n                                onClick={() => getWalletCredentialApi.request(dialogProps.id)}\r\n                            >\r\n                                View PrivateKey and Mnemonic\r\n                            </Button>\r\n                        )}\r\n                    </Box>\r\n                )}\r\n\r\n                {/* networks */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls='networks-content' id='networks-header'>\r\n                            <Typography variant='h4'>Networks</Typography>\r\n                            {walletData && walletData.networks && walletData.networks.submit && (\r\n                                <Avatar\r\n                                    variant='rounded'\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters\r\n                                paramsType='networks'\r\n                                params={walletParams}\r\n                                initialValues={walletValues}\r\n                                nodeParamsValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* credentials */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'credentials'} onChange={handleAccordionChange('credentials')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls='credentials-content' id='credentials-header'>\r\n                            <Typography variant='h4'>Credentials</Typography>\r\n                            {walletData && walletData.credentials && walletData.credentials.submit && (\r\n                                <Avatar\r\n                                    variant='rounded'\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <CredentialInput\r\n                                paramsType='credentials'\r\n                                initialParams={walletParams}\r\n                                initialValues={walletValues}\r\n                                initialValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                paramsChanged={paramsChanged}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* walletInfo */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'walletInfo'} onChange={handleAccordionChange('walletInfo')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls='walletInfo-content' id='walletInfo-header'>\r\n                            <Typography variant='h4'>Wallet Details</Typography>\r\n                            {walletData && walletData.walletInfo && walletData.walletInfo.submit && (\r\n                                <Avatar\r\n                                    variant='rounded'\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters\r\n                                paramsType='walletInfo'\r\n                                params={walletParams}\r\n                                initialValues={walletValues}\r\n                                nodeParamsValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n                <EditVariableDialog\r\n                    key={JSON.stringify(editVariableDialogProps)}\r\n                    show={isEditVariableDialogOpen}\r\n                    dialogProps={editVariableDialogProps}\r\n                    onCancel={() => setEditVariableDialog(false)}\r\n                    onConfirm={(updateValues) => {\r\n                        valueChanged(updateValues, expanded)\r\n                        setEditVariableDialog(false)\r\n                    }}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                {dialogProps.type === 'EDIT' && (\r\n                    <Button variant='contained' color='error' onClick={() => deleteWallet()}>\r\n                        Delete\r\n                    </Button>\r\n                )}\r\n                <Button\r\n                    variant='contained'\r\n                    disabled={!isReadyToAdd}\r\n                    onClick={() =>\r\n                        dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT' ? addNewWallet(dialogProps.type) : saveWallet()\r\n                    }\r\n                >\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nWalletDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default WalletDialog\r\n","export default __webpack_public_path__ + \"static/media/wallet_empty.f647428f.svg\";","import { useEffect, useState } from 'react'\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport ItemCard from 'ui-component/cards/ItemCard'\r\nimport WalletDialog from './WalletDialog'\r\nimport WalletEmptySVG from 'assets/images/wallet_empty.svg'\r\n\r\n// const\r\nimport { gridSpacing } from 'store/constant'\r\n\r\n// API\r\nimport walletsApi from 'api/wallets'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// ==============================|| WALLETS ||============================== //\r\n\r\nconst Wallets = () => {\r\n    const theme = useTheme()\r\n\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [showDialog, setShowDialog] = useState(false)\r\n    const [dialogProps, setDialogProps] = useState({})\r\n\r\n    const getAllWalletsApi = useApi(walletsApi.getAllWallets)\r\n\r\n    const addNew = () => {\r\n        const dialogProp = {\r\n            title: 'Add New Wallet',\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add'\r\n        }\r\n        setDialogProps(dialogProp)\r\n        setShowDialog(true)\r\n    }\r\n\r\n    const importNew = () => {\r\n        const dialogProp = {\r\n            title: 'Import Wallet',\r\n            type: 'IMPORT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'IMPORT'\r\n        }\r\n        setDialogProps(dialogProp)\r\n        setShowDialog(true)\r\n    }\r\n\r\n    const edit = (id) => {\r\n        const dialogProp = {\r\n            title: 'Edit Wallet',\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            id\r\n        }\r\n        setDialogProps(dialogProp)\r\n        setShowDialog(true)\r\n    }\r\n\r\n    const onConfirm = () => {\r\n        setShowDialog(false)\r\n        getAllWalletsApi.request()\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllWalletsApi.request()\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllWalletsApi.loading)\r\n    }, [getAllWalletsApi.loading])\r\n\r\n    return (\r\n        <>\r\n            <MainCard>\r\n                <Stack flexDirection='row'>\r\n                    <h1>Wallets</h1>\r\n                    <Grid sx={{ mb: 1.25 }} container direction='row'>\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n                        <Grid item>\r\n                            <Button variant='contained' sx={{ color: 'white', mr: 2 }} onClick={addNew}>\r\n                                Add New\r\n                            </Button>\r\n                            <Button\r\n                                variant='contained'\r\n                                sx={{ color: 'white', backgroundColor: theme.palette.secondary.main }}\r\n                                onClick={importNew}\r\n                            >\r\n                                Import Wallet\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Stack>\r\n                <Grid container spacing={gridSpacing}>\r\n                    {!isLoading &&\r\n                        getAllWalletsApi.data &&\r\n                        getAllWalletsApi.data.map((data, index) => (\r\n                            <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                                <ItemCard isLoading={isLoading} onClick={() => edit(data._id)} data={data} />\r\n                            </Grid>\r\n                        ))}\r\n                </Grid>\r\n                {!isLoading && (!getAllWalletsApi.data || getAllWalletsApi.data.length === 0) && (\r\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection='column'>\r\n                        <Box sx={{ p: 2, height: 'auto' }}>\r\n                            <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={WalletEmptySVG} alt='WalletEmptySVG' />\r\n                        </Box>\r\n                        <div>No Wallets Yet</div>\r\n                    </Stack>\r\n                )}\r\n            </MainCard>\r\n            <WalletDialog\r\n                show={showDialog}\r\n                dialogProps={dialogProps}\r\n                onCancel={() => setShowDialog(false)}\r\n                onConfirm={onConfirm}\r\n            ></WalletDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Wallets\r\n"],"sourceRoot":""}