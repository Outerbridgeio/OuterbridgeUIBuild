{"version":3,"sources":["utils/genericHelper.js","ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","ui-component/extended/AnimateButton.js","hooks/useScriptRef.js","utils/useNotifier.js","views/inputs/ArrayInputParameters.js","views/inputs/OptionParamsResponse.js","views/inputs/AsyncSelectWrapper.js","views/inputs/InputParameters.js","api/credential.js","api/oauth2.js","views/inputs/CredentialInput.js"],"names":["numberOrExpressionRegex","getAvailableNodeIdsForVariable","nodes","edges","targetNodeId","reverse","graph","nodeDependencies","i","length","nodeId","id","source","target","Object","prototype","hasOwnProperty","call","push","constructNodeDirectedGraph","exploreNodes","nodeQueue","exploredNodes","shift","parentNodeIds","inputEdges","filter","edg","targetHandle","includes","j","neighbourNodeIds","neighNodeId","getAllConnectedNodesFromTarget","setPath","Set","delete","generateWebhookEndpoint","characters","Array","from","map","charAt","Math","floor","random","join","getUniqueNodeId","nodeData","totalSameNodes","data","name","checkIfNodeLabelUnique","nodeLabel","label","initializeNodeData","nodeParams","initialValues","input","default","type","newObj","array","submit","addAnchors","newNodeId","incoming","outgoing","inputAnchors","newInput","outputAnchors","newOutput","getUniqueNodeLabel","actions","credentials","networks","inputParameters","getEdgeLabelName","sourceSplit","split","checkMultipleTriggers","node","convertDateStringToDateObject","dateString","undefined","date","moment","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","splitDataURI","getFolderName","base64ArrayStr","base64Array","JSON","parse","filenames","filename","e","generateExportFlowData","flowData","selected","newNodeData","wallet","credentialMethod","isHideRegisteredCredential","params","paramsType","nodeFlowData","clonedParams","selectedCredentialMethodOption","options","find","opt","hideRegisteredCredential","handleCredentialParams","reorganizedParams","nPrm","lodash","cloneDeep","prm","copyToClipboard","src","isArray","navigator","clipboard","writeText","stringify","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","setData","error","setError","loading","setLoading","request","result","AnimateButton","offset1","offset2","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","useScriptRef","scripted","useRef","useEffect","current","displayed","useNotifier","dispatch","useDispatch","notifications","useSelector","state","notifier","useSnackbar","enqueueSnackbar","closeSnackbar","React","forEach","key","message","dismissed","onClose","event","reason","myKey","onExited","removeSnackbar","StyledPopper","styled","Popper","borderRadius","autocompleteClasses","listbox","boxSizing","padding","margin","DateCustomInput","value","onClick","style","backgroundColor","paddingTop","paddingBottom","paddingRight","paddingLeft","width","height","cursor","fontWeight","textAlign","color","opacity","propTypes","PropTypes","string","func","ArrayInputParameters","arrayParams","arrayGroupName","errors","onArrayInputChange","onArrayInputBlur","onArrayItemRemove","onArrayItemMouseUp","onEditVariableDialogOpen","customization","processUpdateValues","inputValue","inputName","values","index","updateArrayValues","updateInitialValues","onInputChange","onInputBlur","onMouseUp","valueIndex","cursorPosition","selectionEnd","textBeforeCursorPosition","substring","textAfterCursorPosition","path","_","Box","p","mb","light","position","Fab","minHeight","main","right","top","size","splice","onRemoveClick","paramIndex","FormControl","fullWidth","mt","Boolean","Stack","Typography","description","Tooltip","placement","IconButton","Info","grey","marginBottom","Button","component","startIcon","marginRight","hidden","onChange","files","file","reader","FileReader","onload","evt","readAsDataURL","handleFileUpload","setFieldValue","directory","webkitdirectory","readFile","fileIndex","webkitRelativePath","handleFolderUpload","fontSize","maxHeight","overflowX","onScroll","stopPropagation","placeholder","onBlur","onValueChange","code","highlight","languages","json","js","textareaClassName","customInput","showTimeSelect","isClearable","timeInputLabel","dateFormat","toISOString","OutlinedInput","Switch","checked","inputProps","availableOptions","Autocomplete","freeSolo","onOpen","option","selection","PopperComponent","renderInput","TextField","renderOption","props","display","flexDirection","OptionParamsResponse","getSelectedValue","getSelectedOptionInputParams","selectedOption","getSelectedOptionExampleParams","exampleParameters","getSelectedOptionExampleResponse","exampleResponse","dangerouslySetInnerHTML","__html","collapsed","enableClipboard","AsyncSelectWrapper","loadMethod","loadFromDbCollections","onMenuOpen","onSetError","customStyles","provided","isSelected","control","singleValue","menuList","asyncOptions","setAsyncOptions","styles","formatOptionLabel","context","getOptionLabel","getOptionValue","loadOptions","callback","post","then","response","returnOptions","toBeDeleteOptions","displayTypes","displayType","displayOptions","keys","comparisonValue","replace","groundValue","get","RegExp","test","showHideOptions","toLowerCase","defaultOptions","bottom","fontStyle","formatErrorMessage","InputParameters","nodeParamsValidation","valueChanged","onSubmit","setVariableSelectorState","scriptedRef","onChanged","updateValues","findMatchingOptions","enableReinitialize","validationSchema","Yup","shape","setErrors","setStatus","setSubmitting","success","err","console","handleBlur","handleChange","handleSubmit","isSubmitting","noValidate","overwriteValues","multiline","rows","maxRows","minRows","arrayParamItems","templateArray","arrayItemsValues","variableState","body","arrayItemInput","arrayItemValues","arrayItemIndex","disableElevation","arrayItems","arrayName","onAddArrayItem","disabled","nodeCredentialName","client","isEncrypted","credentialBody","put","credentialId","ADD_NEW_CREDENTIAL","CredentialInput","initialParams","initialValidation","paramsChanged","credentialValidation","setCredentialValidation","credentialValues","setCredentialValues","setNodeCredentialName","credentialParams","setCredentialParams","credentialOptions","setCredentialOptions","oAuth2RedirectURL","setOAuth2RedirectURL","getCredentialParamsApi","useApi","credentialApi","getRegisteredCredentialsApi","getSpecificCredentialApi","getCredentialRequestBody","Error","credentialData","credParamName","clearCredentialParams","updateParams","item","every","paramItem","clearCredentialParamsValues","registeredCredential","onDeleteCredential","openOAuth2PopUpWindow","oAuth2PopupURL","left","window","screenX","outerWidth","screenY","outerHeight","url","open","_id","validationKey","updateValidation","required","updateYupValidation","newCredentialParams","unshift","isAddNewCredential","oauth2Api","popUpWindow","oAuth2Completed","removeEventListener","submitValues","close","addEventListener","selectedCredential","redirectURLResp"],"mappings":"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","file":"static/js/3.1c691c83.chunk.js","sourcesContent":["import lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport const numberOrExpressionRegex = /^(\\d+\\.?\\d*|{{.*}})$/; //return true if string consists only numbers OR expression {{}}\r\n\r\nexport const constructNodeDirectedGraph = (nodes, edges, reverse=false) => {\r\n\r\n    const graph = {};\r\n    const nodeDependencies = {};\r\n\r\n    // Initialize node dependencies and graph\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const nodeId = nodes[i].id;\r\n        nodeDependencies[nodeId] = 0;\r\n        graph[nodeId] = [];\r\n    }\r\n\r\n    for (let i = 0; i < edges.length; i+=1 ) {\r\n        const source = edges[i].source;\r\n        const target = edges[i].target;\r\n\r\n        if (Object.prototype.hasOwnProperty.call(graph, source)) {\r\n            graph[source].push(target);\r\n        } else {\r\n            graph[source] = [target];\r\n        }\r\n\r\n        if (reverse) {\r\n            if (Object.prototype.hasOwnProperty.call(graph, target)) {\r\n                graph[target].push(source);\r\n            } else {\r\n                graph[target] = [source];\r\n            }\r\n        }\r\n\r\n        nodeDependencies[target] += 1;\r\n    }\r\n\r\n    return { graph, nodeDependencies };\r\n}\r\n\r\n// Find starting node with 0 dependencies\r\nexport const findStartingNodeIds = (nodes, nodeDependencies) => {\r\n    const startingNodeIds = [];\r\n    Object.keys(nodeDependencies).forEach((nodeId) => {\r\n        if (nodeDependencies[nodeId] === 0) {\r\n            const node = nodes.find((nd) => nd.id === nodeId);\r\n            if (node && node.data && node.data.type && (node.data.type === 'trigger' || node.data.type === 'webhook')) {\r\n                startingNodeIds.push(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    return startingNodeIds;\r\n}\r\n\r\n// Backtrack function to find all paths from start to target node\r\nexport const getAllPathsFromStartToTarget = (startNodeId, targetNodeId, graph) => {\r\n    const paths = [];\r\n    const visitedNodeIds = new Set();\r\n\r\n    const DFS = (currentNodeId, endNodeId, tempPath) => {\r\n        if (currentNodeId === endNodeId) {\r\n            paths.push(lodash.cloneDeep(tempPath));\r\n            return;\r\n        }\r\n\r\n        const neighbourNodeIds = graph[currentNodeId];\r\n        visitedNodeIds.add(currentNodeId);\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i+=1 ) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (!visitedNodeIds.has(neighNodeId)) {\r\n                tempPath.push(neighNodeId);\r\n                DFS(neighNodeId, endNodeId, tempPath);\r\n                tempPath.pop();\r\n            }\r\n        }\r\n        visitedNodeIds.delete(currentNodeId);\r\n    }\r\n\r\n    DFS(startNodeId, targetNodeId, [startNodeId]);\r\n    return paths;\r\n}\r\n\r\n// Breadth First Search to get all connected parent nodes from target\r\nexport const getAllConnectedNodesFromTarget = (targetNodeId, edges, graph) => {\r\n\r\n    const nodeQueue = [];\r\n    const exploredNodes = [];\r\n\r\n    nodeQueue.push(targetNodeId);\r\n    exploredNodes.push(targetNodeId);\r\n\r\n    while (nodeQueue.length) {\r\n\r\n        const nodeId = nodeQueue.shift() || '';\r\n        const parentNodeIds = [];\r\n\r\n        const inputEdges = edges.filter((edg) => (edg.target === nodeId && edg.targetHandle.includes('-input-')));\r\n        if (inputEdges && inputEdges.length) {\r\n            for (let j = 0; j < inputEdges.length; j+=1 ) {\r\n                parentNodeIds.push(inputEdges[j].source);\r\n            }\r\n        }\r\n\r\n        const neighbourNodeIds = graph[nodeId];\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i+=1 ) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (parentNodeIds.includes(neighNodeId)) {\r\n                if (!exploredNodes.includes(neighNodeId)) {\r\n                    exploredNodes.push(neighNodeId);\r\n                    nodeQueue.push(neighNodeId);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return exploredNodes;\r\n}\r\n\r\nexport const getAvailableNodeIdsForVariable = (nodes, edges, targetNodeId) => {\r\n    const { graph } = constructNodeDirectedGraph(nodes, edges, true);\r\n    const exploreNodes = getAllConnectedNodesFromTarget(targetNodeId, edges, graph);\r\n    const setPath = new Set(exploreNodes);\r\n    setPath.delete(targetNodeId);\r\n    return [...setPath];\r\n}\r\n\r\nexport const generateWebhookEndpoint = () => {\r\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n    const webhookEndpoint = Array.from({ length: 15 }).map(() => {\r\n        return characters.charAt(\r\n            Math.floor(Math.random() * characters.length),\r\n        );\r\n    }).join('');\r\n    return webhookEndpoint;\r\n}\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1;\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return nodeId;\r\n};\r\n\r\nconst getUniqueNodeLabel = (nodeData, nodes) => {\r\n\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique label\r\n    let nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            totalSameNodes += 1;\r\n            nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return totalSameNodes === 0 ? nodeData.label : nodeLabel;\r\n};\r\n\r\nexport const checkIfNodeLabelUnique = (nodeLabel, nodes) => {\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const initializeNodeData = (nodeParams) => {\r\n\r\n    const initialValues = {};\r\n\r\n    for (let i = 0; i < nodeParams.length; i+= 1) {\r\n        const input = nodeParams[i];\r\n\r\n        // Load from nodeParams default values\r\n        initialValues[input.name] = input.default || ''; \r\n\r\n        // Special case for array, always initialize the item if default is not set\r\n        if (input.type === 'array' && !input.default) {\r\n            const newObj = {};\r\n            for (let j = 0; j < input.array.length; j+= 1) {\r\n                newObj[input.array[j].name] = input.array[j].default || '';\r\n            }\r\n            initialValues[input.name] = [newObj];\r\n        }\r\n    }\r\n    \r\n    initialValues.submit = null;\r\n    \r\n    return initialValues;\r\n};\r\n\r\nexport const addAnchors = (nodeData, nodes, newNodeId) => {\r\n    const incoming = nodeData.incoming || 0;\r\n    const outgoing = nodeData.outgoing || 0;\r\n\r\n    const inputAnchors = [];\r\n    for (let i = 0; i < incoming; i+=1 ) {\r\n        const newInput = {\r\n            id: `${newNodeId}-input-${i}`\r\n        };\r\n        inputAnchors.push(newInput);\r\n    }\r\n\r\n    const outputAnchors = [];\r\n    for (let i = 0; i < outgoing; i+=1 ) {\r\n        const newOutput = {\r\n            id: `${newNodeId}-output-${i}`\r\n        };\r\n        outputAnchors.push(newOutput);\r\n    }\r\n    \r\n    nodeData.inputAnchors = inputAnchors;\r\n    nodeData.outputAnchors = outputAnchors;\r\n    nodeData.label = getUniqueNodeLabel(nodeData, nodes);\r\n    \r\n    if (nodeData.actions) nodeData.actions = initializeNodeData(nodeData.actions);\r\n    if (nodeData.credentials) nodeData.credentials = initializeNodeData(nodeData.credentials);\r\n    if (nodeData.networks) nodeData.networks = initializeNodeData(nodeData.networks);\r\n    if (nodeData.inputParameters) nodeData.inputParameters = initializeNodeData(nodeData.inputParameters);\r\n\r\n    return nodeData;\r\n};\r\n\r\nexport const getEdgeLabelName = (source) => {\r\n    const sourceSplit = source.split(\"-\");\r\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\r\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length-1];\r\n        return outputAnchorsIndex === '0' ? 'true' : 'false';\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const checkMultipleTriggers = (nodes) => {\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.type === 'webhook' || node.data.type === 'trigger') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined;\r\n\r\n    const date = moment(dateString);\r\n    if (!date.isValid) return undefined;\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes());\r\n}\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    const splitDataURI = fileBase64.split(',');\r\n    const filename = splitDataURI[splitDataURI.length-1].split(':')[1];\r\n    return filename;\r\n}\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr);\r\n        const filenames = [];\r\n        for (let i = 0; i < base64Array.length; i+=1 ) {\r\n            const fileBase64 = base64Array[i];\r\n            const splitDataURI = fileBase64.split(',');\r\n            const filename = splitDataURI[splitDataURI.length-1].split(':')[1];\r\n            filenames.push(filename);\r\n        }\r\n        return filenames.length ? filenames.join(',') : '';\r\n    } catch(e) {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes;\r\n    const edges = flowData.edges;\r\n    \r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        nodes[i].selected = false;\r\n        const node = nodes[i];\r\n        const newNodeData = {\r\n            label: node.data.label,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            inputAnchors: node.data.inputAnchors,\r\n            outputAnchors: node.data.outputAnchors,\r\n            selected: false,\r\n        }\r\n        if (node.data.inputParameters) {\r\n            newNodeData.inputParameters = {...node.data.inputParameters, submit: null};\r\n            if (node.data.inputParameters.wallet) delete newNodeData.inputParameters.wallet;\r\n        }\r\n        if (node.data.actions) {\r\n            newNodeData.actions = {...node.data.actions, submit: null};\r\n            if (node.data.actions.wallet) delete newNodeData.actions.wallet;\r\n        }\r\n        if (node.data.networks) {\r\n            newNodeData.networks = {...node.data.networks, submit: null};\r\n            if (node.data.networks.wallet) delete newNodeData.networks.wallet;\r\n        }\r\n        if (node.data.credentials && node.data.credentials.credentialMethod) {\r\n            newNodeData.credentials = {credentialMethod: node.data.credentials.credentialMethod, submit: null};\r\n            if (node.data.credentials.wallet) delete newNodeData.credentials.wallet;\r\n        }\r\n\r\n        nodes[i].data = newNodeData;\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    };\r\n    return exportJson;\r\n}\r\n\r\nconst isHideRegisteredCredential = (params, paramsType, nodeFlowData) => {\r\n\r\n    if (!nodeFlowData[paramsType] || !nodeFlowData[paramsType]['credentialMethod']) return undefined;\r\n    let clonedParams = params;\r\n\r\n    for (let i = 0; i < clonedParams.length; i+= 1) {\r\n        const input = clonedParams[i];\r\n        if (input.type === 'options') {\r\n            const selectedCredentialMethodOption = input.options.find((opt) => opt.name === nodeFlowData[paramsType]['credentialMethod']);\r\n            if (\r\n                selectedCredentialMethodOption && \r\n                selectedCredentialMethodOption !== undefined && \r\n                selectedCredentialMethodOption.hideRegisteredCredential\r\n            ) return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const handleCredentialParams = (nodeParams, paramsType, reorganizedParams, nodeFlowData) => {\r\n    if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') === undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        !isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Add hard-coded registeredCredential params\r\n        nodeParams.push({\r\n            name: 'registeredCredential',\r\n        });\r\n\r\n    } else if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') !== undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n\r\n    } else if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') === undefined\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n    }\r\n    return nodeParams;\r\n}\r\n\r\nexport const copyToClipboard = (e) => {\r\n    const src = e.src;\r\n    if (Array.isArray(src) || typeof src === 'object') {\r\n        navigator.clipboard.writeText(JSON.stringify(src, null, '  '));\r\n    } else {\r\n        navigator.clipboard.writeText(src);\r\n    }\r\n}","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import axios from \"axios\";\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});\r\n\r\nexport default apiClient;\r\n","import { useState } from \"react\";\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true);\r\n        try {\r\n            const result = await apiFunc(...args);\r\n            setData(result.data);\r\n        } catch (err) {\r\n            setError(err || \"Unexpected Error!\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    };\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\r\n    let offset1;\r\n    let offset2;\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset;\r\n            offset2 = 0;\r\n            break;\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0;\r\n            offset2 = offset;\r\n            break;\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2);\r\n    const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                };\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n    }\r\n});\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n};\r\n\r\nexport default AnimateButton;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true);\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false;\r\n        },\r\n        []\r\n    );\r\n\r\n    return scripted;\r\n};\r\n\r\nexport default useScriptRef;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeSnackbar } from 'store/actions';\r\n\r\nlet displayed = [];\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifier = useSelector((state) => state.notifier);\r\n    const { notifications } = notifier;\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id];\r\n    };\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter(key => id !== key)];\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey));\r\n                    removeDisplayed(myKey);\r\n                },\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\r\n};\r\n\r\nexport default useNotifier;","import { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Switch,\r\n    Fab,\r\n    FormControl,\r\n    Tooltip,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Stack,\r\n    IconButton,\r\n    Button,\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// icons\r\nimport { IconX, IconUpload } from '@tabler/icons';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport Editor from 'react-simple-code-editor';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button \r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type='button'\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n    {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string, \r\n    onClick: PropTypes.func, \r\n};\r\n\r\n// ==============================|| ARRAY INPUT PARAMETERS ||============================== //\r\n\r\nconst ArrayInputParameters = ({ \r\n    initialValues, \r\n    arrayParams,\r\n    paramsType,\r\n    arrayGroupName,\r\n    errors, \r\n    onArrayInputChange, \r\n    onArrayInputBlur, \r\n    onArrayItemRemove,\r\n    onArrayItemMouseUp,\r\n    onEditVariableDialogOpen,\r\n}) => {\r\n     \r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    const processUpdateValues = (inputValue, inputName, values, index) => {\r\n        const updateArrayValues = {\r\n            ...values,\r\n            [inputName]: inputValue\r\n        };\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues[index] = updateArrayValues;\r\n        return updateInitialValues;\r\n    };\r\n\r\n    const onInputChange = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputChange(updateInitialValues);\r\n    }\r\n\r\n    const onInputBlur = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputBlur(updateInitialValues);\r\n    }\r\n\r\n    const onRemoveClick = (index) => {\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues.splice(index, 1);\r\n        onArrayItemRemove(updateInitialValues);\r\n        onArrayItemMouseUp(false);\r\n    }\r\n\r\n    const onMouseUp = (e, inputName, valueIndex) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${arrayGroupName}[${valueIndex}].${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition, \r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        };\r\n        onArrayItemMouseUp(true, body);\r\n    }\r\n\r\n    const handleFolderUpload = (e, onInputChange, values, inputName, index) => {\r\n\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if( fileIndex >= files.length ) {\r\n                onInputChange(JSON.stringify(base64Array), inputName, values, index)\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload= (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex+1, lodash.cloneDeep(base64Array));\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    };\r\n\r\n    const handleFileUpload = (e, onInputChange, values, inputName, index) => {\r\n\r\n        if (!e.target.files) {\r\n          return;\r\n        }\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n    \r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n            const value = result + `,filename:${name}`;\r\n            onInputChange(value, inputName, values, index)\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    return (\r\n        <>\r\n            {arrayParams.map((_, index) => {\r\n                \r\n                const params = arrayParams[index] || [];\r\n                const values = initialValues[index] || {};\r\n\r\n                return (\r\n                    <Box \r\n                        sx={{\r\n                            p: 2, \r\n                            mb: 2, \r\n                            backgroundColor: theme.palette.secondary.light, \r\n                            borderRadius: `${customization.borderRadius}px`,\r\n                            position: 'relative'\r\n                        }}\r\n                        key={index}\r\n                    >\r\n                        {arrayParams.length > 1 && (\r\n                        <Fab \r\n                            sx={{ \r\n                                minHeight: 30, \r\n                                height: 30, width: 30, \r\n                                backgroundColor: theme.palette.secondary.light, \r\n                                color: theme.palette.secondary.main, \r\n                                position: 'absolute', \r\n                                right: -10, top: -10 \r\n                            }} \r\n                            size=\"small\" \r\n                            onClick={() => onRemoveClick(index)}\r\n                        >\r\n                            <IconX />\r\n                        </Fab>\r\n                        )}\r\n\r\n                    {params.map((input, paramIndex) => {\r\n\r\n                        if (input.type === 'file' || input.type === 'folder') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n\r\n                                {input.type === 'file' && \r\n                                <span \r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        color: theme.palette.grey['800'],\r\n                                        marginBottom: '1rem'\r\n                                    }}>\r\n                                    {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload' }\r\n                                </span>}\r\n\r\n                                {input.type === 'folder' && \r\n                                <span \r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        color: theme.palette.grey['800'],\r\n                                        marginBottom: '1rem'\r\n                                    }}>\r\n                                    {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload' }\r\n                                </span>}\r\n\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    component=\"label\"\r\n                                    fullWidth\r\n                                    startIcon={<IconUpload />}\r\n                                    sx={{ marginRight: \"1rem\" }}\r\n                                >\r\n                                    {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                    {input.type === 'file' && \r\n                                    <input\r\n                                        type=\"file\"\r\n                                        hidden\r\n                                        onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName, index)}\r\n                                    />}\r\n                                    {input.type === 'folder' && \r\n                                    <input\r\n                                        type=\"file\"\r\n                                        directory=\"\"\r\n                                        webkitdirectory=\"\"\r\n                                        hidden\r\n                                        onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName, index)}\r\n                                    />}\r\n                                </Button>\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'json' || input.type === 'code') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                    <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                        variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values, index)}>\r\n                                        Edit Variables\r\n                                    </Button>\r\n                                </Stack>\r\n                                <PerfectScrollbar \r\n                                    style={{ \r\n                                        border: '1px solid',\r\n                                        borderColor: theme.palette.grey['500'],\r\n                                        borderRadius: '12px', \r\n                                        height: '200px', \r\n                                        maxHeight: '200px', \r\n                                        overflowX: 'hidden',\r\n                                        backgroundColor: 'white'\r\n                                    }}\r\n                                    onScroll={e => e.stopPropagation()}\r\n                                    >\r\n                                    <Editor\r\n                                        placeholder={input.placeholder}\r\n                                        value={values[inputName] || ''}\r\n                                        onBlur={e => {\r\n                                            onInputBlur(e.target.value, inputName, values, index);\r\n                                            onMouseUp(e, inputName, index);\r\n                                        }}\r\n                                        onValueChange={code => onInputChange(code, inputName, values, index)}\r\n                                        onMouseUp={e => onMouseUp(e, inputName, index)}\r\n                                        highlight={code => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                        padding={10}\r\n                                        style={{\r\n                                            fontSize: '0.875rem',\r\n                                            minHeight: '200px',\r\n                                            width: '100%',\r\n                                        }}\r\n                                        textareaClassName=\"editor__textarea\"\r\n                                    />\r\n                                </PerfectScrollbar>\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'date') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <DatePicker \r\n                                    customInput={<DateCustomInput />}\r\n                                    selected={convertDateStringToDateObject(values[inputName]) || null} \r\n                                    showTimeSelect\r\n                                    isClearable\r\n                                    timeInputLabel=\"Time:\"\r\n                                    dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                    onChange={(date) => {\r\n                                        const inputValue = date ? date.toISOString() : null;\r\n                                        onInputChange(inputValue, inputName, values, index);\r\n                                        onArrayItemMouseUp(false);\r\n                                    }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                    {(input.type === 'string' || input.type === 'number') && (\r\n                                    <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                        variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values, index)}>\r\n                                        Edit Variables\r\n                                    </Button>\r\n                                    )}\r\n                                </Stack>\r\n                                <OutlinedInput\r\n                                    id={inputName}\r\n                                    type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                    value={values[inputName] || ''}\r\n                                    placeholder={input.placeholder}\r\n                                    name={inputName}\r\n                                    onBlur={(e) => {\r\n                                        const inputValue = e.target.value;\r\n                                        onInputBlur(inputValue, inputName, values, index);\r\n                                        onMouseUp(e, inputName, index);\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        const inputValue = e.target.value;\r\n                                        onInputChange(inputValue, inputName, values, index);\r\n                                    }}\r\n                                    onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'boolean') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Switch\r\n                                    checked={!!values[inputName]}\r\n                                    onChange={(event) => {\r\n                                        onInputChange(event.target.checked, inputName, values, index)\r\n                                    }}\r\n                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'options') {\r\n\r\n                            const inputName = input.name;\r\n                            const availableOptions = input.options || [];\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth\r\n                                sx={{ mb: 1, mt: 1 }}\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Autocomplete\r\n                                    id={inputName}\r\n                                    freeSolo\r\n                                    onOpen={() => onArrayItemMouseUp(false)}\r\n                                    options={availableOptions}\r\n                                    value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                    onChange={(e, selection) => {\r\n                                        const value = selection ? selection.name : \"\";\r\n                                        onInputBlur(value, inputName, values, index)\r\n                                    }}\r\n                                    PopperComponent={StyledPopper}\r\n                                    renderInput={(params) => (\r\n                                        <TextField \r\n                                            {...params}\r\n                                            value={values[inputName]}\r\n                                            error={errors && errors.length > 0 && errors[index] ?\r\n                                                Boolean(errors[index][inputName]) : false\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                    renderOption={(props, option) => (\r\n                                        <Box component=\"li\" {...props}>\r\n                                            <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                    {option.label} \r\n                                                </Typography>\r\n                                                {option.description &&\r\n                                                    <Typography sx={{p: 1}}>\r\n                                                        {option.description} \r\n                                                    </Typography>\r\n                                                }\r\n                                            </div>\r\n                                        </Box>\r\n                                    )}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n                        return null\r\n                    })}\r\n                    </Box>\r\n                )}\r\n            )} \r\n        </>\r\n    );\r\n};\r\n\r\nArrayInputParameters.propTypes = {\r\n    initialValues: PropTypes.array, \r\n    arrayParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    arrayGroupName: PropTypes.string,\r\n    errors: PropTypes.array, \r\n    onArrayInputChange: PropTypes.func, \r\n    onArrayInputBlur: PropTypes.func,\r\n    onArrayItemRemove: PropTypes.func,\r\n    onArrayItemMouseUp: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func, \r\n};\r\n\r\nexport default ArrayInputParameters;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\n\r\n// ==============================|| OPTION PARAMS RESPONSE ||============================== //\r\n\r\nconst OptionParamsResponse = ({\r\n    value,\r\n    options,\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const getSelectedValue = (value) => options.find((option) => option.name === value);\r\n\r\n    const getSelectedOptionInputParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.inputParameters || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getSelectedOptionExampleParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleParameters || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getSelectedOptionExampleResponse = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleResponse || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getSelectedValue(value) && getSelectedOptionInputParams(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Parameters\r\n                    </Typography>\r\n                    <div dangerouslySetInnerHTML={{ __html: getSelectedOptionInputParams(value) }} />\r\n                </Box>\r\n            )}\r\n            \r\n            {getSelectedValue(value) && getSelectedOptionExampleParams(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2, \r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Example Parameters\r\n                    </Typography>\r\n                    <ReactJson \r\n                        collapsed \r\n                        src={JSON.parse(getSelectedOptionExampleParams(value))}\r\n                        enableClipboard={e => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleResponse(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2, \r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Example Response\r\n                    </Typography>\r\n                    <ReactJson \r\n                        collapsed \r\n                        src={getSelectedOptionExampleResponse(value)}\r\n                        enableClipboard={e => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nOptionParamsResponse.propTypes = {\r\n    value: PropTypes.string,\r\n    options: PropTypes.array,\r\n};\r\n\r\nexport default OptionParamsResponse;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Stack, IconButton, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport AsyncSelect from 'react-select/async';\r\nimport axios from \"axios\";\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons';\r\n\r\n// Constant\r\nimport { baseURL } from 'store/constant';\r\n\r\n\r\n// ==============================|| ASYNC SELECT WRAPPER ||============================== //\r\n\r\nconst AsyncSelectWrapper = ({\r\n    title,\r\n    description,\r\n    value,\r\n    loadMethod,\r\n    loadFromDbCollections,\r\n    nodeFlowData,\r\n    error,\r\n    onChange,\r\n    onMenuOpen,\r\n    onSetError,\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const customStyles = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            paddingTop: 15,\r\n            paddingBottom: 15,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            cursor: 'pointer',\r\n            fontWeight: '500',\r\n            backgroundColor: state.isSelected ? theme.palette.primary.light : '',\r\n            color: 'black',\r\n            \"&:hover\": {\r\n                backgroundColor: theme.palette.grey['200']\r\n            },\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            cursor: 'text',\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 6,\r\n            paddingLeft: 6,\r\n            borderRadius: 12,\r\n            \"&:hover\": {\r\n                borderColor: theme.palette.grey['700']\r\n            },\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            fontWeight: '600',\r\n        }),\r\n        menuList: (provided) => ({\r\n            ...provided,\r\n            boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n            borderRadius: '10px',\r\n        }),\r\n    }\r\n    \r\n    const [asyncOptions, setAsyncOptions] = useState([]);\r\n\r\n    const getSelectedValue = (value) => asyncOptions.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n  \r\n    const formatErrorMessage = (error) => {\r\n        if (error) return `*${error.replace(/[\"]/g, \"\")}`;\r\n        return \"\"\r\n    }\r\n\r\n    const showHideOptions = (options) => {\r\n\r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n        const displayTypes = ['show', 'hide'];\r\n\r\n        for (let x = 0; x < displayTypes.length; x+= 1) {\r\n            const displayType = displayTypes[x];\r\n\r\n            for (let i = 0; i < returnOptions.length; i+= 1) {\r\n                const option = returnOptions[i];\r\n                const displayOptions = option[displayType];\r\n        \r\n                if (displayOptions) {\r\n                    Object.keys(displayOptions).forEach((path) => {\r\n                        const comparisonValue = displayOptions[path];\r\n\r\n                        if (path.includes(\"$index\")) {\r\n                            path = path.replace(\"$index\", index);\r\n                        }\r\n                        const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n                        if (Array.isArray(comparisonValue)) {\r\n                            if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        } else if (typeof comparisonValue === 'string') {\r\n                            if (displayType === 'show' && !((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && ((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i+= 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    }\r\n\r\n    const loadOptions = (inputValue, callback) => {\r\n        axios.post(\r\n            `${baseURL}/api/v1/node-load-method/${nodeFlowData.name}`,\r\n            {...nodeFlowData, loadMethod, loadFromDbCollections}\r\n        ).then((response) => {\r\n            const data = response.data;\r\n            const filteredOption = (data || []).filter((i) =>\r\n                i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n            );\r\n            const options = showHideOptions(filteredOption);\r\n            setAsyncOptions(options);\r\n            callback(options);\r\n        });\r\n    }\r\n\r\n    const formatOptionLabel = ({ label, description }, {context}) => (\r\n        <>\r\n        {context === 'menu' && <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>{label}</div>\r\n            {description && <span style={{ fontWeight: 400, paddingTop: 10, paddingBottom: 10 }}>{description}</span>}\r\n        </div>}\r\n        {context === 'value' && <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>{label}</div>\r\n        </div>}\r\n        </>\r\n    );\r\n\r\n    useEffect(() => () => setAsyncOptions([]), []);\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            const selectedOption = asyncOptions.find((option) => option.name === value)\r\n            if (!selectedOption) {\r\n                onSetError();\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [asyncOptions]); \r\n\r\n    return (\r\n        <>\r\n            <Stack direction=\"row\">\r\n                <Typography variant=\"overline\">{title}</Typography>\r\n                {description && (\r\n                <Tooltip title={description} placement=\"right\">\r\n                    <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                </Tooltip>\r\n                )}\r\n            </Stack>\r\n            <div style={{position: 'relative'}}>\r\n                <AsyncSelect\r\n                    key={JSON.stringify(nodeFlowData)} // to reload async select whenever flowdata changed\r\n                    styles={customStyles}\r\n                    value={getSelectedValue(value) || getDefaultOptionValue()}\r\n                    formatOptionLabel={formatOptionLabel}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionValue={(option) => option.name}\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onChange={onChange}\r\n                    onMenuOpen={onMenuOpen}\r\n                />\r\n                <button \r\n                    style={{ \r\n                        minHeight: 10, \r\n                        height: 27, width: 30, \r\n                        backgroundColor: '#FAFAFA',\r\n                        color: theme.palette.grey['500'], \r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        margin: 'auto',\r\n                        border: 'none',\r\n                        cursor: 'pointer'                        \r\n                    }} \r\n                    title=\"Clear Selection\"\r\n                    type='button'\r\n                    onClick={() => onChange(null)}\r\n                >\r\n                    <IconX />\r\n                </button>\r\n            </div> \r\n            {error && (\r\n                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>{formatErrorMessage(error)}</span>\r\n            )}\r\n\r\n            <OptionParamsResponse value={value} options={asyncOptions} />\r\n        </>\r\n    );\r\n}\r\n\r\nAsyncSelectWrapper.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    value: PropTypes.string,\r\n    loadMethod: PropTypes.string,\r\n    loadFromDbCollections: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    error: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onMenuOpen: PropTypes.func,\r\n    onSetError: PropTypes.func,\r\n};\r\n\r\nexport default AsyncSelectWrapper;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    Stack,\r\n    FormControl,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Switch,\r\n    IconButton,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// project imports\r\nimport useScriptRef from 'hooks/useScriptRef';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport ArrayInputParameters from './ArrayInputParameters';\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\nimport AsyncSelectWrapper from './AsyncSelectWrapper';\r\n\r\n// icons\r\nimport { IconPlus, IconUpload } from '@tabler/icons';\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button \r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type='button'\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n    {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string, \r\n    onClick: PropTypes.func, \r\n};\r\n\r\n// ==============================|| INPUT PARAMETERS ||============================== //\r\n\r\nconst InputParameters = ({ \r\n    params, \r\n    paramsType, \r\n    initialValues, \r\n    nodeParamsValidation, \r\n    nodeFlowData,\r\n    valueChanged, \r\n    onSubmit,\r\n    setVariableSelectorState,\r\n    onEditVariableDialogOpen,\r\n    ...others \r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    const scriptedRef = useScriptRef();\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const onMouseUp = (e, inputName) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition, \r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType,\r\n        }\r\n        setVariableSelectorState(true, body);\r\n    }\r\n\r\n    const onAddArrayItem = (values, arrayItems, arrayName) => {\r\n        const updateValues = {\r\n            ...values,\r\n            [arrayName]: arrayItems\r\n        }\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const handleFolderUpload = (e, setFieldValue, values, inputName) => {\r\n\r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if( fileIndex >= files.length ) {\r\n                setFieldValue(inputName, JSON.stringify(base64Array));\r\n                const overwriteValues = {\r\n                    ...values,\r\n                    [inputName]: JSON.stringify(base64Array)\r\n                };\r\n                onChanged(overwriteValues);\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload= (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex+1, lodash.cloneDeep(base64Array));\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    }\r\n\r\n    const handleFileUpload = (e, setFieldValue, values, inputName) => {\r\n        \r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n    \r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n\r\n            const value = result + `,filename:${name}`;\r\n            setFieldValue(inputName, value);\r\n            const overwriteValues = {\r\n                ...values,\r\n                [inputName]: value\r\n            };\r\n            onChanged(overwriteValues);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={initialValues}\r\n                validationSchema={Yup.object().shape(nodeParamsValidation)}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    setVariableSelectorState(false);\r\n                    try {\r\n                        if (scriptedRef.current) {\r\n                            values.submit = true;\r\n                            setStatus({ success: true });\r\n                            setSubmitting(false);\r\n                            onSubmit(values, paramsType);\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n                        {params.map((input) => {\r\n\r\n                            if (input.type === 'file' || input.type === 'folder') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    \r\n                                    {input.type === 'file' && \r\n                                    <span \r\n                                        style={{\r\n                                            fontWeight: 'bold',\r\n                                            color: theme.palette.grey['800'],\r\n                                            marginBottom: '1rem'\r\n                                        }}>\r\n                                        {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload' }\r\n                                    </span>}\r\n\r\n                                    {input.type === 'folder' && \r\n                                    <span \r\n                                        style={{\r\n                                            fontWeight: 'bold',\r\n                                            color: theme.palette.grey['800'],\r\n                                            marginBottom: '1rem'\r\n                                        }}>\r\n                                        {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload' }\r\n                                    </span>}\r\n\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        component=\"label\"\r\n                                        fullWidth\r\n                                        startIcon={<IconUpload />}\r\n                                        sx={{ marginRight: \"1rem\" }}\r\n                                    >\r\n                                        {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                        {input.type === 'file' && \r\n                                        <input\r\n                                            type=\"file\"\r\n                                            hidden\r\n                                            onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName)}\r\n                                        />}\r\n                                        {input.type === 'folder' && \r\n                                        <input\r\n                                            type=\"file\"\r\n                                            directory=\"\"\r\n                                            webkitdirectory=\"\"\r\n                                            hidden\r\n                                            onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName)}\r\n                                        />}\r\n                                    </Button>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'json' || input.type === 'code') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                        <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                            variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values)}>\r\n                                            Edit Variables\r\n                                        </Button>\r\n                                    </Stack>\r\n                                    <PerfectScrollbar \r\n                                        style={{ \r\n                                            border: '1px solid',\r\n                                            borderColor: theme.palette.grey['500'],\r\n                                            borderRadius: '12px', \r\n                                            height: '200px', \r\n                                            maxHeight: '200px', \r\n                                            overflowX: 'hidden',\r\n                                            backgroundColor: 'white'\r\n                                        }}\r\n                                        onScroll={e => e.stopPropagation()}\r\n                                        >\r\n                                        <Editor\r\n                                            placeholder={input.placeholder}\r\n                                            value={values[inputName] || ''}\r\n                                            onBlur={e => {\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: e.target.value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                                onMouseUp(e, inputName);\r\n                                            }}\r\n                                            onValueChange={code => {\r\n                                                setFieldValue(inputName, code);\r\n                                            }}\r\n                                            onMouseUp={e => onMouseUp(e, inputName)}\r\n                                            highlight={code => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                            padding={10}\r\n                                            style={{\r\n                                                fontSize: '0.875rem',\r\n                                                minHeight: '200px',\r\n                                                width: '100%',\r\n                                            }}\r\n                                            textareaClassName=\"editor__textarea\"\r\n                                        />\r\n                                    </PerfectScrollbar>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'date') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <DatePicker \r\n                                        customInput={<DateCustomInput />}\r\n                                        selected={convertDateStringToDateObject(values[inputName]) || null} \r\n                                        showTimeSelect\r\n                                        isClearable\r\n                                        timeInputLabel=\"Time:\"\r\n                                        dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                        onChange={(date) => {\r\n                                            const value = date ? date.toISOString() : null;\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                           \r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                        {(input.type === 'string' || input.type === 'number') && (\r\n                                        <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                            variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values)}>\r\n                                            Edit Variables\r\n                                        </Button>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <OutlinedInput\r\n                                        id={inputName}\r\n                                        type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                        placeholder={input.placeholder}\r\n                                        multiline={!!input.rows}\r\n                                        maxRows={input.rows || 0}\r\n                                        minRows={input.rows || 0}\r\n                                        value={values[inputName] || ''}\r\n                                        name={inputName}\r\n                                        onBlur={e => {\r\n                                            handleBlur(e);\r\n                                            onChanged(values);\r\n                                            onMouseUp(e, inputName);\r\n                                        }}\r\n                                        onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Switch\r\n                                        checked={!!values[inputName]}\r\n                                        onChange={(event) => {\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, event.target.checked);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: event.target.checked\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'asyncOptions') {\r\n                                const inputName = input.name;\r\n                                return (\r\n                                    <FormControl \r\n                                        key={inputName}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                    >\r\n                                        <AsyncSelectWrapper \r\n                                            title={input.label}\r\n                                            description={input.description}\r\n                                            value={values[inputName]}\r\n                                            loadMethod={input.loadMethod}\r\n                                            loadFromDbCollections={input.loadFromDbCollections || []}\r\n                                            nodeFlowData={nodeFlowData}\r\n                                            error={JSON.stringify(errors[inputName])}\r\n                                            onChange={(selection) => {\r\n                                                const value = selection ? selection.name : \"\";\r\n                                                setFieldValue(inputName, value);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onMenuOpen={() => setVariableSelectorState(false)}\r\n                                            onSetError={() => {\r\n                                                const value = \"\";\r\n                                                setFieldValue(inputName, value);\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n                                const inputName = input.name;\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        onOpen={() => setVariableSelectorState(false)}\r\n                                        options={input.options || []}\r\n                                        value={findMatchingOptions(input.options, values[inputName]) || getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        onInputChange={(e, value) => {\r\n                                            if (!value) setFieldValue(inputName, \"\");\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                    <OptionParamsResponse value={values[inputName]} options={input.options || []} />\r\n                                </FormControl>)\r\n                            }\r\n                            \r\n                            if (input.type === 'array') {\r\n\r\n                                const arrayParamItems = input.arrayParams;\r\n                                const templateArray = input.array;\r\n                                const inputName = input.name;\r\n                                const arrayItemsValues = values[inputName] || [];\r\n\r\n                                return (\r\n                                    <Stack sx={{mt: 1}} key={inputName}>\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                            <Tooltip title={input.description} placement=\"right\">\r\n                                                <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                            </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <ArrayInputParameters \r\n                                            initialValues={arrayItemsValues}\r\n                                            arrayParams={arrayParamItems}\r\n                                            paramsType={paramsType}\r\n                                            arrayGroupName={inputName}\r\n                                            errors={errors[inputName] ? errors[inputName] : []} \r\n                                            onArrayInputChange={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                            }}\r\n                                            onArrayInputBlur={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: updateInitialValues\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onArrayItemRemove={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: updateInitialValues\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onArrayItemMouseUp={(variableState, body) => {\r\n                                                if (body) setVariableSelectorState(variableState, body);\r\n                                                else setVariableSelectorState(variableState);\r\n                                            }}\r\n                                            onEditVariableDialogOpen={(arrayItemInput, arrayItemValues, arrayItemIndex) => {\r\n                                                const arrayItemBody = {\r\n                                                    arrayItemInput,\r\n                                                    arrayItemValues,\r\n                                                    arrayItemIndex,\r\n                                                    initialValues: arrayItemsValues\r\n                                                }\r\n                                                onEditVariableDialogOpen(input, values, arrayItemBody);\r\n                                            }}\r\n                                        />\r\n                                        <Box key={inputName} sx={{ mb: 2 }}>\r\n                                            <AnimateButton>\r\n                                                <Button\r\n                                                    disableElevation\r\n                                                    fullWidth\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"secondary\"\r\n                                                    startIcon={<IconPlus />}\r\n                                                    onClick={() => {\r\n                                                        setVariableSelectorState(false);\r\n                                                        let newObj = {};\r\n                                                        if (input.default && input.default.length) {\r\n                                                            newObj = input.default[0];\r\n                                                        } else {\r\n                                                            for (let i = 0; i < templateArray.length; i+= 1) {\r\n                                                                newObj[templateArray[i].name] = templateArray[i].default || '';\r\n                                                            }\r\n                                                        }\r\n                                                        arrayItemsValues.push(newObj);\r\n                                                        onAddArrayItem(values, arrayItemsValues, inputName);\r\n                                                    }}\r\n                                                >\r\n                                                    Add {input.label}\r\n                                                </Button>\r\n                                            </AnimateButton>\r\n                                        </Box>\r\n                                    </Stack>\r\n                                )\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    Continue\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nInputParameters.propTypes = {\r\n    params: PropTypes.array, \r\n    paramsType: PropTypes.string, \r\n    initialValues: PropTypes.object,\r\n    nodeParamsValidation: PropTypes.object, \r\n    nodeFlowData: PropTypes.object,\r\n    valueChanged: PropTypes.func, \r\n    onSubmit: PropTypes.func, \r\n    setVariableSelectorState: PropTypes.func, \r\n    onEditVariableDialogOpen: PropTypes.func, \r\n};\r\n\r\nexport default InputParameters;\r\n","import client from \"./client\";\r\n\r\nconst getCredentials = (nodeCredentialName) => client.get(\"/credentials\", { params: { nodeCredentialName } });\r\n\r\nconst getCredentialParams = (name) => client.get(`/node-credentials/${name}`);\r\n\r\nconst getSpecificCredential = (id, isEncrypted) => client.get(`/credentials/${id}`, { params: { isEncrypted } });\r\n\r\nconst createNewCredential = (credentialBody) => client.post(`/credentials`, credentialBody); //credentialBody: ICredential \r\n\r\nconst updateCredential = (id, credentialBody) => client.put(`/credentials/${id}`, credentialBody); //credentialBody: ICredential\r\n\r\nconst deleteCredential = (id) => client.delete(`/credentials/${id}`);\r\n\r\nexport default {\r\n    getCredentials,\r\n    getCredentialParams,\r\n    getSpecificCredential,\r\n    createNewCredential,\r\n    updateCredential,\r\n    deleteCredential,\r\n};\r\n","import client from \"./client\";\r\n\r\nconst geOAuth2PopupURL = (credentialId) => client.get(\"/oauth2\", { params: { credentialId } });\r\nconst geOAuth2RedirectURL = () => client.get(\"/oauth2-redirecturl\");\r\n\r\nexport default {\r\n    geOAuth2PopupURL,\r\n    geOAuth2RedirectURL,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    Stack,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    IconButton,\r\n    Switch,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// API\r\nimport credentialApi from \"api/credential\";\r\nimport oauth2Api from \"api/oauth2\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\nimport useScriptRef from 'hooks/useScriptRef';\r\n\r\n// icons\r\nimport { IconTrash, IconCopy } from '@tabler/icons';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\nconst ADD_NEW_CREDENTIAL = '+ Add New Credential';\r\n\r\n// ==============================|| CREDENTIAL INPUT ||============================== //\r\n\r\nconst CredentialInput = ({ \r\n    initialParams,\r\n    paramsType,\r\n    initialValues, \r\n    initialValidation, \r\n    valueChanged, \r\n    paramsChanged,\r\n    onSubmit,\r\n    ...others \r\n}) => {\r\n    const scriptedRef = useScriptRef();\r\n    const theme = useTheme();\r\n\r\n    const [credentialValidation, setCredentialValidation] = useState({});\r\n    const [credentialValues, setCredentialValues] = useState({});\r\n    const [nodeCredentialName, setNodeCredentialName] = useState('');\r\n    const [credentialParams, setCredentialParams] = useState([]);\r\n    const [credentialOptions, setCredentialOptions] = useState([]);\r\n    const [oAuth2RedirectURL, setOAuth2RedirectURL] = useState('');\r\n\r\n    const getCredentialParamsApi = useApi(credentialApi.getCredentialParams);\r\n    const getRegisteredCredentialsApi = useApi(credentialApi.getCredentials);\r\n    const getSpecificCredentialApi = useApi(credentialApi.getSpecificCredential);\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const getCredentialRequestBody = (values) => {\r\n        if (credentialParams.length === 0) throw new Error('Credential params empty');\r\n        \r\n        const credentialData = {};\r\n        for (let i = 0; i < credentialParams.length; i+=1 ) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in values) credentialData[credParamName] = values[credParamName];\r\n        }\r\n        delete credentialData.name;\r\n\r\n        const credBody = {\r\n            name: values.name,\r\n            nodeCredentialName: values.credentialMethod,\r\n            credentialData\r\n        };\r\n\r\n        return credBody;\r\n    }\r\n\r\n    const updateYupValidation = (inputName, validationKey) => {\r\n        const updateValidation = {\r\n            ...credentialValidation,\r\n            [inputName]: Yup.object({[validationKey]: Yup.string().required(`${inputName} is required`) })\r\n        };\r\n        setCredentialValidation(updateValidation);\r\n    };\r\n\r\n    const clearCredentialParams = () => {\r\n        const updateParams = initialParams.filter(item => credentialParams.every(paramItem => item.name !== paramItem.name));\r\n        setCredentialParams([]);\r\n        setOAuth2RedirectURL('');\r\n\r\n        paramsChanged(updateParams, paramsType);\r\n    }\r\n\r\n    const clearCredentialParamsValues = (value) => {\r\n        let updateValues = JSON.parse(JSON.stringify(credentialValues));\r\n        \r\n        for (let i = 0; i < credentialParams.length; i+=1 ) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in updateValues) delete updateValues[credParamName];\r\n        }\r\n        updateValues = {\r\n            ...updateValues,\r\n            registeredCredential: value\r\n        };\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n    \r\n    const onDeleteCredential = async(credentialId) => {\r\n        const response = await credentialApi.deleteCredential(credentialId);\r\n        if (response.data) {\r\n            clearCredentialParams();\r\n            clearCredentialParamsValues('');\r\n        }\r\n    }\r\n\r\n    const openOAuth2PopUpWindow = (oAuth2PopupURL) => {\r\n        const windowWidth = 500;\r\n        const windowHeight = 400;\r\n        const left = window.screenX + (window.outerWidth - windowWidth) / 2;\r\n        const top = window.screenY + (window.outerHeight - windowHeight) / 2.5;\r\n        const title = `Connect Credential`;\r\n        const url = oAuth2PopupURL;\r\n        const popup = window.open(url, title, `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`);\r\n        return popup;\r\n    }\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    // getRegisteredCredentialsApi successful\r\n    useEffect(() => {\r\n        if (getRegisteredCredentialsApi.data) {\r\n            const credentialOptions = [];\r\n            if (getRegisteredCredentialsApi.data.length) {\r\n                for (let i = 0; i < getRegisteredCredentialsApi.data.length; i+=1 ) {\r\n                    credentialOptions.push({\r\n                        _id: getRegisteredCredentialsApi.data[i]._id,\r\n                        name: getRegisteredCredentialsApi.data[i].name,\r\n                    });\r\n                }\r\n            }\r\n            credentialOptions.push({\r\n                name: ADD_NEW_CREDENTIAL\r\n            });\r\n            setCredentialOptions(credentialOptions);\r\n            if (initialParams.find((prm) => prm.name === 'registeredCredential')) {\r\n                updateYupValidation('registeredCredential', 'name');\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getRegisteredCredentialsApi.data]);\r\n\r\n\r\n    // getCredentialParamsApi successful\r\n    useEffect(() => {\r\n        if (getCredentialParamsApi.data) {\r\n\r\n            const newCredentialParams = getCredentialParamsApi.data.credentials;\r\n\r\n            const credentialNameParam = {\r\n\t\t\t\tlabel: 'Credential Name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '',\r\n            };\r\n\r\n            newCredentialParams.unshift(credentialNameParam);\r\n\r\n            setCredentialParams(newCredentialParams);\r\n\r\n            const updateParams = initialParams;\r\n\r\n            for (let i = 0; i < newCredentialParams.length; i+=1 ) {\r\n                const credParamName = newCredentialParams[i].name;\r\n                if (initialParams.find((prm) => prm.name === credParamName) === undefined) {\r\n                    updateParams.push(newCredentialParams[i]);\r\n                }\r\n            }\r\n            paramsChanged(updateParams, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getCredentialParamsApi.data]);\r\n\r\n\r\n    // getSpecificCredentialApi successful\r\n    useEffect(() => {\r\n        if (getSpecificCredentialApi.data) {\r\n            const updateValues = {\r\n                ...credentialValues,\r\n                ...getSpecificCredentialApi.data.credentialData,\r\n                name: getSpecificCredentialApi.data.name,\r\n            };\r\n            valueChanged(updateValues, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificCredentialApi.data]);\r\n\r\n\r\n    // Initialize values\r\n    useEffect(() => {\r\n        setCredentialValues(initialValues);\r\n        if (initialValues && initialValues.credentialMethod) {\r\n            getRegisteredCredentialsApi.request(initialValues.credentialMethod);\r\n            setNodeCredentialName(initialValues.credentialMethod);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [initialValues]);\r\n\r\n\r\n    // Initialize validation\r\n    useEffect(() => {\r\n        setCredentialValidation(initialValidation);\r\n    \r\n    }, [initialValidation]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={credentialValues}\r\n                validationSchema={Yup.object().shape(credentialValidation)}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    try {\r\n                        if (scriptedRef.current) {\r\n                            const isAddNewCredential = values && values.registeredCredential && values.registeredCredential.name === ADD_NEW_CREDENTIAL;\r\n                          \r\n                            if (!isAddNewCredential && (credentialParams.length === 0 || !values.credentialMethod)) {\r\n                                onSubmit(values.credentialMethod ? {...values, submit: true} : {submit: true}, paramsType);\r\n                                setStatus({ success: true });\r\n                                setSubmitting(false);\r\n                            \r\n                            } else {\r\n                                const body = getCredentialRequestBody(values);\r\n                                let response;\r\n                                if (isAddNewCredential) {\r\n                                    response = await credentialApi.createNewCredential(body);\r\n                                } else {\r\n                                    response = await credentialApi.updateCredential(values.registeredCredential._id, body);\r\n                                }\r\n                                if (response.data) {\r\n\r\n                                    // Open oAuth2 window\r\n                                    if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                        const oAuth2PopupURL = await oauth2Api.geOAuth2PopupURL(response.data._id);\r\n                                        const popUpWindow = openOAuth2PopUpWindow(oAuth2PopupURL.data);\r\n\r\n                                        const oAuth2Completed = async(event) => {\r\n                                            if (event.data === 'success') {\r\n                                                window.removeEventListener('message', oAuth2Completed, false);\r\n\r\n                                                const submitValues = {\r\n                                                    credentialMethod: values.credentialMethod,\r\n                                                    registeredCredential: {\r\n                                                        _id: response.data._id,\r\n                                                        name: response.data.name,\r\n                                                    },\r\n                                                    submit: true\r\n                                                }\r\n                                                clearCredentialParams();\r\n                                                onSubmit(submitValues, paramsType);\r\n                                                setStatus({ success: true });\r\n                                                setSubmitting(false);\r\n\r\n                                                if (popUpWindow) {\r\n                                                    popUpWindow.close();\r\n                                                }\r\n                                            }\r\n                                        };\r\n                                        window.addEventListener('message', oAuth2Completed, false);\r\n                                        return;\r\n                                    }\r\n\r\n                                    const submitValues = {\r\n                                        credentialMethod: values.credentialMethod,\r\n                                        registeredCredential: {\r\n                                            _id: response.data._id,\r\n                                            name: response.data.name,\r\n                                        },\r\n                                        submit: true\r\n                                    }\r\n                                    clearCredentialParams();\r\n                                    onSubmit(submitValues, paramsType);\r\n                                    setStatus({ success: true });\r\n                                    setSubmitting(false);\r\n                                } else {\r\n                                    throw new Error(response);\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n\r\n                        {initialParams.map((input) => {\r\n\r\n                            if (input.type === 'options') {\r\n\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        options={availableOptions}\r\n                                        value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                            clearCredentialParams();\r\n                                            if (selection) {\r\n                                                getRegisteredCredentialsApi.request(value);\r\n                                                setNodeCredentialName(value);\r\n                                            } else {\r\n                                                setCredentialOptions([]);\r\n                                            }\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        {initialParams.find((prm) => prm.name === 'registeredCredential') && (\r\n                        <FormControl \r\n                            fullWidth\r\n                            sx={{ mb: 1, mt: 1 }}\r\n                        >\r\n                            <Stack direction=\"row\">\r\n                                <Typography variant=\"overline\">Registered Credential</Typography>\r\n                                <Tooltip title=\"Select previously registered credential OR add new credential\" placement=\"right\">\r\n                                    <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                </Tooltip>\r\n                            </Stack>\r\n                            <Autocomplete\r\n                                id=\"registered-credential\"\r\n                                freeSolo\r\n                                options={credentialOptions}\r\n                                value={values.registeredCredential && values.credentialMethod ? values.registeredCredential : \" \"}\r\n                                getOptionLabel={(option) => option.name || \" \"}\r\n                                onChange={async(e, selectedCredential) => {\r\n                                    setFieldValue('registeredCredential', selectedCredential !== null ? selectedCredential : initialValues.registeredCredential);\r\n                                    const overwriteValues = {\r\n                                        ...values,\r\n                                        registeredCredential: selectedCredential\r\n                                    };\r\n                                    onChanged(overwriteValues);\r\n                                    if (selectedCredential) {\r\n                                        if (selectedCredential.name !== ADD_NEW_CREDENTIAL) {\r\n                                            getSpecificCredentialApi.request(selectedCredential._id);\r\n                                        } else {\r\n                                            clearCredentialParamsValues(selectedCredential);\r\n                                        }\r\n                                        getCredentialParamsApi.request(nodeCredentialName);\r\n                                        if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                            const redirectURLResp = await oauth2Api.geOAuth2RedirectURL();\r\n                                            if (redirectURLResp.data) setOAuth2RedirectURL(redirectURLResp.data);\r\n                                        }\r\n                                    }\r\n                                }}\r\n                                onInputChange={(e, value) => {\r\n                                    if (!value) {\r\n                                        clearCredentialParams();\r\n                                        clearCredentialParamsValues('');\r\n                                    }\r\n                                }}\r\n                                onBlur={handleBlur}\r\n                                PopperComponent={StyledPopper}\r\n                                renderInput={(params) => (\r\n                                    <TextField \r\n                                        {...params}\r\n                                        value={values.registeredCredential}\r\n                                        error={Boolean(errors.registeredCredential)}\r\n                                    />\r\n                                )}\r\n                                renderOption={(props, option) => (\r\n                                    <Box component=\"li\" {...props}>\r\n                                        <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                            <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                {option.name} \r\n                                            </Typography>\r\n                                        </div>\r\n                                    </Box>\r\n                                )}\r\n                            />\r\n                            {errors.registeredCredential && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*Registered Credential is required</span>}\r\n                        </FormControl>\r\n                        )}\r\n\r\n                        {values && values.registeredCredential && values.registeredCredential._id && (\r\n                        <Button sx={{ mb: 2 }} size=\"small\" variant=\"outlined\" startIcon={<IconTrash size={15} />} onClick={() => onDeleteCredential(values.registeredCredential._id)}>\r\n                            Delete Credential\r\n                        </Button>)}\r\n\r\n                        {oAuth2RedirectURL &&\r\n                        <div>\r\n                            <Typography variant=\"overline\">OAuth2 Redirect URL</Typography>\r\n                            <Stack direction=\"row\">\r\n                                <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{oAuth2RedirectURL}</Typography>\r\n                                <IconButton title=\"Copy URL\" color=\"primary\" onClick={() => navigator.clipboard.writeText(oAuth2RedirectURL)}>\r\n                                    <IconCopy />\r\n                                </IconButton>\r\n                            </Stack>\r\n                        </div>}\r\n\r\n                        {values.credentialMethod && credentialParams.map((input) => {\r\n\r\n                            if (input.type === 'json') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <PerfectScrollbar \r\n                                        style={{ \r\n                                            border: '1px solid',\r\n                                            borderColor: theme.palette.grey['500'],\r\n                                            borderRadius: '12px', \r\n                                            height: '200px', \r\n                                            maxHeight: '200px', \r\n                                            overflowX: 'hidden',\r\n                                            backgroundColor: 'white'\r\n                                        }}\r\n                                        onScroll={e => e.stopPropagation()}\r\n                                        >\r\n                                        <Editor\r\n                                            placeholder={input.placeholder}\r\n                                            value={values[inputName] || ''}\r\n                                            onBlur={e => {\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: e.target.value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onValueChange={code => {\r\n                                                setFieldValue(inputName, code);\r\n                                            }}\r\n                                            highlight={code => highlight(code, languages.json)}\r\n                                            padding={10}\r\n                                            style={{\r\n                                                fontSize: '0.875rem',\r\n                                                minHeight: '200px',\r\n                                                width: '100%',\r\n                                            }}\r\n                                            textareaClassName=\"editor__textarea\"\r\n                                        />\r\n                                    </PerfectScrollbar>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <OutlinedInput\r\n                                        id={inputName}\r\n                                        type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                        value={values[inputName] || ''}\r\n                                        placeholder={input.placeholder}\r\n                                        name={inputName}\r\n                                        onBlur={e => {\r\n                                            handleBlur(e);\r\n                                            onChanged(values);\r\n                                        }}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Switch\r\n                                        checked={!!values[inputName]}\r\n                                        onChange={(event) => {\r\n                                            setFieldValue(inputName, event.target.checked);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: event.target.checked\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        options={availableOptions}\r\n                                        value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    {values && values.registeredCredential && \r\n                                    (values.registeredCredential.name === ADD_NEW_CREDENTIAL || credentialParams.length) ? \r\n                                    'Save and Continue' : 'Continue'}\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nCredentialInput.propTypes = {\r\n    initialParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object, \r\n    initialValidation: PropTypes.object, \r\n    valueChanged: PropTypes.func, \r\n    paramsChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default CredentialInput;\r\n"],"sourceRoot":""}