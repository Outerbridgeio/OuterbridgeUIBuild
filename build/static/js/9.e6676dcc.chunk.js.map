{"version":3,"sources":["utils/genericHelper.js","ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","ui-component/TooltipWithParser.js","ui-component/extended/AnimateButton.js","ui-component/dialog/ExpandDataDialog.js","hooks/useScriptRef.js","utils/useNotifier.js","ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","ui-component/dialog/EditVariableDialog.js","views/inputs/ArrayInputParameters.js","views/inputs/OptionParamsResponse.js","views/inputs/AsyncSelectWrapper.js","views/inputs/InputParameters.js","api/credential.js","api/oauth2.js","views/inputs/CredentialInput.js","api/contracts.js","views/contracts/ContractDialog.js","assets/images/contract_empty.svg","views/contracts/index.js"],"names":["numberOrExpressionRegex","getAvailableNodeIdsForVariable","nodes","edges","targetNodeId","reverse","graph","nodeDependencies","i","length","nodeId","id","source","target","Object","prototype","hasOwnProperty","call","push","constructNodeDirectedGraph","exploreNodes","nodeQueue","exploredNodes","shift","parentNodeIds","inputEdges","filter","edg","targetHandle","includes","j","neighbourNodeIds","neighNodeId","getAllConnectedNodesFromTarget","setPath","Set","delete","generateWebhookEndpoint","characters","Array","from","map","charAt","Math","floor","random","join","getUniqueNodeId","nodeData","totalSameNodes","data","name","checkIfNodeLabelUnique","nodeLabel","label","initializeNodeData","nodeParams","initialValues","input","default","type","newObj","array","submit","addAnchors","newNodeId","incoming","outgoing","inputAnchors","newInput","outputAnchors","newOutput","getUniqueNodeLabel","actions","credentials","networks","inputParameters","getEdgeLabelName","sourceSplit","split","checkMultipleTriggers","node","convertDateStringToDateObject","dateString","undefined","date","moment","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","splitDataURI","getFolderName","base64ArrayStr","base64Array","JSON","parse","filenames","filename","e","generateExportFlowData","flowData","selected","newNodeData","wallet","credentialMethod","isHideRegisteredCredential","params","paramsType","nodeFlowData","clonedParams","selectedCredentialMethodOption","options","find","opt","hideRegisteredCredential","handleCredentialParams","reorganizedParams","nPrm","lodash","cloneDeep","prm","copyToClipboard","src","isArray","navigator","clipboard","writeText","stringify","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","setData","error","setError","loading","setLoading","request","result","TooltipWithParser","parser","placement","style","height","width","AnimateButton","offset1","offset2","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","ExpandDataDialog","show","dialogProps","onCancel","onCopyClick","enableClipboard","portalElement","document","getElementById","component","open","fullWidth","maxWidth","onClose","fontSize","createPortal","useScriptRef","scripted","useRef","useEffect","current","displayed","useNotifier","dispatch","useDispatch","notifications","useSelector","state","notifier","useSnackbar","enqueueSnackbar","closeSnackbar","React","forEach","key","message","dismissed","event","reason","myKey","onExited","removeSnackbar","WorkflowCard","Card","CardContent","Grid","container","item","justifyContent","Skeleton","my","CardWrapper","styled","backgroundColor","color","darkTextPrimary","overflow","position","cursor","ItemCard","isLoading","images","onClick","chipSX","padding","activeWorkflowSX","success","dark","light","getNetworkItem","network","ntw","Box","p","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontWeight","mt","mb","flexGrow","whiteSpace","textOverflow","substring","slice","executionCount","deployed","Chip","marginTop","img","objectFit","alt","EditVariableDialog","onConfirm","inputValue","setInputValue","setInput","expanded","setExpanded","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","copiedVariableBody","setCopiedVariableBody","languages","js","languageType","setLanguageType","onMouseUp","selectionEnd","value","cursorPosition","textBeforeCursorPosition","textAfterCursorPosition","onClipboardCopy","namespaces","namespace","returnVariablePath","test","endsWith","values","inputValues","arrayItemBody","arrayItemValues","arrayItemInput","toString","json","flex","ml","grey","maxHeight","overflowX","onValueChange","code","placeholder","highlight","onBlur","minHeight","textareaClassName","hideVariables","availableNodesForVariable","marginLeft","pl","pr","py","breakpoints","down","top","index","onChange","isExpanded","expandIcon","collapsed","outputResponses","output","size","right","dialogProp","onExpandDialogClicked","cancelButtonName","updateArrayValues","updateInitialValues","arrayItemIndex","updateValues","onSave","confirmButtonName","StyledPopper","Popper","autocompleteClasses","listbox","boxSizing","margin","DateCustomInput","paddingTop","paddingBottom","paddingRight","paddingLeft","textAlign","opacity","ArrayInputParameters","arrayParams","arrayGroupName","errors","onArrayInputChange","onArrayInputBlur","onArrayItemRemove","onArrayItemMouseUp","onEditVariableDialogOpen","customization","processUpdateValues","inputName","onInputChange","onInputBlur","valueIndex","path","_","Fab","main","splice","onRemoveClick","paramIndex","FormControl","Boolean","Stack","description","marginBottom","Button","startIcon","hidden","files","file","reader","FileReader","onload","evt","readAsDataURL","handleFileUpload","directory","webkitdirectory","readFile","fileIndex","webkitRelativePath","handleFolderUpload","onScroll","stopPropagation","customInput","showTimeSelect","isClearable","timeInputLabel","dateFormat","toISOString","OutlinedInput","Switch","checked","inputProps","availableOptions","Autocomplete","freeSolo","onOpen","option","selection","PopperComponent","renderInput","TextField","renderOption","props","OptionParamsResponse","getSelectedValue","getSelectedOptionInputParams","selectedOption","getSelectedOptionExampleParams","exampleParameters","getSelectedOptionExampleResponse","exampleResponse","dangerouslySetInnerHTML","__html","AsyncSelectWrapper","loadMethod","loadFromDbCollections","onMenuOpen","onSetError","customStyles","provided","isSelected","control","singleValue","menuList","asyncOptions","setAsyncOptions","styles","formatOptionLabel","context","getOptionLabel","getOptionValue","loadOptions","callback","post","then","response","returnOptions","toBeDeleteOptions","displayTypes","displayType","displayOptions","keys","comparisonValue","groundValue","get","RegExp","showHideOptions","toLowerCase","defaultOptions","bottom","fontStyle","replace","formatErrorMessage","InputParameters","nodeParamsValidation","valueChanged","onSubmit","setVariableSelectorState","scriptedRef","onChanged","findMatchingOptions","enableReinitialize","validationSchema","Yup","shape","setErrors","setStatus","setSubmitting","err","console","handleBlur","handleChange","handleSubmit","setFieldValue","isSubmitting","noValidate","overwriteValues","multiline","rows","maxRows","minRows","arrayParamItems","templateArray","arrayItemsValues","variableState","body","disableElevation","arrayItems","arrayName","onAddArrayItem","disabled","nodeCredentialName","client","isEncrypted","credentialBody","put","credentialId","ADD_NEW_CREDENTIAL","CredentialInput","initialParams","initialValidation","paramsChanged","credentialValidation","setCredentialValidation","credentialValues","setCredentialValues","setNodeCredentialName","credentialParams","setCredentialParams","credentialOptions","setCredentialOptions","oAuth2RedirectURL","setOAuth2RedirectURL","getCredentialParamsApi","useApi","credentialApi","getRegisteredCredentialsApi","getSpecificCredentialApi","getCredentialRequestBody","Error","credentialData","credParamName","clearCredentialParams","updateParams","every","paramItem","clearCredentialParamsValues","registeredCredential","onDeleteCredential","openOAuth2PopUpWindow","oAuth2PopupURL","left","window","screenX","outerWidth","screenY","outerHeight","url","_id","validationKey","updateValidation","required","updateYupValidation","newCredentialParams","unshift","isAddNewCredential","oauth2Api","popUpWindow","oAuth2Completed","removeEventListener","submitValues","close","addEventListener","selectedCredential","redirectURLResp","IconButton","ContractDialog","enqueueSnackbarAction","closeSnackbarAction","contract_details","contractDetails","setContractDetails","contractData","setContractData","contractParams","setContractParams","contractValues","setContractValues","contractValidation","setContractValidation","invalidAddress","setInvalidAddress","invalidABI","setInvalidABI","isReadyToAdd","setIsReadyToAdd","isEditVariableDialogOpen","setEditVariableDialog","editVariableDialogProps","setEditVariableDialogProps","contractParamsType","getSpecificContractApi","contractsApi","handleAccordionChange","reset","addNewContract","createNewContractBody","contractInfo","abi","providerCredential","getTime","persist","saveContract","saveContractBody","deleteContract","fetchABI","formValues","selectedNetwork","uri","resp","updateContractData","status","indexOf","paramType","ethers","utils","isAddress","updateFormValues","initializeFormValuesAndParams","optional","setYupValidation","transformContractResponse","contractResponseData","checkIsReadyToAdd","Dialog","DialogTitle","DialogContent","icon","networkExplorers","Accordion","AccordionSummary","Avatar","typography","smallAvatar","background","AccordionDetails","Divider","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","originalParam","updateContractDetails","DialogActions","Contracts","showDialog","setShowDialog","setDialogProps","getAllContractsApi","spacing","gridSpacing","lg","md","sm","xs","ContractEmptySVG"],"mappings":"+qBAGaA,EAA0B,uBAmH1BC,EAAiC,SAACC,EAAOC,EAAOC,GACzD,MAlHsC,SAACF,EAAOC,GAK9C,IAL0E,IAArBE,EAAO,wDACtDC,EAAQ,CAAC,EACTC,EAAmB,CAAC,EAGjBC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,GAAK,EAAG,CACtC,IAAME,EAASR,EAAMM,GAAGG,GACxBJ,EAAiBG,GAAU,EAC3BJ,EAAMI,GAAU,EACpB,CAEA,IAAK,IAAIF,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,GAAK,EAAG,CACtC,IAAMI,EAAST,EAAMK,GAAGI,OAClBC,EAASV,EAAMK,GAAGK,OAEpBC,OAAOC,UAAUC,eAAeC,KAAKX,EAAOM,GAC5CN,EAAMM,GAAQM,KAAKL,GAEnBP,EAAMM,GAAU,CAACC,GAGjBR,IACIS,OAAOC,UAAUC,eAAeC,KAAKX,EAAOO,GAC5CP,EAAMO,GAAQK,KAAKN,GAEnBN,EAAMO,GAAU,CAACD,IAIzBL,EAAiBM,IAAW,CAChC,CAEA,MAAO,CAAEP,QAAOC,mBACpB,CAiFsBY,CAA2BjB,EAAOC,GAAO,GACrDiB,EAnCoC,SAAChB,EAAcD,EAAOG,GAChE,IAAMe,EAAY,GACZC,EAAgB,GAEtBD,EAAUH,KAAKd,GACfkB,EAAcJ,KAAKd,GAEnB,IAFgC,iBAG5B,IAAMM,EAASW,EAAUE,SAAW,GAC9BC,EAAgB,GAEhBC,EAAatB,EAAMuB,QAAO,SAACC,GAAG,OAAKA,EAAId,SAAWH,GAAUiB,EAAIC,aAAaC,SAAS,UAAU,IACtG,GAAIJ,GAAcA,EAAWhB,OACzB,IAAK,IAAIqB,EAAI,EAAGA,EAAIL,EAAWhB,OAAQqB,GAAK,EACxCN,EAAcN,KAAKO,EAAWK,GAAGlB,QAMzC,IAFA,IAAMmB,EAAmBzB,EAAMI,GAEtBF,EAAI,EAAGA,EAAIuB,EAAiBtB,OAAQD,GAAK,EAAG,CACjD,IAAMwB,EAAcD,EAAiBvB,GACjCgB,EAAcK,SAASG,KAClBV,EAAcO,SAASG,KACxBV,EAAcJ,KAAKc,GACnBX,EAAUH,KAAKc,IAG3B,CAAC,EArBEX,EAAUZ,QAAS,IAuB1B,OAAOa,CACX,CAIyBW,CAA+B7B,EAAcD,EADrD,EAALG,OAEF4B,EAAU,IAAIC,IAAIf,GAExB,OADAc,EAAQE,OAAOhC,GACR,YAAI8B,EACf,EAEaG,EAA0B,WACnC,IAAMC,EAAa,uCAMnB,OALwBC,MAAMC,KAAK,CAAE/B,OAAQ,KACxCgC,KAAI,WACD,OAAOH,EAAWI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWP,EAAW7B,QACnE,IACCqC,KAAK,GAEd,EAEaC,EAAkB,SAACC,EAAU9C,GAGtC,IADA,IAAI+C,EAAiB,EACZzC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,GAAK,EAAG,CACzBN,EAAMM,GACV0C,KAAKC,OAASH,EAASG,OAC5BF,GAAkB,EAE1B,CAIA,IADA,IAAIvC,EAAM,UAAMsC,EAASG,KAAI,YAAIF,GACxBzC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,GAAK,EAAG,CACzBN,EAAMM,GACVG,KAAOD,IACZuC,GAAkB,EAClBvC,EAAM,UAAMsC,EAASG,KAAI,YAAIF,GAErC,CACA,OAAOvC,CACX,EAwBa0C,EAAyB,SAACC,EAAWnD,GAC9C,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,GAAK,EAAG,CAEtC,GADaN,EAAMM,GACV0C,KAAKI,QAAUD,EACpB,OAAO,CAEf,CACA,OAAO,CACX,EAEaE,EAAqB,SAACC,GAG/B,IAFA,IAAMC,EAAgB,CAAC,EAEdjD,EAAI,EAAGA,EAAIgD,EAAW/C,OAAQD,GAAK,EAAG,CAC3C,IAAMkD,EAAQF,EAAWhD,GAMzB,GAHAiD,EAAcC,EAAMP,MAAQO,EAAMC,SAAW,GAG1B,UAAfD,EAAME,OAAqBF,EAAMC,QAAS,CAE1C,IADA,IAAME,EAAS,CAAC,EACP/B,EAAI,EAAGA,EAAI4B,EAAMI,MAAMrD,OAAQqB,GAAK,EACzC+B,EAAOH,EAAMI,MAAMhC,GAAGqB,MAAQO,EAAMI,MAAMhC,GAAG6B,SAAW,GAE5DF,EAAcC,EAAMP,MAAQ,CAACU,EACjC,CACJ,CAIA,OAFAJ,EAAcM,OAAS,KAEhBN,CACX,EAEaO,EAAa,SAAChB,EAAU9C,EAAO+D,GAKxC,IAJA,IAAMC,EAAWlB,EAASkB,UAAY,EAChCC,EAAWnB,EAASmB,UAAY,EAEhCC,EAAe,GACZ5D,EAAI,EAAGA,EAAI0D,EAAU1D,GAAK,EAAG,CAClC,IAAM6D,EAAW,CACb1D,GAAG,GAAD,OAAKsD,EAAS,kBAAUzD,IAE9B4D,EAAalD,KAAKmD,EACtB,CAGA,IADA,IAAMC,EAAgB,GACb9D,EAAI,EAAGA,EAAI2D,EAAU3D,GAAK,EAAG,CAClC,IAAM+D,EAAY,CACd5D,GAAG,GAAD,OAAKsD,EAAS,mBAAWzD,IAE/B8D,EAAcpD,KAAKqD,EACvB,CAWA,OATAvB,EAASoB,aAAeA,EACxBpB,EAASsB,cAAgBA,EACzBtB,EAASM,MA9Ec,SAACN,EAAU9C,GAGlC,IADA,IAAI+C,EAAiB,EACZzC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,GAAK,EACtBN,EAAMM,GACV0C,KAAKC,OAASH,EAASG,OAC5BF,GAAkB,GAM1B,IADA,IAAII,EAAS,UAAML,EAASM,MAAK,YAAIL,GAC5BzC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,GAAK,EACtBN,EAAMM,GACV0C,KAAKI,QAAUD,IACpBJ,GAAkB,EAClBI,EAAS,UAAML,EAASM,MAAK,YAAIL,IAGzC,OAA0B,IAAnBA,EAAuBD,EAASM,MAAQD,CACnD,CA0DqBmB,CAAmBxB,EAAU9C,GAE1C8C,EAASyB,UAASzB,EAASyB,QAAUlB,EAAmBP,EAASyB,UACjEzB,EAAS0B,cAAa1B,EAAS0B,YAAcnB,EAAmBP,EAAS0B,cACzE1B,EAAS2B,WAAU3B,EAAS2B,SAAWpB,EAAmBP,EAAS2B,WACnE3B,EAAS4B,kBAAiB5B,EAAS4B,gBAAkBrB,EAAmBP,EAAS4B,kBAE9E5B,CACX,EAEa6B,EAAmB,SAACjE,GAC7B,IAAMkE,EAAclE,EAAOmE,MAAM,KACjC,OAAID,EAAYrE,QAAUqE,EAAY,GAAGjD,SAAS,UAEhB,MADHiD,EAAYA,EAAYrE,OAAS,GACxB,OAAS,QAE1C,EACX,EAEauE,EAAwB,SAAC9E,GAClC,IAAK,IAAIM,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,GAAK,EAAG,CACtC,IAAMyE,EAAO/E,EAAMM,GACnB,GAAuB,YAAnByE,EAAK/B,KAAKU,MAAyC,YAAnBqB,EAAK/B,KAAKU,KAC1C,OAAO,CAEf,CACA,OAAO,CACX,EAEasB,EAAgC,SAACC,GAC1C,QAAmBC,IAAfD,GAA6BA,EAAjC,CAEA,IAAME,EAAOC,IAAOH,GACpB,GAAKE,EAAKE,QAGV,OAAO,IAAIC,KAAKH,EAAKI,OAAQJ,EAAKK,QAASL,EAAKA,OAAQA,EAAKM,QAASN,EAAKO,UANd,CAOjE,EAEaC,EAAc,SAACC,GACxB,IAAMC,EAAeD,EAAWf,MAAM,KAEtC,OADiBgB,EAAaA,EAAatF,OAAS,GAAGsE,MAAM,KAAK,EAEtE,EAEaiB,EAAgB,SAACC,GAC1B,IAGI,IAFA,IAAMC,EAAcC,KAAKC,MAAMH,GACzBI,EAAY,GACT7F,EAAI,EAAGA,EAAI0F,EAAYzF,OAAQD,GAAK,EAAG,CAC5C,IACMuF,EADaG,EAAY1F,GACCuE,MAAM,KAChCuB,EAAWP,EAAaA,EAAatF,OAAS,GAAGsE,MAAM,KAAK,GAClEsB,EAAUnF,KAAKoF,EACnB,CACA,OAAOD,EAAU5F,OAAS4F,EAAUvD,KAAK,KAAO,EAGpD,CAFE,MAAOyD,GACL,MAAO,EACX,CACJ,EAEaC,EAAyB,SAACC,GAInC,IAHA,IAAMvG,EAAQuG,EAASvG,MACjBC,EAAQsG,EAAStG,MAEdK,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,GAAK,EAAG,CACtCN,EAAMM,GAAGkG,UAAW,EACpB,IAAMzB,EAAO/E,EAAMM,GACbmG,EAAc,CAChBrD,MAAO2B,EAAK/B,KAAKI,MACjBH,KAAM8B,EAAK/B,KAAKC,KAChBS,KAAMqB,EAAK/B,KAAKU,KAChBQ,aAAca,EAAK/B,KAAKkB,aACxBE,cAAeW,EAAK/B,KAAKoB,cACzBoC,UAAU,GAEVzB,EAAK/B,KAAK0B,kBACV+B,EAAY/B,gBAAe,2BAAQK,EAAK/B,KAAK0B,iBAAe,IAAEb,OAAQ,OAClEkB,EAAK/B,KAAK0B,gBAAgBgC,eAAeD,EAAY/B,gBAAgBgC,QAEzE3B,EAAK/B,KAAKuB,UACVkC,EAAYlC,QAAO,2BAAQQ,EAAK/B,KAAKuB,SAAO,IAAEV,OAAQ,OAClDkB,EAAK/B,KAAKuB,QAAQmC,eAAeD,EAAYlC,QAAQmC,QAEzD3B,EAAK/B,KAAKyB,WACVgC,EAAYhC,SAAQ,2BAAQM,EAAK/B,KAAKyB,UAAQ,IAAEZ,OAAQ,OACpDkB,EAAK/B,KAAKyB,SAASiC,eAAeD,EAAYhC,SAASiC,QAE3D3B,EAAK/B,KAAKwB,aAAeO,EAAK/B,KAAKwB,YAAYmC,mBAC/CF,EAAYjC,YAAc,CAAEmC,iBAAkB5B,EAAK/B,KAAKwB,YAAYmC,iBAAkB9C,OAAQ,MAC1FkB,EAAK/B,KAAKwB,YAAYkC,eAAeD,EAAYjC,YAAYkC,QAGrE1G,EAAMM,GAAG0C,KAAOyD,CACpB,CAKA,MAJmB,CACfzG,QACAC,QAGR,EAEM2G,EAA6B,SAACC,EAAQC,EAAYC,GACpD,GAAKA,EAAaD,IAAgBC,EAAaD,GAA8B,iBAA7E,CAGA,IAFA,IAAIE,EAAeH,EAEVvG,EAAI,EAAGA,EAAI0G,EAAazG,OAAQD,GAAK,EAAG,CAC7C,IAAMkD,EAAQwD,EAAa1G,GAC3B,GAAmB,YAAfkD,EAAME,KAAoB,CAC1B,IAAMuD,EAAiCzD,EAAM0D,QAAQC,MAAK,SAACC,GAAG,OAAKA,EAAInE,OAAS8D,EAAaD,GAA8B,gBAAC,IAC5H,GACIG,QACmC/B,IAAnC+B,GACAA,EAA+BI,yBAE/B,OAAO,CACf,CACJ,CACA,OAAO,CAfyF,CAgBpG,EAEaC,EAAyB,SAAChE,EAAYwD,EAAYS,EAAmBR,GAuB9E,MArBmB,gBAAfD,QACoE5B,IAApE5B,EAAW6D,MAAK,SAACK,GAAI,MAAmB,yBAAdA,EAAKvE,IAA+B,UACEiC,IAAhE5B,EAAW6D,MAAK,SAACK,GAAI,MAAmB,qBAAdA,EAAKvE,IAA2B,KACzD2D,EAA2Ba,IAAOC,UAAUH,GAAoBT,EAAYC,IAO9D,gBAAfD,QACoE5B,IAApE5B,EAAW6D,MAAK,SAACK,GAAI,MAAmB,yBAAdA,EAAKvE,IAA+B,UACEiC,IAAhE5B,EAAW6D,MAAK,SAACK,GAAI,MAAmB,qBAAdA,EAAKvE,IAA2B,KAC1D2D,EAA2Ba,IAAOC,UAAUH,GAAoBT,EAAYC,IAItD,gBAAfD,QAAgG5B,IAAhE5B,EAAW6D,MAAK,SAACK,GAAI,MAAmB,qBAAdA,EAAKvE,IAA2B,OADjGK,EAAaA,EAAW9B,QAAO,SAACmG,GAAG,MAAkB,yBAAbA,EAAI1E,IAA+B,KAV3EK,EAAWtC,KAAK,CACZiC,KAAM,yBAcPK,CACX,EAEasE,EAAkB,SAACvB,GAC5B,IAAMwB,EAAMxB,EAAEwB,IACVxF,MAAMyF,QAAQD,IAAuB,kBAARA,EAC7BE,UAAUC,UAAUC,UAAUhC,KAAKiC,UAAUL,EAAK,KAAM,OAExDE,UAAUC,UAAUC,UAAUJ,EAEtC,C,iPC9XMM,EAAW,CACb,0BAA2B,CAAEC,GAAI,IAK/BC,EAAWC,sBAAW,SAAkB,EAe1CC,GACD,IAAD,IAdMC,cAAM,OAAO,EACbC,EAAS,EAATA,UACAC,EAAQ,EAARA,SAAS,EAAD,EACRC,eAAO,OAAO,MACdC,oBAAY,MAAG,GAAE,MACjBC,iBAAS,MAAG,CAAC,EAAC,EACdC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAM,EAANA,OAAO,EAAD,EACNC,UAAE,MAAG,CAAC,EAAC,EACPC,EAAK,EAALA,MACGC,EAAM,iBAIPC,EAAQC,cAEd,OACI,eAAC,IAAI,yBACDd,IAAKA,GACDY,GAAM,IACVF,GAAE,aACET,OAAQA,EAAS,YAAc,OAC/Bc,YAAaF,EAAMG,QAAQC,QAAQ,KAAO,GAC1C,SAAU,CACNf,UAAWA,EAAYO,GAAU,kCAAoC,YAEtEC,GACL,WAGAH,GAAaI,GAAS,cAAC,IAAU,CAACD,GAAId,EAAUe,MAAOA,EAAOO,OAAQV,IACvED,GAAaI,GAAS,cAAC,IAAU,CAACD,GAAId,EAAUe,MAAO,cAAC,IAAU,CAACQ,QAAQ,KAAI,SAAER,IAAqBO,OAAQV,IAG9GG,GAAS,cAAC,IAAO,IAGjBP,GACG,cAAC,IAAW,CAACM,GAAIJ,EAAWc,UAAWf,EAAa,SAC/CF,KAGPC,GAAWD,KAGzB,IAgBeL,K,mCC9Ef,8BAGMuB,EAAYC,IAAMC,OAAO,CAC3BC,QAAQ,GAAD,OAAKA,IAAO,WACnBC,QAAS,CACL,eAAgB,sBAITJ,K,wECRA,aAACK,GACZ,MAAwBC,mBAAS,MAAK,mBAA/BlH,EAAI,KAAEmH,EAAO,KACpB,EAA0BD,mBAAS,MAAK,mBAAjCE,EAAK,KAAEC,EAAQ,KACtB,EAA8BH,oBAAS,GAAM,mBAAtCI,EAAO,KAAEC,EAAU,KAEpBC,EAAO,iDAAG,0GACI,OAAhBD,GAAW,GAAK,kBAESN,EAAO,gBAAS,OAA/BQ,EAAM,OACZN,EAAQM,EAAOzH,MAAK,gDAEpBqH,EAAS,MAAO,qBAAoB,QAEnB,OAFmB,UAEpCE,GAAW,GAAM,4EAExB,kBAVY,mCAYb,MAAO,CACHvH,OACAoH,QACAE,UACAE,UAEP,C,mCCzBD,iFAKaE,EAAoB,SAAH,GAAmB,IAAbxB,EAAK,EAALA,MAChC,OACI,cAAC,IAAO,CAACA,MAAOyB,YAAOzB,GAAQ0B,UAAU,QAAO,SAC5C,cAAC,IAAU,UACP,cAAC,IAAI,CAACC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,SAIlD,C,qGCNMC,EAAgB1C,sBAAW,SAAuB,EAA8CC,GAAM,IAAD,IACnG0C,EACAC,EAFkDxC,EAAQ,EAARA,SAAUhF,EAAI,EAAJA,KAAMyH,EAAS,EAATA,UAAWC,EAAM,EAANA,OAAQC,EAAK,EAALA,MAGzF,OAAQF,GACJ,IAAK,KACL,IAAK,OACDF,EAAUG,EACVF,EAAU,EACV,MAGJ,QACID,EAAU,EACVC,EAAUE,EAIlB,MAAoBE,YAASL,EAASC,GAAQ,mBAAvCK,EAAC,KAAEC,EAAM,KAChB,EAAoBF,YAASL,EAASC,GAAQ,mBAAvCO,EAAC,KAAEC,EAAM,KAEhB,OAAQhI,GACJ,IAAK,SACD,OACI,cAAC,IAAOiI,IAAG,CACPpD,IAAKA,EACLqD,QAAS,CAAEC,OAAQ,KACnBC,WAAY,CACRC,OAAQC,IACRC,WAAY,OACZC,SAAU,EACVC,YAAa,GACf,SAEDzD,IAGb,IAAK,QACD,MAAkB,OAAdyC,GAAoC,SAAdA,EAElB,cAAC,IAAOQ,IAAG,CACPpD,IAAKA,EACLqD,QAAS,CAAEH,OAASvG,IAANuG,EAAkBA,EAAI,IACpCW,WAAY,kBAAMV,GAAQ,EAC1BW,aAAc,kBAAMX,GAAQ,EAAC,SAE5BhD,IAKT,cAAC,IAAOiD,IAAG,CAACpD,IAAKA,EAAKqD,QAAS,CAAEL,OAASrG,IAANqG,EAAkBA,EAAI,IAAMa,WAAY,kBAAMZ,GAAQ,EAAEa,aAAc,kBAAMb,GAAQ,EAAC,SACpH9C,IAKb,QAOI,MANqB,kBAAV2C,IACPA,EAAQ,CACJiB,MAAOjB,EACPkB,IAAKlB,IAIT,cAAC,IAAOM,IAAG,CAACpD,IAAKA,EAAKiE,WAAY,CAAEnB,MAAY,QAAP,EAAEA,SAAK,aAAL,EAAOiB,OAASG,SAAU,CAAEpB,MAAY,QAAP,EAAEA,SAAK,aAAL,EAAOkB,KAAM,SACtF7D,IAIrB,IAUAsC,EAAc0B,aAAe,CACzBhJ,KAAM,QACN0H,OAAQ,GACRD,UAAW,QACXE,MAAO,CACHiB,MAAO,EACPC,IAAK,KAIEvB,K,mCChGf,yEA0Ce2B,IAjCU,SAAH,GAAuE,IAAjEC,EAAI,EAAJA,KAAMC,EAAW,EAAXA,YAAaC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YAAaC,EAAe,EAAfA,gBAC5DC,EAAgBC,SAASC,eAAe,UAExCC,EAAYR,EACd,eAAC,IAAM,CACHS,KAAMT,EACNU,WAAS,EACTC,SAAS,KACTC,QAASV,EACT,kBAAgB,qBAChB,mBAAiB,2BAA0B,UAE3C,cAAC,IAAW,CAAC7D,GAAI,CAAEwE,SAAU,QAAUhN,GAAG,qBAAoB,SACzDoM,EAAY3D,QAEjB,eAAC,IAAa,YACR8D,GAAmB,cAAC,IAAS,CAACnF,IAAKgF,EAAY7J,KAAMgK,gBAAiB,SAAC3G,GAAC,OAAKuB,YAAgBvB,EAAE,IAChG2G,GAAmB,cAAC,IAAS,CAACnF,IAAKgF,EAAY7J,KAAMgK,gBAAiB,SAAC3G,GAAC,OAAK0G,EAAY1G,EAAGwG,EAAY9H,KAAK,UAGtH,KAEJ,OAAO2I,uBAAaN,EAAWH,EACnC,C,mCChCA,WAiBeU,IAbM,WACjB,IAAMC,EAAWC,kBAAO,GASxB,OAPAC,qBACI,kBAAM,WACFF,EAASG,SAAU,CACvB,CAAC,GACD,IAGGH,CACX,C,8FCVII,EAAY,GAkDDC,IAhDK,WAChB,IAAMC,EAAWC,cAETC,EADSC,aAAY,SAACC,GAAK,OAAKA,EAAMC,QAAQ,IAC9CH,cAER,EAA2CI,cAAnCC,EAAe,EAAfA,gBAAiBC,EAAa,EAAbA,cAUzBC,IAAMb,WAAU,WACZM,EAAcQ,SAAQ,YAAwD,IAT1DnO,EASKoO,EAAG,EAAHA,IAAKC,EAAO,EAAPA,QAAQ,EAAD,EAAE5H,eAAO,MAAG,CAAC,EAAC,MAAE6H,eAAS,OAAQ,EAG9DL,EAAcG,GAKdb,EAAUrM,SAASkN,KAGvBJ,EAAgBK,EAAQ,yBACpBD,OACG3H,GAAO,IACVsG,QAAS,SAACwB,EAAOC,EAAQC,GACjBhI,EAAQsG,SACRtG,EAAQsG,QAAQwB,EAAOC,EAAQC,EAEvC,EACAC,SAAU,SAACH,EAAOE,GAxBN,IAACzO,EA0BTyN,EAASkB,YAAeF,IA1BfzO,EA2BOyO,EA1B5BlB,EAAS,YAAOA,EAAUxM,QAAO,SAACqN,GAAG,OAAKpO,IAAOoO,CAAG,IA2B5C,KAhCYpO,EAoCDoO,EAnCnBb,EAAS,sBAAOA,GAAS,CAAEvN,IAoC3B,GACJ,GAAG,CAAC2N,EAAeM,EAAeD,EAAiBP,GACvD,C,4ICtBemB,EAzBM,WAAH,OACd,cAACC,EAAA,EAAI,UACD,cAACC,EAAA,EAAW,UACR,eAACC,EAAA,EAAI,CAACC,WAAS,EAACtE,UAAU,SAAQ,UAC9B,cAACqE,EAAA,EAAI,CAACE,MAAI,WACN,eAACF,EAAA,EAAI,CAACC,WAAS,EAACE,eAAe,gBAAe,UAC1C,cAACH,EAAA,EAAI,CAACE,MAAI,WACN,cAACE,EAAA,EAAQ,CAAClG,QAAQ,cAAcqB,MAAO,GAAID,OAAQ,OAEvD,cAAC0E,EAAA,EAAI,CAACE,MAAI,WACN,cAACE,EAAA,EAAQ,CAAClG,QAAQ,cAAcqB,MAAO,GAAID,OAAQ,YAI/D,cAAC0E,EAAA,EAAI,CAACE,MAAI,WACN,cAACE,EAAA,EAAQ,CAAClG,QAAQ,cAAcT,GAAI,CAAE4G,GAAI,GAAK/E,OAAQ,OAE3D,cAAC0E,EAAA,EAAI,CAACE,MAAI,WACN,cAACE,EAAA,EAAQ,CAAClG,QAAQ,cAAcoB,OAAQ,aAIjD,E,0BCbLgF,EAAcC,YAAO1H,IAAP0H,EAAiB,YAAQ,MAAQ,CACjDC,gBAAiB,UACjBC,MAFyC,EAAL7G,MAEvB8G,gBACbC,SAAU,SACVC,SAAU,WACV3H,UAAW,kCACX4H,OAAQ,UACR,UAAW,CACP5H,UAAW,oCAElB,IA6Gc6H,IAzGE,SAAH,GAA8C,IAAxCC,EAAS,EAATA,UAAWvN,EAAI,EAAJA,KAAMwN,EAAM,EAANA,OAAQC,EAAO,EAAPA,QACnCrH,EAAQC,cAERqH,EAAS,CACX5F,OAAQ,GACR6F,QAAS,SAGPC,EAAgB,2BACfF,GAAM,IACTT,MAAO7G,EAAMG,QAAQsH,QAAQC,KAC7Bd,gBAAiB5G,EAAMG,QAAQsH,QAAQE,QAGrCC,EAAiB,SAACC,GACpB,OAAOxM,IAAS0C,MAAK,SAAC+J,GAAG,OAAKA,EAAIjO,OAASgO,CAAO,GACtD,EAEA,OACI,mCACKV,EACG,cAAC,EAAoB,IAErB,cAACT,EAAW,CAACtH,QAAQ,EAAOG,SAAS,EAAO8H,QAASA,EAAQ,SACzD,cAACU,EAAA,EAAG,CAAClI,GAAI,CAAEmI,EAAG,MAAO,SACjB,eAAC5B,EAAA,EAAI,CAACC,WAAS,EAACtE,UAAU,SAAQ,UAC9B,sBAAKN,MAAO,CAAEwG,QAAS,OAAQC,cAAe,MAAOC,WAAY,UAAW,UACvEvO,EAAKwO,SACF,qBAAK3G,MAAO,CAAEE,MAAO,GAAID,OAAQ,GAAI2G,aAAc,MAAOzB,gBAAiB,QAAS0B,YAAa,IAAK,SAClG,cAAC,IAAQ,CAACC,SAAU,GAAIC,KAAMC,6BAAmB7O,EAAKwO,aAG9D,cAACM,EAAA,EAAU,CAAC7I,GAAI,CAAEwE,SAAU,SAAUsE,WAAY,KAAM,SAAE/O,EAAKC,UAEnE,eAACuM,EAAA,EAAI,CAACvG,GAAI,CAAE+I,GAAI,EAAGC,GAAI,GAAKxC,WAAS,EAACtE,UAAU,MAAK,UACjD,eAACqE,EAAA,EAAI,CAACE,MAAI,EAACzG,GAAI,CAAEiJ,SAAU,GAAI,UAC1BlP,EAAKwO,SACF,cAACM,EAAA,EAAU,CACP7I,GAAI,CACAwE,SAAU,OACVsE,WAAY,IACZ9B,MAAO7G,EAAMG,QAAQR,UAAU,KAC/BoH,SAAU,SACVgC,WAAY,SACZC,aAAc,WACd7E,SAAU,KACZ,mBAEEvK,EAAKwO,QAAQa,UAAU,EAAG,GAAE,cAAMrP,EAAKwO,QAAQc,OAAO,MAGjEtP,EAAKuD,UACF,eAACuL,EAAA,EAAU,CACP7I,GAAI,CACAwE,SAAU,OACVsE,WAAY,IACZ9B,MAAO7G,EAAMG,QAAQR,UAAU,MACjC,+BAEiB/F,EAAKuP,gBAAkB,UAIrDvP,EAAKwP,UACF,cAAChD,EAAA,EAAI,CAACE,MAAI,WACN,cAAC+C,EAAA,EAAI,CAACrP,MAAM,WAAW6F,GAAI2H,SAItC5N,EAAKiO,SACF,cAACzB,EAAA,EAAI,CAACE,MAAI,WACN,cAAC+C,EAAA,EAAI,CACDrP,MAAO4N,EAAehO,EAAKiO,SAAS7N,MACpC6F,GAAE,2BAAOyH,GAAM,IAAEV,gBAAiBgB,EAAehO,EAAKiO,SAAShB,MAAOA,MAAO,cAIxFO,GACG,qBAAK3F,MAAO,CAAEwG,QAAS,OAAQC,cAAe,MAAOoB,UAAW,IAAK,SAChElC,EAAOjO,KAAI,SAACoQ,GAAG,OACZ,qBAAe9H,MAAO,CAAEE,MAAO,GAAID,OAAQ,GAAI2G,aAAc,MAAOzB,gBAAiB,SAAU,SAC3F,qBACInF,MAAO,CAAEE,MAAO,OAAQD,OAAQ,OAAQ6F,QAAS,EAAGiC,UAAW,WAC/DC,IAAI,GACJhL,IAAK8K,KAJHA,EAMJ,cAU9C,C,2UCmLeG,IA9QY,SAAH,GAAoD,IAAD,EAA7ClG,EAAI,EAAJA,KAAMC,EAAW,EAAXA,YAAaC,EAAQ,EAARA,SAAUiG,EAAS,EAATA,UACjD9F,EAAgBC,SAASC,eAAe,UAExC/D,EAAQC,cAEd,EAAoCa,mBAAS,IAAG,mBAAzC8I,EAAU,KAAEC,EAAa,KAChC,EAA0B/I,mBAAS,MAAK,mBAAjC1G,EAAK,KAAE0P,EAAQ,KACtB,EAAgChJ,oBAAS,GAAM,mBAAxCiJ,EAAQ,KAAEC,EAAW,KAC5B,EAAgDlJ,oBAAS,GAAM,mBAAxDmJ,EAAgB,KAAEC,EAAmB,KAC5C,EAAkDpJ,mBAAS,CAAC,GAAE,mBAAvDqJ,EAAiB,KAAEC,EAAoB,KAC9C,EAAoDtJ,mBAAS,CAAC,GAAE,oBAAzDuJ,GAAkB,MAAEC,GAAqB,MAChD,GAAwCxJ,mBAASyJ,YAAUC,IAAG,qBAAvDC,GAAY,MAAEC,GAAe,MAgB9BC,GAAY,SAAC1N,GACf,GAAIA,EAAE1F,QAAU0F,EAAE1F,OAAOqT,cAAgB3N,EAAE1F,OAAOsT,MAAO,CACrD,IAAMC,EAAiB7N,EAAE1F,OAAOqT,aAC1BG,EAA2B9N,EAAE1F,OAAOsT,MAAM5B,UAAU,EAAG6B,GACvDE,EAA0B/N,EAAE1F,OAAOsT,MAAM5B,UAAU6B,EAAgB7N,EAAE1F,OAAOsT,MAAM1T,QAKxFmT,GAJa,CACTS,2BACAC,2BAGR,MACIV,GAAsB,CAAC,EAE/B,EAEMW,GAAkB,SAAChO,EAAGtB,GAGxB,IAFA,IAAMuP,EAAajO,EAAEkO,UACjBC,EAAkB,UAAMzP,EAAKtE,IACxBH,EAAI,EAAGA,EAAIgU,EAAW/T,OAAQD,GAAK,EAAG,CAC3C,IAAMiU,EAAYD,EAAWhU,GACX,SAAdiU,IAjDqB,QAAQE,KAkDPF,IACdC,EAAmBE,SAAS,OAC5BF,EAAqBA,EAAmBnC,UAAU,EAAGmC,EAAmBjU,OAAS,IAErFiU,GAAkB,WAAQD,EAAS,MAEnCC,GAAsBD,EAEtBjU,IAAMgU,EAAW/T,OAAS,IAC1BiU,GAAsB,KAGlC,CACA,GAAIf,GAAoB,CACpB,IAAItP,EAAW,GAEXA,OADgDe,IAAhDuO,GAAmBU,+BAAyFjP,IAA/CuO,GAAmBW,wBACxE,UAAMpB,EAAU,YAAQwB,EAAkB,OAE1C,UAAMf,GAAmBU,yBAAwB,aAAKK,EAAkB,aAAKf,GAAmBW,yBAC5GnB,EAAc9O,EAClB,CACJ,EA4BA2J,qBAAU,WACN,GAAIjB,EAAY8H,QAAU9H,EAAYrJ,MAAO,CACzC,IAAIoR,EAAc/H,EAAY8H,OAC1BnR,EAAQqJ,EAAYrJ,MACpBqJ,EAAYgI,gBACZD,EAAc/H,EAAYgI,cAAcC,gBACxCtR,EAAQqJ,EAAYgI,cAAcE,gBAEtC7B,EAAS1P,GACTyP,EAAc2B,EAAYpR,EAAMP,MAAM+R,YAAc,IACjC,SAAfxR,EAAME,MAAkC,WAAfF,EAAME,MAAoC,WAAfF,EAAME,MAAmBoQ,GAAgBH,YAAUsB,MACxF,SAAfzR,EAAME,MAAiBoQ,GAAgBH,YAAUC,GACzD,CACJ,GAAG,CAAC/G,IAEJ,IAAMO,GAAYR,EACd,eAAC,IAAM,CAACS,KAAMT,EAAMU,WAAS,EAACC,SAAS,KAAK,kBAAgB,qBAAqB,mBAAiB,2BAA0B,UACxH,cAAC,IAAa,UACV,sBAAK1C,MAAO,CAAEwG,QAAS,OAAQC,cAAe,OAAQ,UACjD9N,IAAyB,SAAfA,EAAME,MAAkC,WAAfF,EAAME,MAAoC,WAAfF,EAAME,MAAoC,SAAfF,EAAME,OAC5F,sBAAKmH,MAAO,CAAEqK,KAAM,GAAI,UACpB,cAAC,IAAU,CAACjM,GAAI,CAAEgJ,GAAI,EAAGkD,GAAI,GAAKzL,QAAQ,KAAI,mBAG9C,cAAC,IAAgB,CACbmB,MAAO,CACHrC,OAAQ,YACRc,YAAaF,EAAMG,QAAQ6L,KAAK,KAChC3D,aAAc,OACd3G,OAAQ,OACRuK,UAAW,sBACXC,UAAW,SACXtF,gBAAiB,SACnB,SAEF,cAAC,IAAM,CACHiE,MAAOjB,EACPuC,cAAe,SAACC,GAAI,OAAKvC,EAAcuC,EAAK,EAC5CC,YAAajS,EAAMiS,YACnBC,UAAW,SAACF,GAAI,OAAKE,oBAAUF,EAAM3B,GAAa,EAClDE,UAAW,SAAC1N,GAAC,OAAK0N,GAAU1N,EAAE,EAC9BsP,OAAQ,SAACtP,GAAC,OAAK0N,GAAU1N,EAAE,EAC3BsK,QAAS,GACT9F,MAAO,CACH4C,SAAU,WACVmI,UAAW,sBACX7K,MAAO,QAEX8K,kBAAkB,2BAKhChJ,EAAYiJ,eACV,sBAAKjL,MAAO,CAAEqK,KAAM,GAAI,UACpB,cAAC,IAAU,CAACjM,GAAI,CAAEgJ,GAAI,EAAGkD,GAAI,GAAKzL,QAAQ,KAAI,uBAGI,IAAjDmD,EAAYkJ,0BAA0BxV,QACnC,qBAAKsK,MAAO,CAAE8F,QAAS,GAAIqF,WAAY,IAAK,SACxC,gFAGPnJ,EAAYkJ,0BAA0BxV,OAAS,GAC5C,cAAC,IAAgB,CAACsK,MAAO,CAAEC,OAAQ,OAAQuK,UAAW,sBAAuBC,UAAW,UAAW,SAC/F,cAAC,IAAG,CAACrM,GAAI,CAAEgN,GAAI,EAAGC,GAAI,GAAI,SACtB,cAAC,IAAI,CACDjN,IAAE,GACE8B,MAAO,OACPoL,GAAI,EACJ1E,aAAc,QAAM,cACnBrI,EAAMgN,YAAYC,KAAK,MAAQ,CAC5B9I,SAAU,MACb,cACD,qCAAsC,CAClC+I,IAAK,KACR,cACD,qBAAsB,CAClBzG,GAAI,IACP,cACD,oBAAqB,CACjBoG,GAAI,IACP,GACH,SAEDpJ,EAAYkJ,0BAA0BxT,KAAI,SAACwC,EAAMwR,GAAK,OACnD,cAAC,IAAG,UACA,eAAC,IAAS,CACNpD,SAAUA,IAAapO,EAAK/B,KAAKI,MACjCoT,UA7KrBrT,EA6KqD4B,EAAK/B,KAAKI,MA7KjD,SAAC4L,EAAOyH,GACjDrD,IAAYqD,GAAatT,EAC7B,GA2KqG,UAEjD,cAAC,IAAgB,CACbuT,WAAY,cAAC,IAAc,IAC3B,0BAAkB3R,EAAK/B,KAAKI,MAAK,YACjC3C,GAAE,UAAKsE,EAAK/B,KAAKI,MAAK,WAAU,SAEhC,cAAC,IAAU,CAACsG,QAAQ,KAAI,SAAE3E,EAAK/B,KAAKI,UAExC,cAAC,IAAgB,UACb,sBAAKyH,MAAO,CAAEuF,SAAU,YAAa,UACjC,cAAC,IAAS,CACNuG,WAAS,EACT9O,IACI9C,EAAK/B,KAAK4T,iBAAmB7R,EAAK/B,KAAK4T,gBAAgBC,OACjD9R,EAAK/B,KAAK4T,gBAAgBC,OAC1B,CAAC,EAEX7J,gBAAiB,SAAC3G,GAAC,OAAKgO,GAAgBhO,EAAGtB,EAAK,IAEpD,cAAC,IAAU,CACP+R,KAAK,QACL7N,GAAI,CACA6B,OAAQ,GACRC,MAAO,GACPqF,SAAU,WACVkG,KAAM,EACNS,MAAO,GAEX7N,MAAM,kBACN+G,MAAM,UACNQ,QAAS,kBAxM3C,SAACzN,EAAM+B,GACjC,IAAMiS,EAAa,CACf9N,MAAM,kBAAD,OAAoBnE,EAAK/B,KAAKI,OACnCJ,OACA+B,QAEJyO,EAAqBwD,GACrB1D,GAAoB,EACxB,CAiMoE2D,CACIlS,EAAK/B,KAAK4T,iBAAmB7R,EAAK/B,KAAK4T,gBAAgBC,OACjD9R,EAAK/B,KAAK4T,gBAAgBC,OAC1B,CAAC,EACP9R,EACH,EACJ,SAED,cAAC,IAAkB,eA3C7BwR,GA1KxB,IAACpT,CA0NmB,aAQlC,cAAC,IAAgB,CACb6J,iBAAe,EACfJ,KAAMyG,EACNxG,YAAa0G,EACbzG,SAAU,kBAAMwG,GAAoB,EAAM,EAC1CvG,YAAa,SAAC1G,EAAGtB,GACbsP,GAAgBhO,EAAGtB,GACnBuO,GAAoB,EACxB,SAIZ,eAAC,IAAa,WACV,cAAC,IAAM,CAAC7C,QAAS3D,EAAS,SAAED,EAAYqK,mBACxC,cAAC,IAAM,CAACxN,QAAQ,YAAY+G,QAAS,kBAtLlC,SAACwD,GAEZ,GAAIpH,EAAYgI,cAAe,CAC3B,IAAMsC,EAAiB,2BAChBtK,EAAYgI,cAAcC,iBAAe,kBAC3CjI,EAAYgI,cAAcE,eAAe9R,KAAOgR,IAE/CmD,EAAsBvK,EAAYgI,cAActR,cACtD6T,EAAoBvK,EAAYgI,cAAcwC,gBAAkBF,EAChE,IAAMG,EAAY,2BACXzK,EAAY8H,QAAM,kBACpB9H,EAAYrJ,MAAMP,KAAOmU,IAE9BrE,EAAUuE,EACd,KAAO,CAAC,IAAD,EAEGA,EAAY,2BACXzK,EAAY8H,QAAM,uBACpB9H,EAAYrJ,MAAMP,KAAOgR,GAAK,uBACvB,MAAI,IAEhBlB,EAAUuE,EACd,CACJ,CA+JuDC,CAAOvE,EAAW,EAAC,SACzDnG,EAAY2K,0BAIzB,KAEJ,OAAO9J,uBAAaN,GAAWH,EACnC,C,saCvQMwK,EAAe1H,YAAO2H,IAAP3H,CAAe,aAChCtH,UAAW,4GACXgJ,aAAc,QAAM,aACbkG,IAAoBC,SAAY,CACnCC,UAAW,aACX,OAAQ,CACJlH,QAAS,GACTmH,OAAQ,OAKdC,EAAkBzP,sBAAW,SAAyB,EAAoBC,GAAM,IAAxB0L,EAAK,EAALA,MAAOxD,EAAO,EAAPA,QACjE,OACI,wBACI5F,MAAO,CACHmF,gBAAiB,UACjBgI,WAAY,EACZC,cAAe,EACfC,aAAc,GACdC,YAAa,GACb1G,aAAc,GACd1G,MAAO,OACPD,OAAQ,GACRtC,OAAO,oBACP6H,OAAQ,UACR0B,WAAY,OACZqG,UAAW,QACXnI,MAAO,UACPoI,QAAS,IAEb3U,KAAK,SACL+M,QAASA,EACTlI,IAAKA,EAAI,SAER0L,GAGb,IAwceqE,EA/bc,SAAH,GAWnB,IAVH/U,EAAa,EAAbA,cACAgV,EAAW,EAAXA,YACAzR,EAAU,EAAVA,WACA0R,EAAc,EAAdA,eACAC,EAAM,EAANA,OACAC,EAAkB,EAAlBA,mBACAC,EAAgB,EAAhBA,iBACAC,EAAiB,EAAjBA,kBACAC,EAAkB,EAAlBA,mBACAC,EAAwB,EAAxBA,yBAEM1P,EAAQC,cACR0P,EAAgB1K,aAAY,SAACC,GAAK,OAAKA,EAAMyK,aAAa,IAE1DC,EAAsB,SAAChG,EAAYiG,EAAWtE,EAAQ4B,GACxD,IAAMY,EAAiB,2BAChBxC,GAAM,kBACRsE,EAAYjG,IAEXoE,EAAsB7T,EAE5B,OADA6T,EAAoBb,GAASY,EACtBC,CACX,EAEM8B,EAAgB,SAAClG,EAAYiG,EAAWtE,EAAQ4B,GAClD,IAAMa,EAAsB4B,EAAoBhG,EAAYiG,EAAWtE,EAAQ4B,GAC/EmC,EAAmBtB,EACvB,EAEM+B,EAAc,SAACnG,EAAYiG,EAAWtE,EAAQ4B,GAChD,IAAMa,EAAsB4B,EAAoBhG,EAAYiG,EAAWtE,EAAQ4B,GAC/EoC,EAAiBvB,EACrB,EASMrD,EAAY,SAAC1N,EAAG4S,EAAWG,GAC7B,IAAMlF,EAAiB7N,EAAE1F,OAAOqT,aAC1BG,EAA2B9N,EAAE1F,OAAOsT,MAAM5B,UAAU,EAAG6B,GACvDE,EAA0B/N,EAAE1F,OAAOsT,MAAM5B,UAAU6B,EAAgB7N,EAAE1F,OAAOsT,MAAM1T,QAClF8Y,EAAI,UAAMvS,EAAU,YAAI0R,EAAc,YAAIY,EAAU,aAAKH,GAO/DJ,GAAmB,EANN,CACT1E,2BACAC,0BACAiF,OACAvS,cAGR,EAmDA,OACI,mCACKyR,EAAYhW,KAAI,SAAC+W,EAAG/C,GACjB,IAAM1P,EAAS0R,EAAYhC,IAAU,GAC/B5B,EAASpR,EAAcgT,IAAU,CAAC,EAExC,OACI,eAACpF,EAAA,EAAG,CACAlI,GAAI,CACAmI,EAAG,EACHa,GAAI,EACJjC,gBAAiB5G,EAAMG,QAAQR,UAAUgI,MACzCU,aAAa,GAAD,OAAKsH,EAActH,aAAY,MAC3CrB,SAAU,YACZ,UAGDmI,EAAYhY,OAAS,GAClB,cAACgZ,EAAA,EAAG,CACAtQ,GAAI,CACA2M,UAAW,GACX9K,OAAQ,GACRC,MAAO,GACPiF,gBAAiB5G,EAAMG,QAAQR,UAAUgI,MACzCd,MAAO7G,EAAMG,QAAQR,UAAUyQ,KAC/BpJ,SAAU,WACV2G,OAAQ,GACRT,KAAM,IAEVQ,KAAK,QACLrG,QAAS,kBApGf,SAAC8F,GACnB,IAAMa,EAAsB7T,EAC5B6T,EAAoBqC,OAAOlD,EAAO,GAClCqC,EAAkBxB,GAClByB,GAAmB,EACvB,CA+F2Ca,CAAcnD,EAAM,EAAC,SAEpC,cAAC,IAAK,MAIb1P,EAAOtE,KAAI,SAACiB,EAAOmW,GAChB,GAAmB,SAAfnW,EAAME,MAAkC,WAAfF,EAAME,KAAmB,CAClD,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAERtM,WAAS,EACTrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GACjB5H,SAAOqO,GAAUA,EAAOlY,OAAS,GAAKkY,EAAOlC,KAASsD,QAAQpB,EAAOlC,GAAO0C,IAAoB,UAEhG,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAG1C,SAAfvW,EAAME,MACH,sBACImH,MAAO,CACHkH,WAAY,OACZ9B,MAAO7G,EAAMG,QAAQ6L,KAAK,KAC1B4E,aAAc,QAChB,SAEDrF,EAAOsE,GAAatT,YAAYgP,EAAOsE,IAAc,4BAI9C,WAAfzV,EAAME,MACH,sBACImH,MAAO,CACHkH,WAAY,OACZ9B,MAAO7G,EAAMG,QAAQ6L,KAAK,KAC1B4E,aAAc,QAChB,SAEDrF,EAAOsE,GAAanT,YAAc6O,EAAOsE,IAAc,8BAIhE,eAACgB,EAAA,EAAM,CACHvQ,QAAQ,WACR0D,UAAU,QACVE,WAAS,EACT4M,UAAW,cAAC,IAAU,IACtBjR,GAAI,CAAEyI,YAAa,QAAS,UAEZ,WAAflO,EAAME,KAAoB,gBAAkB,cAC7B,SAAfF,EAAME,MACH,uBAAOA,KAAK,OAAOyW,QAAM,EAAC3D,SAAU,SAACnQ,GAAC,OA7GzD,SAACA,EAAG6S,EAAevE,EAAQsE,EAAW1C,GAC3D,GAAKlQ,EAAE1F,OAAOyZ,MAAd,CAIA,IAAMC,EAAOhU,EAAE1F,OAAOyZ,MAAM,GACpBnX,EAASoX,EAATpX,KAEFqX,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GAAS,IAAD,EACrB,GAAQ,OAAHA,QAAG,IAAHA,GAAW,QAAR,EAAHA,EAAK9Z,cAAM,OAAX,EAAa8J,OAAlB,CAGA,IACMwJ,EADawG,EAAI9Z,OAAf8J,OACY,oBAAgBxH,GACpCiW,EAAcjF,EAAOgF,EAAWtE,EAAQ4B,EAHxC,CAIJ,EACA+D,EAAOI,cAAcL,EAdrB,CAeJ,CA2FuFM,CAAiBtU,EAAGsO,EAAQsE,EAAW1C,EAAM,IAE5E,WAAf/S,EAAME,MACH,uBACIA,KAAK,OAGLkX,UAAU,GAEVC,gBAAgB,GAChBV,QAAM,EACN3D,SAAU,SAACnQ,GAAC,OAjJjC,SAACA,EAAGsO,EAAQsE,EAAW1C,GAC9C,GAAKlQ,EAAE1F,OAAOyZ,MAAd,CACA,IAAMA,EAAQ/T,EAAE1F,OAAOyZ,MACjBE,EAAS,IAAIC,YAEnB,SAASO,EAASC,EAAW/U,GACzB,GAAI+U,GAAaX,EAAM7Z,OACnB2Y,EAAcjT,KAAKiC,UAAUlC,GAAciT,EAAWtE,EAAQ4B,OADlE,CAIA,IAAM8D,EAAOD,EAAMW,GACnBT,EAAOE,OAAS,SAACC,GAAS,IAAD,EACrB,GAAQ,OAAHA,QAAG,IAAHA,GAAW,QAAR,EAAHA,EAAK9Z,cAAM,OAAX,EAAa8J,OAAlB,CAGA,IACMwJ,EADawG,EAAI9Z,OAAf8J,OACY,oBAAgB4P,EAAKW,oBACzChV,EAAYhF,KAAKiT,GACjB6G,EAASC,EAAY,EAAGtT,IAAOC,UAAU1B,GAJzC,CAKJ,EACAsU,EAAOI,cAAcL,EAXrB,CAYJ,CACAS,CAAS,EAAG,GArBe,CAsB/B,CA0HiEG,CAAmB5U,EAAGsO,EAAQsE,EAAW1C,EAAM,SAGnE,UAzDD0C,EAAS,YAAIU,GA4DjC,CAEA,GAAmB,SAAfnW,EAAME,MAAkC,SAAfF,EAAME,KAAiB,CAChD,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAERtM,WAAS,EACTrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GACjB5H,SAAOqO,GAAUA,EAAOlY,OAAS,GAAKkY,EAAOlC,KAASsD,QAAQpB,EAAOlC,GAAO0C,IAAoB,UAEhG,eAACa,EAAA,EAAK,CAAC7Q,GAAI,CAAEmH,SAAU,YAAcjF,UAAU,MAAK,UAChD,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,cACtD,cAACE,EAAA,EAAM,CACHhR,GAAI,CACAmH,SAAU,WACV3C,SAAU,YACVsJ,MAAO,EACPT,IAAK,EACLxL,OAAQ,GACRC,MAAO,eAEXrB,QAAQ,WACR+G,QAAS,kBAAMqI,EAAyBtV,EAAOmR,EAAQ4B,EAAM,EAAC,+BAKtE,cAAC,IAAgB,CACb1L,MAAO,CACHrC,OAAQ,YACRc,YAAaF,EAAMG,QAAQ6L,KAAK,KAChC3D,aAAc,OACd3G,OAAQ,QACRuK,UAAW,QACXC,UAAW,SACXtF,gBAAiB,SAErBkL,SAAU,SAAC7U,GAAC,OAAKA,EAAE8U,iBAAiB,EAAC,SAErC,cAAC,IAAM,CACH1F,YAAajS,EAAMiS,YACnBxB,MAAOU,EAAOsE,IAAc,GAC5BtD,OAAQ,SAACtP,GACL8S,EAAY9S,EAAE1F,OAAOsT,MAAOgF,EAAWtE,EAAQ4B,GAC/CxC,EAAU1N,EAAG4S,EAAW1C,EAC5B,EACAhB,cAAe,SAACC,GAAI,OAAK0D,EAAc1D,EAAMyD,EAAWtE,EAAQ4B,EAAM,EACtExC,UAAW,SAAC1N,GAAC,OAAK0N,EAAU1N,EAAG4S,EAAW1C,EAAM,EAChDb,UAAW,SAACF,GAAI,OAAKE,oBAAUF,EAAqB,SAAfhS,EAAME,KAAkBiQ,YAAUsB,KAAOtB,YAAUC,GAAG,EAC3FjD,QAAS,GACT9F,MAAO,CACH4C,SAAU,WACVmI,UAAW,QACX7K,MAAO,QAEX8K,kBAAkB,yBAEP,UArDXoD,EAAS,YAAIU,GAwDjC,CAEA,GAAmB,SAAfnW,EAAME,KAAiB,CACvB,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAERtM,WAAS,EACTrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GACjB5H,SAAOqO,GAAUA,EAAOlY,OAAS,GAAKkY,EAAOlC,KAASsD,QAAQpB,EAAOlC,GAAO0C,IAAoB,UAEhG,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAAC,IAAU,CACPqB,YAAa,cAAC,EAAe,IAC7B5U,SAAUxB,YAA8B2P,EAAOsE,KAAe,KAC9DoC,gBAAc,EACdC,aAAW,EACXC,eAAe,QACfC,WAAW,qBACXhF,SAAU,SAACrR,GACP,IAAM6N,EAAa7N,EAAOA,EAAKsW,cAAgB,KAC/CvC,EAAclG,EAAYiG,EAAWtE,EAAQ4B,GAC7CsC,GAAmB,EACvB,MACF,UArBMI,EAAS,YAAIU,GAwBjC,CAEA,GAAmB,WAAfnW,EAAME,MAAoC,aAAfF,EAAME,MAAsC,WAAfF,EAAME,KAAmB,CACjF,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAERtM,WAAS,EACTrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GACjB5H,SAAOqO,GAAUA,EAAOlY,OAAS,GAAKkY,EAAOlC,KAASsD,QAAQpB,EAAOlC,GAAO0C,IAAoB,UAEhG,eAACa,EAAA,EAAK,CAAC7Q,GAAI,CAAEmH,SAAU,YAAcjF,UAAU,MAAK,UAChD,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,eACrC,WAAfvW,EAAME,MAAoC,WAAfF,EAAME,OAC/B,cAACuW,EAAA,EAAM,CACHhR,GAAI,CACAmH,SAAU,WACV3C,SAAU,YACVsJ,MAAO,EACPT,IAAK,EACLxL,OAAQ,GACRC,MAAO,eAEXrB,QAAQ,WACR+G,QAAS,kBAAMqI,EAAyBtV,EAAOmR,EAAQ4B,EAAM,EAAC,+BAM1E,cAACmF,EAAA,EAAa,CACVjb,GAAIwY,EACJvV,KAAqB,WAAfF,EAAME,MAAoC,WAAfF,EAAME,KAAoB,OAASF,EAAME,KAC1EuQ,MAAOU,EAAOsE,IAAc,GAC5BxD,YAAajS,EAAMiS,YACnBxS,KAAMgW,EACNtD,OAAQ,SAACtP,GACL,IAAM2M,EAAa3M,EAAE1F,OAAOsT,MAC5BkF,EAAYnG,EAAYiG,EAAWtE,EAAQ4B,GAC3CxC,EAAU1N,EAAG4S,EAAW1C,EAC5B,EACAC,SAAU,SAACnQ,GACP,IAAM2M,EAAa3M,EAAE1F,OAAOsT,MAC5BiF,EAAclG,EAAYiG,EAAWtE,EAAQ4B,EACjD,EACAxC,UAAW,SAAC1N,GAAC,OAAK0N,EAAU1N,EAAG4S,EAAW1C,EAAM,MAClD,UAzCM0C,EAAS,YAAIU,GA4CjC,CAEA,GAAmB,YAAfnW,EAAME,KAAoB,CAC1B,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAERtM,WAAS,EACTrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GACjB5H,SAAOqO,GAAUA,EAAOlY,OAAS,GAAKkY,EAAOlC,KAASsD,QAAQpB,EAAOlC,GAAO0C,IAAoB,UAEhG,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAAC4B,EAAA,EAAM,CACHC,UAAWjH,EAAOsE,GAClBzC,SAAU,SAACxH,GACPkK,EAAclK,EAAMrO,OAAOib,QAAS3C,EAAWtE,EAAQ4B,EAC3D,EACAsF,WAAY,CAAE,aAAc,kBAC9B,UAfM5C,EAAS,YAAIU,GAkBjC,CAEA,GAAmB,YAAfnW,EAAME,KAAoB,CAC1B,IAAMuV,EAAYzV,EAAMP,KAClB6Y,EAAmBtY,EAAM0D,SAAW,GAE1C,OACI,eAAC0S,EAAA,EAAW,CAAoCtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAI,UAC3E,eAAC8H,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAACgC,EAAA,EAAY,CACTtb,GAAIwY,EACJ+C,UAAQ,EACRC,OAAQ,kBAAMpD,GAAmB,EAAM,EACvC3R,QAAS4U,EACT7H,OArSX/M,EAqSsC4U,EArS7B7H,EAqS+CU,EAAOsE,GArS5C/R,EAAQC,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,KAE1D,IAoSIuC,SAAU,SAACnQ,EAAG8V,GACV,IAAMlI,EAAQkI,EAAYA,EAAUlZ,KAAO,GAC3CkW,EAAYlF,EAAOgF,EAAWtE,EAAQ4B,EAC1C,EACA6F,gBAAiB3E,EACjB4E,YAAa,SAACxV,GAAM,OAChB,cAACyV,EAAA,EAAS,2BACFzV,GAAM,IACVoN,MAAOU,EAAOsE,GACd7O,SACIqO,GAAUA,EAAOlY,OAAS,GAAKkY,EAAOlC,KAChCsD,QAAQpB,EAAOlC,GAAO0C,MAGlC,EAENsD,aAAc,SAACC,EAAON,GAAM,OACxB,cAAC/K,EAAA,EAAG,yBAAC/D,UAAU,MAASoP,GAAK,aACzB,sBAAK3R,MAAO,CAAEwG,QAAS,OAAQC,cAAe,UAAW,UACrD,cAACQ,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,KAAI,SACjCwS,EAAO9Y,QAEX8Y,EAAOnC,aAAe,cAACjI,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAI,SAAE8K,EAAOnC,mBAE3D,MAEZ,UArCed,EAAS,YAAIU,GAwC1C,CAnUI,IAACzS,EAAS+M,EAoUd,OAAO,IACX,MAlTKsC,EAqTjB,KAGZ,E,kBChZekG,G,OA9Fc,SAAH,GAA4B,IAAtBxI,EAAK,EAALA,MAAO/M,EAAO,EAAPA,QAC7BkC,EAAQC,cAERqT,EAAmB,SAACzI,GAAK,OAAK/M,EAAQC,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,GAAC,EAE7E0I,EAA+B,SAAC1I,GAClC,IAAM2I,EAAiB1V,EAAQC,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,IACrE,OAAI2I,GACOA,EAAelY,iBAEnB,EACX,EAEMmY,EAAiC,SAAC5I,GACpC,IAAM2I,EAAiB1V,EAAQC,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,IACrE,OAAI2I,GACOA,EAAeE,mBAEnB,EACX,EAEMC,EAAmC,SAAC9I,GACtC,IAAM2I,EAAiB1V,EAAQC,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,IACrE,OAAI2I,GACOA,EAAeI,iBAEnB,EACX,EAEA,OACI,qCACKN,EAAiBzI,IAAU0I,EAA6B1I,IACrD,eAAC9C,EAAA,EAAG,CACAlI,GAAI,CACAmI,EAAG,EACHY,GAAI,EACJhC,gBAAiB5G,EAAMG,QAAQR,UAAUgI,MACzCU,aAAa,OACbrB,SAAU,YACZ,UAEF,cAAC0B,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,KAAI,wBAGtC,qBAAKC,UAAU,SAASsT,wBAAyB,CAAEC,OAAQP,EAA6B1I,SAI/FyI,EAAiBzI,IAAU4I,EAA+B5I,IACvD,eAAC9C,EAAA,EAAG,CACAlI,GAAI,CACAmI,EAAG,EACHY,GAAI,EACJhC,gBAAiB5G,EAAMG,QAAQR,UAAUgI,MACzCU,aAAa,OACbrB,SAAU,YACZ,UAEF,cAAC0B,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,KAAI,gCAGtC,cAAC,IAAS,CACNiN,WAAS,EACT9O,IAAK5B,KAAKC,MAAM2W,EAA+B5I,IAC/CjH,gBAAiB,SAAC3G,GAAC,OAAKuB,YAAgBvB,EAAE,OAKrDqW,EAAiBzI,IAAU8I,EAAiC9I,IACzD,eAAC9C,EAAA,EAAG,CACAlI,GAAI,CACAmI,EAAG,EACHY,GAAI,EACJhC,gBAAiB5G,EAAMG,QAAQR,UAAUgI,MACzCU,aAAa,OACbrB,SAAU,YACZ,UAEF,cAAC0B,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,KAAI,8BAGtC,cAAC,IAAS,CAACiN,WAAS,EAAC9O,IAAKkV,EAAiC9I,GAAQjH,gBAAiB,SAAC3G,GAAC,OAAKuB,YAAgBvB,EAAE,SAKjI,G,2CCwIe8W,EAxNY,SAAH,GAWjB,IAVHjU,EAAK,EAALA,MACA6Q,EAAW,EAAXA,YACA9F,EAAK,EAALA,MACAmJ,EAAU,EAAVA,WACAC,EAAqB,EAArBA,sBACAtW,EAAY,EAAZA,aACAqD,EAAK,EAALA,MACAoM,EAAQ,EAARA,SACA8G,EAAU,EAAVA,WACAC,EAAU,EAAVA,WAEMnU,EAAQC,cAERmU,EAAe,CACjBtB,OAAQ,SAACuB,EAAUnP,GAAK,kCACjBmP,GAAQ,IACXzF,WAAY,GACZC,cAAe,GACfE,YAAa,GACbD,aAAc,GACd7H,OAAQ,UACR0B,WAAY,MACZ/B,gBAAiB1B,EAAMoP,WAAatU,EAAMG,QAAQC,QAAQuH,MAAQ,GAClEd,MAAO,QACP,UAAW,CACPD,gBAAiB5G,EAAMG,QAAQ6L,KAAK,OACvC,EAELuI,QAAS,SAACF,GAAQ,kCACXA,GAAQ,IACXpN,OAAQ,OACRL,gBAAiB,UACjBgI,WAAY,EACZC,cAAe,EACfC,aAAc,EACdC,YAAa,EACb1G,aAAc,GACd,UAAW,CACPnI,YAAaF,EAAMG,QAAQ6L,KAAK,OACnC,EAELwI,YAAa,SAACH,GAAQ,kCACfA,GAAQ,IACX1L,WAAY,OAAK,EAErB8L,SAAU,SAACJ,GAAQ,kCACZA,GAAQ,IACXhV,UAAW,4GACXgJ,aAAc,QAAM,GAI5B,EAAwCvH,mBAAS,IAAG,mBAA7C4T,EAAY,KAAEC,EAAe,KAsGpC,OAbAjQ,qBAAU,kBAAM,kBAAMiQ,EAAgB,GAAG,IAAE,IAE3CjQ,qBAAU,gBACQ5I,IAAV+O,IACuB6J,EAAa3W,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,KAEtEsJ,IAKZ,GAAG,CAACO,IAGA,qCACI,eAAChE,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAER,IAC/B6Q,GAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO6Q,OAE9C,sBAAKlP,MAAO,CAAEuF,SAAU,YAAa,UACjC,cAAC,IAAW,CAER4N,OAAQR,EACRvJ,MA9GS,SAACA,GAAK,OAAK6J,EAAa3W,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,GAAC,CA8GjEyI,CAAiBzI,IA5GJ,GA6GpBgK,kBAxCU,SAAH,SAAM7a,EAAK,EAALA,MAAO2W,EAAW,EAAXA,YAAiBmE,EAAO,EAAPA,QAAO,OACxD,qCACiB,SAAZA,GACG,sBAAKrT,MAAO,CAAEwG,QAAS,OAAQC,cAAe,UAAW,UACrD,8BAAMlO,IACL2W,GAAe,sBAAMlP,MAAO,CAAEkH,WAAY,IAAKiG,WAAY,GAAIC,cAAe,IAAK,SAAE8B,OAGjF,UAAZmE,GACG,qBAAKrT,MAAO,CAAEwG,QAAS,OAAQC,cAAe,UAAW,SACrD,8BAAMlO,QAGf,EA4BS+a,eAAgB,SAACjC,GAAM,OAAKA,EAAO9Y,KAAK,EACxCgb,eAAgB,SAAClC,GAAM,OAAKA,EAAOjZ,IAAI,EACvCob,YAvDI,SAACrL,EAAYsL,GAC7BzU,IACK0U,KAAK,GAAD,OAAIxU,IAAO,oCAA4BhD,EAAa9D,MAAI,2BAAS8D,GAAY,IAAEqW,aAAYC,2BAC/FmB,MAAK,SAACC,GACH,IAEMvX,EAxDM,SAACA,GAKrB,IAJA,IAAIwX,EAAgBxX,EACdyX,EAAoB,GACpBC,EAAe,CAAC,OAAQ,QAAO,WAE5BrT,GAGL,IAFA,IAAMsT,EAAcD,EAAarT,GAAE,WAE1BjL,GACL,IAAM4b,EAASwC,EAAcpe,GACvBwe,EAAiB5C,EAAO2C,GAE1BC,GACAle,OAAOme,KAAKD,GAAgBlQ,SAAQ,SAACyK,GACjC,IAAM2F,EAAkBF,EAAezF,GACjC4F,EAAcxX,IAAOyX,IAAInY,EAAcsS,EAAM,IAE/ChX,MAAMyF,QAAQkX,IACM,SAAhBH,GAA2BG,EAAgBrd,SAASsd,IACpDN,EAAkB3d,KAAKkb,GAEP,SAAhB2C,GAA0BG,EAAgBrd,SAASsd,IACnDN,EAAkB3d,KAAKkb,IAEO,kBAApB8C,IAEM,SAAhBH,GACEG,IAAoBC,GAAe,IAAIE,OAAOH,GAAiBvK,KAAKwK,IAEtEN,EAAkB3d,KAAKkb,GAGP,SAAhB2C,GACCG,IAAoBC,IAAe,IAAIE,OAAOH,GAAiBvK,KAAKwK,IAErEN,EAAkB3d,KAAKkb,GAGnC,GACH,EA/BI5b,EAAI,EAAGA,EAAIoe,EAAcne,OAAQD,GAAK,EAAI,EAA1CA,EAgCR,EAnCIiL,EAAI,EAAGA,EAAIqT,EAAare,OAAQgL,GAAK,EAAI,EAAzCA,GAsCT,IAFC,eAEQjL,GACLoe,EAAgBA,EAAcld,QAAO,SAAC4F,GAAG,OAAKnB,KAAKiC,UAAUd,KAASnB,KAAKiC,UAAUyW,EAAkBre,GAAG,GAAC,EADtGA,EAAI,EAAGA,EAAIqe,EAAkBpe,OAAQD,GAAK,EAAI,EAA9CA,GAIT,OAAOoe,CACX,CAQ4BU,EAFHX,EAASzb,MACU,IAAIxB,QAAO,SAAClB,GAAC,OAAKA,EAAE8C,MAAMic,cAAc1d,SAASqR,EAAWqM,cAAc,KAE1GtB,EAAgB7W,GAChBoX,EAASpX,EACb,GACR,EA8CgBoY,gBAAc,EACd9I,SAAUA,EACV8G,WAAYA,GATPrX,KAAKiC,UAAUnB,IAWxB,wBACI8D,MAAO,CACH+K,UAAW,GACX9K,OAAQ,GACRC,MAAO,GACPiF,gBAAiB,UACjBC,MAAO7G,EAAMG,QAAQ6L,KAAK,KAC1BhF,SAAU,WACV2G,MAAO,GACPT,IAAK,EACLiJ,OAAQ,EACRzH,OAAQ,OACRtP,OAAQ,OACR6H,OAAQ,WAEZnH,MAAM,kBACNxF,KAAK,SACL+M,QAAS,kBAAM+F,EAAS,KAAK,EAAC,SAE9B,cAAC,IAAK,SAGbpM,GAAS,sBAAMS,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,SAzI9D,SAACpV,GACxB,OAAIA,EAAa,IAAN,OAAWA,EAAMqV,QAAQ,OAAQ,KACrC,EACX,CAsI2FC,CAAmBtV,KAEtG,cAAC,EAAoB,CAAC6J,MAAOA,EAAO/M,QAAS4W,MAGzD,E,gKCxLMrG,GAAe1H,YAAO2H,IAAP3H,CAAe,aAChCtH,UAAW,4GACXgJ,aAAc,QAAM,aACbkG,IAAoBC,SAAY,CACnCC,UAAW,aACX,OAAQ,CACJlH,QAAS,GACTmH,OAAQ,OAKdC,GAAkBzP,sBAAW,SAAyB,EAAoBC,GAAM,IAAxB0L,EAAK,EAALA,MAAOxD,EAAO,EAAPA,QACjE,OACI,wBACI5F,MAAO,CACHmF,gBAAiB,UACjBgI,WAAY,EACZC,cAAe,EACfC,aAAc,GACdC,YAAa,GACb1G,aAAc,GACd1G,MAAO,OACPD,OAAQ,GACRtC,OAAO,oBACP6H,OAAQ,UACR0B,WAAY,OACZqG,UAAW,QACXnI,MAAO,UACPoI,QAAS,IAEb3U,KAAK,SACL+M,QAASA,EACTlI,IAAKA,EAAI,SAER0L,GAGb,IAylBe0L,IAhlBS,SAAH,GAWd,IAVH9Y,EAAM,EAANA,OACAC,EAAU,EAAVA,WACAvD,EAAa,EAAbA,cACAqc,EAAoB,EAApBA,qBACA7Y,EAAY,EAAZA,aACA8Y,EAAY,EAAZA,aACAC,EAAQ,EAARA,SACAC,EAAwB,EAAxBA,yBACAjH,EAAwB,EAAxBA,yBACG3P,EAAM,iBAEHC,EAAQC,cAER2W,EAAcrS,cAEdsS,EAAY,SAACtL,GACf,IAAM2C,EAAe3C,EACrB2C,EAAazT,OAAS,KACtBgc,EAAavI,EAAcxQ,EAC/B,EAEMiN,EAAY,SAAC1N,EAAG4S,GAClB,IAAM/E,EAAiB7N,EAAE1F,OAAOqT,aAC1BG,EAA2B9N,EAAE1F,OAAOsT,MAAM5B,UAAU,EAAG6B,GACvDE,EAA0B/N,EAAE1F,OAAOsT,MAAM5B,UAAU6B,EAAgB7N,EAAE1F,OAAOsT,MAAM1T,QAClF8Y,EAAI,UAAMvS,EAAU,YAAImS,GAO9B8G,GAAyB,EANZ,CACT5L,2BACAC,0BACAiF,OACAvS,cAGR,EAkEMoZ,EAAsB,WAAH,IAAIhZ,EAAO,uDAAG,GAAI+M,EAAK,8CAAK/M,EAAQC,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,GAAC,EAIpG,OACI,mCACI,cAAC9C,EAAA,EAAG,CAAClI,GAAI,CAAE8B,MAAO,KAAM,SACpB,cAAC,IAAM,CACHoV,oBAAkB,EAClB5c,cAAeA,EACf6c,iBAAkBC,MAAaC,MAAMV,GACrCE,SAAQ,iDAAE,WAAOnL,EAAO,GAAD,qFAAI4L,EAAS,EAATA,UAAWC,EAAS,EAATA,UAAWC,EAAa,EAAbA,cAC7CV,GAAyB,GACzB,IACQC,EAAYjS,UACZ4G,EAAO9Q,QAAS,EAChB2c,EAAU,CAAE3P,SAAS,IACrB4P,GAAc,GACdX,EAASnL,EAAQ7N,GASzB,CAPE,MAAO4Z,GACLC,QAAQvW,MAAMsW,GACVV,EAAYjS,UACZyS,EAAU,CAAE3P,SAAS,IACrB0P,EAAU,CAAE1c,OAAQ6c,EAAI5R,UACxB2R,GAAc,GAEtB,CAAC,2CACJ,qDAjBO,GAiBN,SAED,gBAAGhI,EAAM,EAANA,OAAQmI,EAAU,EAAVA,WAAYC,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAAcC,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aAAcrM,EAAM,EAANA,OAAM,OACnF,+CAAMsM,YAAU,EAACnB,SAAUgB,GAAkB3X,GAAM,cAC9CtC,EAAOtE,KAAI,SAACiB,GACT,GAAmB,SAAfA,EAAME,MAAkC,WAAfF,EAAME,KAAmB,CAClD,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAK5H,MAAOyP,QAAQpB,EAAOQ,IAAY,UAC3F,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAG1C,SAAfvW,EAAME,MACH,sBACImH,MAAO,CACHkH,WAAY,OACZ9B,MAAO7G,EAAMG,QAAQ6L,KAAK,KAC1B4E,aAAc,QAChB,SAEDrF,EAAOsE,GAAatT,YAAYgP,EAAOsE,IAAc,4BAI9C,WAAfzV,EAAME,MACH,sBACImH,MAAO,CACHkH,WAAY,OACZ9B,MAAO7G,EAAMG,QAAQ6L,KAAK,KAC1B4E,aAAc,QAChB,SAEDrF,EAAOsE,GAAanT,YAAc6O,EAAOsE,IAAc,8BAIhE,eAACgB,EAAA,EAAM,CACHvQ,QAAQ,WACR0D,UAAU,QACVE,WAAS,EACT4M,UAAW,cAAC,IAAU,IACtBjR,GAAI,CAAEyI,YAAa,QAAS,UAEZ,WAAflO,EAAME,KAAoB,gBAAkB,cAC7B,SAAfF,EAAME,MACH,uBACIA,KAAK,OACLyW,QAAM,EACN3D,SAAU,SAACnQ,GAAC,OAxGvC,SAACA,EAAG0a,EAAepM,EAAQsE,GAEhD,GADA8G,GAAyB,GACpB1Z,EAAE1F,OAAOyZ,MAAd,CAEA,IAAMC,EAAOhU,EAAE1F,OAAOyZ,MAAM,GACpBnX,EAASoX,EAATpX,KAEFqX,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GAAS,IAAD,EACrB,GAAQ,OAAHA,QAAG,IAAHA,GAAW,QAAR,EAAHA,EAAK9Z,cAAM,OAAX,EAAa8J,OAAlB,CAGA,IAEMwJ,EAFawG,EAAI9Z,OAAf8J,OAEY,oBAAgBxH,GACpC8d,EAAc9H,EAAWhF,GACzB,IAAMiN,EAAe,2BACdvM,GAAM,kBACRsE,EAAYhF,IAEjBgM,EAAUiB,EATV,CAUJ,EACA5G,EAAOI,cAAcL,EApBM,CAqB/B,CAiFqEM,CAAiBtU,EAAG0a,EAAepM,EAAQsE,EAAU,IAG9D,WAAfzV,EAAME,MACH,uBACIA,KAAK,OAGLkX,UAAU,GAEVC,gBAAgB,GAChBV,QAAM,EACN3D,SAAU,SAACnQ,GAAC,OAnJrC,SAACA,EAAG0a,EAAepM,EAAQsE,GAElD,GADA8G,GAAyB,GACpB1Z,EAAE1F,OAAOyZ,MAAd,CACA,IAAMA,EAAQ/T,EAAE1F,OAAOyZ,MACjBE,EAAS,IAAIC,YAEnB,SAASO,EAASC,EAAW/U,GACzB,GAAI+U,GAAaX,EAAM7Z,OAAvB,CACIwgB,EAAc9H,EAAWhT,KAAKiC,UAAUlC,IACxC,IAAMkb,EAAe,2BACdvM,GAAM,kBACRsE,EAAYhT,KAAKiC,UAAUlC,KAEhCia,EAAUiB,EAEd,KARA,CASA,IAAM7G,EAAOD,EAAMW,GACnBT,EAAOE,OAAS,SAACC,GAAS,IAAD,EACrB,GAAQ,OAAHA,QAAG,IAAHA,GAAW,QAAR,EAAHA,EAAK9Z,cAAM,OAAX,EAAa8J,OAAlB,CAGA,IACMwJ,EADawG,EAAI9Z,OAAf8J,OACY,oBAAgB4P,EAAKW,oBACzChV,EAAYhF,KAAKiT,GACjB6G,EAASC,EAAY,EAAGtT,IAAOC,UAAU1B,GAJzC,CAKJ,EACAsU,EAAOI,cAAcL,EAXrB,CAYJ,CACAS,CAAS,EAAG,GA1Be,CA2B/B,CAsHqEG,CAAmB5U,EAAG0a,EAAepM,EAAQsE,EAAU,OAInFR,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,QA5DHA,EAiE1B,CAEA,GAAmB,SAAfzV,EAAME,MAAkC,SAAfF,EAAME,KAAiB,CAChD,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAK5H,MAAOyP,QAAQpB,EAAOQ,IAAY,UAC3F,eAACa,EAAA,EAAK,CAAC7Q,GAAI,CAAEmH,SAAU,YAAcjF,UAAU,MAAK,UAChD,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,cACtD,cAACE,EAAA,EAAM,CACHhR,GAAI,CACAmH,SAAU,WACV3C,SAAU,YACVsJ,MAAO,EACPT,IAAK,EACLxL,OAAQ,GACRC,MAAO,eAEXrB,QAAQ,WACR+G,QAAS,kBAAMqI,EAAyBtV,EAAOmR,EAAO,EAAC,+BAK/D,cAAC,IAAgB,CACb9J,MAAO,CACHrC,OAAQ,YACRc,YAAaF,EAAMG,QAAQ6L,KAAK,KAChC3D,aAAc,OACd3G,OAAQ,QACRuK,UAAW,QACXC,UAAW,SACXtF,gBAAiB,SAErBkL,SAAU,SAAC7U,GAAC,OAAKA,EAAE8U,iBAAiB,EAAC,SAErC,cAAC,IAAM,CACH1F,YAAajS,EAAMiS,YACnBxB,MAAOU,EAAOsE,IAAc,GAC5BtD,OAAQ,SAACtP,GACL,IAAM6a,EAAe,2BACdvM,GAAM,kBACRsE,EAAY5S,EAAE1F,OAAOsT,QAE1BgM,EAAUiB,GACVnN,EAAU1N,EAAG4S,EACjB,EACA1D,cAAe,SAACC,GACZuL,EAAc9H,EAAWzD,EAC7B,EACAzB,UAAW,SAAC1N,GAAC,OAAK0N,EAAU1N,EAAG4S,EAAU,EACzCvD,UAAW,SAACF,GAAI,OACZE,oBAAUF,EAAqB,SAAfhS,EAAME,KAAkBiQ,YAAUsB,KAAOtB,YAAUC,GAAG,EAE1EjD,QAAS,GACT9F,MAAO,CACH4C,SAAU,WACVmI,UAAW,QACX7K,MAAO,QAEX8K,kBAAkB,uBAGzB4C,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,QA5DHA,EAiE1B,CAEA,GAAmB,SAAfzV,EAAME,KAAiB,CACvB,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAK5H,MAAOyP,QAAQpB,EAAOQ,IAAY,UAC3F,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAAC,IAAU,CACPqB,YAAa,cAAC,GAAe,IAC7B5U,SAAUxB,YAA8B2P,EAAOsE,KAAe,KAC9DoC,gBAAc,EACdC,aAAW,EACXC,eAAe,QACfC,WAAW,qBACXhF,SAAU,SAACrR,GACP,IAAM8O,EAAQ9O,EAAOA,EAAKsW,cAAgB,KAC1CsE,GAAyB,GACzBgB,EAAc9H,EAAWhF,GACzB,IAAMiN,EAAe,2BACdvM,GAAM,kBACRsE,EAAYhF,IAEjBgM,EAAUiB,EACd,IAEHzI,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,QAzBHA,EA8B1B,CAEA,GAAmB,WAAfzV,EAAME,MAAoC,aAAfF,EAAME,MAAsC,WAAfF,EAAME,KAAmB,CACjF,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAK5H,MAAOyP,QAAQpB,EAAOQ,IAAY,UAC3F,eAACa,EAAA,EAAK,CAAC7Q,GAAI,CAAEmH,SAAU,YAAcjF,UAAU,MAAK,UAChD,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,eACrC,WAAfvW,EAAME,MAAoC,WAAfF,EAAME,OAC/B,cAACuW,EAAA,EAAM,CACHhR,GAAI,CACAmH,SAAU,WACV3C,SAAU,YACVsJ,MAAO,EACPT,IAAK,EACLxL,OAAQ,GACRC,MAAO,eAEXrB,QAAQ,WACR+G,QAAS,kBAAMqI,EAAyBtV,EAAOmR,EAAO,EAAC,+BAMnE,cAAC+G,EAAA,EAAa,CACVjb,GAAIwY,EACJvV,KAAqB,WAAfF,EAAME,MAAoC,WAAfF,EAAME,KAAoB,OAASF,EAAME,KAC1E+R,YAAajS,EAAMiS,YACnB0L,YAAa3d,EAAM4d,KACnBC,QAAS7d,EAAM4d,MAAQ,EACvBE,QAAS9d,EAAM4d,MAAQ,EACvBnN,MAAOU,EAAOsE,IAAc,GAC5BhW,KAAMgW,EACNtD,OAAQ,SAACtP,GACLua,EAAWva,GACX4Z,EAAUtL,GACVZ,EAAU1N,EAAG4S,EACjB,EACAlF,UAAW,SAAC1N,GAAC,OAAK0N,EAAU1N,EAAG4S,EAAU,EACzCzC,SAAUqK,IAEbpI,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,QAxCHA,EA6C1B,CAEA,GAAmB,YAAfzV,EAAME,KAAoB,CAC1B,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAK5H,MAAOyP,QAAQpB,EAAOQ,IAAY,UAC3F,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAAC4B,EAAA,EAAM,CACHC,UAAWjH,EAAOsE,GAClBzC,SAAU,SAACxH,GACP+Q,GAAyB,GACzBgB,EAAc9H,EAAWjK,EAAMrO,OAAOib,SACtC,IAAMsF,EAAe,2BACdvM,GAAM,kBACRsE,EAAYjK,EAAMrO,OAAOib,UAE9BqE,EAAUiB,EACd,EACArF,WAAY,CAAE,aAAc,kBAhBlB5C,EAoB1B,CAEA,GAAmB,iBAAfzV,EAAME,KAAyB,CAC/B,IAAMuV,EAAYzV,EAAMP,KACxB,OACI,cAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAI,SACxD,cAAC,EAAkB,CACf9I,MAAO1F,EAAMJ,MACb2W,YAAavW,EAAMuW,YACnB9F,MAAOU,EAAOsE,GACdmE,WAAY5Z,EAAM4Z,WAClBC,sBAAuB7Z,EAAM6Z,uBAAyB,GACtDtW,aAAcA,EACdqD,MAAOnE,KAAKiC,UAAUuQ,EAAOQ,IAC7BzC,SAAU,SAAC2F,GACP,IAAMlI,EAAQkI,EAAYA,EAAUlZ,KAAO,GAC3C8d,EAAc9H,EAAWhF,GACzB,IAAMiN,EAAe,2BACdvM,GAAM,kBACRsE,EAAYhF,IAEjBgM,EAAUiB,EACd,EACA5D,WAAY,kBAAMyC,GAAyB,EAAM,EACjDxC,WAAY,WAERwD,EAAc9H,EADA,GAElB,KAtBUA,EA0B1B,CAEA,GAAmB,YAAfzV,EAAME,KAAoB,CAC1B,IAAMuV,EAAYzV,EAAMP,KACxB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAI,UACxD,eAAC8H,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAACgC,EAAA,EAAY,CACTtb,GAAIwY,EACJ+C,UAAQ,EACRC,OAAQ,kBAAM8D,GAAyB,EAAM,EAC7C7Y,QAAS1D,EAAM0D,SAAW,GAC1B+M,MAAOiM,EAAoB1c,EAAM0D,QAASyN,EAAOsE,KA1UzD,GA2UQzC,SAAU,SAACnQ,EAAG8V,GACV,IAAMlI,EAAQkI,EAAYA,EAAUlZ,KAAO,GAC3C8d,EAAc9H,EAAWhF,GACzB,IAAMiN,EAAe,2BACdvM,GAAM,kBACRsE,EAAYhF,IAEjBgM,EAAUiB,EACd,EACAhI,cAAe,SAAC7S,EAAG4N,GACVA,GAAO8M,EAAc9H,EAAW,GACzC,EACAtD,OAAQiL,EACRxE,gBAAiB3E,GACjB4E,YAAa,SAACxV,GAAM,OAChB,cAACyV,EAAA,EAAS,2BAAKzV,GAAM,IAAEoN,MAAOU,EAAOsE,GAAY7O,MAAOyP,QAAQpB,EAAOQ,MAAe,EAE1FsD,aAAc,SAACC,EAAON,GAAM,OACxB,cAAC/K,EAAA,EAAG,yBAAC/D,UAAU,MAASoP,GAAK,aACzB,sBAAK3R,MAAO,CAAEwG,QAAS,OAAQC,cAAe,UAAW,UACrD,cAACQ,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,KAAI,SACjCwS,EAAO9Y,QAEX8Y,EAAOnC,aACJ,cAACjI,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAI,SAAE8K,EAAOnC,mBAGxC,IAGbtB,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,MAGjB,cAAC,EAAoB,CAAChF,MAAOU,EAAOsE,GAAY/R,QAAS1D,EAAM0D,SAAW,OA9C5D+R,EAiD1B,CAEA,GAAmB,UAAfzV,EAAME,KAAkB,CACxB,IAAM6d,EAAkB/d,EAAM+U,YACxBiJ,EAAgBhe,EAAMI,MACtBqV,EAAYzV,EAAMP,KAClBwe,EAAmB9M,EAAOsE,IAAc,GAE9C,OACI,eAACa,EAAA,EAAK,CAAC7Q,GAAI,CAAE+I,GAAI,GAAI,UACjB,eAAC8H,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAAC,EAAoB,CACjBxW,cAAeke,EACflJ,YAAagJ,EACbza,WAAYA,EACZ0R,eAAgBS,EAChBR,OAAQA,EAAOQ,GAAaR,EAAOQ,GAAa,GAChDP,mBAAoB,SAACtB,GACjB2J,EAAc9H,EAAW7B,EAC7B,EACAuB,iBAAkB,SAACvB,GACf2J,EAAc9H,EAAW7B,GACzB,IAAM8J,EAAe,2BACdvM,GAAM,kBACRsE,EAAY7B,IAEjB6I,EAAUiB,EACd,EACAtI,kBAAmB,SAACxB,GAChB2J,EAAc9H,EAAW7B,GACzB,IAAM8J,EAAe,2BACdvM,GAAM,kBACRsE,EAAY7B,IAEjB6I,EAAUiB,EACd,EACArI,mBAAoB,SAAC6I,EAAeC,GAC5BA,EAAM5B,EAAyB2B,EAAeC,GAC7C5B,EAAyB2B,EAClC,EACA5I,yBAA0B,SAAC/D,EAAgBD,EAAiBuC,GAOxDyB,EAAyBtV,EAAOmR,EANV,CAClBI,iBACAD,kBACAuC,iBACA9T,cAAeke,GAGvB,IAEJ,cAACtQ,EAAA,EAAG,CAAiBlI,GAAI,CAAEgJ,GAAI,GAAI,SAC/B,cAACjH,EAAA,EAAa,UACV,eAACiP,EAAA,EAAM,CACH2H,kBAAgB,EAChBtU,WAAS,EACTwJ,KAAK,QACLpN,QAAQ,WACRuG,MAAM,YACNiK,UAAW,cAAC,IAAQ,IACpBzJ,QAAS,WACLsP,GAAyB,GACzB,IAAIpc,EAAS,CAAC,EACd,GAAIH,EAAMC,SAAWD,EAAMC,QAAQlD,OAC/BoD,EAASH,EAAMC,QAAQ,QAEvB,IAAK,IAAInD,EAAI,EAAGA,EAAIkhB,EAAcjhB,OAAQD,GAAK,EAC3CqD,EAAO6d,EAAclhB,GAAG2C,MAAQue,EAAclhB,GAAGmD,SAAW,GAGpEge,EAAiBzgB,KAAK2C,GA3fvD,SAACgR,EAAQkN,EAAYC,GACxC,IAAMxK,EAAY,2BACX3C,GAAM,kBACRmN,EAAYD,IAEjBhC,EAAavI,EAAcxQ,EAC/B,CAsfwDib,CAAepN,EAAQ8M,EAAkBxI,EAC7C,EAAE,iBAEGzV,EAAMJ,YAvBb6V,KA5CaA,EAyEnC,CACA,OAAO,IACX,IAEA,cAAC9H,EAAA,EAAG,CAAClI,GAAI,CAAE+I,GAAI,GAAI,SACf,cAAChH,EAAA,EAAa,UACV,cAACiP,EAAA,EAAM,CACH2H,kBAAgB,EAChBI,SAAUhB,GAAgBpgB,OAAOme,KAAKtG,GAAQlY,OAAS,EACvD+M,WAAS,EACTwJ,KAAK,QACLpT,KAAK,SACLgG,QAAQ,YACRuG,MAAM,YAAW,6BAM1B,OAM/B,C,+UC5oBe,EAZQ,SAACgS,GAAkB,OAAKC,IAAOhD,IAAI,eAAgB,CAAErY,OAAQ,CAAEob,uBAAuB,EAY9F,EAVa,SAAChf,GAAI,OAAKif,IAAOhD,IAAI,qBAAD,OAAsBjc,GAAO,EAU9D,EARe,SAACxC,EAAI0hB,GAAW,OAAKD,IAAOhD,IAAI,gBAAD,OAAiBze,GAAM,CAAEoG,OAAQ,CAAEsb,gBAAgB,EAQjG,EANa,SAACC,GAAc,OAAKF,IAAO3D,KAAK,eAAgB6D,EAAe,EAM5E,EAJU,SAAC3hB,EAAI2hB,GAAc,OAAKF,IAAOG,IAAI,gBAAD,OAAiB5hB,GAAM2hB,EAAe,EAIlF,EAFU,SAAC3hB,GAAE,OAAKyhB,IAAOhgB,OAAO,gBAAD,OAAiBzB,GAAK,ECPrD,EAHU,SAAC6hB,GAAY,OAAKJ,IAAOhD,IAAI,UAAW,CAAErY,OAAQ,CAAEyb,iBAAiB,EAG/E,EAFa,WAAH,OAASJ,IAAOhD,IAAI,sBAAsB,E,kKCoC7DzH,EAAe1H,YAAO2H,IAAP3H,CAAe,aAChCtH,UAAW,4GACXgJ,aAAc,QAAM,aACbkG,IAAoBC,SAAY,CACnCC,UAAW,aACX,OAAQ,CACJlH,QAAS,GACTmH,OAAQ,OAKdyK,EAAqB,uBAyoBZC,IAroBS,SAAH,GASd,IARHC,EAAa,EAAbA,cACA3b,EAAU,EAAVA,WACAvD,EAAa,EAAbA,cACAmf,EAAiB,EAAjBA,kBACA7C,EAAY,EAAZA,aACA8C,EAAa,EAAbA,cACA7C,EAAQ,EAARA,SACG3W,EAAM,iBAEH6W,EAAcrS,cACdvE,EAAQC,cAEd,EAAwDa,mBAAS,CAAC,GAAE,mBAA7D0Y,EAAoB,KAAEC,GAAuB,KACpD,GAAgD3Y,mBAAS,CAAC,GAAE,qBAArD4Y,GAAgB,MAAEC,GAAmB,MAC5C,GAAoD7Y,mBAAS,IAAG,qBAAzD+X,GAAkB,MAAEe,GAAqB,MAChD,GAAgD9Y,mBAAS,IAAG,qBAArD+Y,GAAgB,MAAEC,GAAmB,MAC5C,GAAkDhZ,mBAAS,IAAG,qBAAvDiZ,GAAiB,MAAEC,GAAoB,MAC9C,GAAkDlZ,mBAAS,IAAG,qBAAvDmZ,GAAiB,MAAEC,GAAoB,MAExCC,GAAyBC,YAAOC,GAChCC,GAA8BF,YAAOC,GACrCE,GAA2BH,YAAOC,GAElCxD,GAAY,SAACtL,GACf,IAAM2C,EAAe3C,EACrB2C,EAAazT,OAAS,KACtBgc,EAAavI,EAAcxQ,EAC/B,EAEM8c,GAA2B,SAACjP,GAC9B,GAAgC,IAA5BsO,GAAiB1iB,OAAc,MAAM,IAAIsjB,MAAM,2BAGnD,IADA,IAAMC,EAAiB,CAAC,EACfxjB,EAAI,EAAGA,EAAI2iB,GAAiB1iB,OAAQD,GAAK,EAAG,CACjD,IAAMyjB,EAAgBd,GAAiB3iB,GAAG2C,KACtC8gB,KAAiBpP,IAAQmP,EAAeC,GAAiBpP,EAAOoP,GACxE,CASA,cAROD,EAAe7gB,KAEL,CACbA,KAAM0R,EAAO1R,KACbgf,mBAAoBtN,EAAOhO,iBAC3Bmd,iBAIR,EAUME,GAAwB,WAC1B,IAAMC,EAAexB,EAAcjhB,QAAO,SAACkO,GAAI,OAAKuT,GAAiBiB,OAAM,SAACC,GAAS,OAAKzU,EAAKzM,OAASkhB,EAAUlhB,IAAI,GAAC,IACvHigB,GAAoB,IACpBI,GAAqB,IAErBX,EAAcsB,EAAcnd,EAChC,EAEMsd,GAA8B,SAACnQ,GAGjC,IAFA,IAAIqD,EAAerR,KAAKC,MAAMD,KAAKiC,UAAU4a,KAEpCxiB,EAAI,EAAGA,EAAI2iB,GAAiB1iB,OAAQD,GAAK,EAAG,CACjD,IAAMyjB,EAAgBd,GAAiB3iB,GAAG2C,KACtC8gB,KAAiBzM,UAAqBA,EAAayM,EAC3D,CACAzM,EAAY,2BACLA,GAAY,IACf+M,qBAAsBpQ,IAE1B4L,EAAavI,EAAcxQ,EAC/B,EAEMwd,GAAkB,iDAAG,WAAOhC,GAAY,2FACnBmB,EAA+BnB,GAAa,OAArD,OACDtf,OACTghB,KACAI,GAA4B,KAC/B,2CACJ,gBANuB,sCAQlBG,GAAwB,SAACC,GAC3B,IAEMC,EAAOC,OAAOC,SAAWD,OAAOE,WAFlB,KAE8C,EAC5DtO,EAAMoO,OAAOG,SAAWH,OAAOI,YAFhB,KAE8C,IAE7DC,EAAMP,EAEZ,OADcE,OAAOrX,KAAK0X,EAFf,qBAE0B,SAAD,OANhB,IAMsC,mBALrC,IAK4D,iBAASN,EAAI,gBAAQnO,GAE1G,EAEM4J,GAAsB,SAAChZ,EAAS+M,GAAK,OAAK/M,EAAQC,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASgR,CAAK,GAAC,EAwF/F,OAnFAnG,qBAAU,WACN,GAAI4V,GAA4B1gB,KAAM,CAClC,IAAMmgB,EAAoB,GAC1B,GAAIO,GAA4B1gB,KAAKzC,OACjC,IAAK,IAAID,EAAI,EAAGA,EAAIojB,GAA4B1gB,KAAKzC,OAAQD,GAAK,EAC9D6iB,EAAkBniB,KAAK,CACnBgkB,IAAKtB,GAA4B1gB,KAAK1C,GAAG0kB,IACzC/hB,KAAMygB,GAA4B1gB,KAAK1C,GAAG2C,OAItDkgB,EAAkBniB,KAAK,CACnBiC,KAAMsf,IAEVa,GAAqBD,GACjBV,EAActb,MAAK,SAACQ,GAAG,MAAkB,yBAAbA,EAAI1E,IAA+B,KArE/C,SAACgW,EAAWgM,GACpC,IAAMC,EAAgB,2BACftC,GAAoB,kBACtB3J,EAAYoH,IAAW,eAAG4E,EAAgB5E,MAAa8E,SAAS,GAAD,OAAIlM,EAAS,qBAEjF4J,GAAwBqC,EAC5B,CAgEYE,CAAoB,uBAAwB,OAEpD,CAGJ,GAAG,CAAC1B,GAA4B1gB,OAGhC8K,qBAAU,WACN,GAAIyV,GAAuBvgB,KAAM,CAC7B,IAAMqiB,EAAsB9B,GAAuBvgB,KAAKwB,YASxD6gB,EAAoBC,QAPQ,CACxBliB,MAAO,kBACPH,KAAM,OACNS,KAAM,SACND,QAAS,KAKbyf,GAAoBmC,GAIpB,IAFA,IAAMpB,EAAexB,EAAa,WAEzBniB,GACL,IAAMyjB,EAAgBsB,EAAoB/kB,GAAG2C,UACmBiC,IAA5Dud,EAActb,MAAK,SAACQ,GAAG,OAAKA,EAAI1E,OAAS8gB,CAAa,KACtDE,EAAajjB,KAAKqkB,EAAoB/kB,GACzC,EAJIA,EAAI,EAAGA,EAAI+kB,EAAoB9kB,OAAQD,GAAK,EAAI,EAAhDA,GAMTqiB,EAAcsB,EAAcnd,EAChC,CAGJ,GAAG,CAACyc,GAAuBvgB,OAG3B8K,qBAAU,WACN,GAAI6V,GAAyB3gB,KAAM,CAC/B,IAAMsU,EAAY,uCACXwL,IACAa,GAAyB3gB,KAAK8gB,gBAAc,IAC/C7gB,KAAM0gB,GAAyB3gB,KAAKC,OAExC4c,EAAavI,EAAcxQ,EAC/B,CAGJ,GAAG,CAAC6c,GAAyB3gB,OAG7B8K,qBAAU,WACNiV,GAAoBxf,GAChBA,GAAiBA,EAAcoD,mBAC/B+c,GAA4BlZ,QAAQjH,EAAcoD,kBAClDqc,GAAsBzf,EAAcoD,kBAI5C,GAAG,CAACpD,IAGJuK,qBAAU,WACN+U,GAAwBH,EAC5B,GAAG,CAACA,IAGA,mCACI,cAACvR,EAAA,EAAG,CAAClI,GAAI,CAAE8B,MAAO,KAAM,SACpB,cAAC,IAAM,CACHoV,oBAAkB,EAClB5c,cAAeuf,GACf1C,iBAAkBC,MAAaC,MAAMsC,GACrC9C,SAAQ,iDAAE,WAAOnL,EAAO,GAAD,mGAAuC,GAAnC4L,EAAS,EAATA,UAAWC,EAAS,EAATA,UAAWC,EAAa,EAAbA,cAAa,UAElDT,EAAYjS,QAAQ,CAAD,gBAEiF,IAD9FwX,EACF5Q,GAAUA,EAAO0P,sBAAwB1P,EAAO0P,qBAAqBphB,OAASsf,IAE1B,IAA5BU,GAAiB1iB,QAAiBoU,EAAOhO,iBAAiB,iBAClFmZ,EAASnL,EAAOhO,iBAAgB,2BAAQgO,GAAM,IAAE9Q,QAAQ,IAAS,CAAEA,QAAQ,GAAQiD,GACnF0Z,EAAU,CAAE3P,SAAS,IACrB4P,GAAc,GAAM,wBAEyB,GAAvCkB,EAAOiC,GAAyBjP,IAElC4Q,EAAmB,CAAD,iCACD9B,EAAkC9B,GAAK,QAAxDlD,EAAQ,gDAESgF,EAA+B9O,EAAO0P,qBAAqBW,IAAKrD,GAAK,QAAtFlD,EAAQ,mBAERA,EAASzb,KAAK,CAAD,oBAET2R,EAAOhO,iBAAiB0Y,cAAc1d,SAAS,UAAU,CAAD,iCAC3B6jB,EAA2B/G,EAASzb,KAAKgiB,KAAI,QAyBhB,OAzBpDR,EAAc,OACdiB,EAAclB,GAAsBC,EAAexhB,MAEnD0iB,EAAe,iDAAG,WAAO1W,GAAK,iFACb,YAAfA,EAAMhM,OACN0hB,OAAOiB,oBAAoB,UAAWD,GAAiB,GAEjDE,EAAe,CACjBjf,iBAAkBgO,EAAOhO,iBACzB0d,qBAAsB,CAClBW,IAAKvG,EAASzb,KAAKgiB,IACnB/hB,KAAMwb,EAASzb,KAAKC,MAExBY,QAAQ,GAEZmgB,KACAlE,EAAS8F,EAAc9e,GACvB0Z,EAAU,CAAE3P,SAAS,IACrB4P,GAAc,GAEVgF,GACAA,EAAYI,SAEnB,2CACJ,gBArBoB,sCAsBrBnB,OAAOoB,iBAAiB,UAAWJ,GAAiB,GAAM,2BAIxDE,EAAe,CACjBjf,iBAAkBgO,EAAOhO,iBACzB0d,qBAAsB,CAClBW,IAAKvG,EAASzb,KAAKgiB,IACnB/hB,KAAMwb,EAASzb,KAAKC,MAExBY,QAAQ,GAEZmgB,KACAlE,EAAS8F,EAAc9e,GACvB0Z,EAAU,CAAE3P,SAAS,IACrB4P,GAAc,GAAM,8BAEd,IAAIoD,MAAMpF,GAAS,0DAKrCkC,QAAQvW,MAAM,EAAD,IACT4V,EAAYjS,UACZyS,EAAU,CAAE3P,SAAS,IACrB0P,EAAU,CAAE1c,OAAQ,KAAIiL,UACxB2R,GAAc,IACjB,0DAER,qDA3EO,GA2EN,SAED,gBAAGhI,EAAM,EAANA,OAAQmI,EAAU,EAAVA,WAAYC,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAAcC,EAAa,EAAbA,cAAeC,EAAY,EAAZA,aAAcrM,EAAM,EAANA,OAAM,OACnF,+CAAMsM,YAAU,EAACnB,SAAUgB,GAAkB3X,GAAM,cAC9CsZ,EAAclgB,KAAI,SAACiB,GAChB,GAAmB,YAAfA,EAAME,KAAoB,CAC1B,IAAMuV,EAAYzV,EAAMP,KAClB6Y,EAAmBtY,EAAM0D,SAAW,GAE1C,OACI,eAAC0S,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAI,UACxD,eAAC8H,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAACgC,EAAA,EAAY,CACTtb,GAAIwY,EACJ+C,UAAQ,EACR9U,QAAS4U,EACT7H,MAAOiM,GAAoBpE,EAAkBnH,EAAOsE,KA3L5D,GA4LQzC,SAAU,SAACnQ,EAAG8V,GACV,IAAMlI,EAAQkI,EAAYA,EAAUlZ,KAAO,GAC3C8d,EAAc9H,EAAWhF,GACzB,IAAMiN,EAAe,eAChBjI,EAAYhF,GAEjBgM,GAAUiB,GACV8C,KACI7H,GACAuH,GAA4BlZ,QAAQyJ,GACpC+O,GAAsB/O,IAEtBmP,GAAqB,GAE7B,EACAzN,OAAQiL,EACRxE,gBAAiB3E,EACjB4E,YAAa,SAACxV,GAAM,OAChB,cAACyV,EAAA,EAAS,2BAAKzV,GAAM,IAAEoN,MAAOU,EAAOsE,GAAY7O,MAAOyP,QAAQpB,EAAOQ,MAAe,EAE1FsD,aAAc,SAACC,EAAON,GAAM,OACxB,cAAC/K,EAAA,EAAG,yBAAC/D,UAAU,MAASoP,GAAK,aACzB,sBAAK3R,MAAO,CAAEwG,QAAS,OAAQC,cAAe,UAAW,UACrD,cAACQ,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,KAAI,SACjCwS,EAAO9Y,QAEX8Y,EAAOnC,aACJ,cAACjI,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAI,SAAE8K,EAAOnC,mBAGxC,IAGbtB,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,QA7CHA,EAkD1B,CACA,OAAO,IACX,IAECwJ,EAActb,MAAK,SAACQ,GAAG,MAAkB,yBAAbA,EAAI1E,IAA+B,KAC5D,eAAC2W,EAAA,EAAW,CAACtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAI,UACxC,eAAC8H,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,mCAC9B,cAACgB,EAAA,EAAiB,CAACxB,MAAM,qEAE7B,cAAC6S,EAAA,EAAY,CACTtb,GAAG,wBACHub,UAAQ,EACR9U,QAASic,GACTlP,MAAOU,EAAO0P,sBAAwB1P,EAAOhO,iBAAmBgO,EAAO0P,qBAAuB,IAC9FlG,eAAgB,SAACjC,GAAM,OAAKA,EAAOjZ,MAAQ,GAAG,EAC9CuT,SAAQ,iDAAE,WAAOnQ,EAAG0f,GAAkB,mFASR,GAR1BhF,EACI,uBACuB,OAAvBgF,EAA8BA,EAAqBxiB,EAAc8gB,sBAE/DnD,EAAe,2BACdvM,GAAM,IACT0P,qBAAsB0B,IAE1B9F,GAAUiB,IACN6E,EAAmB,CAAD,gBAMgC,GAL9CA,EAAmB9iB,OAASsf,EAC5BoB,GAAyBnZ,QAAQub,EAAmBf,KAEpDZ,GAA4B2B,GAEhCxC,GAAuB/Y,QAAQyX,KAC3BtN,EAAOhO,iBAAiB0Y,cAAc1d,SAAS,UAAU,CAAD,gCAC1B6jB,IAA+B,QAAvDQ,EAAe,QACDhjB,MAAMsgB,GAAqB0C,EAAgBhjB,MAAK,4CAG/E,qDAtBO,GAuBRkW,cAAe,SAAC7S,EAAG4N,GACVA,IACD+P,KACAI,GAA4B,IAEpC,EACAzO,OAAQiL,EACRxE,gBAAiB3E,EACjB4E,YAAa,SAACxV,GAAM,OAChB,cAACyV,EAAA,EAAS,2BACFzV,GAAM,IACVoN,MAAOU,EAAO0P,qBACdja,MAAOyP,QAAQpB,EAAO4L,wBACxB,EAEN9H,aAAc,SAACC,EAAON,GAAM,OACxB,cAAC/K,EAAA,EAAG,yBAAC/D,UAAU,MAASoP,GAAK,aACzB,qBAAK3R,MAAO,CAAEwG,QAAS,OAAQC,cAAe,UAAW,SACrD,cAACQ,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,KAAI,SACjCwS,EAAOjZ,WAGd,IAGbwV,EAAO4L,sBACJ,sBAAMxZ,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,mDAOlF7K,GAAUA,EAAO0P,sBAAwB1P,EAAO0P,qBAAqBW,KAClE,cAAC/K,EAAA,EAAM,CACHhR,GAAI,CAAEgJ,GAAI,GACV6E,KAAK,QACLpN,QAAQ,WACRwQ,UAAW,cAAC,IAAS,CAACpD,KAAM,KAC5BrG,QAAS,kBAAM6T,GAAmB3P,EAAO0P,qBAAqBW,IAAI,EAAC,+BAM1E3B,IACG,gCACI,cAACvR,EAAA,EAAU,CAACpI,QAAQ,WAAU,iCAC9B,eAACoQ,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CACP7I,GAAI,CACAmI,EAAG,EACHK,aAAc,GACdzB,gBAAiB5G,EAAMG,QAAQC,QAAQuH,MACvChG,MAAO,cACPD,OAAQ,eAEZpB,QAAQ,KAAI,SAEX2Z,KAEL,cAAC4C,EAAA,EAAU,CACP/c,MAAM,WACN+G,MAAM,UACNQ,QAAS,kBAAM1I,UAAUC,UAAUC,UAAUob,GAAkB,EAAC,SAEhE,cAAC,IAAQ,YAMxB1O,EAAOhO,kBACJsc,GAAiB1gB,KAAI,SAACiB,GAClB,GAAmB,SAAfA,EAAME,KAAiB,CACvB,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAK5H,MAAOyP,QAAQpB,EAAOQ,IAAY,UAC3F,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAAC,IAAgB,CACblP,MAAO,CACHrC,OAAQ,YACRc,YAAaF,EAAMG,QAAQ6L,KAAK,KAChC3D,aAAc,OACd3G,OAAQ,QACRuK,UAAW,QACXC,UAAW,SACXtF,gBAAiB,SAErBkL,SAAU,SAAC7U,GAAC,OAAKA,EAAE8U,iBAAiB,EAAC,SAErC,cAAC,IAAM,CACH1F,YAAajS,EAAMiS,YACnBxB,MAAOU,EAAOsE,IAAc,GAC5BtD,OAAQ,SAACtP,GACL,IAAM6a,EAAe,2BACdvM,GAAM,kBACRsE,EAAY5S,EAAE1F,OAAOsT,QAE1BgM,GAAUiB,EACd,EACA3L,cAAe,SAACC,GACZuL,EAAc9H,EAAWzD,EAC7B,EACAE,UAAW,SAACF,GAAI,OAAKE,oBAAUF,EAAM7B,YAAUsB,KAAK,EACpDtE,QAAS,GACT9F,MAAO,CACH4C,SAAU,WACVmI,UAAW,QACX7K,MAAO,QAEX8K,kBAAkB,uBAGzB4C,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,QA1CHA,EA+C1B,CAEA,GAAmB,WAAfzV,EAAME,MAAoC,aAAfF,EAAME,MAAsC,WAAfF,EAAME,KAAmB,CACjF,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAK5H,MAAOyP,QAAQpB,EAAOQ,IAAY,UAC3F,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAAC2B,EAAA,EAAa,CACVjb,GAAIwY,EACJvV,KAAqB,WAAfF,EAAME,MAAoC,WAAfF,EAAME,KAAoB,OAASF,EAAME,KAC1EuQ,MAAOU,EAAOsE,IAAc,GAC5BxD,YAAajS,EAAMiS,YACnBxS,KAAMgW,EACNtD,OAAQ,SAACtP,GACLua,EAAWva,GACX4Z,GAAUtL,EACd,EACA6B,SAAUqK,IAEbpI,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,QAnBHA,EAwB1B,CAEA,GAAmB,YAAfzV,EAAME,KAAoB,CAC1B,IAAMuV,EAAYzV,EAAMP,KAExB,OACI,eAAC2W,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAK5H,MAAOyP,QAAQpB,EAAOQ,IAAY,UAC3F,eAACa,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAAC4B,EAAA,EAAM,CACHC,UAAWjH,EAAOsE,GAClBzC,SAAU,SAACxH,GACP+R,EAAc9H,EAAWjK,EAAMrO,OAAOib,SACtC,IAAMsF,EAAe,2BACdvM,GAAM,kBACRsE,EAAYjK,EAAMrO,OAAOib,UAE9BqE,GAAUiB,EACd,EACArF,WAAY,CAAE,aAAc,kBAflB5C,EAmB1B,CAEA,GAAmB,YAAfzV,EAAME,KAAoB,CAC1B,IAAMuV,EAAYzV,EAAMP,KAClB6Y,EAAmBtY,EAAM0D,SAAW,GAE1C,OACI,eAAC0S,EAAA,EAAW,CAAiBtM,WAAS,EAACrE,GAAI,CAAEgJ,GAAI,EAAGD,GAAI,GAAI,UACxD,eAAC8H,EAAA,EAAK,CAAC3O,UAAU,MAAK,UAClB,cAAC2G,EAAA,EAAU,CAACpI,QAAQ,WAAU,SAAElG,EAAMJ,QACrCI,EAAMuW,aAAe,cAACrP,EAAA,EAAiB,CAACxB,MAAO1F,EAAMuW,iBAE1D,cAACgC,EAAA,EAAY,CACTtb,GAAIwY,EACJ+C,UAAQ,EACR9U,QAAS4U,EACT7H,MACIiM,GAAoBpE,EAAkBnH,EAAOsE,KAhd7D,GAkdYzC,SAAU,SAACnQ,EAAG8V,GACV,IAAMlI,EAAQkI,EAAYA,EAAUlZ,KAAO,GAC3C8d,EAAc9H,EAAWhF,GACzB,IAAMiN,EAAe,2BACdvM,GAAM,kBACRsE,EAAYhF,IAEjBgM,GAAUiB,EACd,EACAvL,OAAQiL,EACRxE,gBAAiB3E,EACjB4E,YAAa,SAACxV,GAAM,OAChB,cAACyV,EAAA,EAAS,2BACFzV,GAAM,IACVoN,MAAOU,EAAOsE,GACd7O,MAAOyP,QAAQpB,EAAOQ,MACxB,EAENsD,aAAc,SAACC,EAAON,GAAM,OACxB,cAAC/K,EAAA,EAAG,yBAAC/D,UAAU,MAASoP,GAAK,aACzB,sBAAK3R,MAAO,CAAEwG,QAAS,OAAQC,cAAe,UAAW,UACrD,cAACQ,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,KAAI,SACjCwS,EAAO9Y,QAEX8Y,EAAOnC,aACJ,cAACjI,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAI,SAAE8K,EAAOnC,mBAGxC,IAGbtB,EAAOQ,IACJ,uBAAMpO,MAAO,CAAEoF,MAAO,MAAOxC,SAAU,SAAU+R,UAAW,UAAW,cACjE/G,EAAOQ,QA7CHA,EAkD1B,CACA,OAAO,IACX,IAEJ,cAAC9H,EAAA,EAAG,CAAClI,GAAI,CAAE+I,GAAI,GAAI,SACf,cAAChH,EAAA,EAAa,UACV,cAACiP,EAAA,EAAM,CACH2H,kBAAgB,EAChBI,SAAUhB,GAAgBpgB,OAAOme,KAAKtG,GAAQlY,OAAS,EACvD+M,WAAS,EACTwJ,KAAK,QACLpT,KAAK,SACLgG,QAAQ,YACRuG,MAAM,YAAW,SAEhB0E,GACDA,EAAO0P,uBACN1P,EAAO0P,qBAAqBphB,OAASsf,GAAsBU,GAAiB1iB,QACvE,oBACA,oBAIf,OAM/B,C,icClqBe,EAZS,WAAH,OAAS2hB,IAAOhD,IAAI,aAAa,EAYvC,EAVa,SAACze,GAAE,OAAKyhB,IAAOhD,IAAI,cAAD,OAAeze,GAAK,EAUnD,EARW,SAACkhB,GAAI,OAAKO,IAAO3D,KAAK,aAAcoD,EAAK,EAQpD,EANQ,SAAClhB,EAAIkhB,GAAI,OAAKO,IAAOG,IAAI,cAAD,OAAe5hB,GAAMkhB,EAAK,EAM1D,EAJQ,SAACA,GAAI,OAAKO,IAAO3D,KAAK,oBAAqBoD,EAAK,EAIxD,EAFQ,SAAClhB,GAAE,OAAKyhB,IAAOhgB,OAAO,cAAD,OAAezB,GAAK,E,0CCsrBjDylB,EA9oBQ,SAAH,GAAoD,IAA9CtZ,EAAI,EAAJA,KAAMC,EAAW,EAAXA,YAAaC,EAAQ,EAARA,SAAUiG,EAAS,EAATA,UAC7C9F,EAAgBC,SAASC,eAAe,UAExC/D,EAAQC,cACR6E,EAAWC,cAIjBF,cACA,IAAMQ,EAAkB,WAAH,OAAgBP,EAASiY,IAAqB,wBAAU,EACvEzX,EAAgB,WAAH,OAAgBR,EAASkY,IAAmB,wBAAU,EAEzE,EAA8Clc,mBAASmc,KAAiB,oBAAjEC,GAAe,MAAEC,GAAkB,MAC1C,GAAwCrc,mBAAS,CAAC,GAAE,qBAA7Csc,GAAY,MAAEC,GAAe,MACpC,GAA4Cvc,mBAAS,IAAG,qBAAjDwc,GAAc,MAAEC,GAAiB,MACxC,GAA4Czc,mBAAS,CAAC,GAAE,qBAAjD0c,GAAc,MAAEC,GAAiB,MACxC,GAAoD3c,mBAAS,CAAC,GAAE,qBAAzD4c,GAAkB,MAAEC,GAAqB,MAChD,GAAgC7c,oBAAS,GAAM,qBAAxCiJ,GAAQ,MAAEC,GAAW,MAC5B,GAA4ClJ,oBAAS,GAAM,qBAApD8c,GAAc,MAAEC,GAAiB,MACxC,GAAoC/c,mBAAS,IAAG,qBAAzCgd,GAAU,MAAEC,GAAa,MAChC,GAAwCjd,oBAAS,GAAM,qBAAhDkd,GAAY,MAAEC,GAAe,MACpC,GAA0Dnd,oBAAS,GAAM,qBAAlEod,GAAwB,MAAEC,GAAqB,MACtD,GAA8Drd,mBAAS,CAAC,GAAE,qBAAnEsd,GAAuB,MAAEC,GAA0B,MACpDC,GAAqB,CAAC,WAAY,cAAe,gBAEjDC,GAAyBnE,YAAOoE,GAEhCC,GAAwB,SAAC1U,GAAQ,OAAK,SAACnE,EAAOyH,GAChDrD,KAAYqD,GAAatD,EAC7B,CAAC,EAEK2U,GAAQ,WACVrB,GAAgB,CAAC,GACjBE,GAAkB,IAClBE,GAAkB,CAAC,GACnBE,GAAsB,CAAC,GACvBE,IAAkB,GAClBE,GAAc,IACdE,IAAgB,GAChBjU,IAAY,EAChB,EAaM0F,GAA2B,SAACtV,EAAOmR,EAAQE,GAU7C4S,GAToB,CAChBjkB,QACAmR,SACAE,gBACAqC,iBAAkB,SAClBM,kBAAmB,OACnB1B,eAAe,IAInByR,IAAsB,EAC1B,EAEMQ,GAAc,iDAAG,8FAOlB,OANKC,EAAwB,CAC1B/W,QAASuV,GAAa/hB,SAASwM,QAC/BhO,KAAMujB,GAAayB,aAAahlB,KAChCilB,IAAK1B,GAAayB,aAAaC,IAC/B1W,QAASgV,GAAayB,aAAazW,QACnC2W,mBAAoBliB,KAAKiC,UAAUse,GAAahiB,cACnD,SACwBojB,EAA+BI,GAAsB,OAA9D,OACDhlB,MACXyL,EAAgB,CACZK,QAAS,qBACT5H,QAAS,CACL2H,KAAK,IAAIvJ,MAAO8iB,UAAY3lB,KAAKE,SACjC+G,QAAS,UACTD,OAAQ,SAACoF,GAAG,OACR,cAACoL,EAAA,EAAM,CAACpP,MAAO,CAAEoF,MAAO,SAAWQ,QAAS,kBAAM/B,EAAcG,EAAI,EAAC,SACjE,cAAC,IAAK,KACD,KAIrBkE,MAEAtE,EAAgB,CACZK,QAAS,6BACT5H,QAAS,CACL2H,KAAK,IAAIvJ,MAAO8iB,UAAY3lB,KAAKE,SACjC+G,QAAS,QACT2e,SAAS,EACT5e,OAAQ,SAACoF,GAAG,OACR,cAACoL,EAAA,EAAM,CAACpP,MAAO,CAAEoF,MAAO,SAAWQ,QAAS,kBAAM/B,EAAcG,EAAI,EAAC,SACjE,cAAC,IAAK,KACD,KAIrB/B,KACH,2CACJ,kBAvCmB,mCAyCdwb,GAAY,iDAAG,8FAOhB,OANKC,EAAmB,CACrBtX,QAASuV,GAAa/hB,SAASwM,QAC/BhO,KAAMujB,GAAayB,aAAahlB,KAChCilB,IAAK1B,GAAayB,aAAaC,IAC/B1W,QAASgV,GAAayB,aAAazW,QACnC2W,mBAAoBliB,KAAKiC,UAAUse,GAAahiB,cACnD,SACsBojB,EAA4B/a,EAAYpM,GAAI8nB,GAAiB,OAAtE,OACDvlB,MACTyL,EAAgB,CACZK,QAAS,iBACT5H,QAAS,CACL2H,KAAK,IAAIvJ,MAAO8iB,UAAY3lB,KAAKE,SACjC+G,QAAS,UACTD,OAAQ,SAACoF,GAAG,OACR,cAACoL,EAAA,EAAM,CAACpP,MAAO,CAAEoF,MAAO,SAAWQ,QAAS,kBAAM/B,EAAcG,EAAI,EAAC,SACjE,cAAC,IAAK,KACD,KAIrBkE,MAEAtE,EAAgB,CACZK,QAAS,0BACT5H,QAAS,CACL2H,KAAK,IAAIvJ,MAAO8iB,UAAY3lB,KAAKE,SACjC+G,QAAS,QACT2e,SAAS,EACT5e,OAAQ,SAACoF,GAAG,OACR,cAACoL,EAAA,EAAM,CAACpP,MAAO,CAAEoF,MAAO,SAAWQ,QAAS,kBAAM/B,EAAcG,EAAI,EAAC,SACjE,cAAC,IAAK,KACD,KAIrB/B,KACH,2CACJ,kBAvCiB,mCAyCZ0b,GAAc,iDAAG,wGACMZ,EAA4B/a,EAAYpM,IAAG,OAApD,OACDuC,MACXyL,EAAgB,CACZK,QAAS,mBACT5H,QAAS,CACL2H,KAAK,IAAIvJ,MAAO8iB,UAAY3lB,KAAKE,SACjC+G,QAAS,UACTD,OAAQ,SAACoF,GAAG,OACR,cAACoL,EAAA,EAAM,CAACpP,MAAO,CAAEoF,MAAO,SAAWQ,QAAS,kBAAM/B,EAAcG,EAAI,EAAC,SACjE,cAAC,IAAK,KACD,KAIrBkE,MAEAtE,EAAgB,CACZK,QAAS,4BACT5H,QAAS,CACL2H,KAAK,IAAIvJ,MAAO8iB,UAAY3lB,KAAKE,SACjC+G,QAAS,QACT2e,SAAS,EACT5e,OAAQ,SAACoF,GAAG,OACR,cAACoL,EAAA,EAAM,CAACpP,MAAO,CAAEoF,MAAO,SAAWQ,QAAS,kBAAM/B,EAAcG,EAAI,EAAC,SACjE,cAAC,IAAK,KACD,KAIrB/B,KACH,2CACJ,kBAhCmB,mCAkCd2b,GAAQ,iDAAG,WAAOC,EAAY5hB,GAAU,yFACwD,GAA5F6hB,EAAkBlkB,IAAS0C,MAAK,SAAC8J,GAAO,OAAKA,EAAQhO,OAASujB,GAAa/hB,SAASwM,OAAO,IAC5E,CAAD,gDAOf,OALC0Q,EAAI,2BACH6E,IAAY,IACf/hB,SAAS,2BACF+hB,GAAa/hB,UAAQ,IACxBmkB,IAAKD,EAAgBC,KAAO,OAC/B,SAGchB,EAA4BjG,GAAK,OAA1C,IAAJkH,EAAI,QACA7lB,KAAK,CAAD,gBAM0B,OAL9B8lB,EAAkB,2BACjBtC,IAAY,kBACd1f,EAAU,2BAAQ4hB,GAAU,IAAE7kB,OAAQ,SAE3C4iB,GAAgBqC,GAChB3B,GAAc,uBAAsB,2BAGL,GAChB,MADA0B,EAAK7lB,KAAK+lB,OACP,iBACsB,OAApC5B,GAAc,uBAAsB,2BAIvB,OADXe,EAAMW,EAAK7lB,KAAKyH,OACtB0c,GAAc,IAAG,kBACF,oBAARe,OAA4BhjB,EAAYgjB,GAAG,4CAEzD,gBA/Ba,wCAiCRrI,GAAe,SAAC6I,EAAY5hB,GAC9B,IAAMgiB,EAAkB,2BACjBtC,IAAY,kBACd1f,EAAa4hB,IAGZnS,EAAQmR,GAAmBsB,QAAQliB,GACzC,GAAIyP,GAAS,GAAKA,IAAUmR,GAAmBnnB,OAAS,EACpD,IAAK,IAAID,EAAIiW,EAAQ,EAAGjW,EAAIonB,GAAmBnnB,OAAQD,GAAK,EAAG,CAC3D,IAAM2oB,EAAYvB,GAAmBpnB,GACjCwoB,EAAmBG,KAAYH,EAAmBG,GAAWplB,OAAS,KAC9E,CAGJ4iB,GAAgBqC,EACpB,EAuBMhJ,GAAQ,iDAAG,WAAO4I,EAAY5hB,GAAU,iGACtC4hB,EAAWlX,QAAQ,CAAD,oBACd0X,IAAOC,MAAMC,UAAUV,EAAWlX,SAAS,CAAD,eAClB,OAAxByV,IAAkB,GAAM,SACNwB,GAASC,EAAY5hB,GAAW,QAA5CohB,EAAG,UAECmB,EAAgB,aAClBxlB,QAAQ,GACL6kB,IAEUR,IAAMA,EACjBY,EAAkB,2BACjBtC,IAAY,kBACd1f,EAAauiB,IAElB5C,GAAgBqC,KAEVA,EAAkB,2BACjBtC,IAAY,kBACd1f,EAAU,2BAAQ4hB,GAAU,IAAE7kB,OAAQ,SAE3C4iB,GAAgBqC,IACnB,uBAED7B,IAAkB,GACZ6B,EAAkB,2BACjBtC,IAAY,kBACd1f,EAAU,2BAAQ4hB,GAAU,IAAE7kB,OAAQ,SAE3C4iB,GAAgBqC,GAAmB,gCAGjCA,EAAkB,2BACjBtC,IAAY,kBACd1f,EAAa4hB,IAElBjC,GAAgBqC,GAAmB,SAGjCvS,EAAQmR,GAAmBsB,QAAQliB,KAC5B,GAAKyP,IAAUmR,GAAmBnnB,OAAS,GACpD6S,GAAYsU,GAAmBnR,EAAQ,IAC1C,4CACJ,gBA3Ca,wCA6CR6I,GAAkB,SAACP,EAAa3X,GAIlC,IAHA,IAAIwX,EAAgBxX,EACdyX,EAAoB,GAAE,WAEnBre,GACL,IAAM4b,EAASwC,EAAcpe,GACvBwe,EAAiB5C,EAAO2C,GAE1BC,GACAle,OAAOme,KAAKD,GAAgBlQ,SAAQ,SAACyK,GACjC,IAAM2F,EAAkBF,EAAezF,GACjC4F,EAAcxX,IAAOyX,IAAIsH,GAAcnN,EAAM,IAC/ChX,MAAMyF,QAAQkX,KACM,SAAhBH,GAA2BG,EAAgBrd,SAASsd,IACpDN,EAAkB3d,KAAKkb,GAEP,SAAhB2C,GAA0BG,EAAgBrd,SAASsd,IACnDN,EAAkB3d,KAAKkb,GAGnC,GACH,EAjBI5b,EAAI,EAAGA,EAAIoe,EAAcne,OAAQD,GAAK,EAAI,EAA1CA,GAoBT,IAFC,eAEQA,GACLoe,EAAgBA,EAAcld,QAAO,SAAC4F,GAAG,OAAKnB,KAAKiC,UAAUd,KAASnB,KAAKiC,UAAUyW,EAAkBre,GAAG,GAAC,EADtGA,EAAI,EAAGA,EAAIqe,EAAkBpe,OAAQD,GAAK,EAAI,EAA9CA,GAIT,OAAOoe,CACX,EA+BM4K,GAAgC,SAACxiB,GACnC,IAAMvD,EAAgB,CAAC,EACnBmjB,EA/Be,SAAC7f,GAGpB,IAFA,IAAIG,EAAeH,EAEVvG,EAAI,EAAGA,EAAI0G,EAAazG,OAAQD,GAAK,EAAG,CAC7C,IAAMkD,EAAQwD,EAAa1G,GACR,YAAfkD,EAAME,OACNF,EAAM0D,QAAUkY,GAAgB,OAAQ5b,EAAM0D,SAC9C1D,EAAM0D,QAAUkY,GAAgB,OAAQ5b,EAAM0D,SAEtD,CAEA,OAAOF,CACX,CAmByB8X,CAAerX,IAAOC,UAAU4e,GAAgBxf,IAAe,KACpF4f,EAAiBpf,YAAuBof,EAAgB5f,EAAYwf,GAAgBxf,GAAa0f,IAEjG,IAF8G,eAErGlmB,GACL,IAAMkD,EAAQkjB,EAAepmB,GAGzBwG,KAAc0f,IAAgBhjB,EAAMP,QAAQujB,GAAa1f,IACzDvD,EAAcC,EAAMP,MAAQujB,GAAa1f,GAAYtD,EAAMP,MAGxC,YAAfO,EAAME,OACYF,EAAM0D,QAAQC,MAAK,SAAC+U,GAAM,OAAKA,EAAOjZ,OAASM,EAAcC,EAAMP,KAAK,YACnEM,EAAcC,EAAMP,QAI/CM,EAAcC,EAAMP,MAAQO,EAAMC,SAAW,EAChD,EAfInD,EAAI,EAAGA,EAAIomB,EAAenmB,OAAQD,GAAK,EAAI,EAA3CA,GAkBTiD,EAAcM,OAAS,KAEvBgjB,GAAkBtjB,GAClBwjB,GAzCqB,SAAClgB,GAEtB,IADA,IAAMuZ,EAAmB,CAAC,EACjB9f,EAAI,EAAGA,EAAIuG,EAAOtG,OAAQD,GAAK,EAAG,CACvC,IAAMkD,EAAQqD,EAAOvG,GACF,WAAfkD,EAAME,MAAsBF,EAAM+lB,SAEZ,WAAf/lB,EAAME,MAAsBF,EAAM+lB,SAElB,YAAf/lB,EAAME,MAAqC,iBAAfF,EAAME,MAA6BF,EAAM+lB,WAC7EnJ,EAAiB5c,EAAMP,MAAQod,MAAa8E,SAAS,GAAD,OAAI3hB,EAAMJ,MAAK,+BAAuBI,EAAME,QAFhG0c,EAAiB5c,EAAMP,MAAQod,MAAa8E,SAAS,GAAD,OAAI3hB,EAAMJ,MAAK,+BAAuBI,EAAME,OAFhG0c,EAAiB5c,EAAMP,MAAQod,MAAa8E,SAAS,GAAD,OAAI3hB,EAAMJ,MAAK,+BAAuBI,EAAME,MAMxG,CACA,OAAO0c,CACX,CA4B0BoJ,CAAiB9C,IACvCC,GAAkBD,EACtB,EAEM+C,GAA4B,SAACC,EAAsBpD,GACrD,IAAME,EAAe,CACjB/hB,SAAU,CAAC,EACXD,YAAa,CAAC,EACdyjB,aAAc,CAAC,GAGnB,GAAIyB,GAGA,GAFAlD,EAAa/hB,SAAW,CAAEwM,QAASyY,EAAqBzY,QAASpN,QAAQ,GACzE2iB,EAAayB,aAAY,2BAAQyB,GAAoB,IAAE7lB,QAAQ,IAC3D6lB,EAAqBvB,mBACrB,IACI3B,EAAahiB,YAAcyB,KAAKC,MAAMwjB,EAAqBvB,mBAG/D,CAFE,MAAO9hB,GACLsa,QAAQvW,MAAM/D,EAClB,OAGJmgB,EAAa/hB,SAAWpB,YAAmBijB,EAAgB7hB,UAC3D+hB,EAAahiB,YAAcnB,YAAmBijB,EAAgB9hB,aAC9DgiB,EAAayB,aAAe5kB,YAAmBijB,EAAgB2B,cAEnE,OAAOzB,CACX,EAGA1Y,qBAAU,WACN,GAAI6Z,GAAuB3kB,KAAM,CAC7B,IAAM0mB,EAAuB/B,GAAuB3kB,KACpDyjB,GAAgBgD,GAA0BC,IAC1CtW,GAAY,WAChB,CACJ,GAAG,CAACuU,GAAuB3kB,OAG3B8K,qBAAU,WACFlB,GAA6B,QAArBC,EAAYnJ,MACpBokB,KACArB,GAAgBgD,GAA0B,KAAMnD,KAChDlT,GAAY,aACLxG,GAA6B,SAArBC,EAAYnJ,MAAmBmJ,EAAYpM,KAC1DqnB,KACAH,GAAuBnd,QAAQqC,EAAYpM,IAInD,GAAG,CAACmM,EAAMC,IAGViB,qBAAU,WACFwY,IAAmBE,IAAgBrT,KACnCmW,GAA8BnW,IA9YZ,WACtB,IAAK,IAAI7S,EAAI,EAAGA,EAAIonB,GAAmBnnB,OAAQD,GAAK,EAAG,CACnD,IAAM2oB,EAAYvB,GAAmBpnB,GACrC,IAAKkmB,GAAayC,KAAezC,GAAayC,GAAWplB,OAErD,YADAwjB,IAAgB,EAGxB,CACAA,IAAgB,EACpB,CAsYQsC,GAIR,GAAG,CAACrD,GAAiBE,GAAcrT,KAEnC,IAAM/F,GAAYR,EACd,eAACgd,EAAA,EAAM,CAACvc,KAAMT,EAAMY,QAASV,EAAU,kBAAgB,qBAAqB,mBAAiB,2BAA0B,UACnH,cAAC+c,EAAA,EAAW,CAAC5gB,GAAI,CAAEwE,SAAU,QAAUhN,GAAG,qBAAoB,SACzDoM,EAAY3D,QAEjB,eAAC4gB,EAAA,EAAa,WACY,QAArBjd,EAAYnJ,MACT,cAAC+O,EAAA,EAAI,CACDxJ,GAAI,CAAEgJ,GAAI,GACV8X,KAAM,cAAC,IAAmB,IAC1B3mB,MAAM,6DACN6M,MAAM,YAIbuW,IAAgBA,GAAayB,cAAgBzB,GAAayB,aAAazW,SAAgC,SAArB3E,EAAYnJ,MAC3F,eAACyN,EAAA,EAAG,CAAClI,GAAI,CAAEmI,EAAG,GAAI,UACd,cAACU,EAAA,EAAU,CAAC7I,GAAI,CAAEmI,EAAG,GAAK1H,QAAQ,WAAU,qBAG5C,eAACoQ,EAAA,EAAK,CAAC3O,UAAU,MAAMlC,GAAI,CAAEmI,EAAG,GAAI,UAChC,cAACU,EAAA,EAAU,CACP7I,GAAI,CACAmI,EAAG,EACHK,aAAc,GACdzB,gBAAiB5G,EAAMG,QAAQC,QAAQuH,MACvChG,MAAO,cACPD,OAAQ,eAEZpB,QAAQ,KAAI,SAEX8c,GAAayB,aAAazW,UAE/B,cAACyU,EAAA,EAAU,CACP/c,MAAM,eACN+G,MAAM,UACNQ,QAAS,kBAAM1I,UAAUC,UAAUC,UAAUue,GAAayB,aAAazW,QAAQ,EAAC,SAEhF,cAAC,IAAQ,MAEb,cAACyU,EAAA,EAAU,CACP/c,MAAM,yBACN+G,MAAM,UACNQ,QAAS,kBACLiU,OAAOrX,KAAK,GAAD,OACJ2c,IAAiBxD,GAAa/hB,SAASwM,SAAQ,oBAAYuV,GAAayB,aAAazW,SACxF,SACH,EACJ,SAED,cAAC,IAAsB,YAOvC,eAACL,EAAA,EAAG,CAAClI,GAAI,CAAEmI,EAAG,GAAI,UACd,eAAC6Y,EAAA,EAAS,CAAC9W,SAAuB,aAAbA,GAAyBqD,SAAUqR,GAAsB,YAAY,UACtF,eAACqC,EAAA,EAAgB,CAACxT,WAAY,cAAC,IAAc,IAAK,gBAAc,mBAAmBjW,GAAG,kBAAiB,UACnG,cAACqR,EAAA,EAAU,CAACpI,QAAQ,KAAI,sBACvB8c,IAAgBA,GAAa/hB,UAAY+hB,GAAa/hB,SAASZ,QAC5D,cAACsmB,EAAA,EAAM,CACHzgB,QAAQ,UACRT,GAAE,2BACKG,EAAMghB,WAAWC,aAAW,IAC/B5Y,aAAc,MACd6Y,WAAYlhB,EAAMG,QAAQsH,QAAQC,KAClCb,MAAO,QACPkF,GAAI,IACN,SAEF,cAAC,IAAS,SAItB,cAACoV,EAAA,EAAgB,UACb,cAAC5K,EAAA,EAAe,CACZ7Y,WAAW,WACXD,OAAQ6f,GACRnjB,cAAeqjB,GACfhH,qBAAsBkH,GACtBjH,aAAcA,GACdC,SAAUA,GACVC,yBAA0B,kBAAM,IAAI,EACpCjH,yBAA0BA,UAItC,cAAC0R,EAAA,EAAO,OAIZ,eAACrZ,EAAA,EAAG,CAAClI,GAAI,CAAEmI,EAAG,GAAI,UACd,eAAC6Y,EAAA,EAAS,CAAC9W,SAAuB,gBAAbA,GAA4BqD,SAAUqR,GAAsB,eAAe,UAC5F,eAACqC,EAAA,EAAgB,CAACxT,WAAY,cAAC,IAAc,IAAK,gBAAc,sBAAsBjW,GAAG,qBAAoB,UACzG,cAACqR,EAAA,EAAU,CAACpI,QAAQ,KAAI,yBACvB8c,IAAgBA,GAAahiB,aAAegiB,GAAahiB,YAAYX,QAClE,cAACsmB,EAAA,EAAM,CACHzgB,QAAQ,UACRT,GAAE,2BACKG,EAAMghB,WAAWC,aAAW,IAC/B5Y,aAAc,MACd6Y,WAAYlhB,EAAMG,QAAQsH,QAAQC,KAClCb,MAAO,QACPkF,GAAI,IACN,SAEF,cAAC,IAAS,SAItB,cAACoV,EAAA,EAAgB,UACb,cAAC/H,EAAA,EAAe,CACZ1b,WAAW,cACX2b,cAAeiE,GACfnjB,cAAeqjB,GACflE,kBAAmBoE,GACnBjH,aAAcA,GACd8C,cA7UN,SAAC8H,EAAY3jB,GAI/B,IAAM4jB,EAAwBD,EAAWtjB,MAAK,SAACwjB,GAAK,MAAoB,qBAAfA,EAAM1nB,IAA2B,IACpF2nB,EAA6BH,EAAWI,WAAU,SAACF,GAAK,MAAoB,qBAAfA,EAAM1nB,IAA2B,IAEpG,QAA8BiC,IAA1BwlB,EAAqC,CACrC,IAAMI,EAAgBxE,GAAgBxf,GAAYK,MAAK,SAACwjB,GAAK,MAAoB,qBAAfA,EAAM1nB,IAA2B,SAC7EiC,IAAlB4lB,IACAL,EAAWG,GAAqC,QAAIE,EAAc5jB,QAE1E,CAEA,IAAM6jB,EAAqB,2BACpBzE,IAAe,kBACjBxf,EAAa2jB,IAElBlE,GAAmBwE,EACvB,EA2T4BjL,SAAUA,UAItB,cAAC0K,EAAA,EAAO,OAIZ,eAACrZ,EAAA,EAAG,CAAClI,GAAI,CAAEmI,EAAG,GAAI,UACd,eAAC6Y,EAAA,EAAS,CAAC9W,SAAuB,iBAAbA,GAA6BqD,SAAUqR,GAAsB,gBAAgB,UAC9F,eAACqC,EAAA,EAAgB,CAACxT,WAAY,cAAC,IAAc,IAAK,gBAAc,uBAAuBjW,GAAG,sBAAqB,UAC3G,cAACqR,EAAA,EAAU,CAACpI,QAAQ,KAAI,8BACvB8c,IAAgBA,GAAayB,cAAgBzB,GAAayB,aAAapkB,QACpE,cAACsmB,EAAA,EAAM,CACHzgB,QAAQ,UACRT,GAAE,2BACKG,EAAMghB,WAAWC,aAAW,IAC/B5Y,aAAc,MACd6Y,WAAYlhB,EAAMG,QAAQsH,QAAQC,KAClCb,MAAO,QACPkF,GAAI,IACN,SAEF,cAAC,IAAS,SAItB,eAACoV,EAAA,EAAgB,WACb,cAAC5K,EAAA,EAAe,CACZ7Y,WAAW,eACXD,OAAQ6f,GACRnjB,cAAeqjB,GACfhH,qBAAsBkH,GACtBjH,aAAcA,GACdC,SAAUA,GACVC,yBAA0B,kBAAM,IAAI,EACpCjH,yBAA0BA,KAE7BkO,IACG,cAACvU,EAAA,EAAI,CAACxJ,GAAI,CAAE+I,GAAI,EAAGC,GAAI,GAAK8X,KAAM,cAAC,IAAK,IAAK3mB,MAAM,2BAA2B6M,MAAM,UAEvFiX,IACG,cAACzU,EAAA,EAAI,CAACxJ,GAAI,CAAE+I,GAAI,EAAGC,GAAI,EAAGkD,GAAI6R,GAAiB,EAAI,GAAK+C,KAAM,cAAC,IAAK,IAAK3mB,MAAO8jB,GAAYjX,MAAM,gBAI9G,cAACua,EAAA,EAAO,OAEZ,cAAC1X,EAAA,EAAkB,CAEflG,KAAM0a,GACNza,YAAa2a,GACb1a,SAAU,kBAAMya,IAAsB,EAAM,EAC5CxU,UAAW,SAACuE,GACRuI,GAAavI,EAAcnE,IAC3BoU,IAAsB,EAC1B,GAPKthB,KAAKiC,UAAUsf,QAU5B,eAACwD,EAAA,EAAa,WACV,cAAC/Q,EAAA,EAAM,CAACxJ,QAAS3D,EAAS,SAAED,EAAYqK,mBAClB,SAArBrK,EAAYnJ,MACT,cAACuW,EAAA,EAAM,CAACvQ,QAAQ,YAAYuG,MAAM,QAAQQ,QAAS,kBAAM+X,IAAgB,EAAC,oBAI9E,cAACvO,EAAA,EAAM,CACHvQ,QAAQ,YACRsY,UAAWoF,GACX3W,QAAS,iBAA4B,QAArB5D,EAAYnJ,KAAiBqkB,KAAmBO,IAAc,EAAE,SAE/Ezb,EAAY2K,0BAIzB,KAEJ,OAAO9J,uBAAaN,GAAWH,EACnC,ECzrBe,OAA0B,2CCiH1Bge,UA3FG,WACd,MAAgC/gB,oBAAS,GAAK,mBAAvCqG,EAAS,KAAEhG,EAAU,KAC5B,EAAoCL,oBAAS,GAAM,mBAA5CghB,EAAU,KAAEC,EAAa,KAChC,EAAsCjhB,mBAAS,CAAC,GAAE,mBAA3C2C,EAAW,KAAEue,EAAc,KAE5BC,EAAqB7H,YAAOoE,GAwClC,OAVA9Z,qBAAU,WACNud,EAAmB7gB,SAGvB,GAAG,IAEHsD,qBAAU,WACNvD,EAAW8gB,EAAmB/gB,QAClC,GAAG,CAAC+gB,EAAmB/gB,UAGnB,qCACI,eAACjC,EAAA,EAAQ,WACL,eAACyR,EAAA,EAAK,CAACxI,cAAc,MAAK,UACtB,2CACA,eAAC9B,EAAA,EAAI,CAACvG,GAAI,CAAEgJ,GAAI,MAAQxC,WAAS,EAACtE,UAAU,MAAK,UAC7C,cAACgG,EAAA,EAAG,CAAClI,GAAI,CAAEiJ,SAAU,KACrB,cAAC1C,EAAA,EAAI,CAACE,MAAI,WACN,cAACuK,EAAA,EAAM,CAACvQ,QAAQ,YAAYT,GAAI,CAAEgH,MAAO,SAAWQ,QA9C7D,WAOX2a,EANmB,CACfliB,MAAO,mBACPxF,KAAM,MACNwT,iBAAkB,SAClBM,kBAAmB,QAGvB2T,GAAc,EAClB,EAqC4F,6BAMhF,cAAC3b,EAAA,EAAI,CAACC,WAAS,EAAC6b,QAASC,IAAY,UAC/Bhb,GACE8a,EAAmBroB,MACnBqoB,EAAmBroB,KAAKT,KAAI,SAACS,EAAMuT,GAAK,OACpC,cAAC/G,EAAA,EAAI,CAAaE,MAAI,EAAC8b,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG,SAC/C,cAACrb,EAAA,EAAQ,CAACC,UAAWA,EAAWE,QAAS,kBA9CvDhQ,EA8CkEuC,EAAKgiB,IAtCjFoG,EAPmB,CACfliB,MAAO,gBACPxF,KAAM,OACNwT,iBAAkB,SAClBM,kBAAmB,OACnB/W,YAGJ0qB,GAAc,GATL,IAAC1qB,CA8C2E,EAAEuC,KAAMA,KAD9DuT,EAEJ,OAGjBhG,KAAe8a,EAAmBroB,MAA2C,IAAnCqoB,EAAmBroB,KAAKzC,SAChE,eAACuZ,EAAA,EAAK,CAAC7Q,GAAI,CAAEsI,WAAY,SAAU5B,eAAgB,UAAY2B,cAAc,SAAQ,UACjF,cAACH,EAAA,EAAG,CAAClI,GAAI,CAAEmI,EAAG,EAAGtG,OAAQ,QAAS,SAC9B,qBACID,MAAO,CAAE+H,UAAW,QAAS9H,OAAQ,OAAQC,MAAO,QACpDlD,IAAK+jB,GACL/Y,IAAI,uBAGZ,yDAIZ,cAAC,EAAc,CACXjG,KAAMse,EACNre,YAAaA,EACbC,SAAU,kBAAMqe,GAAc,EAAM,EACpCpY,UAvDM,WACdoY,GAAc,GACdE,EAAmB7gB,SACvB,MAwDJ,C","file":"static/js/9.e6676dcc.chunk.js","sourcesContent":["import lodash from 'lodash'\r\nimport moment from 'moment'\r\n\r\nexport const numberOrExpressionRegex = /^(\\d+\\.?\\d*|{{.*}})$/ //return true if string consists only numbers OR expression {{}}\r\n\r\nexport const constructNodeDirectedGraph = (nodes, edges, reverse = false) => {\r\n    const graph = {}\r\n    const nodeDependencies = {}\r\n\r\n    // Initialize node dependencies and graph\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const nodeId = nodes[i].id\r\n        nodeDependencies[nodeId] = 0\r\n        graph[nodeId] = []\r\n    }\r\n\r\n    for (let i = 0; i < edges.length; i += 1) {\r\n        const source = edges[i].source\r\n        const target = edges[i].target\r\n\r\n        if (Object.prototype.hasOwnProperty.call(graph, source)) {\r\n            graph[source].push(target)\r\n        } else {\r\n            graph[source] = [target]\r\n        }\r\n\r\n        if (reverse) {\r\n            if (Object.prototype.hasOwnProperty.call(graph, target)) {\r\n                graph[target].push(source)\r\n            } else {\r\n                graph[target] = [source]\r\n            }\r\n        }\r\n\r\n        nodeDependencies[target] += 1\r\n    }\r\n\r\n    return { graph, nodeDependencies }\r\n}\r\n\r\n// Find starting node with 0 dependencies\r\nexport const findStartingNodeIds = (nodes, nodeDependencies) => {\r\n    const startingNodeIds = []\r\n    Object.keys(nodeDependencies).forEach((nodeId) => {\r\n        if (nodeDependencies[nodeId] === 0) {\r\n            const node = nodes.find((nd) => nd.id === nodeId)\r\n            if (node && node.data && node.data.type && (node.data.type === 'trigger' || node.data.type === 'webhook')) {\r\n                startingNodeIds.push(nodeId)\r\n            }\r\n        }\r\n    })\r\n\r\n    return startingNodeIds\r\n}\r\n\r\n// Backtrack function to find all paths from start to target node\r\nexport const getAllPathsFromStartToTarget = (startNodeId, targetNodeId, graph) => {\r\n    const paths = []\r\n    const visitedNodeIds = new Set()\r\n\r\n    const DFS = (currentNodeId, endNodeId, tempPath) => {\r\n        if (currentNodeId === endNodeId) {\r\n            paths.push(lodash.cloneDeep(tempPath))\r\n            return\r\n        }\r\n\r\n        const neighbourNodeIds = graph[currentNodeId]\r\n        visitedNodeIds.add(currentNodeId)\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i += 1) {\r\n            const neighNodeId = neighbourNodeIds[i]\r\n            if (!visitedNodeIds.has(neighNodeId)) {\r\n                tempPath.push(neighNodeId)\r\n                DFS(neighNodeId, endNodeId, tempPath)\r\n                tempPath.pop()\r\n            }\r\n        }\r\n        visitedNodeIds.delete(currentNodeId)\r\n    }\r\n\r\n    DFS(startNodeId, targetNodeId, [startNodeId])\r\n    return paths\r\n}\r\n\r\n// Breadth First Search to get all connected parent nodes from target\r\nexport const getAllConnectedNodesFromTarget = (targetNodeId, edges, graph) => {\r\n    const nodeQueue = []\r\n    const exploredNodes = []\r\n\r\n    nodeQueue.push(targetNodeId)\r\n    exploredNodes.push(targetNodeId)\r\n\r\n    while (nodeQueue.length) {\r\n        const nodeId = nodeQueue.shift() || ''\r\n        const parentNodeIds = []\r\n\r\n        const inputEdges = edges.filter((edg) => edg.target === nodeId && edg.targetHandle.includes('-input-'))\r\n        if (inputEdges && inputEdges.length) {\r\n            for (let j = 0; j < inputEdges.length; j += 1) {\r\n                parentNodeIds.push(inputEdges[j].source)\r\n            }\r\n        }\r\n\r\n        const neighbourNodeIds = graph[nodeId]\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i += 1) {\r\n            const neighNodeId = neighbourNodeIds[i]\r\n            if (parentNodeIds.includes(neighNodeId)) {\r\n                if (!exploredNodes.includes(neighNodeId)) {\r\n                    exploredNodes.push(neighNodeId)\r\n                    nodeQueue.push(neighNodeId)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return exploredNodes\r\n}\r\n\r\nexport const getAvailableNodeIdsForVariable = (nodes, edges, targetNodeId) => {\r\n    const { graph } = constructNodeDirectedGraph(nodes, edges, true)\r\n    const exploreNodes = getAllConnectedNodesFromTarget(targetNodeId, edges, graph)\r\n    const setPath = new Set(exploreNodes)\r\n    setPath.delete(targetNodeId)\r\n    return [...setPath]\r\n}\r\n\r\nexport const generateWebhookEndpoint = () => {\r\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789'\r\n    const webhookEndpoint = Array.from({ length: 15 })\r\n        .map(() => {\r\n            return characters.charAt(Math.floor(Math.random() * characters.length))\r\n        })\r\n        .join('')\r\n    return webhookEndpoint\r\n}\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`\r\n        }\r\n    }\r\n    return nodeId\r\n}\r\n\r\nconst getUniqueNodeLabel = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1\r\n        }\r\n    }\r\n\r\n    // Get unique label\r\n    let nodeLabel = `${nodeData.label}_${totalSameNodes}`\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.label === nodeLabel) {\r\n            totalSameNodes += 1\r\n            nodeLabel = `${nodeData.label}_${totalSameNodes}`\r\n        }\r\n    }\r\n    return totalSameNodes === 0 ? nodeData.label : nodeLabel\r\n}\r\n\r\nexport const checkIfNodeLabelUnique = (nodeLabel, nodes) => {\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.label === nodeLabel) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport const initializeNodeData = (nodeParams) => {\r\n    const initialValues = {}\r\n\r\n    for (let i = 0; i < nodeParams.length; i += 1) {\r\n        const input = nodeParams[i]\r\n\r\n        // Load from nodeParams default values\r\n        initialValues[input.name] = input.default || ''\r\n\r\n        // Special case for array, always initialize the item if default is not set\r\n        if (input.type === 'array' && !input.default) {\r\n            const newObj = {}\r\n            for (let j = 0; j < input.array.length; j += 1) {\r\n                newObj[input.array[j].name] = input.array[j].default || ''\r\n            }\r\n            initialValues[input.name] = [newObj]\r\n        }\r\n    }\r\n\r\n    initialValues.submit = null\r\n\r\n    return initialValues\r\n}\r\n\r\nexport const addAnchors = (nodeData, nodes, newNodeId) => {\r\n    const incoming = nodeData.incoming || 0\r\n    const outgoing = nodeData.outgoing || 0\r\n\r\n    const inputAnchors = []\r\n    for (let i = 0; i < incoming; i += 1) {\r\n        const newInput = {\r\n            id: `${newNodeId}-input-${i}`\r\n        }\r\n        inputAnchors.push(newInput)\r\n    }\r\n\r\n    const outputAnchors = []\r\n    for (let i = 0; i < outgoing; i += 1) {\r\n        const newOutput = {\r\n            id: `${newNodeId}-output-${i}`\r\n        }\r\n        outputAnchors.push(newOutput)\r\n    }\r\n\r\n    nodeData.inputAnchors = inputAnchors\r\n    nodeData.outputAnchors = outputAnchors\r\n    nodeData.label = getUniqueNodeLabel(nodeData, nodes)\r\n\r\n    if (nodeData.actions) nodeData.actions = initializeNodeData(nodeData.actions)\r\n    if (nodeData.credentials) nodeData.credentials = initializeNodeData(nodeData.credentials)\r\n    if (nodeData.networks) nodeData.networks = initializeNodeData(nodeData.networks)\r\n    if (nodeData.inputParameters) nodeData.inputParameters = initializeNodeData(nodeData.inputParameters)\r\n\r\n    return nodeData\r\n}\r\n\r\nexport const getEdgeLabelName = (source) => {\r\n    const sourceSplit = source.split('-')\r\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\r\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length - 1]\r\n        return outputAnchorsIndex === '0' ? 'true' : 'false'\r\n    }\r\n    return ''\r\n}\r\n\r\nexport const checkMultipleTriggers = (nodes) => {\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.type === 'webhook' || node.data.type === 'trigger') {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined\r\n\r\n    const date = moment(dateString)\r\n    if (!date.isValid) return undefined\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes())\r\n}\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    const splitDataURI = fileBase64.split(',')\r\n    const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\r\n    return filename\r\n}\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr)\r\n        const filenames = []\r\n        for (let i = 0; i < base64Array.length; i += 1) {\r\n            const fileBase64 = base64Array[i]\r\n            const splitDataURI = fileBase64.split(',')\r\n            const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\r\n            filenames.push(filename)\r\n        }\r\n        return filenames.length ? filenames.join(',') : ''\r\n    } catch (e) {\r\n        return ''\r\n    }\r\n}\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes\r\n    const edges = flowData.edges\r\n\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        nodes[i].selected = false\r\n        const node = nodes[i]\r\n        const newNodeData = {\r\n            label: node.data.label,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            inputAnchors: node.data.inputAnchors,\r\n            outputAnchors: node.data.outputAnchors,\r\n            selected: false\r\n        }\r\n        if (node.data.inputParameters) {\r\n            newNodeData.inputParameters = { ...node.data.inputParameters, submit: null }\r\n            if (node.data.inputParameters.wallet) delete newNodeData.inputParameters.wallet\r\n        }\r\n        if (node.data.actions) {\r\n            newNodeData.actions = { ...node.data.actions, submit: null }\r\n            if (node.data.actions.wallet) delete newNodeData.actions.wallet\r\n        }\r\n        if (node.data.networks) {\r\n            newNodeData.networks = { ...node.data.networks, submit: null }\r\n            if (node.data.networks.wallet) delete newNodeData.networks.wallet\r\n        }\r\n        if (node.data.credentials && node.data.credentials.credentialMethod) {\r\n            newNodeData.credentials = { credentialMethod: node.data.credentials.credentialMethod, submit: null }\r\n            if (node.data.credentials.wallet) delete newNodeData.credentials.wallet\r\n        }\r\n\r\n        nodes[i].data = newNodeData\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    }\r\n    return exportJson\r\n}\r\n\r\nconst isHideRegisteredCredential = (params, paramsType, nodeFlowData) => {\r\n    if (!nodeFlowData[paramsType] || !nodeFlowData[paramsType]['credentialMethod']) return undefined\r\n    let clonedParams = params\r\n\r\n    for (let i = 0; i < clonedParams.length; i += 1) {\r\n        const input = clonedParams[i]\r\n        if (input.type === 'options') {\r\n            const selectedCredentialMethodOption = input.options.find((opt) => opt.name === nodeFlowData[paramsType]['credentialMethod'])\r\n            if (\r\n                selectedCredentialMethodOption &&\r\n                selectedCredentialMethodOption !== undefined &&\r\n                selectedCredentialMethodOption.hideRegisteredCredential\r\n            )\r\n                return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nexport const handleCredentialParams = (nodeParams, paramsType, reorganizedParams, nodeFlowData) => {\r\n    if (\r\n        paramsType === 'credentials' &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') === undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        !isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Add hard-coded registeredCredential params\r\n        nodeParams.push({\r\n            name: 'registeredCredential'\r\n        })\r\n    } else if (\r\n        paramsType === 'credentials' &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') !== undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential')\r\n    } else if (paramsType === 'credentials' && nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') === undefined) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential')\r\n    }\r\n    return nodeParams\r\n}\r\n\r\nexport const copyToClipboard = (e) => {\r\n    const src = e.src\r\n    if (Array.isArray(src) || typeof src === 'object') {\r\n        navigator.clipboard.writeText(JSON.stringify(src, null, '  '))\r\n    } else {\r\n        navigator.clipboard.writeText(src)\r\n    }\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material'\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n}\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(function MainCard(\r\n    {\r\n        border = true,\r\n        boxShadow,\r\n        children,\r\n        content = true,\r\n        contentClass = '',\r\n        contentSX = {},\r\n        darkTitle,\r\n        secondary,\r\n        shadow,\r\n        sx = {},\r\n        title,\r\n        ...others\r\n    },\r\n    ref\r\n) {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            {...others}\r\n            sx={{\r\n                border: border ? '1px solid' : 'none',\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                ':hover': {\r\n                    boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                },\r\n                ...sx\r\n            }}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={headerSX} title={<Typography variant='h3'>{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && <Divider />}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={contentSX} className={contentClass}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    )\r\n})\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n}\r\n\r\nexport default MainCard\r\n","import axios from 'axios'\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        'Content-type': 'application/json'\r\n    }\r\n})\r\n\r\nexport default apiClient\r\n","import { useState } from 'react'\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true)\r\n        try {\r\n            const result = await apiFunc(...args)\r\n            setData(result.data)\r\n        } catch (err) {\r\n            setError(err || 'Unexpected Error!')\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    }\r\n}\r\n","import { Info } from '@mui/icons-material'\r\nimport { IconButton, Tooltip } from '@mui/material'\r\nimport parser from 'html-react-parser'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const TooltipWithParser = ({ title }) => {\r\n    return (\r\n        <Tooltip title={parser(title)} placement='right'>\r\n            <IconButton>\r\n                <Info style={{ height: 18, width: 18 }} />\r\n            </IconButton>\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nTooltipWithParser.propTypes = {\r\n    title: PropTypes.node\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion'\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(function AnimateButton({ children, type, direction, offset, scale }, ref) {\r\n    let offset1\r\n    let offset2\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset\r\n            offset2 = 0\r\n            break\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0\r\n            offset2 = offset\r\n            break\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2)\r\n    const [y, cycleY] = useCycle(offset1, offset2)\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            )\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                )\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            )\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                }\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            )\r\n    }\r\n})\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n}\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n}\r\n\r\nexport default AnimateButton\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\r\nimport ReactJson from 'react-json-view'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper'\r\n\r\nconst ExpandDataDialog = ({ show, dialogProps, onCancel, onCopyClick, enableClipboard }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='md'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {!enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={(e) => copyToClipboard(e)} />}\r\n                {enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={(e) => onCopyClick(e, dialogProps.node)} />}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nExpandDataDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onCopyClick: PropTypes.func,\r\n    enableClipboard: PropTypes.bool\r\n}\r\n\r\nexport default ExpandDataDialog\r\n","import { useEffect, useRef } from 'react'\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true)\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false\r\n        },\r\n        []\r\n    )\r\n\r\n    return scripted\r\n}\r\n\r\nexport default useScriptRef\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useSnackbar } from 'notistack'\r\nimport { removeSnackbar } from 'store/actions'\r\n\r\nlet displayed = []\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch()\r\n    const notifier = useSelector((state) => state.notifier)\r\n    const { notifications } = notifier\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar()\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id]\r\n    }\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter((key) => id !== key)]\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key)\r\n                return\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey)\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey))\r\n                    removeDisplayed(myKey)\r\n                }\r\n            })\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key)\r\n        })\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch])\r\n}\r\n\r\nexport default useNotifier\r\n","// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material'\r\nimport Skeleton from '@mui/material/Skeleton'\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction='column'>\r\n                <Grid item>\r\n                    <Grid container justifyContent='space-between'>\r\n                        <Grid item>\r\n                            <Skeleton variant='rectangular' width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant='rectangular' width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant='rectangular' sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant='rectangular' height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n)\r\n\r\nexport default WorkflowCard\r\n","import PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles'\r\nimport { Box, Grid, Chip, Typography } from '@mui/material'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard'\r\n\r\n// Const\r\nimport { networks } from 'store/constant'\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}))\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme()\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    }\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    }\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction='column'>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && (\r\n                                    <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                        <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                    </div>\r\n                                )}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction='row'>\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200],\r\n                                                overflow: 'hidden',\r\n                                                whiteSpace: 'nowrap',\r\n                                                textOverflow: 'ellipsis',\r\n                                                maxWidth: 250\r\n                                            }}\r\n                                        >\r\n                                            {`${data.address.substring(0, 8)}...${data.address.slice(-4)}`}\r\n                                        </Typography>\r\n                                    )}\r\n                                    {data.flowData && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200]\r\n                                            }}\r\n                                        >\r\n                                            Total Executions: {data.executionCount || '0'}\r\n                                        </Typography>\r\n                                    )}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label='Deployed' sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip\r\n                                        label={getNetworkItem(data.network).label}\r\n                                        sx={{ ...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            {images && (\r\n                                <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                    {images.map((img) => (\r\n                                        <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                            <img\r\n                                                style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\r\n                                                alt=''\r\n                                                src={img}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default ItemCard\r\n","import { createPortal } from 'react-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    IconButton,\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails\r\n} from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport ReactJson from 'react-json-view'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { IconArrowsMaximize } from '@tabler/icons'\r\nimport ExpandDataDialog from './ExpandDataDialog'\r\nimport Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport 'prismjs/themes/prism.css'\r\n\r\nimport './EditVariableDialog.css'\r\n\r\nconst isPositiveNumeric = (value) => /^\\d+$/.test(value)\r\n\r\nconst EditVariableDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const theme = useTheme()\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [input, setInput] = useState(null)\r\n    const [expanded, setExpanded] = useState(false)\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\r\n    const [expandDialogProps, setExpandDialogProps] = useState({})\r\n    const [copiedVariableBody, setCopiedVariableBody] = useState({})\r\n    const [languageType, setLanguageType] = useState(languages.js)\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false)\r\n    }\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        }\r\n        setExpandDialogProps(dialogProp)\r\n        setShowExpandDialog(true)\r\n    }\r\n\r\n    const onMouseUp = (e) => {\r\n        if (e.target && e.target.selectionEnd && e.target.value) {\r\n            const cursorPosition = e.target.selectionEnd\r\n            const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition)\r\n            const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length)\r\n            const body = {\r\n                textBeforeCursorPosition,\r\n                textAfterCursorPosition\r\n            }\r\n            setCopiedVariableBody(body)\r\n        } else {\r\n            setCopiedVariableBody({})\r\n        }\r\n    }\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace\r\n        let returnVariablePath = `${node.id}`\r\n        for (let i = 0; i < namespaces.length; i += 1) {\r\n            const namespace = namespaces[i]\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1)\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`\r\n                } else {\r\n                    returnVariablePath += namespace\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.'\r\n                }\r\n            }\r\n        }\r\n        if (copiedVariableBody) {\r\n            let newInput = ''\r\n            if (copiedVariableBody.textBeforeCursorPosition === undefined && copiedVariableBody.textAfterCursorPosition === undefined)\r\n                newInput = `${inputValue}${`{{${returnVariablePath}}}`}`\r\n            else\r\n                newInput = `${copiedVariableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${copiedVariableBody.textAfterCursorPosition}`\r\n            setInputValue(newInput)\r\n        }\r\n    }\r\n\r\n    const onSave = (value) => {\r\n        // ArrayInputParameter\r\n        if (dialogProps.arrayItemBody) {\r\n            const updateArrayValues = {\r\n                ...dialogProps.arrayItemBody.arrayItemValues,\r\n                [dialogProps.arrayItemBody.arrayItemInput.name]: value\r\n            }\r\n            const updateInitialValues = dialogProps.arrayItemBody.initialValues\r\n            updateInitialValues[dialogProps.arrayItemBody.arrayItemIndex] = updateArrayValues\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: updateInitialValues\r\n            }\r\n            onConfirm(updateValues)\r\n        } else {\r\n            // InputParameter\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: value,\r\n                submit: null\r\n            }\r\n            onConfirm(updateValues)\r\n        }\r\n    }\r\n\r\n    // Handle Accordian\r\n    useEffect(() => {\r\n        if (dialogProps.values && dialogProps.input) {\r\n            let inputValues = dialogProps.values\r\n            let input = dialogProps.input\r\n            if (dialogProps.arrayItemBody) {\r\n                inputValues = dialogProps.arrayItemBody.arrayItemValues\r\n                input = dialogProps.arrayItemBody.arrayItemInput\r\n            }\r\n            setInput(input)\r\n            setInputValue(inputValues[input.name].toString() || '')\r\n            if (input.type === 'json' || input.type === 'string' || input.type === 'number') setLanguageType(languages.json)\r\n            if (input.type === 'code') setLanguageType(languages.js)\r\n        }\r\n    }, [dialogProps])\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} fullWidth maxWidth='lg' aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {input && (input.type === 'json' || input.type === 'string' || input.type === 'number' || input.type === 'code') && (\r\n                        <div style={{ flex: 1 }}>\r\n                            <Typography sx={{ mb: 2, ml: 1 }} variant='h4'>\r\n                                Input\r\n                            </Typography>\r\n                            <PerfectScrollbar\r\n                                style={{\r\n                                    border: '1px solid',\r\n                                    borderColor: theme.palette.grey['500'],\r\n                                    borderRadius: '12px',\r\n                                    height: '100%',\r\n                                    maxHeight: 'calc(100vh - 220px)',\r\n                                    overflowX: 'hidden',\r\n                                    backgroundColor: 'white'\r\n                                }}\r\n                            >\r\n                                <Editor\r\n                                    value={inputValue}\r\n                                    onValueChange={(code) => setInputValue(code)}\r\n                                    placeholder={input.placeholder}\r\n                                    highlight={(code) => highlight(code, languageType)}\r\n                                    onMouseUp={(e) => onMouseUp(e)}\r\n                                    onBlur={(e) => onMouseUp(e)}\r\n                                    padding={10}\r\n                                    style={{\r\n                                        fontSize: '0.875rem',\r\n                                        minHeight: 'calc(100vh - 220px)',\r\n                                        width: '100%'\r\n                                    }}\r\n                                    textareaClassName='editor__textarea'\r\n                                />\r\n                            </PerfectScrollbar>\r\n                        </div>\r\n                    )}\r\n                    {!dialogProps.hideVariables && (\r\n                        <div style={{ flex: 1 }}>\r\n                            <Typography sx={{ mb: 2, ml: 2 }} variant='h4'>\r\n                                Variables\r\n                            </Typography>\r\n                            {dialogProps.availableNodesForVariable.length === 0 && (\r\n                                <div style={{ padding: 10, marginLeft: 10 }}>\r\n                                    <span>No Variables. Try connect to other nodes. </span>\r\n                                </div>\r\n                            )}\r\n                            {dialogProps.availableNodesForVariable.length > 0 && (\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                                    <Box sx={{ pl: 2, pr: 2 }}>\r\n                                        <List\r\n                                            sx={{\r\n                                                width: '100%',\r\n                                                py: 0,\r\n                                                borderRadius: '10px',\r\n                                                [theme.breakpoints.down('md')]: {\r\n                                                    maxWidth: 300\r\n                                                },\r\n                                                '& .MuiListItemSecondaryAction-root': {\r\n                                                    top: 22\r\n                                                },\r\n                                                '& .MuiDivider-root': {\r\n                                                    my: 0\r\n                                                },\r\n                                                '& .list-container': {\r\n                                                    pl: 7\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            {dialogProps.availableNodesForVariable.map((node, index) => (\r\n                                                <Box key={index}>\r\n                                                    <Accordion\r\n                                                        expanded={expanded === node.data.label}\r\n                                                        onChange={handleAccordionChange(node.data.label)}\r\n                                                    >\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls={`${node.data.label}-content`}\r\n                                                            id={`${node.data.label}-header`}\r\n                                                        >\r\n                                                            <Typography variant='h5'>{node.data.label}</Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <div style={{ position: 'relative' }}>\r\n                                                                <ReactJson\r\n                                                                    collapsed\r\n                                                                    src={\r\n                                                                        node.data.outputResponses && node.data.outputResponses.output\r\n                                                                            ? node.data.outputResponses.output\r\n                                                                            : {}\r\n                                                                    }\r\n                                                                    enableClipboard={(e) => onClipboardCopy(e, node)}\r\n                                                                />\r\n                                                                <IconButton\r\n                                                                    size='small'\r\n                                                                    sx={{\r\n                                                                        height: 25,\r\n                                                                        width: 25,\r\n                                                                        position: 'absolute',\r\n                                                                        top: -5,\r\n                                                                        right: 5\r\n                                                                    }}\r\n                                                                    title='Expand Variable'\r\n                                                                    color='primary'\r\n                                                                    onClick={() =>\r\n                                                                        onExpandDialogClicked(\r\n                                                                            node.data.outputResponses && node.data.outputResponses.output\r\n                                                                                ? node.data.outputResponses.output\r\n                                                                                : {},\r\n                                                                            node\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    <IconArrowsMaximize />\r\n                                                                </IconButton>\r\n                                                            </div>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Box>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Box>\r\n                                </PerfectScrollbar>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                    <ExpandDataDialog\r\n                        enableClipboard\r\n                        show={showExpandDialog}\r\n                        dialogProps={expandDialogProps}\r\n                        onCancel={() => setShowExpandDialog(false)}\r\n                        onCopyClick={(e, node) => {\r\n                            onClipboardCopy(e, node)\r\n                            setShowExpandDialog(false)\r\n                        }}\r\n                    ></ExpandDataDialog>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <Button variant='contained' onClick={() => onSave(inputValue)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nEditVariableDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default EditVariableDialog\r\n","import { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n\r\n// material-ui\r\nimport { Box, Switch, Fab, FormControl, OutlinedInput, Popper, TextField, Typography, Stack, Button } from '@mui/material'\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'\r\nimport { useTheme, styled } from '@mui/material/styles'\r\nimport { TooltipWithParser } from '../../ui-component/TooltipWithParser'\r\n\r\n// icons\r\nimport { IconX, IconUpload } from '@tabler/icons'\r\n\r\n// third party\r\nimport lodash from 'lodash'\r\nimport Editor from 'react-simple-code-editor'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport 'prismjs/themes/prism.css'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper'\r\n\r\n//css\r\nimport './InputParameters.css'\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n})\r\n\r\nconst DateCustomInput = forwardRef(function DateCustomInput({ value, onClick }, ref) {\r\n    return (\r\n        <button\r\n            style={{\r\n                backgroundColor: '#fafafa',\r\n                paddingTop: 8,\r\n                paddingBottom: 8,\r\n                paddingRight: 12,\r\n                paddingLeft: 12,\r\n                borderRadius: 12,\r\n                width: '100%',\r\n                height: 50,\r\n                border: `1px solid #BDBDBD`,\r\n                cursor: 'pointer',\r\n                fontWeight: 'bold',\r\n                textAlign: 'start',\r\n                color: '#212121',\r\n                opacity: 0.9\r\n            }}\r\n            type='button'\r\n            onClick={onClick}\r\n            ref={ref}\r\n        >\r\n            {value}\r\n        </button>\r\n    )\r\n})\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\n// ==============================|| ARRAY INPUT PARAMETERS ||============================== //\r\n\r\nconst ArrayInputParameters = ({\r\n    initialValues,\r\n    arrayParams,\r\n    paramsType,\r\n    arrayGroupName,\r\n    errors,\r\n    onArrayInputChange,\r\n    onArrayInputBlur,\r\n    onArrayItemRemove,\r\n    onArrayItemMouseUp,\r\n    onEditVariableDialogOpen\r\n}) => {\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const processUpdateValues = (inputValue, inputName, values, index) => {\r\n        const updateArrayValues = {\r\n            ...values,\r\n            [inputName]: inputValue\r\n        }\r\n        const updateInitialValues = initialValues\r\n        updateInitialValues[index] = updateArrayValues\r\n        return updateInitialValues\r\n    }\r\n\r\n    const onInputChange = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index)\r\n        onArrayInputChange(updateInitialValues)\r\n    }\r\n\r\n    const onInputBlur = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index)\r\n        onArrayInputBlur(updateInitialValues)\r\n    }\r\n\r\n    const onRemoveClick = (index) => {\r\n        const updateInitialValues = initialValues\r\n        updateInitialValues.splice(index, 1)\r\n        onArrayItemRemove(updateInitialValues)\r\n        onArrayItemMouseUp(false)\r\n    }\r\n\r\n    const onMouseUp = (e, inputName, valueIndex) => {\r\n        const cursorPosition = e.target.selectionEnd\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition)\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length)\r\n        const path = `${paramsType}.${arrayGroupName}[${valueIndex}].${inputName}`\r\n        const body = {\r\n            textBeforeCursorPosition,\r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        }\r\n        onArrayItemMouseUp(true, body)\r\n    }\r\n\r\n    const handleFolderUpload = (e, values, inputName, index) => {\r\n        if (!e.target.files) return\r\n        const files = e.target.files\r\n        const reader = new FileReader()\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if (fileIndex >= files.length) {\r\n                onInputChange(JSON.stringify(base64Array), inputName, values, index)\r\n                return\r\n            }\r\n            const file = files[fileIndex]\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return\r\n                }\r\n                const { result } = evt.target\r\n                const value = result + `,filepath:${file.webkitRelativePath}`\r\n                base64Array.push(value)\r\n                readFile(fileIndex + 1, lodash.cloneDeep(base64Array))\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n        readFile(0, [])\r\n    }\r\n\r\n    const handleFileUpload = (e, onInputChange, values, inputName, index) => {\r\n        if (!e.target.files) {\r\n            return\r\n        }\r\n\r\n        const file = e.target.files[0]\r\n        const { name } = file\r\n\r\n        const reader = new FileReader()\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return\r\n            }\r\n            const { result } = evt.target\r\n            const value = result + `,filename:${name}`\r\n            onInputChange(value, inputName, values, index)\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value)\r\n\r\n    const getDefaultOptionValue = () => ''\r\n\r\n    return (\r\n        <>\r\n            {arrayParams.map((_, index) => {\r\n                const params = arrayParams[index] || []\r\n                const values = initialValues[index] || {}\r\n\r\n                return (\r\n                    <Box\r\n                        sx={{\r\n                            p: 2,\r\n                            mb: 2,\r\n                            backgroundColor: theme.palette.secondary.light,\r\n                            borderRadius: `${customization.borderRadius}px`,\r\n                            position: 'relative'\r\n                        }}\r\n                        key={index}\r\n                    >\r\n                        {arrayParams.length > 1 && (\r\n                            <Fab\r\n                                sx={{\r\n                                    minHeight: 30,\r\n                                    height: 30,\r\n                                    width: 30,\r\n                                    backgroundColor: theme.palette.secondary.light,\r\n                                    color: theme.palette.secondary.main,\r\n                                    position: 'absolute',\r\n                                    right: -10,\r\n                                    top: -10\r\n                                }}\r\n                                size='small'\r\n                                onClick={() => onRemoveClick(index)}\r\n                            >\r\n                                <IconX />\r\n                            </Fab>\r\n                        )}\r\n\r\n                        {params.map((input, paramIndex) => {\r\n                            if (input.type === 'file' || input.type === 'folder') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                        </Stack>\r\n\r\n                                        {input.type === 'file' && (\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: 'bold',\r\n                                                    color: theme.palette.grey['800'],\r\n                                                    marginBottom: '1rem'\r\n                                                }}\r\n                                            >\r\n                                                {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload'}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        {input.type === 'folder' && (\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: 'bold',\r\n                                                    color: theme.palette.grey['800'],\r\n                                                    marginBottom: '1rem'\r\n                                                }}\r\n                                            >\r\n                                                {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload'}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        <Button\r\n                                            variant='outlined'\r\n                                            component='label'\r\n                                            fullWidth\r\n                                            startIcon={<IconUpload />}\r\n                                            sx={{ marginRight: '1rem' }}\r\n                                        >\r\n                                            {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                            {input.type === 'file' && (\r\n                                                <input type='file' hidden onChange={(e) => handleFileUpload(e, values, inputName, index)} />\r\n                                            )}\r\n                                            {input.type === 'folder' && (\r\n                                                <input\r\n                                                    type='file'\r\n                                                    // https://github.com/jsx-eslint/eslint-plugin-react/issues/3454\r\n                                                    // eslint-disable-next-line react/no-unknown-property\r\n                                                    directory=''\r\n                                                    // eslint-disable-next-line react/no-unknown-property\r\n                                                    webkitdirectory=''\r\n                                                    hidden\r\n                                                    onChange={(e) => handleFolderUpload(e, values, inputName, index)}\r\n                                                />\r\n                                            )}\r\n                                        </Button>\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'json' || input.type === 'code') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack sx={{ position: 'relative' }} direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                            <Button\r\n                                                sx={{\r\n                                                    position: 'absolute',\r\n                                                    fontSize: '0.6875rem',\r\n                                                    right: 0,\r\n                                                    top: 5,\r\n                                                    height: 25,\r\n                                                    width: 'max-content'\r\n                                                }}\r\n                                                variant='outlined'\r\n                                                onClick={() => onEditVariableDialogOpen(input, values, index)}\r\n                                            >\r\n                                                Edit Variables\r\n                                            </Button>\r\n                                        </Stack>\r\n                                        <PerfectScrollbar\r\n                                            style={{\r\n                                                border: '1px solid',\r\n                                                borderColor: theme.palette.grey['500'],\r\n                                                borderRadius: '12px',\r\n                                                height: '200px',\r\n                                                maxHeight: '200px',\r\n                                                overflowX: 'hidden',\r\n                                                backgroundColor: 'white'\r\n                                            }}\r\n                                            onScroll={(e) => e.stopPropagation()}\r\n                                        >\r\n                                            <Editor\r\n                                                placeholder={input.placeholder}\r\n                                                value={values[inputName] || ''}\r\n                                                onBlur={(e) => {\r\n                                                    onInputBlur(e.target.value, inputName, values, index)\r\n                                                    onMouseUp(e, inputName, index)\r\n                                                }}\r\n                                                onValueChange={(code) => onInputChange(code, inputName, values, index)}\r\n                                                onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                                highlight={(code) => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                                padding={10}\r\n                                                style={{\r\n                                                    fontSize: '0.875rem',\r\n                                                    minHeight: '200px',\r\n                                                    width: '100%'\r\n                                                }}\r\n                                                textareaClassName='editor__textarea'\r\n                                            />\r\n                                        </PerfectScrollbar>\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'date') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                        </Stack>\r\n                                        <DatePicker\r\n                                            customInput={<DateCustomInput />}\r\n                                            selected={convertDateStringToDateObject(values[inputName]) || null}\r\n                                            showTimeSelect\r\n                                            isClearable\r\n                                            timeInputLabel='Time:'\r\n                                            dateFormat='MM/dd/yyyy h:mm aa'\r\n                                            onChange={(date) => {\r\n                                                const inputValue = date ? date.toISOString() : null\r\n                                                onInputChange(inputValue, inputName, values, index)\r\n                                                onArrayItemMouseUp(false)\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack sx={{ position: 'relative' }} direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                            {(input.type === 'string' || input.type === 'number') && (\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        position: 'absolute',\r\n                                                        fontSize: '0.6875rem',\r\n                                                        right: 0,\r\n                                                        top: 5,\r\n                                                        height: 25,\r\n                                                        width: 'max-content'\r\n                                                    }}\r\n                                                    variant='outlined'\r\n                                                    onClick={() => onEditVariableDialogOpen(input, values, index)}\r\n                                                >\r\n                                                    Edit Variables\r\n                                                </Button>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <OutlinedInput\r\n                                            id={inputName}\r\n                                            type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                            value={values[inputName] || ''}\r\n                                            placeholder={input.placeholder}\r\n                                            name={inputName}\r\n                                            onBlur={(e) => {\r\n                                                const inputValue = e.target.value\r\n                                                onInputBlur(inputValue, inputName, values, index)\r\n                                                onMouseUp(e, inputName, index)\r\n                                            }}\r\n                                            onChange={(e) => {\r\n                                                const inputValue = e.target.value\r\n                                                onInputChange(inputValue, inputName, values, index)\r\n                                            }}\r\n                                            onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                        </Stack>\r\n                                        <Switch\r\n                                            checked={!!values[inputName]}\r\n                                            onChange={(event) => {\r\n                                                onInputChange(event.target.checked, inputName, values, index)\r\n                                            }}\r\n                                            inputProps={{ 'aria-label': 'controlled' }}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n                                const inputName = input.name\r\n                                const availableOptions = input.options || []\r\n\r\n                                return (\r\n                                    <FormControl key={`${inputName}_${paramIndex}`} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                        <Stack direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                        </Stack>\r\n                                        <Autocomplete\r\n                                            id={inputName}\r\n                                            freeSolo\r\n                                            onOpen={() => onArrayItemMouseUp(false)}\r\n                                            options={availableOptions}\r\n                                            value={findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()}\r\n                                            onChange={(e, selection) => {\r\n                                                const value = selection ? selection.name : ''\r\n                                                onInputBlur(value, inputName, values, index)\r\n                                            }}\r\n                                            PopperComponent={StyledPopper}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    value={values[inputName]}\r\n                                                    error={\r\n                                                        errors && errors.length > 0 && errors[index]\r\n                                                            ? Boolean(errors[index][inputName])\r\n                                                            : false\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            renderOption={(props, option) => (\r\n                                                <Box component='li' {...props}>\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                        <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                            {option.label}\r\n                                                        </Typography>\r\n                                                        {option.description && <Typography sx={{ p: 1 }}>{option.description}</Typography>}\r\n                                                    </div>\r\n                                                </Box>\r\n                                            )}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n                            return null\r\n                        })}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nArrayInputParameters.propTypes = {\r\n    initialValues: PropTypes.array,\r\n    arrayParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    arrayGroupName: PropTypes.string,\r\n    errors: PropTypes.array,\r\n    onArrayInputChange: PropTypes.func,\r\n    onArrayInputBlur: PropTypes.func,\r\n    onArrayItemRemove: PropTypes.func,\r\n    onArrayItemMouseUp: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func\r\n}\r\n\r\nexport default ArrayInputParameters\r\n","import PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { Box, Typography } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper'\r\n\r\n//css\r\nimport './OptionParamsResponse.css'\r\n\r\n// ==============================|| OPTION PARAMS RESPONSE ||============================== //\r\n\r\nconst OptionParamsResponse = ({ value, options }) => {\r\n    const theme = useTheme()\r\n\r\n    const getSelectedValue = (value) => options.find((option) => option.name === value)\r\n\r\n    const getSelectedOptionInputParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value)\r\n        if (selectedOption) {\r\n            return selectedOption.inputParameters || ''\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getSelectedOptionExampleParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value)\r\n        if (selectedOption) {\r\n            return selectedOption.exampleParameters || ''\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getSelectedOptionExampleResponse = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value)\r\n        if (selectedOption) {\r\n            return selectedOption.exampleResponse || ''\r\n        }\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getSelectedValue(value) && getSelectedOptionInputParams(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant='h6'>\r\n                        Parameters\r\n                    </Typography>\r\n                    <div className='params' dangerouslySetInnerHTML={{ __html: getSelectedOptionInputParams(value) }} />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleParams(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant='h6'>\r\n                        Example Parameters\r\n                    </Typography>\r\n                    <ReactJson\r\n                        collapsed\r\n                        src={JSON.parse(getSelectedOptionExampleParams(value))}\r\n                        enableClipboard={(e) => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleResponse(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant='h6'>\r\n                        Example Response\r\n                    </Typography>\r\n                    <ReactJson collapsed src={getSelectedOptionExampleResponse(value)} enableClipboard={(e) => copyToClipboard(e)} />\r\n                </Box>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nOptionParamsResponse.propTypes = {\r\n    value: PropTypes.string,\r\n    options: PropTypes.array\r\n}\r\n\r\nexport default OptionParamsResponse\r\n","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { TooltipWithParser } from '../../ui-component/TooltipWithParser'\r\n\r\n// material-ui\r\nimport { Typography, Stack } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport OptionParamsResponse from './OptionParamsResponse'\r\n\r\n// third party\r\nimport lodash from 'lodash'\r\nimport AsyncSelect from 'react-select/async'\r\nimport axios from 'axios'\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons'\r\n\r\n// Constant\r\nimport { baseURL } from 'store/constant'\r\n\r\n// ==============================|| ASYNC SELECT WRAPPER ||============================== //\r\n\r\nconst AsyncSelectWrapper = ({\r\n    title,\r\n    description,\r\n    value,\r\n    loadMethod,\r\n    loadFromDbCollections,\r\n    nodeFlowData,\r\n    error,\r\n    onChange,\r\n    onMenuOpen,\r\n    onSetError\r\n}) => {\r\n    const theme = useTheme()\r\n\r\n    const customStyles = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            paddingTop: 15,\r\n            paddingBottom: 15,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            cursor: 'pointer',\r\n            fontWeight: '500',\r\n            backgroundColor: state.isSelected ? theme.palette.primary.light : '',\r\n            color: 'black',\r\n            '&:hover': {\r\n                backgroundColor: theme.palette.grey['200']\r\n            }\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            cursor: 'text',\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 6,\r\n            paddingLeft: 6,\r\n            borderRadius: 12,\r\n            '&:hover': {\r\n                borderColor: theme.palette.grey['700']\r\n            }\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            fontWeight: '600'\r\n        }),\r\n        menuList: (provided) => ({\r\n            ...provided,\r\n            boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n            borderRadius: '10px'\r\n        })\r\n    }\r\n\r\n    const [asyncOptions, setAsyncOptions] = useState([])\r\n\r\n    const getSelectedValue = (value) => asyncOptions.find((option) => option.name === value)\r\n\r\n    const getDefaultOptionValue = () => ''\r\n\r\n    const formatErrorMessage = (error) => {\r\n        if (error) return `*${error.replace(/[\"]/g, '')}`\r\n        return ''\r\n    }\r\n\r\n    const showHideOptions = (options) => {\r\n        let returnOptions = options\r\n        const toBeDeleteOptions = []\r\n        const displayTypes = ['show', 'hide']\r\n\r\n        for (let x = 0; x < displayTypes.length; x += 1) {\r\n            const displayType = displayTypes[x]\r\n\r\n            for (let i = 0; i < returnOptions.length; i += 1) {\r\n                const option = returnOptions[i]\r\n                const displayOptions = option[displayType]\r\n\r\n                if (displayOptions) {\r\n                    Object.keys(displayOptions).forEach((path) => {\r\n                        const comparisonValue = displayOptions[path]\r\n                        const groundValue = lodash.get(nodeFlowData, path, '')\r\n\r\n                        if (Array.isArray(comparisonValue)) {\r\n                            if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option)\r\n                            }\r\n                            if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option)\r\n                            }\r\n                        } else if (typeof comparisonValue === 'string') {\r\n                            if (\r\n                                displayType === 'show' &&\r\n                                !(comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                            ) {\r\n                                toBeDeleteOptions.push(option)\r\n                            }\r\n                            if (\r\n                                displayType === 'hide' &&\r\n                                (comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                            ) {\r\n                                toBeDeleteOptions.push(option)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]))\r\n        }\r\n\r\n        return returnOptions\r\n    }\r\n\r\n    const loadOptions = (inputValue, callback) => {\r\n        axios\r\n            .post(`${baseURL}/api/v1/node-load-method/${nodeFlowData.name}`, { ...nodeFlowData, loadMethod, loadFromDbCollections })\r\n            .then((response) => {\r\n                const data = response.data\r\n                const filteredOption = (data || []).filter((i) => i.label.toLowerCase().includes(inputValue.toLowerCase()))\r\n                const options = showHideOptions(filteredOption)\r\n                setAsyncOptions(options)\r\n                callback(options)\r\n            })\r\n    }\r\n\r\n    const formatOptionLabel = ({ label, description }, { context }) => (\r\n        <>\r\n            {context === 'menu' && (\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <div>{label}</div>\r\n                    {description && <span style={{ fontWeight: 400, paddingTop: 10, paddingBottom: 10 }}>{description}</span>}\r\n                </div>\r\n            )}\r\n            {context === 'value' && (\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <div>{label}</div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n\r\n    useEffect(() => () => setAsyncOptions([]), [])\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            const selectedOption = asyncOptions.find((option) => option.name === value)\r\n            if (!selectedOption) {\r\n                onSetError()\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [asyncOptions])\r\n\r\n    return (\r\n        <>\r\n            <Stack direction='row'>\r\n                <Typography variant='overline'>{title}</Typography>\r\n                {description && <TooltipWithParser title={description} />}\r\n            </Stack>\r\n            <div style={{ position: 'relative' }}>\r\n                <AsyncSelect\r\n                    key={JSON.stringify(nodeFlowData)} // to reload async select whenever flowdata changed\r\n                    styles={customStyles}\r\n                    value={getSelectedValue(value) || getDefaultOptionValue()}\r\n                    formatOptionLabel={formatOptionLabel}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionValue={(option) => option.name}\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onChange={onChange}\r\n                    onMenuOpen={onMenuOpen}\r\n                />\r\n                <button\r\n                    style={{\r\n                        minHeight: 10,\r\n                        height: 27,\r\n                        width: 30,\r\n                        backgroundColor: '#FAFAFA',\r\n                        color: theme.palette.grey['500'],\r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        margin: 'auto',\r\n                        border: 'none',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                    title='Clear Selection'\r\n                    type='button'\r\n                    onClick={() => onChange(null)}\r\n                >\r\n                    <IconX />\r\n                </button>\r\n            </div>\r\n            {error && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>{formatErrorMessage(error)}</span>}\r\n\r\n            <OptionParamsResponse value={value} options={asyncOptions} />\r\n        </>\r\n    )\r\n}\r\n\r\nAsyncSelectWrapper.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    value: PropTypes.string,\r\n    loadMethod: PropTypes.string,\r\n    loadFromDbCollections: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    error: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onMenuOpen: PropTypes.func,\r\n    onSetError: PropTypes.func\r\n}\r\n\r\nexport default AsyncSelectWrapper\r\n","import PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n\r\n// material-ui\r\nimport { Box, Button, Stack, FormControl, OutlinedInput, Popper, TextField, Typography, Switch } from '@mui/material'\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'\r\nimport { styled, useTheme } from '@mui/material/styles'\r\n\r\n// third party\r\nimport lodash from 'lodash'\r\nimport * as Yup from 'yup'\r\nimport { Formik } from 'formik'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport 'prismjs/themes/prism.css'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nimport { TooltipWithParser } from '../../ui-component/TooltipWithParser'\r\n\r\n// project imports\r\nimport useScriptRef from 'hooks/useScriptRef'\r\nimport AnimateButton from 'ui-component/extended/AnimateButton'\r\nimport ArrayInputParameters from './ArrayInputParameters'\r\nimport OptionParamsResponse from './OptionParamsResponse'\r\nimport AsyncSelectWrapper from './AsyncSelectWrapper'\r\n\r\n// icons\r\nimport { IconPlus, IconUpload } from '@tabler/icons'\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper'\r\n\r\n//css\r\nimport './InputParameters.css'\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n})\r\n\r\nconst DateCustomInput = forwardRef(function DateCustomInput({ value, onClick }, ref) {\r\n    return (\r\n        <button\r\n            style={{\r\n                backgroundColor: '#fafafa',\r\n                paddingTop: 8,\r\n                paddingBottom: 8,\r\n                paddingRight: 12,\r\n                paddingLeft: 12,\r\n                borderRadius: 12,\r\n                width: '100%',\r\n                height: 50,\r\n                border: `1px solid #BDBDBD`,\r\n                cursor: 'pointer',\r\n                fontWeight: 'bold',\r\n                textAlign: 'start',\r\n                color: '#212121',\r\n                opacity: 0.9\r\n            }}\r\n            type='button'\r\n            onClick={onClick}\r\n            ref={ref}\r\n        >\r\n            {value}\r\n        </button>\r\n    )\r\n})\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\n// ==============================|| INPUT PARAMETERS ||============================== //\r\n\r\nconst InputParameters = ({\r\n    params,\r\n    paramsType,\r\n    initialValues,\r\n    nodeParamsValidation,\r\n    nodeFlowData,\r\n    valueChanged,\r\n    onSubmit,\r\n    setVariableSelectorState,\r\n    onEditVariableDialogOpen,\r\n    ...others\r\n}) => {\r\n    const theme = useTheme()\r\n\r\n    const scriptedRef = useScriptRef()\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values\r\n        updateValues.submit = null\r\n        valueChanged(updateValues, paramsType)\r\n    }\r\n\r\n    const onMouseUp = (e, inputName) => {\r\n        const cursorPosition = e.target.selectionEnd\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition)\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length)\r\n        const path = `${paramsType}.${inputName}`\r\n        const body = {\r\n            textBeforeCursorPosition,\r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        }\r\n        setVariableSelectorState(true, body)\r\n    }\r\n\r\n    const onAddArrayItem = (values, arrayItems, arrayName) => {\r\n        const updateValues = {\r\n            ...values,\r\n            [arrayName]: arrayItems\r\n        }\r\n        valueChanged(updateValues, paramsType)\r\n    }\r\n\r\n    const handleFolderUpload = (e, setFieldValue, values, inputName) => {\r\n        setVariableSelectorState(false)\r\n        if (!e.target.files) return\r\n        const files = e.target.files\r\n        const reader = new FileReader()\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if (fileIndex >= files.length) {\r\n                setFieldValue(inputName, JSON.stringify(base64Array))\r\n                const overwriteValues = {\r\n                    ...values,\r\n                    [inputName]: JSON.stringify(base64Array)\r\n                }\r\n                onChanged(overwriteValues)\r\n                return\r\n            }\r\n            const file = files[fileIndex]\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return\r\n                }\r\n                const { result } = evt.target\r\n                const value = result + `,filepath:${file.webkitRelativePath}`\r\n                base64Array.push(value)\r\n                readFile(fileIndex + 1, lodash.cloneDeep(base64Array))\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n        readFile(0, [])\r\n    }\r\n\r\n    const handleFileUpload = (e, setFieldValue, values, inputName) => {\r\n        setVariableSelectorState(false)\r\n        if (!e.target.files) return\r\n\r\n        const file = e.target.files[0]\r\n        const { name } = file\r\n\r\n        const reader = new FileReader()\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return\r\n            }\r\n            const { result } = evt.target\r\n\r\n            const value = result + `,filename:${name}`\r\n            setFieldValue(inputName, value)\r\n            const overwriteValues = {\r\n                ...values,\r\n                [inputName]: value\r\n            }\r\n            onChanged(overwriteValues)\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value)\r\n\r\n    const getDefaultOptionValue = () => ''\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={initialValues}\r\n                    validationSchema={Yup.object().shape(nodeParamsValidation)}\r\n                    onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                        setVariableSelectorState(false)\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                values.submit = true\r\n                                setStatus({ success: true })\r\n                                setSubmitting(false)\r\n                                onSubmit(values, paramsType)\r\n                            }\r\n                        } catch (err) {\r\n                            console.error(err)\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false })\r\n                                setErrors({ submit: err.message })\r\n                                setSubmitting(false)\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                        <form noValidate onSubmit={handleSubmit} {...others}>\r\n                            {params.map((input) => {\r\n                                if (input.type === 'file' || input.type === 'folder') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n\r\n                                            {input.type === 'file' && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: 'bold',\r\n                                                        color: theme.palette.grey['800'],\r\n                                                        marginBottom: '1rem'\r\n                                                    }}\r\n                                                >\r\n                                                    {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload'}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            {input.type === 'folder' && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: 'bold',\r\n                                                        color: theme.palette.grey['800'],\r\n                                                        marginBottom: '1rem'\r\n                                                    }}\r\n                                                >\r\n                                                    {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload'}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            <Button\r\n                                                variant='outlined'\r\n                                                component='label'\r\n                                                fullWidth\r\n                                                startIcon={<IconUpload />}\r\n                                                sx={{ marginRight: '1rem' }}\r\n                                            >\r\n                                                {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                                {input.type === 'file' && (\r\n                                                    <input\r\n                                                        type='file'\r\n                                                        hidden\r\n                                                        onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName)}\r\n                                                    />\r\n                                                )}\r\n                                                {input.type === 'folder' && (\r\n                                                    <input\r\n                                                        type='file'\r\n                                                        // https://github.com/jsx-eslint/eslint-plugin-react/issues/3454\r\n                                                        // eslint-disable-next-line react/no-unknown-property\r\n                                                        directory=''\r\n                                                        // eslint-disable-next-line react/no-unknown-property\r\n                                                        webkitdirectory=''\r\n                                                        hidden\r\n                                                        onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName)}\r\n                                                    />\r\n                                                )}\r\n                                            </Button>\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'json' || input.type === 'code') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack sx={{ position: 'relative' }} direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        position: 'absolute',\r\n                                                        fontSize: '0.6875rem',\r\n                                                        right: 0,\r\n                                                        top: 5,\r\n                                                        height: 25,\r\n                                                        width: 'max-content'\r\n                                                    }}\r\n                                                    variant='outlined'\r\n                                                    onClick={() => onEditVariableDialogOpen(input, values)}\r\n                                                >\r\n                                                    Edit Variables\r\n                                                </Button>\r\n                                            </Stack>\r\n                                            <PerfectScrollbar\r\n                                                style={{\r\n                                                    border: '1px solid',\r\n                                                    borderColor: theme.palette.grey['500'],\r\n                                                    borderRadius: '12px',\r\n                                                    height: '200px',\r\n                                                    maxHeight: '200px',\r\n                                                    overflowX: 'hidden',\r\n                                                    backgroundColor: 'white'\r\n                                                }}\r\n                                                onScroll={(e) => e.stopPropagation()}\r\n                                            >\r\n                                                <Editor\r\n                                                    placeholder={input.placeholder}\r\n                                                    value={values[inputName] || ''}\r\n                                                    onBlur={(e) => {\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: e.target.value\r\n                                                        }\r\n                                                        onChanged(overwriteValues)\r\n                                                        onMouseUp(e, inputName)\r\n                                                    }}\r\n                                                    onValueChange={(code) => {\r\n                                                        setFieldValue(inputName, code)\r\n                                                    }}\r\n                                                    onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                                    highlight={(code) =>\r\n                                                        highlight(code, input.type === 'json' ? languages.json : languages.js)\r\n                                                    }\r\n                                                    padding={10}\r\n                                                    style={{\r\n                                                        fontSize: '0.875rem',\r\n                                                        minHeight: '200px',\r\n                                                        width: '100%'\r\n                                                    }}\r\n                                                    textareaClassName='editor__textarea'\r\n                                                />\r\n                                            </PerfectScrollbar>\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'date') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <DatePicker\r\n                                                customInput={<DateCustomInput />}\r\n                                                selected={convertDateStringToDateObject(values[inputName]) || null}\r\n                                                showTimeSelect\r\n                                                isClearable\r\n                                                timeInputLabel='Time:'\r\n                                                dateFormat='MM/dd/yyyy h:mm aa'\r\n                                                onChange={(date) => {\r\n                                                    const value = date ? date.toISOString() : null\r\n                                                    setVariableSelectorState(false)\r\n                                                    setFieldValue(inputName, value)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack sx={{ position: 'relative' }} direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                                {(input.type === 'string' || input.type === 'number') && (\r\n                                                    <Button\r\n                                                        sx={{\r\n                                                            position: 'absolute',\r\n                                                            fontSize: '0.6875rem',\r\n                                                            right: 0,\r\n                                                            top: 5,\r\n                                                            height: 25,\r\n                                                            width: 'max-content'\r\n                                                        }}\r\n                                                        variant='outlined'\r\n                                                        onClick={() => onEditVariableDialogOpen(input, values)}\r\n                                                    >\r\n                                                        Edit Variables\r\n                                                    </Button>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <OutlinedInput\r\n                                                id={inputName}\r\n                                                type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                                placeholder={input.placeholder}\r\n                                                multiline={!!input.rows}\r\n                                                maxRows={input.rows || 0}\r\n                                                minRows={input.rows || 0}\r\n                                                value={values[inputName] || ''}\r\n                                                name={inputName}\r\n                                                onBlur={(e) => {\r\n                                                    handleBlur(e)\r\n                                                    onChanged(values)\r\n                                                    onMouseUp(e, inputName)\r\n                                                }}\r\n                                                onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'boolean') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <Switch\r\n                                                checked={!!values[inputName]}\r\n                                                onChange={(event) => {\r\n                                                    setVariableSelectorState(false)\r\n                                                    setFieldValue(inputName, event.target.checked)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: event.target.checked\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'asyncOptions') {\r\n                                    const inputName = input.name\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <AsyncSelectWrapper\r\n                                                title={input.label}\r\n                                                description={input.description}\r\n                                                value={values[inputName]}\r\n                                                loadMethod={input.loadMethod}\r\n                                                loadFromDbCollections={input.loadFromDbCollections || []}\r\n                                                nodeFlowData={nodeFlowData}\r\n                                                error={JSON.stringify(errors[inputName])}\r\n                                                onChange={(selection) => {\r\n                                                    const value = selection ? selection.name : ''\r\n                                                    setFieldValue(inputName, value)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                onMenuOpen={() => setVariableSelectorState(false)}\r\n                                                onSetError={() => {\r\n                                                    const value = ''\r\n                                                    setFieldValue(inputName, value)\r\n                                                }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'options') {\r\n                                    const inputName = input.name\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <Autocomplete\r\n                                                id={inputName}\r\n                                                freeSolo\r\n                                                onOpen={() => setVariableSelectorState(false)}\r\n                                                options={input.options || []}\r\n                                                value={findMatchingOptions(input.options, values[inputName]) || getDefaultOptionValue()}\r\n                                                onChange={(e, selection) => {\r\n                                                    const value = selection ? selection.name : ''\r\n                                                    setFieldValue(inputName, value)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                onInputChange={(e, value) => {\r\n                                                    if (!value) setFieldValue(inputName, '')\r\n                                                }}\r\n                                                onBlur={handleBlur}\r\n                                                PopperComponent={StyledPopper}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField {...params} value={values[inputName]} error={Boolean(errors[inputName])} />\r\n                                                )}\r\n                                                renderOption={(props, option) => (\r\n                                                    <Box component='li' {...props}>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                            <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                                {option.label}\r\n                                                            </Typography>\r\n                                                            {option.description && (\r\n                                                                <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                )}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                            <OptionParamsResponse value={values[inputName]} options={input.options || []} />\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'array') {\r\n                                    const arrayParamItems = input.arrayParams\r\n                                    const templateArray = input.array\r\n                                    const inputName = input.name\r\n                                    const arrayItemsValues = values[inputName] || []\r\n\r\n                                    return (\r\n                                        <Stack sx={{ mt: 1 }} key={inputName}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <ArrayInputParameters\r\n                                                initialValues={arrayItemsValues}\r\n                                                arrayParams={arrayParamItems}\r\n                                                paramsType={paramsType}\r\n                                                arrayGroupName={inputName}\r\n                                                errors={errors[inputName] ? errors[inputName] : []}\r\n                                                onArrayInputChange={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues)\r\n                                                }}\r\n                                                onArrayInputBlur={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: updateInitialValues\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                onArrayItemRemove={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: updateInitialValues\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                onArrayItemMouseUp={(variableState, body) => {\r\n                                                    if (body) setVariableSelectorState(variableState, body)\r\n                                                    else setVariableSelectorState(variableState)\r\n                                                }}\r\n                                                onEditVariableDialogOpen={(arrayItemInput, arrayItemValues, arrayItemIndex) => {\r\n                                                    const arrayItemBody = {\r\n                                                        arrayItemInput,\r\n                                                        arrayItemValues,\r\n                                                        arrayItemIndex,\r\n                                                        initialValues: arrayItemsValues\r\n                                                    }\r\n                                                    onEditVariableDialogOpen(input, values, arrayItemBody)\r\n                                                }}\r\n                                            />\r\n                                            <Box key={inputName} sx={{ mb: 2 }}>\r\n                                                <AnimateButton>\r\n                                                    <Button\r\n                                                        disableElevation\r\n                                                        fullWidth\r\n                                                        size='small'\r\n                                                        variant='outlined'\r\n                                                        color='secondary'\r\n                                                        startIcon={<IconPlus />}\r\n                                                        onClick={() => {\r\n                                                            setVariableSelectorState(false)\r\n                                                            let newObj = {}\r\n                                                            if (input.default && input.default.length) {\r\n                                                                newObj = input.default[0]\r\n                                                            } else {\r\n                                                                for (let i = 0; i < templateArray.length; i += 1) {\r\n                                                                    newObj[templateArray[i].name] = templateArray[i].default || ''\r\n                                                                }\r\n                                                            }\r\n                                                            arrayItemsValues.push(newObj)\r\n                                                            onAddArrayItem(values, arrayItemsValues, inputName)\r\n                                                        }}\r\n                                                    >\r\n                                                        Add {input.label}\r\n                                                    </Button>\r\n                                                </AnimateButton>\r\n                                            </Box>\r\n                                        </Stack>\r\n                                    )\r\n                                }\r\n                                return null\r\n                            })}\r\n\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                        fullWidth\r\n                                        size='large'\r\n                                        type='submit'\r\n                                        variant='contained'\r\n                                        color='secondary'\r\n                                    >\r\n                                        Continue\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nInputParameters.propTypes = {\r\n    params: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object,\r\n    nodeParamsValidation: PropTypes.object,\r\n    nodeFlowData: PropTypes.object,\r\n    valueChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n    setVariableSelectorState: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func\r\n}\r\n\r\nexport default InputParameters\r\n","import client from './client'\r\n\r\nconst getCredentials = (nodeCredentialName) => client.get('/credentials', { params: { nodeCredentialName } })\r\n\r\nconst getCredentialParams = (name) => client.get(`/node-credentials/${name}`)\r\n\r\nconst getSpecificCredential = (id, isEncrypted) => client.get(`/credentials/${id}`, { params: { isEncrypted } })\r\n\r\nconst createNewCredential = (credentialBody) => client.post(`/credentials`, credentialBody) //credentialBody: ICredential\r\n\r\nconst updateCredential = (id, credentialBody) => client.put(`/credentials/${id}`, credentialBody) //credentialBody: ICredential\r\n\r\nconst deleteCredential = (id) => client.delete(`/credentials/${id}`)\r\n\r\nexport default {\r\n    getCredentials,\r\n    getCredentialParams,\r\n    getSpecificCredential,\r\n    createNewCredential,\r\n    updateCredential,\r\n    deleteCredential\r\n}\r\n","import client from './client'\r\n\r\nconst geOAuth2PopupURL = (credentialId) => client.get('/oauth2', { params: { credentialId } })\r\nconst geOAuth2RedirectURL = () => client.get('/oauth2-redirecturl')\r\n\r\nexport default {\r\n    geOAuth2PopupURL,\r\n    geOAuth2RedirectURL\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { Box, Button, FormControl, Stack, OutlinedInput, Popper, TextField, Typography, IconButton, Switch } from '@mui/material'\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'\r\nimport { useTheme, styled } from '@mui/material/styles'\r\n\r\n// third party\r\nimport * as Yup from 'yup'\r\nimport { Formik } from 'formik'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport 'prismjs/themes/prism.css'\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton'\r\n\r\n// API\r\nimport credentialApi from 'api/credential'\r\nimport oauth2Api from 'api/oauth2'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\nimport useScriptRef from 'hooks/useScriptRef'\r\n\r\n// icons\r\nimport { IconTrash, IconCopy } from '@tabler/icons'\r\n\r\n//css\r\nimport './InputParameters.css'\r\n\r\nimport { TooltipWithParser } from '../../ui-component/TooltipWithParser'\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n})\r\n\r\nconst ADD_NEW_CREDENTIAL = '+ Add New Credential'\r\n\r\n// ==============================|| CREDENTIAL INPUT ||============================== //\r\n\r\nconst CredentialInput = ({\r\n    initialParams,\r\n    paramsType,\r\n    initialValues,\r\n    initialValidation,\r\n    valueChanged,\r\n    paramsChanged,\r\n    onSubmit,\r\n    ...others\r\n}) => {\r\n    const scriptedRef = useScriptRef()\r\n    const theme = useTheme()\r\n\r\n    const [credentialValidation, setCredentialValidation] = useState({})\r\n    const [credentialValues, setCredentialValues] = useState({})\r\n    const [nodeCredentialName, setNodeCredentialName] = useState('')\r\n    const [credentialParams, setCredentialParams] = useState([])\r\n    const [credentialOptions, setCredentialOptions] = useState([])\r\n    const [oAuth2RedirectURL, setOAuth2RedirectURL] = useState('')\r\n\r\n    const getCredentialParamsApi = useApi(credentialApi.getCredentialParams)\r\n    const getRegisteredCredentialsApi = useApi(credentialApi.getCredentials)\r\n    const getSpecificCredentialApi = useApi(credentialApi.getSpecificCredential)\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values\r\n        updateValues.submit = null\r\n        valueChanged(updateValues, paramsType)\r\n    }\r\n\r\n    const getCredentialRequestBody = (values) => {\r\n        if (credentialParams.length === 0) throw new Error('Credential params empty')\r\n\r\n        const credentialData = {}\r\n        for (let i = 0; i < credentialParams.length; i += 1) {\r\n            const credParamName = credentialParams[i].name\r\n            if (credParamName in values) credentialData[credParamName] = values[credParamName]\r\n        }\r\n        delete credentialData.name\r\n\r\n        const credBody = {\r\n            name: values.name,\r\n            nodeCredentialName: values.credentialMethod,\r\n            credentialData\r\n        }\r\n\r\n        return credBody\r\n    }\r\n\r\n    const updateYupValidation = (inputName, validationKey) => {\r\n        const updateValidation = {\r\n            ...credentialValidation,\r\n            [inputName]: Yup.object({ [validationKey]: Yup.string().required(`${inputName} is required`) })\r\n        }\r\n        setCredentialValidation(updateValidation)\r\n    }\r\n\r\n    const clearCredentialParams = () => {\r\n        const updateParams = initialParams.filter((item) => credentialParams.every((paramItem) => item.name !== paramItem.name))\r\n        setCredentialParams([])\r\n        setOAuth2RedirectURL('')\r\n\r\n        paramsChanged(updateParams, paramsType)\r\n    }\r\n\r\n    const clearCredentialParamsValues = (value) => {\r\n        let updateValues = JSON.parse(JSON.stringify(credentialValues))\r\n\r\n        for (let i = 0; i < credentialParams.length; i += 1) {\r\n            const credParamName = credentialParams[i].name\r\n            if (credParamName in updateValues) delete updateValues[credParamName]\r\n        }\r\n        updateValues = {\r\n            ...updateValues,\r\n            registeredCredential: value\r\n        }\r\n        valueChanged(updateValues, paramsType)\r\n    }\r\n\r\n    const onDeleteCredential = async (credentialId) => {\r\n        const response = await credentialApi.deleteCredential(credentialId)\r\n        if (response.data) {\r\n            clearCredentialParams()\r\n            clearCredentialParamsValues('')\r\n        }\r\n    }\r\n\r\n    const openOAuth2PopUpWindow = (oAuth2PopupURL) => {\r\n        const windowWidth = 500\r\n        const windowHeight = 400\r\n        const left = window.screenX + (window.outerWidth - windowWidth) / 2\r\n        const top = window.screenY + (window.outerHeight - windowHeight) / 2.5\r\n        const title = `Connect Credential`\r\n        const url = oAuth2PopupURL\r\n        const popup = window.open(url, title, `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`)\r\n        return popup\r\n    }\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value)\r\n\r\n    const getDefaultOptionValue = () => ''\r\n\r\n    // getRegisteredCredentialsApi successful\r\n    useEffect(() => {\r\n        if (getRegisteredCredentialsApi.data) {\r\n            const credentialOptions = []\r\n            if (getRegisteredCredentialsApi.data.length) {\r\n                for (let i = 0; i < getRegisteredCredentialsApi.data.length; i += 1) {\r\n                    credentialOptions.push({\r\n                        _id: getRegisteredCredentialsApi.data[i]._id,\r\n                        name: getRegisteredCredentialsApi.data[i].name\r\n                    })\r\n                }\r\n            }\r\n            credentialOptions.push({\r\n                name: ADD_NEW_CREDENTIAL\r\n            })\r\n            setCredentialOptions(credentialOptions)\r\n            if (initialParams.find((prm) => prm.name === 'registeredCredential')) {\r\n                updateYupValidation('registeredCredential', 'name')\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getRegisteredCredentialsApi.data])\r\n\r\n    // getCredentialParamsApi successful\r\n    useEffect(() => {\r\n        if (getCredentialParamsApi.data) {\r\n            const newCredentialParams = getCredentialParamsApi.data.credentials\r\n\r\n            const credentialNameParam = {\r\n                label: 'Credential Name',\r\n                name: 'name',\r\n                type: 'string',\r\n                default: ''\r\n            }\r\n\r\n            newCredentialParams.unshift(credentialNameParam)\r\n\r\n            setCredentialParams(newCredentialParams)\r\n\r\n            const updateParams = initialParams\r\n\r\n            for (let i = 0; i < newCredentialParams.length; i += 1) {\r\n                const credParamName = newCredentialParams[i].name\r\n                if (initialParams.find((prm) => prm.name === credParamName) === undefined) {\r\n                    updateParams.push(newCredentialParams[i])\r\n                }\r\n            }\r\n            paramsChanged(updateParams, paramsType)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getCredentialParamsApi.data])\r\n\r\n    // getSpecificCredentialApi successful\r\n    useEffect(() => {\r\n        if (getSpecificCredentialApi.data) {\r\n            const updateValues = {\r\n                ...credentialValues,\r\n                ...getSpecificCredentialApi.data.credentialData,\r\n                name: getSpecificCredentialApi.data.name\r\n            }\r\n            valueChanged(updateValues, paramsType)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificCredentialApi.data])\r\n\r\n    // Initialize values\r\n    useEffect(() => {\r\n        setCredentialValues(initialValues)\r\n        if (initialValues && initialValues.credentialMethod) {\r\n            getRegisteredCredentialsApi.request(initialValues.credentialMethod)\r\n            setNodeCredentialName(initialValues.credentialMethod)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [initialValues])\r\n\r\n    // Initialize validation\r\n    useEffect(() => {\r\n        setCredentialValidation(initialValidation)\r\n    }, [initialValidation])\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={credentialValues}\r\n                    validationSchema={Yup.object().shape(credentialValidation)}\r\n                    onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                const isAddNewCredential =\r\n                                    values && values.registeredCredential && values.registeredCredential.name === ADD_NEW_CREDENTIAL\r\n\r\n                                if (!isAddNewCredential && (credentialParams.length === 0 || !values.credentialMethod)) {\r\n                                    onSubmit(values.credentialMethod ? { ...values, submit: true } : { submit: true }, paramsType)\r\n                                    setStatus({ success: true })\r\n                                    setSubmitting(false)\r\n                                } else {\r\n                                    const body = getCredentialRequestBody(values)\r\n                                    let response\r\n                                    if (isAddNewCredential) {\r\n                                        response = await credentialApi.createNewCredential(body)\r\n                                    } else {\r\n                                        response = await credentialApi.updateCredential(values.registeredCredential._id, body)\r\n                                    }\r\n                                    if (response.data) {\r\n                                        // Open oAuth2 window\r\n                                        if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                            const oAuth2PopupURL = await oauth2Api.geOAuth2PopupURL(response.data._id)\r\n                                            const popUpWindow = openOAuth2PopUpWindow(oAuth2PopupURL.data)\r\n\r\n                                            const oAuth2Completed = async (event) => {\r\n                                                if (event.data === 'success') {\r\n                                                    window.removeEventListener('message', oAuth2Completed, false)\r\n\r\n                                                    const submitValues = {\r\n                                                        credentialMethod: values.credentialMethod,\r\n                                                        registeredCredential: {\r\n                                                            _id: response.data._id,\r\n                                                            name: response.data.name\r\n                                                        },\r\n                                                        submit: true\r\n                                                    }\r\n                                                    clearCredentialParams()\r\n                                                    onSubmit(submitValues, paramsType)\r\n                                                    setStatus({ success: true })\r\n                                                    setSubmitting(false)\r\n\r\n                                                    if (popUpWindow) {\r\n                                                        popUpWindow.close()\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            window.addEventListener('message', oAuth2Completed, false)\r\n                                            return\r\n                                        }\r\n\r\n                                        const submitValues = {\r\n                                            credentialMethod: values.credentialMethod,\r\n                                            registeredCredential: {\r\n                                                _id: response.data._id,\r\n                                                name: response.data.name\r\n                                            },\r\n                                            submit: true\r\n                                        }\r\n                                        clearCredentialParams()\r\n                                        onSubmit(submitValues, paramsType)\r\n                                        setStatus({ success: true })\r\n                                        setSubmitting(false)\r\n                                    } else {\r\n                                        throw new Error(response)\r\n                                    }\r\n                                }\r\n                            }\r\n                        } catch (err) {\r\n                            console.error(err)\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false })\r\n                                setErrors({ submit: err.message })\r\n                                setSubmitting(false)\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                        <form noValidate onSubmit={handleSubmit} {...others}>\r\n                            {initialParams.map((input) => {\r\n                                if (input.type === 'options') {\r\n                                    const inputName = input.name\r\n                                    const availableOptions = input.options || []\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <Autocomplete\r\n                                                id={inputName}\r\n                                                freeSolo\r\n                                                options={availableOptions}\r\n                                                value={findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()}\r\n                                                onChange={(e, selection) => {\r\n                                                    const value = selection ? selection.name : ''\r\n                                                    setFieldValue(inputName, value)\r\n                                                    const overwriteValues = {\r\n                                                        [inputName]: value\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                    clearCredentialParams()\r\n                                                    if (selection) {\r\n                                                        getRegisteredCredentialsApi.request(value)\r\n                                                        setNodeCredentialName(value)\r\n                                                    } else {\r\n                                                        setCredentialOptions([])\r\n                                                    }\r\n                                                }}\r\n                                                onBlur={handleBlur}\r\n                                                PopperComponent={StyledPopper}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField {...params} value={values[inputName]} error={Boolean(errors[inputName])} />\r\n                                                )}\r\n                                                renderOption={(props, option) => (\r\n                                                    <Box component='li' {...props}>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                            <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                                {option.label}\r\n                                                            </Typography>\r\n                                                            {option.description && (\r\n                                                                <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                )}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n                                return null\r\n                            })}\r\n\r\n                            {initialParams.find((prm) => prm.name === 'registeredCredential') && (\r\n                                <FormControl fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                    <Stack direction='row'>\r\n                                        <Typography variant='overline'>Registered Credential</Typography>\r\n                                        <TooltipWithParser title='Select previously registered credential OR add new credential' />\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id='registered-credential'\r\n                                        freeSolo\r\n                                        options={credentialOptions}\r\n                                        value={values.registeredCredential && values.credentialMethod ? values.registeredCredential : ' '}\r\n                                        getOptionLabel={(option) => option.name || ' '}\r\n                                        onChange={async (e, selectedCredential) => {\r\n                                            setFieldValue(\r\n                                                'registeredCredential',\r\n                                                selectedCredential !== null ? selectedCredential : initialValues.registeredCredential\r\n                                            )\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                registeredCredential: selectedCredential\r\n                                            }\r\n                                            onChanged(overwriteValues)\r\n                                            if (selectedCredential) {\r\n                                                if (selectedCredential.name !== ADD_NEW_CREDENTIAL) {\r\n                                                    getSpecificCredentialApi.request(selectedCredential._id)\r\n                                                } else {\r\n                                                    clearCredentialParamsValues(selectedCredential)\r\n                                                }\r\n                                                getCredentialParamsApi.request(nodeCredentialName)\r\n                                                if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                                    const redirectURLResp = await oauth2Api.geOAuth2RedirectURL()\r\n                                                    if (redirectURLResp.data) setOAuth2RedirectURL(redirectURLResp.data)\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                        onInputChange={(e, value) => {\r\n                                            if (!value) {\r\n                                                clearCredentialParams()\r\n                                                clearCredentialParamsValues('')\r\n                                            }\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                value={values.registeredCredential}\r\n                                                error={Boolean(errors.registeredCredential)}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component='li' {...props}>\r\n                                                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                    <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                        {option.name}\r\n                                                    </Typography>\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors.registeredCredential && (\r\n                                        <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                            *Registered Credential is required\r\n                                        </span>\r\n                                    )}\r\n                                </FormControl>\r\n                            )}\r\n\r\n                            {values && values.registeredCredential && values.registeredCredential._id && (\r\n                                <Button\r\n                                    sx={{ mb: 2 }}\r\n                                    size='small'\r\n                                    variant='outlined'\r\n                                    startIcon={<IconTrash size={15} />}\r\n                                    onClick={() => onDeleteCredential(values.registeredCredential._id)}\r\n                                >\r\n                                    Delete Credential\r\n                                </Button>\r\n                            )}\r\n\r\n                            {oAuth2RedirectURL && (\r\n                                <div>\r\n                                    <Typography variant='overline'>OAuth2 Redirect URL</Typography>\r\n                                    <Stack direction='row'>\r\n                                        <Typography\r\n                                            sx={{\r\n                                                p: 1,\r\n                                                borderRadius: 10,\r\n                                                backgroundColor: theme.palette.primary.light,\r\n                                                width: 'max-content',\r\n                                                height: 'max-content'\r\n                                            }}\r\n                                            variant='h5'\r\n                                        >\r\n                                            {oAuth2RedirectURL}\r\n                                        </Typography>\r\n                                        <IconButton\r\n                                            title='Copy URL'\r\n                                            color='primary'\r\n                                            onClick={() => navigator.clipboard.writeText(oAuth2RedirectURL)}\r\n                                        >\r\n                                            <IconCopy />\r\n                                        </IconButton>\r\n                                    </Stack>\r\n                                </div>\r\n                            )}\r\n\r\n                            {values.credentialMethod &&\r\n                                credentialParams.map((input) => {\r\n                                    if (input.type === 'json') {\r\n                                        const inputName = input.name\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction='row'>\r\n                                                    <Typography variant='overline'>{input.label}</Typography>\r\n                                                    {input.description && <TooltipWithParser title={input.description} />}\r\n                                                </Stack>\r\n                                                <PerfectScrollbar\r\n                                                    style={{\r\n                                                        border: '1px solid',\r\n                                                        borderColor: theme.palette.grey['500'],\r\n                                                        borderRadius: '12px',\r\n                                                        height: '200px',\r\n                                                        maxHeight: '200px',\r\n                                                        overflowX: 'hidden',\r\n                                                        backgroundColor: 'white'\r\n                                                    }}\r\n                                                    onScroll={(e) => e.stopPropagation()}\r\n                                                >\r\n                                                    <Editor\r\n                                                        placeholder={input.placeholder}\r\n                                                        value={values[inputName] || ''}\r\n                                                        onBlur={(e) => {\r\n                                                            const overwriteValues = {\r\n                                                                ...values,\r\n                                                                [inputName]: e.target.value\r\n                                                            }\r\n                                                            onChanged(overwriteValues)\r\n                                                        }}\r\n                                                        onValueChange={(code) => {\r\n                                                            setFieldValue(inputName, code)\r\n                                                        }}\r\n                                                        highlight={(code) => highlight(code, languages.json)}\r\n                                                        padding={10}\r\n                                                        style={{\r\n                                                            fontSize: '0.875rem',\r\n                                                            minHeight: '200px',\r\n                                                            width: '100%'\r\n                                                        }}\r\n                                                        textareaClassName='editor__textarea'\r\n                                                    />\r\n                                                </PerfectScrollbar>\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        )\r\n                                    }\r\n\r\n                                    if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                        const inputName = input.name\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction='row'>\r\n                                                    <Typography variant='overline'>{input.label}</Typography>\r\n                                                    {input.description && <TooltipWithParser title={input.description} />}\r\n                                                </Stack>\r\n                                                <OutlinedInput\r\n                                                    id={inputName}\r\n                                                    type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                                    value={values[inputName] || ''}\r\n                                                    placeholder={input.placeholder}\r\n                                                    name={inputName}\r\n                                                    onBlur={(e) => {\r\n                                                        handleBlur(e)\r\n                                                        onChanged(values)\r\n                                                    }}\r\n                                                    onChange={handleChange}\r\n                                                />\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        )\r\n                                    }\r\n\r\n                                    if (input.type === 'boolean') {\r\n                                        const inputName = input.name\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction='row'>\r\n                                                    <Typography variant='overline'>{input.label}</Typography>\r\n                                                    {input.description && <TooltipWithParser title={input.description} />}\r\n                                                </Stack>\r\n                                                <Switch\r\n                                                    checked={!!values[inputName]}\r\n                                                    onChange={(event) => {\r\n                                                        setFieldValue(inputName, event.target.checked)\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: event.target.checked\r\n                                                        }\r\n                                                        onChanged(overwriteValues)\r\n                                                    }}\r\n                                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                            </FormControl>\r\n                                        )\r\n                                    }\r\n\r\n                                    if (input.type === 'options') {\r\n                                        const inputName = input.name\r\n                                        const availableOptions = input.options || []\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                                <Stack direction='row'>\r\n                                                    <Typography variant='overline'>{input.label}</Typography>\r\n                                                    {input.description && <TooltipWithParser title={input.description} />}\r\n                                                </Stack>\r\n                                                <Autocomplete\r\n                                                    id={inputName}\r\n                                                    freeSolo\r\n                                                    options={availableOptions}\r\n                                                    value={\r\n                                                        findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()\r\n                                                    }\r\n                                                    onChange={(e, selection) => {\r\n                                                        const value = selection ? selection.name : ''\r\n                                                        setFieldValue(inputName, value)\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: value\r\n                                                        }\r\n                                                        onChanged(overwriteValues)\r\n                                                    }}\r\n                                                    onBlur={handleBlur}\r\n                                                    PopperComponent={StyledPopper}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            value={values[inputName]}\r\n                                                            error={Boolean(errors[inputName])}\r\n                                                        />\r\n                                                    )}\r\n                                                    renderOption={(props, option) => (\r\n                                                        <Box component='li' {...props}>\r\n                                                            <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                                <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                                    {option.label}\r\n                                                                </Typography>\r\n                                                                {option.description && (\r\n                                                                    <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </Box>\r\n                                                    )}\r\n                                                />\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        )\r\n                                    }\r\n                                    return null\r\n                                })}\r\n\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                        fullWidth\r\n                                        size='large'\r\n                                        type='submit'\r\n                                        variant='contained'\r\n                                        color='secondary'\r\n                                    >\r\n                                        {values &&\r\n                                        values.registeredCredential &&\r\n                                        (values.registeredCredential.name === ADD_NEW_CREDENTIAL || credentialParams.length)\r\n                                            ? 'Save and Continue'\r\n                                            : 'Continue'}\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nCredentialInput.propTypes = {\r\n    initialParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object,\r\n    initialValidation: PropTypes.object,\r\n    valueChanged: PropTypes.func,\r\n    paramsChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func\r\n}\r\n\r\nexport default CredentialInput\r\n","import client from './client'\r\n\r\nconst getAllContracts = () => client.get('/contracts')\r\n\r\nconst getSpecificContract = (id) => client.get(`/contracts/${id}`)\r\n\r\nconst createNewContract = (body) => client.post(`/contracts`, body) // body: IContract\r\n\r\nconst updateContract = (id, body) => client.put(`/contracts/${id}`, body) // body: IContract\r\n\r\nconst getContractABI = (body) => client.post(`/contracts/getabi`, body) //body: IContractRequestBody\r\n\r\nconst deleteContract = (id) => client.delete(`/contracts/${id}`)\r\n\r\nexport default {\r\n    getAllContracts,\r\n    getSpecificContract,\r\n    createNewContract,\r\n    updateContract,\r\n    getContractABI,\r\n    deleteContract\r\n}\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\n\r\nimport {\r\n    Avatar,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Divider,\r\n    Chip,\r\n    Typography,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Stack,\r\n    IconButton\r\n} from '@mui/material'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// third-party\r\nimport * as Yup from 'yup'\r\nimport lodash from 'lodash'\r\nimport { ethers } from 'ethers'\r\n\r\n// project imports\r\nimport InputParameters from 'views/inputs/InputParameters'\r\nimport CredentialInput from 'views/inputs/CredentialInput'\r\nimport EditVariableDialog from 'ui-component/dialog/EditVariableDialog'\r\n\r\n// Icons\r\nimport { IconExclamationMark, IconCheck, IconX, IconArrowUpRightCircle, IconCopy } from '@tabler/icons'\r\n\r\n// API\r\nimport contractsApi from 'api/contracts'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// Const\r\nimport { contract_details, networks, networkExplorers } from 'store/constant'\r\n\r\n// utils\r\nimport { handleCredentialParams, initializeNodeData } from 'utils/genericHelper'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\nconst ContractDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const theme = useTheme()\r\n    const dispatch = useDispatch()\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const [contractDetails, setContractDetails] = useState(contract_details)\r\n    const [contractData, setContractData] = useState({})\r\n    const [contractParams, setContractParams] = useState([])\r\n    const [contractValues, setContractValues] = useState({})\r\n    const [contractValidation, setContractValidation] = useState({})\r\n    const [expanded, setExpanded] = useState(false)\r\n    const [invalidAddress, setInvalidAddress] = useState(false)\r\n    const [invalidABI, setInvalidABI] = useState('')\r\n    const [isReadyToAdd, setIsReadyToAdd] = useState(false)\r\n    const [isEditVariableDialogOpen, setEditVariableDialog] = useState(false)\r\n    const [editVariableDialogProps, setEditVariableDialogProps] = useState({})\r\n    const contractParamsType = ['networks', 'credentials', 'contractInfo']\r\n\r\n    const getSpecificContractApi = useApi(contractsApi.getSpecificContract)\r\n\r\n    const handleAccordionChange = (expanded) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? expanded : false)\r\n    }\r\n\r\n    const reset = () => {\r\n        setContractData({})\r\n        setContractParams([])\r\n        setContractValues({})\r\n        setContractValidation({})\r\n        setInvalidAddress(false)\r\n        setInvalidABI('')\r\n        setIsReadyToAdd(false)\r\n        setExpanded(false)\r\n    }\r\n\r\n    const checkIsReadyToAdd = () => {\r\n        for (let i = 0; i < contractParamsType.length; i += 1) {\r\n            const paramType = contractParamsType[i]\r\n            if (!contractData[paramType] || !contractData[paramType].submit) {\r\n                setIsReadyToAdd(false)\r\n                return\r\n            }\r\n        }\r\n        setIsReadyToAdd(true)\r\n    }\r\n\r\n    const onEditVariableDialogOpen = (input, values, arrayItemBody) => {\r\n        const dialogProps = {\r\n            input,\r\n            values,\r\n            arrayItemBody,\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            hideVariables: true\r\n        }\r\n\r\n        setEditVariableDialogProps(dialogProps)\r\n        setEditVariableDialog(true)\r\n    }\r\n\r\n    const addNewContract = async () => {\r\n        const createNewContractBody = {\r\n            network: contractData.networks.network,\r\n            name: contractData.contractInfo.name,\r\n            abi: contractData.contractInfo.abi,\r\n            address: contractData.contractInfo.address,\r\n            providerCredential: JSON.stringify(contractData.credentials)\r\n        }\r\n        const createResp = await contractsApi.createNewContract(createNewContractBody)\r\n        if (createResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'New contract added',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onConfirm()\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to add new contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const saveContract = async () => {\r\n        const saveContractBody = {\r\n            network: contractData.networks.network,\r\n            name: contractData.contractInfo.name,\r\n            abi: contractData.contractInfo.abi,\r\n            address: contractData.contractInfo.address,\r\n            providerCredential: JSON.stringify(contractData.credentials)\r\n        }\r\n        const saveResp = await contractsApi.updateContract(dialogProps.id, saveContractBody)\r\n        if (saveResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Contract saved',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onConfirm()\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to save contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const deleteContract = async () => {\r\n        const deleteResp = await contractsApi.deleteContract(dialogProps.id)\r\n        if (deleteResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Contract deleted',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onConfirm()\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to delete contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n            onCancel()\r\n        }\r\n    }\r\n\r\n    const fetchABI = async (formValues, paramsType) => {\r\n        const selectedNetwork = networks.find((network) => network.name === contractData.networks.network)\r\n        if (!selectedNetwork) return\r\n\r\n        const body = {\r\n            ...contractData,\r\n            networks: {\r\n                ...contractData.networks,\r\n                uri: selectedNetwork.uri || ''\r\n            }\r\n        }\r\n\r\n        const resp = await contractsApi.getContractABI(body)\r\n        if (!resp.data) {\r\n            const updateContractData = {\r\n                ...contractData,\r\n                [paramsType]: { ...formValues, submit: null }\r\n            }\r\n            setContractData(updateContractData)\r\n            setInvalidABI('Unable to fetch ABI')\r\n            return\r\n        } else {\r\n            const status = resp.data.status\r\n            if (status === '0') {\r\n                setInvalidABI('Unable to fetch ABI')\r\n                return\r\n            }\r\n            const abi = resp.data.result\r\n            setInvalidABI('')\r\n            return abi === 'Invalid API Key' ? undefined : abi\r\n        }\r\n    }\r\n\r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateContractData = {\r\n            ...contractData,\r\n            [paramsType]: formValues\r\n        }\r\n\r\n        const index = contractParamsType.indexOf(paramsType)\r\n        if (index >= 0 && index !== contractParamsType.length - 1) {\r\n            for (let i = index + 1; i < contractParamsType.length; i += 1) {\r\n                const paramType = contractParamsType[i]\r\n                if (updateContractData[paramType]) updateContractData[paramType].submit = null\r\n            }\r\n        }\r\n\r\n        setContractData(updateContractData)\r\n    }\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n        // Because formParams options can be changed due to show hide options,\r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod')\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod')\r\n\r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = contractDetails[paramsType].find((param) => param.name === 'credentialMethod')\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options\r\n            }\r\n        }\r\n\r\n        const updateContractDetails = {\r\n            ...contractDetails,\r\n            [paramsType]: formParams\r\n        }\r\n        setContractDetails(updateContractDetails)\r\n    }\r\n\r\n    const onSubmit = async (formValues, paramsType) => {\r\n        if (formValues.address) {\r\n            if (ethers.utils.isAddress(formValues.address)) {\r\n                setInvalidAddress(false)\r\n                const abi = await fetchABI(formValues, paramsType)\r\n                if (abi) {\r\n                    const updateFormValues = {\r\n                        submit: true,\r\n                        ...formValues\r\n                    }\r\n                    updateFormValues.abi = abi\r\n                    const updateContractData = {\r\n                        ...contractData,\r\n                        [paramsType]: updateFormValues\r\n                    }\r\n                    setContractData(updateContractData)\r\n                } else {\r\n                    const updateContractData = {\r\n                        ...contractData,\r\n                        [paramsType]: { ...formValues, submit: null }\r\n                    }\r\n                    setContractData(updateContractData)\r\n                }\r\n            } else {\r\n                setInvalidAddress(true)\r\n                const updateContractData = {\r\n                    ...contractData,\r\n                    [paramsType]: { ...formValues, submit: null }\r\n                }\r\n                setContractData(updateContractData)\r\n            }\r\n        } else {\r\n            const updateContractData = {\r\n                ...contractData,\r\n                [paramsType]: formValues\r\n            }\r\n            setContractData(updateContractData)\r\n        }\r\n\r\n        const index = contractParamsType.indexOf(paramsType)\r\n        if (index >= 0 && index !== contractParamsType.length - 1) {\r\n            setExpanded(contractParamsType[index + 1])\r\n        }\r\n    }\r\n\r\n    const showHideOptions = (displayType, options) => {\r\n        let returnOptions = options\r\n        const toBeDeleteOptions = []\r\n\r\n        for (let i = 0; i < returnOptions.length; i += 1) {\r\n            const option = returnOptions[i]\r\n            const displayOptions = option[displayType]\r\n\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n                    const comparisonValue = displayOptions[path]\r\n                    const groundValue = lodash.get(contractData, path, '')\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option)\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]))\r\n        }\r\n\r\n        return returnOptions\r\n    }\r\n\r\n    const displayOptions = (params) => {\r\n        let clonedParams = params\r\n\r\n        for (let i = 0; i < clonedParams.length; i += 1) {\r\n            const input = clonedParams[i]\r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', input.options)\r\n                input.options = showHideOptions('hide', input.options)\r\n            }\r\n        }\r\n\r\n        return clonedParams\r\n    }\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {}\r\n        for (let i = 0; i < params.length; i += 1) {\r\n            const input = params[i]\r\n            if (input.type === 'string' && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`)\r\n            } else if (input.type === 'number' && !input.optional) {\r\n                validationSchema[input.name] = Yup.number().required(`${input.label} is required. Type: ${input.type}`)\r\n            } else if ((input.type === 'options' || input.type === 'asyncOptions') && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`)\r\n            }\r\n        }\r\n        return validationSchema\r\n    }\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n        const initialValues = {}\r\n        let contractParams = displayOptions(lodash.cloneDeep(contractDetails[paramsType] || []))\r\n        contractParams = handleCredentialParams(contractParams, paramsType, contractDetails[paramsType], contractData)\r\n\r\n        for (let i = 0; i < contractParams.length; i += 1) {\r\n            const input = contractParams[i]\r\n\r\n            // Load from contractData values\r\n            if (paramsType in contractData && input.name in contractData[paramsType]) {\r\n                initialValues[input.name] = contractData[paramsType][input.name]\r\n\r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name])\r\n                    if (!optionVal) delete initialValues[input.name]\r\n                }\r\n            } else {\r\n                // Load from contractParams default values\r\n                initialValues[input.name] = input.default || ''\r\n            }\r\n        }\r\n\r\n        initialValues.submit = null\r\n\r\n        setContractValues(initialValues)\r\n        setContractValidation(setYupValidation(contractParams))\r\n        setContractParams(contractParams)\r\n    }\r\n\r\n    const transformContractResponse = (contractResponseData, contractDetails) => {\r\n        const contractData = {\r\n            networks: {},\r\n            credentials: {},\r\n            contractInfo: {}\r\n        }\r\n\r\n        if (contractResponseData) {\r\n            contractData.networks = { network: contractResponseData.network, submit: true }\r\n            contractData.contractInfo = { ...contractResponseData, submit: true }\r\n            if (contractResponseData.providerCredential) {\r\n                try {\r\n                    contractData.credentials = JSON.parse(contractResponseData.providerCredential)\r\n                } catch (e) {\r\n                    console.error(e)\r\n                }\r\n            }\r\n        } else {\r\n            contractData.networks = initializeNodeData(contractDetails.networks)\r\n            contractData.credentials = initializeNodeData(contractDetails.credentials)\r\n            contractData.contractInfo = initializeNodeData(contractDetails.contractInfo)\r\n        }\r\n        return contractData\r\n    }\r\n\r\n    // Get Contract Details from API\r\n    useEffect(() => {\r\n        if (getSpecificContractApi.data) {\r\n            const contractResponseData = getSpecificContractApi.data\r\n            setContractData(transformContractResponse(contractResponseData))\r\n            setExpanded('networks')\r\n        }\r\n    }, [getSpecificContractApi.data])\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (show && dialogProps.type === 'ADD') {\r\n            reset()\r\n            setContractData(transformContractResponse(null, contractDetails))\r\n            setExpanded('networks')\r\n        } else if (show && dialogProps.type === 'EDIT' && dialogProps.id) {\r\n            reset()\r\n            getSpecificContractApi.request(dialogProps.id)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show, dialogProps])\r\n\r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (contractDetails && contractData && expanded) {\r\n            initializeFormValuesAndParams(expanded)\r\n            checkIsReadyToAdd()\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [contractDetails, contractData, expanded])\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} onClose={onCancel} aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {dialogProps.type === 'ADD' && (\r\n                    <Chip\r\n                        sx={{ mb: 1 }}\r\n                        icon={<IconExclamationMark />}\r\n                        label='You can only add contract which has been publicly verified'\r\n                        color='warning'\r\n                    />\r\n                )}\r\n\r\n                {contractData && contractData.contractInfo && contractData.contractInfo.address && dialogProps.type === 'EDIT' && (\r\n                    <Box sx={{ p: 2 }}>\r\n                        <Typography sx={{ p: 1 }} variant='overline'>\r\n                            ADDRESS\r\n                        </Typography>\r\n                        <Stack direction='row' sx={{ p: 1 }}>\r\n                            <Typography\r\n                                sx={{\r\n                                    p: 1,\r\n                                    borderRadius: 10,\r\n                                    backgroundColor: theme.palette.primary.light,\r\n                                    width: 'max-content',\r\n                                    height: 'max-content'\r\n                                }}\r\n                                variant='h5'\r\n                            >\r\n                                {contractData.contractInfo.address}\r\n                            </Typography>\r\n                            <IconButton\r\n                                title='Copy Address'\r\n                                color='primary'\r\n                                onClick={() => navigator.clipboard.writeText(contractData.contractInfo.address)}\r\n                            >\r\n                                <IconCopy />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                title='Open in Block Explorer'\r\n                                color='primary'\r\n                                onClick={() =>\r\n                                    window.open(\r\n                                        `${networkExplorers[contractData.networks.network]}/address/${contractData.contractInfo.address}`,\r\n                                        '_blank'\r\n                                    )\r\n                                }\r\n                            >\r\n                                <IconArrowUpRightCircle />\r\n                            </IconButton>\r\n                        </Stack>\r\n                    </Box>\r\n                )}\r\n\r\n                {/* networks */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls='networks-content' id='networks-header'>\r\n                            <Typography variant='h4'>Networks</Typography>\r\n                            {contractData && contractData.networks && contractData.networks.submit && (\r\n                                <Avatar\r\n                                    variant='rounded'\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters\r\n                                paramsType='networks'\r\n                                params={contractParams}\r\n                                initialValues={contractValues}\r\n                                nodeParamsValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* credentials */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'credentials'} onChange={handleAccordionChange('credentials')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls='credentials-content' id='credentials-header'>\r\n                            <Typography variant='h4'>Credentials</Typography>\r\n                            {contractData && contractData.credentials && contractData.credentials.submit && (\r\n                                <Avatar\r\n                                    variant='rounded'\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <CredentialInput\r\n                                paramsType='credentials'\r\n                                initialParams={contractParams}\r\n                                initialValues={contractValues}\r\n                                initialValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                paramsChanged={paramsChanged}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* contractInfo */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'contractInfo'} onChange={handleAccordionChange('contractInfo')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls='contractInfo-content' id='contractInfo-header'>\r\n                            <Typography variant='h4'>Contract Details</Typography>\r\n                            {contractData && contractData.contractInfo && contractData.contractInfo.submit && (\r\n                                <Avatar\r\n                                    variant='rounded'\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters\r\n                                paramsType='contractInfo'\r\n                                params={contractParams}\r\n                                initialValues={contractValues}\r\n                                nodeParamsValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                            {invalidAddress && (\r\n                                <Chip sx={{ mt: 2, mb: 1 }} icon={<IconX />} label='Invalid Contract Address' color='error' />\r\n                            )}\r\n                            {invalidABI && (\r\n                                <Chip sx={{ mt: 2, mb: 1, ml: invalidAddress ? 2 : 0 }} icon={<IconX />} label={invalidABI} color='error' />\r\n                            )}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n                <EditVariableDialog\r\n                    key={JSON.stringify(editVariableDialogProps)}\r\n                    show={isEditVariableDialogOpen}\r\n                    dialogProps={editVariableDialogProps}\r\n                    onCancel={() => setEditVariableDialog(false)}\r\n                    onConfirm={(updateValues) => {\r\n                        valueChanged(updateValues, expanded)\r\n                        setEditVariableDialog(false)\r\n                    }}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                {dialogProps.type === 'EDIT' && (\r\n                    <Button variant='contained' color='error' onClick={() => deleteContract()}>\r\n                        Delete\r\n                    </Button>\r\n                )}\r\n                <Button\r\n                    variant='contained'\r\n                    disabled={!isReadyToAdd}\r\n                    onClick={() => (dialogProps.type === 'ADD' ? addNewContract() : saveContract())}\r\n                >\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nContractDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default ContractDialog\r\n","export default __webpack_public_path__ + \"static/media/contract_empty.2c9c811e.svg\";","import { useEffect, useState } from 'react'\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport ItemCard from 'ui-component/cards/ItemCard'\r\nimport ContractDialog from './ContractDialog'\r\nimport ContractEmptySVG from 'assets/images/contract_empty.svg'\r\n\r\n// const\r\nimport { gridSpacing } from 'store/constant'\r\n\r\n// API\r\nimport contractsApi from 'api/contracts'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// ==============================|| CONTRACTS ||============================== //\r\n\r\nconst Contracts = () => {\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [showDialog, setShowDialog] = useState(false)\r\n    const [dialogProps, setDialogProps] = useState({})\r\n\r\n    const getAllContractsApi = useApi(contractsApi.getAllContracts)\r\n\r\n    const addNew = () => {\r\n        const dialogProp = {\r\n            title: 'Add New Contract',\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add'\r\n        }\r\n        setDialogProps(dialogProp)\r\n        setShowDialog(true)\r\n    }\r\n\r\n    const edit = (id) => {\r\n        const dialogProp = {\r\n            title: 'Edit Contract',\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            id\r\n        }\r\n        setDialogProps(dialogProp)\r\n        setShowDialog(true)\r\n    }\r\n\r\n    const onConfirm = () => {\r\n        setShowDialog(false)\r\n        getAllContractsApi.request()\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllContractsApi.request()\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllContractsApi.loading)\r\n    }, [getAllContractsApi.loading])\r\n\r\n    return (\r\n        <>\r\n            <MainCard>\r\n                <Stack flexDirection='row'>\r\n                    <h1>Contracts</h1>\r\n                    <Grid sx={{ mb: 1.25 }} container direction='row'>\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n                        <Grid item>\r\n                            <Button variant='contained' sx={{ color: 'white' }} onClick={addNew}>\r\n                                Add New\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Stack>\r\n                <Grid container spacing={gridSpacing}>\r\n                    {!isLoading &&\r\n                        getAllContractsApi.data &&\r\n                        getAllContractsApi.data.map((data, index) => (\r\n                            <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                                <ItemCard isLoading={isLoading} onClick={() => edit(data._id)} data={data} />\r\n                            </Grid>\r\n                        ))}\r\n                </Grid>\r\n                {!isLoading && (!getAllContractsApi.data || getAllContractsApi.data.length === 0) && (\r\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection='column'>\r\n                        <Box sx={{ p: 2, height: 'auto' }}>\r\n                            <img\r\n                                style={{ objectFit: 'cover', height: '30vh', width: 'auto' }}\r\n                                src={ContractEmptySVG}\r\n                                alt='ContractEmptySVG'\r\n                            />\r\n                        </Box>\r\n                        <div>No Contracts Yet</div>\r\n                    </Stack>\r\n                )}\r\n            </MainCard>\r\n            <ContractDialog\r\n                show={showDialog}\r\n                dialogProps={dialogProps}\r\n                onCancel={() => setShowDialog(false)}\r\n                onConfirm={onConfirm}\r\n            ></ContractDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Contracts\r\n"],"sourceRoot":""}