{"version":3,"sources":["ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","api/workflows.js","ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","assets/images/workflow_empty.svg","views/workflows/index.js"],"names":["headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","data","setData","error","setError","loading","setLoading","request","result","getAllWorkflows","client","get","getSpecificWorkflow","shortId","createNewWorkflow","body","post","updateWorkflow","put","deployWorkflow","deleteWorkflow","delete","testWorkflow","startingNodeId","WorkflowCard","Card","CardContent","Grid","container","direction","item","justifyContent","Skeleton","width","height","my","CardWrapper","styled","backgroundColor","color","darkTextPrimary","overflow","position","cursor","ItemCard","isLoading","images","onClick","chipSX","padding","activeWorkflowSX","success","dark","light","getNetworkItem","network","networks","find","ntw","name","Box","p","style","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontSize","fontWeight","mt","mb","flexGrow","whiteSpace","textOverflow","maxWidth","substring","slice","flowData","executionCount","deployed","Chip","label","marginTop","map","img","objectFit","alt","src","Workflows","navigate","useNavigate","setImages","getAllWorkflowsApi","useApi","workflowsApi","useEffect","workflows","i","length","flowDataStr","nodes","JSON","parse","j","imageSrc","includes","push","e","console","Stack","Button","spacing","gridSpacing","index","lg","md","sm","xs","WorkflowEmptySVG"],"mappings":"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","file":"static/js/10.bf582f68.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material'\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n}\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(function MainCard(\r\n    {\r\n        border = true,\r\n        boxShadow,\r\n        children,\r\n        content = true,\r\n        contentClass = '',\r\n        contentSX = {},\r\n        darkTitle,\r\n        secondary,\r\n        shadow,\r\n        sx = {},\r\n        title,\r\n        ...others\r\n    },\r\n    ref\r\n) {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            {...others}\r\n            sx={{\r\n                border: border ? '1px solid' : 'none',\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                ':hover': {\r\n                    boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                },\r\n                ...sx\r\n            }}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={headerSX} title={<Typography variant='h3'>{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && <Divider />}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={contentSX} className={contentClass}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    )\r\n})\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n}\r\n\r\nexport default MainCard\r\n","import axios from 'axios'\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        'Content-type': 'application/json'\r\n    }\r\n})\r\n\r\nexport default apiClient\r\n","import { useState } from 'react'\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true)\r\n        try {\r\n            const result = await apiFunc(...args)\r\n            setData(result.data)\r\n        } catch (err) {\r\n            setError(err || 'Unexpected Error!')\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    }\r\n}\r\n","import client from './client'\r\n\r\nconst getAllWorkflows = () => client.get('/workflows')\r\n\r\nconst getSpecificWorkflow = (shortId) => client.get(`/workflows/${shortId}`)\r\n\r\nconst createNewWorkflow = (body) => client.post(`/workflows`, body) //body: IWorkflow\r\n\r\nconst updateWorkflow = (shortId, body) => client.put(`/workflows/${shortId}`, body) //body: IWorkflow\r\n\r\nconst deployWorkflow = (shortId, body) => client.post(`/workflows/deploy/${shortId}`, body || {}) //body: { halt: boolean }\r\n\r\nconst testWorkflow = (startingNodeId, body) => client.post(`/workflows/test/${startingNodeId}`, body) //body: ITestWorkflowBody\r\n\r\nconst deleteWorkflow = (shortId) => client.delete(`/workflows/${shortId}`)\r\n\r\nexport default {\r\n    getAllWorkflows,\r\n    getSpecificWorkflow,\r\n    createNewWorkflow,\r\n    updateWorkflow,\r\n    deployWorkflow,\r\n    deleteWorkflow,\r\n    testWorkflow\r\n}\r\n","// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material'\r\nimport Skeleton from '@mui/material/Skeleton'\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction='column'>\r\n                <Grid item>\r\n                    <Grid container justifyContent='space-between'>\r\n                        <Grid item>\r\n                            <Skeleton variant='rectangular' width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant='rectangular' width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant='rectangular' sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant='rectangular' height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n)\r\n\r\nexport default WorkflowCard\r\n","import PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles'\r\nimport { Box, Grid, Chip, Typography } from '@mui/material'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard'\r\n\r\n// Const\r\nimport { networks } from 'store/constant'\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}))\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme()\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    }\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    }\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction='column'>\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && (\r\n                                    <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                        <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                    </div>\r\n                                )}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction='row'>\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200],\r\n                                                overflow: 'hidden',\r\n                                                whiteSpace: 'nowrap',\r\n                                                textOverflow: 'ellipsis',\r\n                                                maxWidth: 250\r\n                                            }}\r\n                                        >\r\n                                            {`${data.address.substring(0, 8)}...${data.address.slice(-4)}`}\r\n                                        </Typography>\r\n                                    )}\r\n                                    {data.flowData && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200]\r\n                                            }}\r\n                                        >\r\n                                            Total Executions: {data.executionCount || '0'}\r\n                                        </Typography>\r\n                                    )}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label='Deployed' sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip\r\n                                        label={getNetworkItem(data.network).label}\r\n                                        sx={{ ...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            {images && (\r\n                                <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                    {images.map((img) => (\r\n                                        <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                            <img\r\n                                                style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\r\n                                                alt=''\r\n                                                src={img}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n}\r\n\r\nexport default ItemCard\r\n","export default __webpack_public_path__ + \"static/media/workflow_empty.55ef149b.svg\";","import { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport ItemCard from 'ui-component/cards/ItemCard'\r\nimport { gridSpacing } from 'store/constant'\r\nimport WorkflowEmptySVG from 'assets/images/workflow_empty.svg'\r\n\r\n// API\r\nimport workflowsApi from 'api/workflows'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\n// ==============================|| WORKFLOWS ||============================== //\r\n\r\nconst Workflows = () => {\r\n    const navigate = useNavigate()\r\n\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [images, setImages] = useState({})\r\n\r\n    const getAllWorkflowsApi = useApi(workflowsApi.getAllWorkflows)\r\n\r\n    const addNew = () => {\r\n        navigate('/canvas')\r\n    }\r\n\r\n    const goToCanvas = (selectedWorkflow) => {\r\n        navigate(`/canvas/${selectedWorkflow.shortId}`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllWorkflowsApi.request()\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllWorkflowsApi.loading)\r\n    }, [getAllWorkflowsApi.loading])\r\n\r\n    useEffect(() => {\r\n        if (getAllWorkflowsApi.data) {\r\n            try {\r\n                const workflows = getAllWorkflowsApi.data\r\n                const images = {}\r\n\r\n                for (let i = 0; i < workflows.length; i += 1) {\r\n                    const flowDataStr = workflows[i].flowData\r\n                    const flowData = JSON.parse(flowDataStr)\r\n                    const nodes = flowData.nodes || []\r\n                    images[workflows[i].shortId] = []\r\n\r\n                    for (let j = 0; j < nodes.length; j += 1) {\r\n                        const imageSrc = `${baseURL}/api/v1/node-icon/${nodes[j].data.name}`\r\n                        if (!images[workflows[i].shortId].includes(imageSrc)) {\r\n                            images[workflows[i].shortId].push(imageSrc)\r\n                        }\r\n                    }\r\n                }\r\n                setImages(images)\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }\r\n    }, [getAllWorkflowsApi.data])\r\n\r\n    return (\r\n        <MainCard>\r\n            <Stack flexDirection='row'>\r\n                <h1>Workflows</h1>\r\n                <Grid sx={{ mb: 1.25 }} container direction='row'>\r\n                    <Box sx={{ flexGrow: 1 }} />\r\n                    <Grid item>\r\n                        <Button variant='contained' sx={{ color: 'white' }} onClick={addNew}>\r\n                            Add New\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Stack>\r\n            <Grid container spacing={gridSpacing}>\r\n                {!isLoading &&\r\n                    getAllWorkflowsApi.data &&\r\n                    getAllWorkflowsApi.data.map((data, index) => (\r\n                        <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                            <ItemCard onClick={() => goToCanvas(data)} data={data} images={images[data.shortId]} />\r\n                        </Grid>\r\n                    ))}\r\n            </Grid>\r\n            {!isLoading && (!getAllWorkflowsApi.data || getAllWorkflowsApi.data.length === 0) && (\r\n                <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection='column'>\r\n                    <Box sx={{ p: 2, height: 'auto' }}>\r\n                        <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={WorkflowEmptySVG} alt='WorkflowEmptySVG' />\r\n                    </Box>\r\n                    <div>No Workflows Yet</div>\r\n                </Stack>\r\n            )}\r\n        </MainCard>\r\n    )\r\n}\r\n\r\nexport default Workflows\r\n"],"sourceRoot":""}