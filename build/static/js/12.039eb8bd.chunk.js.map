{"version":3,"sources":["ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","api/wallets.js","views/wallets/WalletDialog.js","assets/images/wallet_empty.svg","views/wallets/index.js"],"names":["WorkflowCard","Card","CardContent","Grid","container","direction","item","justifyContent","Skeleton","variant","width","height","sx","my","CardWrapper","styled","MainCard","backgroundColor","color","theme","darkTextPrimary","overflow","position","boxShadow","cursor","ItemCard","isLoading","data","images","onClick","useTheme","chipSX","padding","activeWorkflowSX","palette","success","dark","light","getNetworkItem","network","networks","find","ntw","name","border","content","Box","p","style","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontSize","fontWeight","mt","mb","flexGrow","secondary","whiteSpace","textOverflow","maxWidth","substring","slice","flowData","executionCount","deployed","Chip","label","marginTop","map","img","objectFit","alt","src","client","get","id","body","post","put","delete","WalletDialog","show","dialogProps","onCancel","onConfirm","portalElement","document","getElementById","dispatch","useDispatch","useNotifier","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","useState","wallet_details","walletDetails","setWalletDetails","walletData","setWalletData","walletParams","setWalletParams","walletValues","setWalletValues","walletValidation","setWalletValidation","walletCredential","setWalletCredential","expanded","setExpanded","isReadyToAdd","setIsReadyToAdd","walletParamsType","getSpecificWalletApi","useApi","walletsApi","getWalletCredentialApi","handleAccordionChange","event","isExpanded","reset","addNewWallet","type","createNewWalletBody","walletInfo","providerCredential","JSON","stringify","credentials","privateKey","message","options","key","Date","getTime","Math","random","action","Button","persist","saveWallet","saveWalletBody","deleteWallet","valueChanged","formValues","paramsType","updateWalletData","index","indexOf","length","i","paramType","submit","onSubmit","showHideOptions","displayType","returnOptions","toBeDeleteOptions","option","displayOptions","Object","keys","forEach","path","comparisonValue","groundValue","lodash","Array","isArray","includes","push","filter","opt","initializeFormValuesAndParams","initialValues","params","clonedParams","input","cloneDeep","handleCredentialParams","privateKeyField","default","validationSchema","optional","Yup","required","setYupValidation","transformWalletResponse","walletResponseData","parse","e","console","error","initializeNodeData","useEffect","walletCredResponseData","request","checkIsReadyToAdd","component","Dialog","open","onClose","DialogTitle","title","DialogContent","balance","Stack","primary","IconButton","navigator","clipboard","writeText","window","networkExplorers","mnemonic","size","ml","startIcon","Accordion","onChange","AccordionSummary","expandIcon","Avatar","typography","smallAvatar","background","AccordionDetails","InputParameters","nodeParamsValidation","setVariableSelectorState","Divider","CredentialInput","initialParams","initialValidation","paramsChanged","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","undefined","originalParam","updateWalletDetails","DialogActions","cancelButtonName","disabled","confirmButtonName","createPortal","Wallets","setLoading","showDialog","setShowDialog","setDialogProps","getAllWalletsApi","loading","mr","main","spacing","gridSpacing","lg","md","sm","xs","_id","WalletEmptySVG"],"mappings":"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","file":"static/js/12.039eb8bd.chunk.js","sourcesContent":["// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\nexport default WorkflowCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Box, Grid, Chip, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard';\r\n\r\n// Const\r\nimport { networks } from \"store/constant\";\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}));\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme();\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    };\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    };\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction=\"column\">\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                    <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                </div>}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction=\"row\">\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontSize: '1rem',\r\n                                            fontWeight: 500,\r\n                                            color: theme.palette.secondary[200],\r\n                                            overflow: 'hidden',\r\n                                            whiteSpace: 'nowrap',\r\n                                            textOverflow: 'ellipsis',\r\n                                            maxWidth: 250\r\n                                        }}\r\n                                    >\r\n                                        {`${data.address.substring(0,8)}...${data.address.slice(-4)}`}\r\n                                    </Typography>)}\r\n                                    {data.flowData && (\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontSize: '1rem',\r\n                                            fontWeight: 500,\r\n                                            color: theme.palette.secondary[200]\r\n                                        }}\r\n                                    >\r\n                                        Total Executions: {data.executionCount || '0'}\r\n                                    </Typography>)}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label=\"Deployed\" sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip label={getNetworkItem(data.network).label} sx={{...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }} />\r\n                                </Grid>\r\n                            )}\r\n                            {images && <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                {images.map((img) => (\r\n                                    <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                        <img style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }} alt='' src={img} />\r\n                                    </div>\r\n                                ))}\r\n                            </div>}\r\n                            \r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default ItemCard;\r\n","import client from \"./client\";\r\n\r\nconst getAllWallets = () => client.get(\"/wallets\");\r\n\r\nconst getSpecificWallet = (id) => client.get(`/wallets/${id}`);\r\n\r\nconst createNewWallet = (body) => client.post(`/wallets`, body); //body: IWallet\r\n\r\nconst updateWallet = (id, body) => client.put(`/wallets/${id}`, body); //body: IWallet\r\n\r\nconst deleteWallet = (id) => client.delete(`/wallets/${id}`);\r\n\r\nconst getWalletCredential = (id) => client.get(`/wallets/credential/${id}`);\r\n\r\nexport default {\r\n    getAllWallets,\r\n    getSpecificWallet,\r\n    createNewWallet,\r\n    updateWallet,\r\n    deleteWallet,\r\n    getWalletCredential\r\n};\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { \r\n    enqueueSnackbar as enqueueSnackbarAction,\r\n    closeSnackbar as closeSnackbarAction,\r\n} from 'store/actions';\r\n\r\nimport {\r\n    Avatar,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Divider,\r\n    Typography,\r\n    Button, \r\n    Dialog, \r\n    DialogActions,\r\n    DialogContent, \r\n    DialogTitle,\r\n    Stack,\r\n    IconButton,\r\n} from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport * as Yup from 'yup';\r\nimport lodash from 'lodash';\r\n\r\n// project imports\r\nimport InputParameters from 'views/inputs/InputParameters';\r\nimport CredentialInput from 'views/inputs/CredentialInput';\r\n\r\n// Icons\r\nimport { IconCheck, IconX, IconArrowUpRightCircle, IconCopy, IconKey } from '@tabler/icons';\r\n\r\n// API\r\nimport walletsApi from \"api/wallets\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// Const\r\nimport { wallet_details, networkExplorers, privateKeyField } from \"store/constant\";\r\n\r\n// utils\r\nimport { handleCredentialParams, initializeNodeData } from 'utils/genericHelper';\r\nimport useNotifier from 'utils/useNotifier';\r\n\r\nconst WalletDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onConfirm\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier();\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args));\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args));\r\n\r\n    const [walletDetails, setWalletDetails] = useState(wallet_details);\r\n    const [walletData, setWalletData] = useState({});\r\n    const [walletParams, setWalletParams] = useState([]);\r\n    const [walletValues, setWalletValues] = useState({});\r\n    const [walletValidation, setWalletValidation] = useState({});\r\n    const [walletCredential, setWalletCredential] = useState({});\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [isReadyToAdd, setIsReadyToAdd] = useState(false);\r\n    const walletParamsType = ['networks', 'credentials', 'walletInfo'];\r\n\r\n    const getSpecificWalletApi = useApi(walletsApi.getSpecificWallet);\r\n    const getWalletCredentialApi = useApi(walletsApi.getWalletCredential);\r\n\r\n    const handleAccordionChange = (expanded) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? expanded : false);\r\n    };\r\n\r\n    const reset = () => {\r\n        setWalletData({});\r\n        setWalletParams([]);\r\n        setWalletValues({});\r\n        setWalletValidation({});\r\n        setWalletCredential({});\r\n        setIsReadyToAdd(false);\r\n        setExpanded(false);\r\n    }\r\n\r\n    const checkIsReadyToAdd = () => {\r\n        for (let i = 0; i < walletParamsType.length; i+= 1) {\r\n            const paramType = walletParamsType[i];\r\n            if (!walletData[paramType] || !walletData[paramType].submit) {\r\n                setIsReadyToAdd(false);\r\n                return;\r\n            }\r\n        }\r\n        setIsReadyToAdd(true);\r\n    };\r\n\r\n    const addNewWallet = async(type) => {\r\n        const createNewWalletBody = {\r\n            network: walletData.networks.network,\r\n            name: walletData.walletInfo.name,\r\n            providerCredential: JSON.stringify(walletData.credentials)\r\n        }\r\n        if (type === 'IMPORT') createNewWalletBody.privateKey = walletData.walletInfo.privateKey;\r\n        const createResp = await walletsApi.createNewWallet(createNewWalletBody);\r\n        if (createResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'New wallet added',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to add new wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const saveWallet = async() => {\r\n        const saveWalletBody = {\r\n            network: walletData.networks.network,\r\n            name: walletData.walletInfo.name,\r\n            providerCredential: JSON.stringify(walletData.credentials)\r\n        }\r\n        const saveResp = await walletsApi.updateWallet(dialogProps.id, saveWalletBody);\r\n        if (saveResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Wallet saved',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to save wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const deleteWallet = async() => {\r\n        const deleteResp = await walletsApi.deleteWallet(dialogProps.id);\r\n        if (deleteResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Wallet deleted',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to delete wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateWalletData = {\r\n            ...walletData,\r\n            [paramsType]: formValues\r\n        };\r\n\r\n        const index = walletParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== walletParamsType.length - 1) {\r\n            for (let i = index+1; i < walletParamsType.length; i+= 1) {\r\n                const paramType = walletParamsType[i];\r\n                if (updateWalletData[paramType]) updateWalletData[paramType].submit = null;\r\n            }\r\n        }\r\n        \r\n        setWalletData(updateWalletData);\r\n    };\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n\r\n        // Because formParams options can be changed due to show hide options, \r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod');\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod');\r\n        \r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = walletDetails[paramsType].find((param) => param.name === 'credentialMethod');\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options;\r\n            }\r\n        }\r\n\r\n        const updateWalletDetails = {\r\n            ...walletDetails,\r\n            [paramsType]: formParams\r\n        };\r\n        setWalletDetails(updateWalletDetails);\r\n    };\r\n\r\n    const onSubmit = async(formValues, paramsType) => {\r\n        const updateWalletData = {\r\n            ...walletData,\r\n            [paramsType]: formValues\r\n        };\r\n        setWalletData(updateWalletData);\r\n        \r\n        const index = walletParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== walletParamsType.length - 1) {\r\n            setExpanded(walletParamsType[index+1]);\r\n        } else if (index === walletParamsType.length - 1) {\r\n            setExpanded(false);\r\n        }\r\n    };\r\n\r\n    const showHideOptions = (displayType, options) => {\r\n       \r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n\r\n        for (let i = 0; i < returnOptions.length; i+= 1) {\r\n            const option = returnOptions[i];\r\n            const displayOptions = option[displayType];\r\n\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n\r\n                    const comparisonValue = displayOptions[path];\r\n                    const groundValue = lodash.get(walletData, path, '');\r\n                   \r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i+= 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    }\r\n\r\n    const displayOptions = (params) => {\r\n      \r\n        let clonedParams = params;\r\n\r\n        for (let i = 0; i < clonedParams.length; i+= 1) {\r\n            const input = clonedParams[i];\r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', input.options);\r\n                input.options = showHideOptions('hide', input.options);\r\n            }\r\n        }\r\n      \r\n        return clonedParams;\r\n    };\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {};\r\n        for (let i = 0; i < params.length; i+= 1) {\r\n            const input = params[i];\r\n            if (input.type === 'string' && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if (input.type === 'number' && !input.optional) {\r\n                validationSchema[input.name] = Yup.number().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if ((input.type === 'options' || input.type === 'asyncOptions') && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            }\r\n        }\r\n        return validationSchema;\r\n    };\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n\r\n        const initialValues = {};\r\n        let walletParams = displayOptions(lodash.cloneDeep(walletDetails[paramsType] || []));\r\n        walletParams = handleCredentialParams(walletParams, paramsType, walletDetails[paramsType], walletData);\r\n\r\n        if (dialogProps.type === 'IMPORT' && paramsType === 'walletInfo') {\r\n            walletParams.push(...privateKeyField);\r\n        }\r\n  \r\n        for (let i = 0; i < walletParams.length; i+= 1) {\r\n            const input = walletParams[i];\r\n\r\n            // Load from walletData values\r\n            if (paramsType in walletData && input.name in walletData[paramsType]) {\r\n                initialValues[input.name] = walletData[paramsType][input.name];\r\n         \r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name]);\r\n                    if (!optionVal) delete initialValues[input.name];\r\n                }\r\n            } else {\r\n                // Load from walletParams default values\r\n                initialValues[input.name] = input.default || '';\r\n            }\r\n        }\r\n        \r\n        initialValues.submit = null;\r\n        \r\n        setWalletValues(initialValues);\r\n        setWalletValidation(setYupValidation(walletParams));\r\n        setWalletParams(walletParams);\r\n    };\r\n\r\n    const transformWalletResponse = (walletResponseData, walletDetails) => {\r\n        const walletData = {\r\n            networks: {},\r\n            credentials: {},\r\n            walletInfo: {}\r\n        }\r\n\r\n        if (walletResponseData) {\r\n            walletData.networks = { network: walletResponseData.network, submit: true };\r\n            walletData.walletInfo = { ...walletResponseData, submit: true };\r\n            if (walletResponseData.providerCredential) {\r\n                try {\r\n                    walletData.credentials = JSON.parse(walletResponseData.providerCredential);\r\n                } catch(e) { \r\n                    console.error(e); \r\n                }\r\n            }\r\n        } else {\r\n            walletData.networks = initializeNodeData(walletDetails.networks);\r\n            walletData.credentials = initializeNodeData(walletDetails.credentials);\r\n            walletData.walletInfo = initializeNodeData(walletDetails.walletInfo);\r\n        }\r\n        return walletData;\r\n    }\r\n\r\n    // Get Wallet Details from API\r\n    useEffect(() => {\r\n        if (getSpecificWalletApi.data) {\r\n            const walletResponseData = getSpecificWalletApi.data;\r\n            setWalletData(transformWalletResponse(walletResponseData));\r\n            setExpanded('networks');\r\n        }\r\n\r\n    }, [getSpecificWalletApi.data]); \r\n\r\n\r\n    // Get Wallet Credential from API\r\n    useEffect(() => {\r\n        if (getWalletCredentialApi.data) {\r\n            const walletCredResponseData = getWalletCredentialApi.data;\r\n            setWalletCredential(walletCredResponseData);\r\n        }\r\n\r\n    }, [getWalletCredentialApi.data]); \r\n\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (show && (dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT')) {\r\n            reset();\r\n            setWalletData(transformWalletResponse(null, walletDetails));\r\n            setExpanded('networks');\r\n\r\n        } else if (show && dialogProps.type === 'EDIT' && dialogProps.id) {\r\n            reset();\r\n            getSpecificWalletApi.request(dialogProps.id);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show, dialogProps]); \r\n\r\n    \r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (walletDetails && walletData && expanded) {\r\n            initializeFormValuesAndParams(expanded);\r\n            checkIsReadyToAdd();\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [walletDetails, walletData, expanded]);\r\n\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n\r\n                {walletData && walletData.walletInfo && walletData.walletInfo.address && dialogProps.type === 'EDIT' && \r\n                <Box sx={{ p: 2 }}>\r\n                    <Typography sx={{ p: 1 }} variant=\"overline\">BALANCE</Typography>\r\n                    <Typography sx={{ p: 1, mb: 1 }} variant=\"h3\">{walletData.walletInfo.balance}</Typography>\r\n                    <Typography sx={{ p: 1 }} variant=\"overline\">ADDRESS</Typography>\r\n                    <Stack direction=\"row\" sx={{ p: 1, mb: 1}}>\r\n                        <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{walletData.walletInfo.address}</Typography>\r\n                        <IconButton title=\"Copy Address\" color=\"primary\" onClick={() => navigator.clipboard.writeText(walletData.walletInfo.address)}>\r\n                            <IconCopy />\r\n                        </IconButton>\r\n                        <IconButton title=\"Open in Block Explorer\" color=\"primary\" onClick={() => window.open(`${networkExplorers[walletData.networks.network]}/address/${walletData.walletInfo.address}`, \"_blank\")}>\r\n                            <IconArrowUpRightCircle />\r\n                        </IconButton>\r\n                    </Stack>\r\n                    {walletCredential && walletCredential.privateKey && \r\n                    <>\r\n                        <Typography sx={{ p: 1 }} variant=\"overline\">PRIVATE KEY</Typography>\r\n                        <Stack direction=\"row\" sx={{ p: 1, mb: 1}}>\r\n                            <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{walletCredential.privateKey}</Typography>\r\n                            <IconButton title=\"Copy Key\" color=\"primary\" onClick={() => navigator.clipboard.writeText(walletCredential.privateKey)}>\r\n                                <IconCopy />\r\n                            </IconButton>\r\n                        </Stack>\r\n                    </>}\r\n                    {walletCredential && walletCredential.mnemonic && \r\n                    <>\r\n                        <Typography sx={{ p: 1 }} variant=\"overline\">mnemonic</Typography>\r\n                        <Stack direction=\"row\" sx={{ p: 1, mb: 1}}>\r\n                            <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{walletCredential.mnemonic}</Typography>\r\n                            <IconButton title=\"Copy Mnemonic\" color=\"primary\" onClick={() => navigator.clipboard.writeText(walletCredential.mnemonic)}>\r\n                                <IconCopy />\r\n                            </IconButton>\r\n                        </Stack>\r\n                    </>}\r\n                    {!Object.keys(walletCredential).length && <Button size=\"small\" sx={{ml: 1}} variant=\"contained\" startIcon={<IconKey />} onClick={() => getWalletCredentialApi.request(dialogProps.id)}>\r\n                        View PrivateKey and Mnemonic\r\n                    </Button>}\r\n                </Box>}\r\n\r\n                {/* networks */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"networks-content\"\r\n                            id=\"networks-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Networks\r\n                            </Typography>\r\n                            {walletData && walletData.networks && walletData.networks.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters \r\n                                paramsType=\"networks\"\r\n                                params={walletParams} \r\n                                initialValues={walletValues} \r\n                                nodeParamsValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* credentials */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'credentials'} onChange={handleAccordionChange('credentials')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"credentials-content\"\r\n                            id=\"credentials-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Credentials\r\n                            </Typography>\r\n                            {walletData && walletData.credentials && walletData.credentials.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <CredentialInput \r\n                                paramsType=\"credentials\"\r\n                                initialParams={walletParams} \r\n                                initialValues={walletValues} \r\n                                initialValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                paramsChanged={paramsChanged}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* walletInfo */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'walletInfo'} onChange={handleAccordionChange('walletInfo')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"walletInfo-content\"\r\n                            id=\"walletInfo-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Wallet Details\r\n                            </Typography>\r\n                            {walletData && walletData.walletInfo && walletData.walletInfo.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters \r\n                                paramsType=\"walletInfo\"\r\n                                params={walletParams} \r\n                                initialValues={walletValues}\r\n                                nodeParamsValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>\r\n                    {dialogProps.cancelButtonName}\r\n                </Button>\r\n                {dialogProps.type === 'EDIT' && <Button \r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                    onClick={() => deleteWallet()}\r\n                >\r\n                    Delete\r\n                </Button>}\r\n                <Button \r\n                    variant=\"contained\" \r\n                    disabled={!isReadyToAdd} \r\n                    onClick={() => (dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT') ? addNewWallet(dialogProps.type) : saveWallet()}\r\n                >\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nWalletDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func,\r\n};\r\n\r\nexport default WalletDialog;\r\n\r\n","export default __webpack_public_path__ + \"static/media/wallet_empty.f647428f.svg\";","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ItemCard from 'ui-component/cards/ItemCard';\r\nimport WalletDialog from './WalletDialog';\r\nimport WalletEmptySVG from 'assets/images/wallet_empty.svg';\r\n\r\n// const\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// API\r\nimport walletsApi from \"api/wallets\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// ==============================|| WALLETS ||============================== //\r\n\r\nconst Wallets = () => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [showDialog, setShowDialog] = useState(false);\r\n    const [dialogProps, setDialogProps] = useState({});\r\n\r\n    const getAllWalletsApi = useApi(walletsApi.getAllWallets);\r\n\r\n    const addNew = () => {\r\n        const dialogProp = {\r\n            title: 'Add New Wallet',\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add'\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const importNew = () => {\r\n        const dialogProp = {\r\n            title: 'Import Wallet',\r\n            type: 'IMPORT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'IMPORT'\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const edit = (id) => {\r\n        const dialogProp = {\r\n            title: 'Edit Wallet',\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            id\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n    \r\n    const onConfirm = () => {\r\n        setShowDialog(false);\r\n        getAllWalletsApi.request();\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllWalletsApi.request();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllWalletsApi.loading);\r\n    }, [getAllWalletsApi.loading]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <MainCard>\r\n            <Stack flexDirection=\"row\">\r\n                <h1>Wallets</h1>\r\n                <Grid sx={{ mb: 1.25 }} container direction=\"row\">\r\n                    <Box sx={{ flexGrow: 1 }} />\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" sx={{ color: 'white', mr: 2 }} onClick={addNew}>\r\n                            Add New\r\n                        </Button>\r\n                        <Button variant=\"contained\" sx={{ color: 'white', backgroundColor: theme.palette.secondary.main }} onClick={importNew}>\r\n                            Import Wallet\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Stack>\r\n            <Grid container spacing={gridSpacing}>\r\n                {!isLoading && getAllWalletsApi.data && getAllWalletsApi.data.map((data, index) => (\r\n                    <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                        <ItemCard \r\n                            isLoading={isLoading}\r\n                            onClick={() => edit(data._id)} \r\n                            data={data}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            {!isLoading && (!getAllWalletsApi.data || getAllWalletsApi.data.length === 0) && (\r\n                <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection=\"column\">\r\n                    <Box sx={{ p: 2, height: 'auto' }}>\r\n                        <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={WalletEmptySVG} alt=\"WalletEmptySVG\" />\r\n                    </Box>\r\n                    <div>No Wallets Yet</div>\r\n                </Stack>\r\n            )}\r\n        </MainCard>\r\n        <WalletDialog\r\n            show={showDialog}\r\n            dialogProps={dialogProps}\r\n            onCancel={() => setShowDialog(false)}\r\n            onConfirm={onConfirm}\r\n        >\r\n        </WalletDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Wallets;\r\n"],"sourceRoot":""}