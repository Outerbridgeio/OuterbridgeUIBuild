{"version":3,"sources":["utils/genericHelper.js","ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","ui-component/extended/AnimateButton.js","ui-component/dialog/ExpandDataDialog.js","hooks/useScriptRef.js","utils/useNotifier.js","ui-component/dialog/EditVariableDialog.js","views/inputs/ArrayInputParameters.js","views/inputs/OptionParamsResponse.js","views/inputs/AsyncSelectWrapper.js","views/inputs/InputParameters.js","api/credential.js","api/oauth2.js","views/inputs/CredentialInput.js"],"names":["numberOrExpressionRegex","getAvailableNodeIdsForVariable","nodes","edges","targetNodeId","reverse","graph","nodeDependencies","i","length","nodeId","id","source","target","Object","prototype","hasOwnProperty","call","push","constructNodeDirectedGraph","exploreNodes","nodeQueue","exploredNodes","shift","parentNodeIds","inputEdges","filter","edg","targetHandle","includes","j","neighbourNodeIds","neighNodeId","getAllConnectedNodesFromTarget","setPath","Set","delete","generateWebhookEndpoint","characters","Array","from","map","charAt","Math","floor","random","join","getUniqueNodeId","nodeData","totalSameNodes","data","name","checkIfNodeLabelUnique","nodeLabel","label","initializeNodeData","nodeParams","initialValues","input","default","type","newObj","array","submit","addAnchors","newNodeId","incoming","outgoing","inputAnchors","newInput","outputAnchors","newOutput","getUniqueNodeLabel","actions","credentials","networks","inputParameters","getEdgeLabelName","sourceSplit","split","checkMultipleTriggers","node","convertDateStringToDateObject","dateString","undefined","date","moment","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","splitDataURI","getFolderName","base64ArrayStr","base64Array","JSON","parse","filenames","filename","e","generateExportFlowData","flowData","selected","newNodeData","wallet","credentialMethod","isHideRegisteredCredential","params","paramsType","nodeFlowData","clonedParams","selectedCredentialMethodOption","options","find","opt","hideRegisteredCredential","handleCredentialParams","reorganizedParams","nPrm","lodash","cloneDeep","prm","copyToClipboard","src","isArray","navigator","clipboard","writeText","stringify","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","setData","error","setError","loading","setLoading","request","result","AnimateButton","offset1","offset2","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","ExpandDataDialog","show","dialogProps","onCancel","onCopyClick","enableClipboard","portalElement","document","getElementById","component","open","fullWidth","maxWidth","onClose","fontSize","createPortal","useScriptRef","scripted","useRef","useEffect","current","displayed","useNotifier","dispatch","useDispatch","notifications","useSelector","state","notifier","useSnackbar","enqueueSnackbar","closeSnackbar","React","forEach","key","message","dismissed","event","reason","myKey","onExited","removeSnackbar","EditVariableDialog","onConfirm","inputValue","setInputValue","setInput","expanded","setExpanded","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","copiedVariableBody","setCopiedVariableBody","languages","js","languageType","setLanguageType","onMouseUp","selectionEnd","value","cursorPosition","textBeforeCursorPosition","substring","textAfterCursorPosition","onClipboardCopy","namespaces","namespace","returnVariablePath","test","endsWith","values","inputValues","arrayItemBody","arrayItemValues","arrayItemInput","toString","json","style","display","flexDirection","flex","mb","ml","grey","borderRadius","height","maxHeight","overflowX","backgroundColor","onValueChange","code","placeholder","highlight","onBlur","padding","minHeight","width","textareaClassName","hideVariables","availableNodesForVariable","marginLeft","pl","pr","py","breakpoints","down","top","my","index","onChange","isExpanded","expandIcon","position","collapsed","outputResponses","output","size","right","color","onClick","dialogProp","onExpandDialogClicked","cancelButtonName","updateArrayValues","updateInitialValues","arrayItemIndex","updateValues","onSave","confirmButtonName","StyledPopper","styled","Popper","autocompleteClasses","listbox","boxSizing","margin","DateCustomInput","paddingTop","paddingBottom","paddingRight","paddingLeft","cursor","fontWeight","textAlign","opacity","propTypes","PropTypes","string","func","ArrayInputParameters","arrayParams","arrayGroupName","errors","onArrayInputChange","onArrayInputBlur","onArrayItemRemove","onArrayItemMouseUp","onEditVariableDialogOpen","customization","processUpdateValues","inputName","onInputChange","onInputBlur","valueIndex","path","_","Box","p","light","Fab","main","splice","onRemoveClick","paramIndex","FormControl","mt","Boolean","Stack","Typography","description","Tooltip","placement","IconButton","Info","marginBottom","Button","startIcon","marginRight","hidden","files","file","reader","FileReader","onload","evt","readAsDataURL","handleFileUpload","setFieldValue","directory","webkitdirectory","readFile","fileIndex","webkitRelativePath","handleFolderUpload","onScroll","stopPropagation","customInput","showTimeSelect","isClearable","timeInputLabel","dateFormat","toISOString","OutlinedInput","Switch","checked","inputProps","availableOptions","Autocomplete","freeSolo","onOpen","option","selection","PopperComponent","renderInput","TextField","renderOption","props","OptionParamsResponse","getSelectedValue","getSelectedOptionInputParams","selectedOption","getSelectedOptionExampleParams","exampleParameters","getSelectedOptionExampleResponse","exampleResponse","dangerouslySetInnerHTML","__html","AsyncSelectWrapper","loadMethod","loadFromDbCollections","onMenuOpen","onSetError","customStyles","provided","isSelected","control","singleValue","menuList","asyncOptions","setAsyncOptions","styles","formatOptionLabel","context","getOptionLabel","getOptionValue","loadOptions","callback","post","then","response","returnOptions","toBeDeleteOptions","displayTypes","displayType","displayOptions","keys","comparisonValue","replace","groundValue","get","RegExp","showHideOptions","toLowerCase","defaultOptions","bottom","fontStyle","formatErrorMessage","InputParameters","nodeParamsValidation","valueChanged","onSubmit","setVariableSelectorState","scriptedRef","onChanged","findMatchingOptions","enableReinitialize","validationSchema","Yup","shape","setErrors","setStatus","setSubmitting","success","err","console","handleBlur","handleChange","handleSubmit","isSubmitting","noValidate","overwriteValues","multiline","rows","maxRows","minRows","arrayParamItems","templateArray","arrayItemsValues","variableState","body","disableElevation","arrayItems","arrayName","onAddArrayItem","disabled","nodeCredentialName","client","isEncrypted","credentialBody","put","credentialId","ADD_NEW_CREDENTIAL","CredentialInput","initialParams","initialValidation","paramsChanged","credentialValidation","setCredentialValidation","credentialValues","setCredentialValues","setNodeCredentialName","credentialParams","setCredentialParams","credentialOptions","setCredentialOptions","oAuth2RedirectURL","setOAuth2RedirectURL","getCredentialParamsApi","useApi","credentialApi","getRegisteredCredentialsApi","getSpecificCredentialApi","getCredentialRequestBody","Error","credentialData","credParamName","clearCredentialParams","updateParams","item","every","paramItem","clearCredentialParamsValues","registeredCredential","onDeleteCredential","openOAuth2PopUpWindow","oAuth2PopupURL","left","window","screenX","outerWidth","screenY","outerHeight","url","_id","validationKey","updateValidation","required","updateYupValidation","newCredentialParams","unshift","isAddNewCredential","oauth2Api","popUpWindow","oAuth2Completed","removeEventListener","submitValues","close","addEventListener","selectedCredential","redirectURLResp"],"mappings":"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","file":"static/js/3.e77fa29c.chunk.js","sourcesContent":["import lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport const numberOrExpressionRegex = /^(\\d+\\.?\\d*|{{.*}})$/; //return true if string consists only numbers OR expression {{}}\r\n\r\nexport const constructNodeDirectedGraph = (nodes, edges, reverse=false) => {\r\n\r\n    const graph = {};\r\n    const nodeDependencies = {};\r\n\r\n    // Initialize node dependencies and graph\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const nodeId = nodes[i].id;\r\n        nodeDependencies[nodeId] = 0;\r\n        graph[nodeId] = [];\r\n    }\r\n\r\n    for (let i = 0; i < edges.length; i+=1 ) {\r\n        const source = edges[i].source;\r\n        const target = edges[i].target;\r\n\r\n        if (Object.prototype.hasOwnProperty.call(graph, source)) {\r\n            graph[source].push(target);\r\n        } else {\r\n            graph[source] = [target];\r\n        }\r\n\r\n        if (reverse) {\r\n            if (Object.prototype.hasOwnProperty.call(graph, target)) {\r\n                graph[target].push(source);\r\n            } else {\r\n                graph[target] = [source];\r\n            }\r\n        }\r\n\r\n        nodeDependencies[target] += 1;\r\n    }\r\n\r\n    return { graph, nodeDependencies };\r\n}\r\n\r\n// Find starting node with 0 dependencies\r\nexport const findStartingNodeIds = (nodes, nodeDependencies) => {\r\n    const startingNodeIds = [];\r\n    Object.keys(nodeDependencies).forEach((nodeId) => {\r\n        if (nodeDependencies[nodeId] === 0) {\r\n            const node = nodes.find((nd) => nd.id === nodeId);\r\n            if (node && node.data && node.data.type && (node.data.type === 'trigger' || node.data.type === 'webhook')) {\r\n                startingNodeIds.push(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    return startingNodeIds;\r\n}\r\n\r\n// Backtrack function to find all paths from start to target node\r\nexport const getAllPathsFromStartToTarget = (startNodeId, targetNodeId, graph) => {\r\n    const paths = [];\r\n    const visitedNodeIds = new Set();\r\n\r\n    const DFS = (currentNodeId, endNodeId, tempPath) => {\r\n        if (currentNodeId === endNodeId) {\r\n            paths.push(lodash.cloneDeep(tempPath));\r\n            return;\r\n        }\r\n\r\n        const neighbourNodeIds = graph[currentNodeId];\r\n        visitedNodeIds.add(currentNodeId);\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i+=1 ) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (!visitedNodeIds.has(neighNodeId)) {\r\n                tempPath.push(neighNodeId);\r\n                DFS(neighNodeId, endNodeId, tempPath);\r\n                tempPath.pop();\r\n            }\r\n        }\r\n        visitedNodeIds.delete(currentNodeId);\r\n    }\r\n\r\n    DFS(startNodeId, targetNodeId, [startNodeId]);\r\n    return paths;\r\n}\r\n\r\n// Breadth First Search to get all connected parent nodes from target\r\nexport const getAllConnectedNodesFromTarget = (targetNodeId, edges, graph) => {\r\n\r\n    const nodeQueue = [];\r\n    const exploredNodes = [];\r\n\r\n    nodeQueue.push(targetNodeId);\r\n    exploredNodes.push(targetNodeId);\r\n\r\n    while (nodeQueue.length) {\r\n\r\n        const nodeId = nodeQueue.shift() || '';\r\n        const parentNodeIds = [];\r\n\r\n        const inputEdges = edges.filter((edg) => (edg.target === nodeId && edg.targetHandle.includes('-input-')));\r\n        if (inputEdges && inputEdges.length) {\r\n            for (let j = 0; j < inputEdges.length; j+=1 ) {\r\n                parentNodeIds.push(inputEdges[j].source);\r\n            }\r\n        }\r\n\r\n        const neighbourNodeIds = graph[nodeId];\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i+=1 ) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (parentNodeIds.includes(neighNodeId)) {\r\n                if (!exploredNodes.includes(neighNodeId)) {\r\n                    exploredNodes.push(neighNodeId);\r\n                    nodeQueue.push(neighNodeId);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return exploredNodes;\r\n}\r\n\r\nexport const getAvailableNodeIdsForVariable = (nodes, edges, targetNodeId) => {\r\n    const { graph } = constructNodeDirectedGraph(nodes, edges, true);\r\n    const exploreNodes = getAllConnectedNodesFromTarget(targetNodeId, edges, graph);\r\n    const setPath = new Set(exploreNodes);\r\n    setPath.delete(targetNodeId);\r\n    return [...setPath];\r\n}\r\n\r\nexport const generateWebhookEndpoint = () => {\r\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n    const webhookEndpoint = Array.from({ length: 15 }).map(() => {\r\n        return characters.charAt(\r\n            Math.floor(Math.random() * characters.length),\r\n        );\r\n    }).join('');\r\n    return webhookEndpoint;\r\n}\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1;\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return nodeId;\r\n};\r\n\r\nconst getUniqueNodeLabel = (nodeData, nodes) => {\r\n\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique label\r\n    let nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            totalSameNodes += 1;\r\n            nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return totalSameNodes === 0 ? nodeData.label : nodeLabel;\r\n};\r\n\r\nexport const checkIfNodeLabelUnique = (nodeLabel, nodes) => {\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const initializeNodeData = (nodeParams) => {\r\n\r\n    const initialValues = {};\r\n\r\n    for (let i = 0; i < nodeParams.length; i+= 1) {\r\n        const input = nodeParams[i];\r\n\r\n        // Load from nodeParams default values\r\n        initialValues[input.name] = input.default || ''; \r\n\r\n        // Special case for array, always initialize the item if default is not set\r\n        if (input.type === 'array' && !input.default) {\r\n            const newObj = {};\r\n            for (let j = 0; j < input.array.length; j+= 1) {\r\n                newObj[input.array[j].name] = input.array[j].default || '';\r\n            }\r\n            initialValues[input.name] = [newObj];\r\n        }\r\n    }\r\n    \r\n    initialValues.submit = null;\r\n    \r\n    return initialValues;\r\n};\r\n\r\nexport const addAnchors = (nodeData, nodes, newNodeId) => {\r\n    const incoming = nodeData.incoming || 0;\r\n    const outgoing = nodeData.outgoing || 0;\r\n\r\n    const inputAnchors = [];\r\n    for (let i = 0; i < incoming; i+=1 ) {\r\n        const newInput = {\r\n            id: `${newNodeId}-input-${i}`\r\n        };\r\n        inputAnchors.push(newInput);\r\n    }\r\n\r\n    const outputAnchors = [];\r\n    for (let i = 0; i < outgoing; i+=1 ) {\r\n        const newOutput = {\r\n            id: `${newNodeId}-output-${i}`\r\n        };\r\n        outputAnchors.push(newOutput);\r\n    }\r\n    \r\n    nodeData.inputAnchors = inputAnchors;\r\n    nodeData.outputAnchors = outputAnchors;\r\n    nodeData.label = getUniqueNodeLabel(nodeData, nodes);\r\n    \r\n    if (nodeData.actions) nodeData.actions = initializeNodeData(nodeData.actions);\r\n    if (nodeData.credentials) nodeData.credentials = initializeNodeData(nodeData.credentials);\r\n    if (nodeData.networks) nodeData.networks = initializeNodeData(nodeData.networks);\r\n    if (nodeData.inputParameters) nodeData.inputParameters = initializeNodeData(nodeData.inputParameters);\r\n\r\n    return nodeData;\r\n};\r\n\r\nexport const getEdgeLabelName = (source) => {\r\n    const sourceSplit = source.split(\"-\");\r\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\r\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length-1];\r\n        return outputAnchorsIndex === '0' ? 'true' : 'false';\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const checkMultipleTriggers = (nodes) => {\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.type === 'webhook' || node.data.type === 'trigger') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined;\r\n\r\n    const date = moment(dateString);\r\n    if (!date.isValid) return undefined;\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes());\r\n}\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    const splitDataURI = fileBase64.split(',');\r\n    const filename = splitDataURI[splitDataURI.length-1].split(':')[1];\r\n    return filename;\r\n}\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr);\r\n        const filenames = [];\r\n        for (let i = 0; i < base64Array.length; i+=1 ) {\r\n            const fileBase64 = base64Array[i];\r\n            const splitDataURI = fileBase64.split(',');\r\n            const filename = splitDataURI[splitDataURI.length-1].split(':')[1];\r\n            filenames.push(filename);\r\n        }\r\n        return filenames.length ? filenames.join(',') : '';\r\n    } catch(e) {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes;\r\n    const edges = flowData.edges;\r\n    \r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        nodes[i].selected = false;\r\n        const node = nodes[i];\r\n        const newNodeData = {\r\n            label: node.data.label,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            inputAnchors: node.data.inputAnchors,\r\n            outputAnchors: node.data.outputAnchors,\r\n            selected: false,\r\n        }\r\n        if (node.data.inputParameters) {\r\n            newNodeData.inputParameters = {...node.data.inputParameters, submit: null};\r\n            if (node.data.inputParameters.wallet) delete newNodeData.inputParameters.wallet;\r\n        }\r\n        if (node.data.actions) {\r\n            newNodeData.actions = {...node.data.actions, submit: null};\r\n            if (node.data.actions.wallet) delete newNodeData.actions.wallet;\r\n        }\r\n        if (node.data.networks) {\r\n            newNodeData.networks = {...node.data.networks, submit: null};\r\n            if (node.data.networks.wallet) delete newNodeData.networks.wallet;\r\n        }\r\n        if (node.data.credentials && node.data.credentials.credentialMethod) {\r\n            newNodeData.credentials = {credentialMethod: node.data.credentials.credentialMethod, submit: null};\r\n            if (node.data.credentials.wallet) delete newNodeData.credentials.wallet;\r\n        }\r\n\r\n        nodes[i].data = newNodeData;\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    };\r\n    return exportJson;\r\n}\r\n\r\nconst isHideRegisteredCredential = (params, paramsType, nodeFlowData) => {\r\n\r\n    if (!nodeFlowData[paramsType] || !nodeFlowData[paramsType]['credentialMethod']) return undefined;\r\n    let clonedParams = params;\r\n\r\n    for (let i = 0; i < clonedParams.length; i+= 1) {\r\n        const input = clonedParams[i];\r\n        if (input.type === 'options') {\r\n            const selectedCredentialMethodOption = input.options.find((opt) => opt.name === nodeFlowData[paramsType]['credentialMethod']);\r\n            if (\r\n                selectedCredentialMethodOption && \r\n                selectedCredentialMethodOption !== undefined && \r\n                selectedCredentialMethodOption.hideRegisteredCredential\r\n            ) return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const handleCredentialParams = (nodeParams, paramsType, reorganizedParams, nodeFlowData) => {\r\n    if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') === undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        !isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Add hard-coded registeredCredential params\r\n        nodeParams.push({\r\n            name: 'registeredCredential',\r\n        });\r\n\r\n    } else if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') !== undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n\r\n    } else if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') === undefined\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n    }\r\n    return nodeParams;\r\n}\r\n\r\nexport const copyToClipboard = (e) => {\r\n    const src = e.src;\r\n    if (Array.isArray(src) || typeof src === 'object') {\r\n        navigator.clipboard.writeText(JSON.stringify(src, null, '  '));\r\n    } else {\r\n        navigator.clipboard.writeText(src);\r\n    }\r\n}","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import axios from \"axios\";\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});\r\n\r\nexport default apiClient;\r\n","import { useState } from \"react\";\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true);\r\n        try {\r\n            const result = await apiFunc(...args);\r\n            setData(result.data);\r\n        } catch (err) {\r\n            setError(err || \"Unexpected Error!\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    };\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\r\n    let offset1;\r\n    let offset2;\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset;\r\n            offset2 = 0;\r\n            break;\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0;\r\n            offset2 = offset;\r\n            break;\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2);\r\n    const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                };\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n    }\r\n});\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n};\r\n\r\nexport default AnimateButton;\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { \r\n    Dialog, \r\n    DialogContent, \r\n    DialogTitle \r\n} from '@mui/material';\r\nimport ReactJson from 'react-json-view'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\nconst ExpandDataDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onCopyClick,\r\n    enableClipboard,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"md\"\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {!enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={e => copyToClipboard(e)} />}\r\n                {enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={e => onCopyClick(e, dialogProps.node)} />}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nExpandDataDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onCopyClick: PropTypes.func,\r\n    enableClipboard: PropTypes.bool,\r\n};\r\n\r\nexport default ExpandDataDialog;\r\n\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true);\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false;\r\n        },\r\n        []\r\n    );\r\n\r\n    return scripted;\r\n};\r\n\r\nexport default useScriptRef;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeSnackbar } from 'store/actions';\r\n\r\nlet displayed = [];\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifier = useSelector((state) => state.notifier);\r\n    const { notifications } = notifier;\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id];\r\n    };\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter(key => id !== key)];\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey));\r\n                    removeDisplayed(myKey);\r\n                },\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\r\n};\r\n\r\nexport default useNotifier;","import { createPortal } from 'react-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n    Button, \r\n    Dialog, \r\n    DialogActions,\r\n    DialogContent, \r\n    IconButton,\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ReactJson from 'react-json-view';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { IconArrowsMaximize } from '@tabler/icons';\r\nimport ExpandDataDialog from './ExpandDataDialog';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nimport './EditVariableDialog.css';\r\n\r\nconst isPositiveNumeric = (value) =>  /^\\d+$/.test(value);\r\n\r\nconst EditVariableDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onConfirm,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [input, setInput] = useState(null);\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false);\r\n    const [expandDialogProps, setExpandDialogProps] = useState({});\r\n    const [copiedVariableBody, setCopiedVariableBody] = useState({});\r\n    const [languageType, setLanguageType] = useState(languages.js);\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false);\r\n    };\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        };\r\n        setExpandDialogProps(dialogProp);\r\n        setShowExpandDialog(true);\r\n    };\r\n\r\n    const onMouseUp = (e) => {\r\n        if (e.target && e.target.selectionEnd && e.target.value) {\r\n            const cursorPosition = e.target.selectionEnd;\r\n            const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n            const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n            const body = {\r\n                textBeforeCursorPosition, \r\n                textAfterCursorPosition,\r\n            }\r\n            setCopiedVariableBody(body);\r\n        } else {\r\n            setCopiedVariableBody({});\r\n        }\r\n    }\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace;\r\n        let returnVariablePath = `${node.id}`;\r\n        for (let i = 0; i < namespaces.length; i+=1 ) {\r\n            const namespace = namespaces[i];\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1);\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`;\r\n                } else {\r\n                    returnVariablePath += namespace;\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.';\r\n                }\r\n            }\r\n        }\r\n        if (copiedVariableBody) {\r\n            let newInput = '';\r\n            if (copiedVariableBody.textBeforeCursorPosition === undefined && copiedVariableBody.textAfterCursorPosition === undefined)\r\n                newInput = `${inputValue}${`{{${returnVariablePath}}}`}`;\r\n            else\r\n                newInput = `${copiedVariableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${copiedVariableBody.textAfterCursorPosition}`;\r\n            setInputValue(newInput);\r\n        }\r\n    };\r\n\r\n    const onSave = (value) => {\r\n        // ArrayInputParameter\r\n        if (dialogProps.arrayItemBody) {\r\n            const updateArrayValues = {\r\n                ...dialogProps.arrayItemBody.arrayItemValues,\r\n                [dialogProps.arrayItemBody.arrayItemInput.name]: value\r\n            };\r\n            const updateInitialValues = dialogProps.arrayItemBody.initialValues;\r\n            updateInitialValues[dialogProps.arrayItemBody.arrayItemIndex] = updateArrayValues;\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: updateInitialValues\r\n            };\r\n            onConfirm(updateValues);\r\n        }\r\n        else {\r\n            // InputParameter\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: value,\r\n                submit: null\r\n            };\r\n            onConfirm(updateValues);\r\n        }\r\n    }\r\n\r\n     // Handle Accordian\r\n     useEffect(() => {\r\n        if(dialogProps.values && dialogProps.input) {\r\n            let inputValues = dialogProps.values;\r\n            let input = dialogProps.input;\r\n            if (dialogProps.arrayItemBody) {\r\n                inputValues = dialogProps.arrayItemBody.arrayItemValues;\r\n                input = dialogProps.arrayItemBody.arrayItemInput;\r\n            }\r\n            setInput(input);\r\n            setInputValue(inputValues[input.name].toString() || '');\r\n            if (input.type === 'json' || input.type === 'string' || input.type === 'number') \r\n                setLanguageType(languages.json);\r\n            if (input.type === 'code')\r\n                setLanguageType(languages.js);\r\n        }\r\n       \r\n    }, [dialogProps]);\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                {input && (input.type === 'json' || input.type === 'string' || \r\n                input.type === 'number' || input.type === 'code') &&\r\n                <div style={{ flex: 1 }}>\r\n                    <Typography sx={{ mb: 2, ml: 1 }} variant=\"h4\">Input</Typography>\r\n                    <PerfectScrollbar \r\n                        style={{ \r\n                            border: '1px solid',\r\n                            borderColor: theme.palette.grey['500'],\r\n                            borderRadius: '12px', \r\n                            height: '100%', \r\n                            maxHeight: 'calc(100vh - 220px)', \r\n                            overflowX: 'hidden',\r\n                            backgroundColor: 'white'\r\n                        }}>\r\n                        <Editor\r\n                            value={inputValue}\r\n                            onValueChange={code => setInputValue(code)}\r\n                            placeholder={input.placeholder}\r\n                            highlight={code => highlight(code, languageType)}\r\n                            onMouseUp={e => onMouseUp(e)}\r\n                            onBlur={e => onMouseUp(e)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontSize: '0.875rem',\r\n                                minHeight: 'calc(100vh - 220px)',\r\n                                width: '100%',\r\n                            }}\r\n                            textareaClassName=\"editor__textarea\"\r\n                        />\r\n                    </PerfectScrollbar>\r\n                </div>\r\n                }\r\n                {!dialogProps.hideVariables && (<div style={{ flex: 1 }}>\r\n                    <Typography sx={{ mb: 2, ml: 2 }} variant=\"h4\">Variables</Typography>\r\n                    {dialogProps.availableNodesForVariable.length === 0 && \r\n                    <div style={{ padding: 10, marginLeft: 10 }}>\r\n                        <span>No Variables. Try connect to other nodes. </span>\r\n                    </div>}\r\n                    {dialogProps.availableNodesForVariable.length > 0 &&\r\n                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                        <Box sx={{ pl: 2, pr: 2 }}>\r\n                            <List\r\n                                sx={{\r\n                                    width: '100%',\r\n                                    py: 0,\r\n                                    borderRadius: '10px',\r\n                                    [theme.breakpoints.down('md')]: {\r\n                                        maxWidth: 300\r\n                                    },\r\n                                    '& .MuiListItemSecondaryAction-root': {\r\n                                        top: 22\r\n                                    },\r\n                                    '& .MuiDivider-root': {\r\n                                        my: 0\r\n                                    },\r\n                                    '& .list-container': {\r\n                                        pl: 7\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {dialogProps.availableNodesForVariable.map((node, index) => (\r\n                                    <Box key={index}>\r\n                                        <Accordion expanded={expanded === node.data.label} onChange={handleAccordionChange(node.data.label)}>\r\n                                            <AccordionSummary\r\n                                                expandIcon={<ExpandMoreIcon />}\r\n                                                aria-controls={`${node.data.label}-content`}\r\n                                                id={`${node.data.label}-header`}\r\n                                            >\r\n                                                <Typography variant=\"h5\">\r\n                                                    {node.data.label}\r\n                                                </Typography>\r\n                                            </AccordionSummary>\r\n                                            <AccordionDetails>\r\n                                                <div style={{position: 'relative'}}>\r\n                                                    <ReactJson collapsed src={(node.data.outputResponses && node.data.outputResponses.output)? node.data.outputResponses.output : {}} enableClipboard={e => onClipboardCopy(e, node)}/>\r\n                                                    <IconButton \r\n                                                        size=\"small\" \r\n                                                        sx={{ \r\n                                                            height: 25, \r\n                                                            width: 25, \r\n                                                            position: 'absolute', \r\n                                                            top: -5, \r\n                                                            right: 5 \r\n                                                        }}\r\n                                                        title=\"Expand Variable\"\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => onExpandDialogClicked((node.data.outputResponses && node.data.outputResponses.output) ? node.data.outputResponses.output : {}, node)}\r\n                                                    >\r\n                                                        <IconArrowsMaximize />\r\n                                                    </IconButton>\r\n                                                </div>\r\n                                            </AccordionDetails>\r\n                                        </Accordion>\r\n                                    </Box>\r\n                                ))}\r\n                            </List>\r\n                        </Box>\r\n                    </PerfectScrollbar>}\r\n                </div>)}\r\n                <ExpandDataDialog\r\n                    enableClipboard\r\n                    show={showExpandDialog}\r\n                    dialogProps={expandDialogProps}\r\n                    onCancel={() => setShowExpandDialog(false)}\r\n                    onCopyClick={(e, node) => {\r\n                        onClipboardCopy(e, node);\r\n                        setShowExpandDialog(false);\r\n                    }}                                                \r\n                ></ExpandDataDialog>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>\r\n                    {dialogProps.cancelButtonName}\r\n                </Button>\r\n                <Button variant=\"contained\" onClick={() => onSave(inputValue)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nEditVariableDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func,\r\n};\r\n\r\nexport default EditVariableDialog;\r\n\r\n","import { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Switch,\r\n    Fab,\r\n    FormControl,\r\n    Tooltip,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Stack,\r\n    IconButton,\r\n    Button,\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// icons\r\nimport { IconX, IconUpload } from '@tabler/icons';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport Editor from 'react-simple-code-editor';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button \r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type='button'\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n    {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string, \r\n    onClick: PropTypes.func, \r\n};\r\n\r\n// ==============================|| ARRAY INPUT PARAMETERS ||============================== //\r\n\r\nconst ArrayInputParameters = ({ \r\n    initialValues, \r\n    arrayParams,\r\n    paramsType,\r\n    arrayGroupName,\r\n    errors, \r\n    onArrayInputChange, \r\n    onArrayInputBlur, \r\n    onArrayItemRemove,\r\n    onArrayItemMouseUp,\r\n    onEditVariableDialogOpen,\r\n}) => {\r\n     \r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    const processUpdateValues = (inputValue, inputName, values, index) => {\r\n        const updateArrayValues = {\r\n            ...values,\r\n            [inputName]: inputValue\r\n        };\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues[index] = updateArrayValues;\r\n        return updateInitialValues;\r\n    };\r\n\r\n    const onInputChange = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputChange(updateInitialValues);\r\n    }\r\n\r\n    const onInputBlur = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputBlur(updateInitialValues);\r\n    }\r\n\r\n    const onRemoveClick = (index) => {\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues.splice(index, 1);\r\n        onArrayItemRemove(updateInitialValues);\r\n        onArrayItemMouseUp(false);\r\n    }\r\n\r\n    const onMouseUp = (e, inputName, valueIndex) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${arrayGroupName}[${valueIndex}].${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition, \r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        };\r\n        onArrayItemMouseUp(true, body);\r\n    }\r\n\r\n    const handleFolderUpload = (e, onInputChange, values, inputName, index) => {\r\n\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if( fileIndex >= files.length ) {\r\n                onInputChange(JSON.stringify(base64Array), inputName, values, index)\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload= (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex+1, lodash.cloneDeep(base64Array));\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    };\r\n\r\n    const handleFileUpload = (e, onInputChange, values, inputName, index) => {\r\n\r\n        if (!e.target.files) {\r\n          return;\r\n        }\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n    \r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n            const value = result + `,filename:${name}`;\r\n            onInputChange(value, inputName, values, index)\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    return (\r\n        <>\r\n            {arrayParams.map((_, index) => {\r\n                \r\n                const params = arrayParams[index] || [];\r\n                const values = initialValues[index] || {};\r\n\r\n                return (\r\n                    <Box \r\n                        sx={{\r\n                            p: 2, \r\n                            mb: 2, \r\n                            backgroundColor: theme.palette.secondary.light, \r\n                            borderRadius: `${customization.borderRadius}px`,\r\n                            position: 'relative'\r\n                        }}\r\n                        key={index}\r\n                    >\r\n                        {arrayParams.length > 1 && (\r\n                        <Fab \r\n                            sx={{ \r\n                                minHeight: 30, \r\n                                height: 30, width: 30, \r\n                                backgroundColor: theme.palette.secondary.light, \r\n                                color: theme.palette.secondary.main, \r\n                                position: 'absolute', \r\n                                right: -10, top: -10 \r\n                            }} \r\n                            size=\"small\" \r\n                            onClick={() => onRemoveClick(index)}\r\n                        >\r\n                            <IconX />\r\n                        </Fab>\r\n                        )}\r\n\r\n                    {params.map((input, paramIndex) => {\r\n\r\n                        if (input.type === 'file' || input.type === 'folder') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n\r\n                                {input.type === 'file' && \r\n                                <span \r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        color: theme.palette.grey['800'],\r\n                                        marginBottom: '1rem'\r\n                                    }}>\r\n                                    {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload' }\r\n                                </span>}\r\n\r\n                                {input.type === 'folder' && \r\n                                <span \r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        color: theme.palette.grey['800'],\r\n                                        marginBottom: '1rem'\r\n                                    }}>\r\n                                    {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload' }\r\n                                </span>}\r\n\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    component=\"label\"\r\n                                    fullWidth\r\n                                    startIcon={<IconUpload />}\r\n                                    sx={{ marginRight: \"1rem\" }}\r\n                                >\r\n                                    {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                    {input.type === 'file' && \r\n                                    <input\r\n                                        type=\"file\"\r\n                                        hidden\r\n                                        onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName, index)}\r\n                                    />}\r\n                                    {input.type === 'folder' && \r\n                                    <input\r\n                                        type=\"file\"\r\n                                        directory=\"\"\r\n                                        webkitdirectory=\"\"\r\n                                        hidden\r\n                                        onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName, index)}\r\n                                    />}\r\n                                </Button>\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'json' || input.type === 'code') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                    <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                        variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values, index)}>\r\n                                        Edit Variables\r\n                                    </Button>\r\n                                </Stack>\r\n                                <PerfectScrollbar \r\n                                    style={{ \r\n                                        border: '1px solid',\r\n                                        borderColor: theme.palette.grey['500'],\r\n                                        borderRadius: '12px', \r\n                                        height: '200px', \r\n                                        maxHeight: '200px', \r\n                                        overflowX: 'hidden',\r\n                                        backgroundColor: 'white'\r\n                                    }}\r\n                                    onScroll={e => e.stopPropagation()}\r\n                                    >\r\n                                    <Editor\r\n                                        placeholder={input.placeholder}\r\n                                        value={values[inputName] || ''}\r\n                                        onBlur={e => {\r\n                                            onInputBlur(e.target.value, inputName, values, index);\r\n                                            onMouseUp(e, inputName, index);\r\n                                        }}\r\n                                        onValueChange={code => onInputChange(code, inputName, values, index)}\r\n                                        onMouseUp={e => onMouseUp(e, inputName, index)}\r\n                                        highlight={code => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                        padding={10}\r\n                                        style={{\r\n                                            fontSize: '0.875rem',\r\n                                            minHeight: '200px',\r\n                                            width: '100%',\r\n                                        }}\r\n                                        textareaClassName=\"editor__textarea\"\r\n                                    />\r\n                                </PerfectScrollbar>\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'date') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <DatePicker \r\n                                    customInput={<DateCustomInput />}\r\n                                    selected={convertDateStringToDateObject(values[inputName]) || null} \r\n                                    showTimeSelect\r\n                                    isClearable\r\n                                    timeInputLabel=\"Time:\"\r\n                                    dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                    onChange={(date) => {\r\n                                        const inputValue = date ? date.toISOString() : null;\r\n                                        onInputChange(inputValue, inputName, values, index);\r\n                                        onArrayItemMouseUp(false);\r\n                                    }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                    {(input.type === 'string' || input.type === 'number') && (\r\n                                    <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                        variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values, index)}>\r\n                                        Edit Variables\r\n                                    </Button>\r\n                                    )}\r\n                                </Stack>\r\n                                <OutlinedInput\r\n                                    id={inputName}\r\n                                    type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                    value={values[inputName] || ''}\r\n                                    placeholder={input.placeholder}\r\n                                    name={inputName}\r\n                                    onBlur={(e) => {\r\n                                        const inputValue = e.target.value;\r\n                                        onInputBlur(inputValue, inputName, values, index);\r\n                                        onMouseUp(e, inputName, index);\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        const inputValue = e.target.value;\r\n                                        onInputChange(inputValue, inputName, values, index);\r\n                                    }}\r\n                                    onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'boolean') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Switch\r\n                                    checked={!!values[inputName]}\r\n                                    onChange={(event) => {\r\n                                        onInputChange(event.target.checked, inputName, values, index)\r\n                                    }}\r\n                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'options') {\r\n\r\n                            const inputName = input.name;\r\n                            const availableOptions = input.options || [];\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth\r\n                                sx={{ mb: 1, mt: 1 }}\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Autocomplete\r\n                                    id={inputName}\r\n                                    freeSolo\r\n                                    onOpen={() => onArrayItemMouseUp(false)}\r\n                                    options={availableOptions}\r\n                                    value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                    onChange={(e, selection) => {\r\n                                        const value = selection ? selection.name : \"\";\r\n                                        onInputBlur(value, inputName, values, index)\r\n                                    }}\r\n                                    PopperComponent={StyledPopper}\r\n                                    renderInput={(params) => (\r\n                                        <TextField \r\n                                            {...params}\r\n                                            value={values[inputName]}\r\n                                            error={errors && errors.length > 0 && errors[index] ?\r\n                                                Boolean(errors[index][inputName]) : false\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                    renderOption={(props, option) => (\r\n                                        <Box component=\"li\" {...props}>\r\n                                            <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                    {option.label} \r\n                                                </Typography>\r\n                                                {option.description &&\r\n                                                    <Typography sx={{p: 1}}>\r\n                                                        {option.description} \r\n                                                    </Typography>\r\n                                                }\r\n                                            </div>\r\n                                        </Box>\r\n                                    )}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n                        return null\r\n                    })}\r\n                    </Box>\r\n                )}\r\n            )} \r\n        </>\r\n    );\r\n};\r\n\r\nArrayInputParameters.propTypes = {\r\n    initialValues: PropTypes.array, \r\n    arrayParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    arrayGroupName: PropTypes.string,\r\n    errors: PropTypes.array, \r\n    onArrayInputChange: PropTypes.func, \r\n    onArrayInputBlur: PropTypes.func,\r\n    onArrayItemRemove: PropTypes.func,\r\n    onArrayItemMouseUp: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func, \r\n};\r\n\r\nexport default ArrayInputParameters;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './OptionParamsResponse.css';\r\n\r\n// ==============================|| OPTION PARAMS RESPONSE ||============================== //\r\n\r\nconst OptionParamsResponse = ({\r\n    value,\r\n    options,\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const getSelectedValue = (value) => options.find((option) => option.name === value);\r\n\r\n    const getSelectedOptionInputParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.inputParameters || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getSelectedOptionExampleParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleParameters || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getSelectedOptionExampleResponse = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleResponse || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getSelectedValue(value) && getSelectedOptionInputParams(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Parameters\r\n                    </Typography>\r\n                    <div className='params' dangerouslySetInnerHTML={{ __html: getSelectedOptionInputParams(value) }} />\r\n                </Box>\r\n            )}\r\n            \r\n            {getSelectedValue(value) && getSelectedOptionExampleParams(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2, \r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Example Parameters\r\n                    </Typography>\r\n                    <ReactJson \r\n                        collapsed \r\n                        src={JSON.parse(getSelectedOptionExampleParams(value))}\r\n                        enableClipboard={e => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleResponse(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2, \r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Example Response\r\n                    </Typography>\r\n                    <ReactJson \r\n                        collapsed \r\n                        src={getSelectedOptionExampleResponse(value)}\r\n                        enableClipboard={e => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nOptionParamsResponse.propTypes = {\r\n    value: PropTypes.string,\r\n    options: PropTypes.array,\r\n};\r\n\r\nexport default OptionParamsResponse;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Stack, IconButton, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport AsyncSelect from 'react-select/async';\r\nimport axios from \"axios\";\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons';\r\n\r\n// Constant\r\nimport { baseURL } from 'store/constant';\r\n\r\n\r\n// ==============================|| ASYNC SELECT WRAPPER ||============================== //\r\n\r\nconst AsyncSelectWrapper = ({\r\n    title,\r\n    description,\r\n    value,\r\n    loadMethod,\r\n    loadFromDbCollections,\r\n    nodeFlowData,\r\n    error,\r\n    onChange,\r\n    onMenuOpen,\r\n    onSetError,\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const customStyles = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            paddingTop: 15,\r\n            paddingBottom: 15,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            cursor: 'pointer',\r\n            fontWeight: '500',\r\n            backgroundColor: state.isSelected ? theme.palette.primary.light : '',\r\n            color: 'black',\r\n            \"&:hover\": {\r\n                backgroundColor: theme.palette.grey['200']\r\n            },\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            cursor: 'text',\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 6,\r\n            paddingLeft: 6,\r\n            borderRadius: 12,\r\n            \"&:hover\": {\r\n                borderColor: theme.palette.grey['700']\r\n            },\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            fontWeight: '600',\r\n        }),\r\n        menuList: (provided) => ({\r\n            ...provided,\r\n            boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n            borderRadius: '10px',\r\n        }),\r\n    }\r\n    \r\n    const [asyncOptions, setAsyncOptions] = useState([]);\r\n\r\n    const getSelectedValue = (value) => asyncOptions.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n  \r\n    const formatErrorMessage = (error) => {\r\n        if (error) return `*${error.replace(/[\"]/g, \"\")}`;\r\n        return \"\"\r\n    }\r\n\r\n    const showHideOptions = (options) => {\r\n\r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n        const displayTypes = ['show', 'hide'];\r\n\r\n        for (let x = 0; x < displayTypes.length; x+= 1) {\r\n            const displayType = displayTypes[x];\r\n\r\n            for (let i = 0; i < returnOptions.length; i+= 1) {\r\n                const option = returnOptions[i];\r\n                const displayOptions = option[displayType];\r\n        \r\n                if (displayOptions) {\r\n                    Object.keys(displayOptions).forEach((path) => {\r\n                        const comparisonValue = displayOptions[path];\r\n\r\n                        if (path.includes(\"$index\")) {\r\n                            path = path.replace(\"$index\", index);\r\n                        }\r\n                        const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n                        if (Array.isArray(comparisonValue)) {\r\n                            if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        } else if (typeof comparisonValue === 'string') {\r\n                            if (displayType === 'show' && !((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && ((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i+= 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    }\r\n\r\n    const loadOptions = (inputValue, callback) => {\r\n        axios.post(\r\n            `${baseURL}/api/v1/node-load-method/${nodeFlowData.name}`,\r\n            {...nodeFlowData, loadMethod, loadFromDbCollections}\r\n        ).then((response) => {\r\n            const data = response.data;\r\n            const filteredOption = (data || []).filter((i) =>\r\n                i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n            );\r\n            const options = showHideOptions(filteredOption);\r\n            setAsyncOptions(options);\r\n            callback(options);\r\n        });\r\n    }\r\n\r\n    const formatOptionLabel = ({ label, description }, {context}) => (\r\n        <>\r\n        {context === 'menu' && <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>{label}</div>\r\n            {description && <span style={{ fontWeight: 400, paddingTop: 10, paddingBottom: 10 }}>{description}</span>}\r\n        </div>}\r\n        {context === 'value' && <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>{label}</div>\r\n        </div>}\r\n        </>\r\n    );\r\n\r\n    useEffect(() => () => setAsyncOptions([]), []);\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            const selectedOption = asyncOptions.find((option) => option.name === value)\r\n            if (!selectedOption) {\r\n                onSetError();\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [asyncOptions]); \r\n\r\n    return (\r\n        <>\r\n            <Stack direction=\"row\">\r\n                <Typography variant=\"overline\">{title}</Typography>\r\n                {description && (\r\n                <Tooltip title={description} placement=\"right\">\r\n                    <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                </Tooltip>\r\n                )}\r\n            </Stack>\r\n            <div style={{position: 'relative'}}>\r\n                <AsyncSelect\r\n                    key={JSON.stringify(nodeFlowData)} // to reload async select whenever flowdata changed\r\n                    styles={customStyles}\r\n                    value={getSelectedValue(value) || getDefaultOptionValue()}\r\n                    formatOptionLabel={formatOptionLabel}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionValue={(option) => option.name}\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onChange={onChange}\r\n                    onMenuOpen={onMenuOpen}\r\n                />\r\n                <button \r\n                    style={{ \r\n                        minHeight: 10, \r\n                        height: 27, width: 30, \r\n                        backgroundColor: '#FAFAFA',\r\n                        color: theme.palette.grey['500'], \r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        margin: 'auto',\r\n                        border: 'none',\r\n                        cursor: 'pointer'                        \r\n                    }} \r\n                    title=\"Clear Selection\"\r\n                    type='button'\r\n                    onClick={() => onChange(null)}\r\n                >\r\n                    <IconX />\r\n                </button>\r\n            </div> \r\n            {error && (\r\n                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>{formatErrorMessage(error)}</span>\r\n            )}\r\n\r\n            <OptionParamsResponse value={value} options={asyncOptions} />\r\n        </>\r\n    );\r\n}\r\n\r\nAsyncSelectWrapper.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    value: PropTypes.string,\r\n    loadMethod: PropTypes.string,\r\n    loadFromDbCollections: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    error: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onMenuOpen: PropTypes.func,\r\n    onSetError: PropTypes.func,\r\n};\r\n\r\nexport default AsyncSelectWrapper;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    Stack,\r\n    FormControl,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Switch,\r\n    IconButton,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// project imports\r\nimport useScriptRef from 'hooks/useScriptRef';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport ArrayInputParameters from './ArrayInputParameters';\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\nimport AsyncSelectWrapper from './AsyncSelectWrapper';\r\n\r\n// icons\r\nimport { IconPlus, IconUpload } from '@tabler/icons';\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button \r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type='button'\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n    {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string, \r\n    onClick: PropTypes.func, \r\n};\r\n\r\n// ==============================|| INPUT PARAMETERS ||============================== //\r\n\r\nconst InputParameters = ({ \r\n    params, \r\n    paramsType, \r\n    initialValues, \r\n    nodeParamsValidation, \r\n    nodeFlowData,\r\n    valueChanged, \r\n    onSubmit,\r\n    setVariableSelectorState,\r\n    onEditVariableDialogOpen,\r\n    ...others \r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    const scriptedRef = useScriptRef();\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const onMouseUp = (e, inputName) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition, \r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType,\r\n        }\r\n        setVariableSelectorState(true, body);\r\n    }\r\n\r\n    const onAddArrayItem = (values, arrayItems, arrayName) => {\r\n        const updateValues = {\r\n            ...values,\r\n            [arrayName]: arrayItems\r\n        }\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const handleFolderUpload = (e, setFieldValue, values, inputName) => {\r\n\r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if( fileIndex >= files.length ) {\r\n                setFieldValue(inputName, JSON.stringify(base64Array));\r\n                const overwriteValues = {\r\n                    ...values,\r\n                    [inputName]: JSON.stringify(base64Array)\r\n                };\r\n                onChanged(overwriteValues);\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload= (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex+1, lodash.cloneDeep(base64Array));\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    }\r\n\r\n    const handleFileUpload = (e, setFieldValue, values, inputName) => {\r\n        \r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n    \r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n\r\n            const value = result + `,filename:${name}`;\r\n            setFieldValue(inputName, value);\r\n            const overwriteValues = {\r\n                ...values,\r\n                [inputName]: value\r\n            };\r\n            onChanged(overwriteValues);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={initialValues}\r\n                validationSchema={Yup.object().shape(nodeParamsValidation)}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    setVariableSelectorState(false);\r\n                    try {\r\n                        if (scriptedRef.current) {\r\n                            values.submit = true;\r\n                            setStatus({ success: true });\r\n                            setSubmitting(false);\r\n                            onSubmit(values, paramsType);\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n                        {params.map((input) => {\r\n\r\n                            if (input.type === 'file' || input.type === 'folder') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    \r\n                                    {input.type === 'file' && \r\n                                    <span \r\n                                        style={{\r\n                                            fontWeight: 'bold',\r\n                                            color: theme.palette.grey['800'],\r\n                                            marginBottom: '1rem'\r\n                                        }}>\r\n                                        {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload' }\r\n                                    </span>}\r\n\r\n                                    {input.type === 'folder' && \r\n                                    <span \r\n                                        style={{\r\n                                            fontWeight: 'bold',\r\n                                            color: theme.palette.grey['800'],\r\n                                            marginBottom: '1rem'\r\n                                        }}>\r\n                                        {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload' }\r\n                                    </span>}\r\n\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        component=\"label\"\r\n                                        fullWidth\r\n                                        startIcon={<IconUpload />}\r\n                                        sx={{ marginRight: \"1rem\" }}\r\n                                    >\r\n                                        {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                        {input.type === 'file' && \r\n                                        <input\r\n                                            type=\"file\"\r\n                                            hidden\r\n                                            onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName)}\r\n                                        />}\r\n                                        {input.type === 'folder' && \r\n                                        <input\r\n                                            type=\"file\"\r\n                                            directory=\"\"\r\n                                            webkitdirectory=\"\"\r\n                                            hidden\r\n                                            onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName)}\r\n                                        />}\r\n                                    </Button>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'json' || input.type === 'code') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                        <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                            variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values)}>\r\n                                            Edit Variables\r\n                                        </Button>\r\n                                    </Stack>\r\n                                    <PerfectScrollbar \r\n                                        style={{ \r\n                                            border: '1px solid',\r\n                                            borderColor: theme.palette.grey['500'],\r\n                                            borderRadius: '12px', \r\n                                            height: '200px', \r\n                                            maxHeight: '200px', \r\n                                            overflowX: 'hidden',\r\n                                            backgroundColor: 'white'\r\n                                        }}\r\n                                        onScroll={e => e.stopPropagation()}\r\n                                        >\r\n                                        <Editor\r\n                                            placeholder={input.placeholder}\r\n                                            value={values[inputName] || ''}\r\n                                            onBlur={e => {\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: e.target.value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                                onMouseUp(e, inputName);\r\n                                            }}\r\n                                            onValueChange={code => {\r\n                                                setFieldValue(inputName, code);\r\n                                            }}\r\n                                            onMouseUp={e => onMouseUp(e, inputName)}\r\n                                            highlight={code => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                            padding={10}\r\n                                            style={{\r\n                                                fontSize: '0.875rem',\r\n                                                minHeight: '200px',\r\n                                                width: '100%',\r\n                                            }}\r\n                                            textareaClassName=\"editor__textarea\"\r\n                                        />\r\n                                    </PerfectScrollbar>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'date') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <DatePicker \r\n                                        customInput={<DateCustomInput />}\r\n                                        selected={convertDateStringToDateObject(values[inputName]) || null} \r\n                                        showTimeSelect\r\n                                        isClearable\r\n                                        timeInputLabel=\"Time:\"\r\n                                        dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                        onChange={(date) => {\r\n                                            const value = date ? date.toISOString() : null;\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                           \r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                        {(input.type === 'string' || input.type === 'number') && (\r\n                                        <Button sx={{ position: 'absolute', fontSize: '0.6875rem', right: 0, top: 5, height: 25, width: 'max-content' }} \r\n                                            variant=\"outlined\" onClick={() => onEditVariableDialogOpen(input, values)}>\r\n                                            Edit Variables\r\n                                        </Button>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <OutlinedInput\r\n                                        id={inputName}\r\n                                        type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                        placeholder={input.placeholder}\r\n                                        multiline={!!input.rows}\r\n                                        maxRows={input.rows || 0}\r\n                                        minRows={input.rows || 0}\r\n                                        value={values[inputName] || ''}\r\n                                        name={inputName}\r\n                                        onBlur={e => {\r\n                                            handleBlur(e);\r\n                                            onChanged(values);\r\n                                            onMouseUp(e, inputName);\r\n                                        }}\r\n                                        onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Switch\r\n                                        checked={!!values[inputName]}\r\n                                        onChange={(event) => {\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, event.target.checked);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: event.target.checked\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'asyncOptions') {\r\n                                const inputName = input.name;\r\n                                return (\r\n                                    <FormControl \r\n                                        key={inputName}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                    >\r\n                                        <AsyncSelectWrapper \r\n                                            title={input.label}\r\n                                            description={input.description}\r\n                                            value={values[inputName]}\r\n                                            loadMethod={input.loadMethod}\r\n                                            loadFromDbCollections={input.loadFromDbCollections || []}\r\n                                            nodeFlowData={nodeFlowData}\r\n                                            error={JSON.stringify(errors[inputName])}\r\n                                            onChange={(selection) => {\r\n                                                const value = selection ? selection.name : \"\";\r\n                                                setFieldValue(inputName, value);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onMenuOpen={() => setVariableSelectorState(false)}\r\n                                            onSetError={() => {\r\n                                                const value = \"\";\r\n                                                setFieldValue(inputName, value);\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n                                const inputName = input.name;\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        onOpen={() => setVariableSelectorState(false)}\r\n                                        options={input.options || []}\r\n                                        value={findMatchingOptions(input.options, values[inputName]) || getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        onInputChange={(e, value) => {\r\n                                            if (!value) setFieldValue(inputName, \"\");\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                    <OptionParamsResponse value={values[inputName]} options={input.options || []} />\r\n                                </FormControl>)\r\n                            }\r\n                            \r\n                            if (input.type === 'array') {\r\n\r\n                                const arrayParamItems = input.arrayParams;\r\n                                const templateArray = input.array;\r\n                                const inputName = input.name;\r\n                                const arrayItemsValues = values[inputName] || [];\r\n\r\n                                return (\r\n                                    <Stack sx={{mt: 1}} key={inputName}>\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                            <Tooltip title={input.description} placement=\"right\">\r\n                                                <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                            </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <ArrayInputParameters \r\n                                            initialValues={arrayItemsValues}\r\n                                            arrayParams={arrayParamItems}\r\n                                            paramsType={paramsType}\r\n                                            arrayGroupName={inputName}\r\n                                            errors={errors[inputName] ? errors[inputName] : []} \r\n                                            onArrayInputChange={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                            }}\r\n                                            onArrayInputBlur={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: updateInitialValues\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onArrayItemRemove={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: updateInitialValues\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onArrayItemMouseUp={(variableState, body) => {\r\n                                                if (body) setVariableSelectorState(variableState, body);\r\n                                                else setVariableSelectorState(variableState);\r\n                                            }}\r\n                                            onEditVariableDialogOpen={(arrayItemInput, arrayItemValues, arrayItemIndex) => {\r\n                                                const arrayItemBody = {\r\n                                                    arrayItemInput,\r\n                                                    arrayItemValues,\r\n                                                    arrayItemIndex,\r\n                                                    initialValues: arrayItemsValues\r\n                                                }\r\n                                                onEditVariableDialogOpen(input, values, arrayItemBody);\r\n                                            }}\r\n                                        />\r\n                                        <Box key={inputName} sx={{ mb: 2 }}>\r\n                                            <AnimateButton>\r\n                                                <Button\r\n                                                    disableElevation\r\n                                                    fullWidth\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"secondary\"\r\n                                                    startIcon={<IconPlus />}\r\n                                                    onClick={() => {\r\n                                                        setVariableSelectorState(false);\r\n                                                        let newObj = {};\r\n                                                        if (input.default && input.default.length) {\r\n                                                            newObj = input.default[0];\r\n                                                        } else {\r\n                                                            for (let i = 0; i < templateArray.length; i+= 1) {\r\n                                                                newObj[templateArray[i].name] = templateArray[i].default || '';\r\n                                                            }\r\n                                                        }\r\n                                                        arrayItemsValues.push(newObj);\r\n                                                        onAddArrayItem(values, arrayItemsValues, inputName);\r\n                                                    }}\r\n                                                >\r\n                                                    Add {input.label}\r\n                                                </Button>\r\n                                            </AnimateButton>\r\n                                        </Box>\r\n                                    </Stack>\r\n                                )\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    Continue\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nInputParameters.propTypes = {\r\n    params: PropTypes.array, \r\n    paramsType: PropTypes.string, \r\n    initialValues: PropTypes.object,\r\n    nodeParamsValidation: PropTypes.object, \r\n    nodeFlowData: PropTypes.object,\r\n    valueChanged: PropTypes.func, \r\n    onSubmit: PropTypes.func, \r\n    setVariableSelectorState: PropTypes.func, \r\n    onEditVariableDialogOpen: PropTypes.func, \r\n};\r\n\r\nexport default InputParameters;\r\n","import client from \"./client\";\r\n\r\nconst getCredentials = (nodeCredentialName) => client.get(\"/credentials\", { params: { nodeCredentialName } });\r\n\r\nconst getCredentialParams = (name) => client.get(`/node-credentials/${name}`);\r\n\r\nconst getSpecificCredential = (id, isEncrypted) => client.get(`/credentials/${id}`, { params: { isEncrypted } });\r\n\r\nconst createNewCredential = (credentialBody) => client.post(`/credentials`, credentialBody); //credentialBody: ICredential \r\n\r\nconst updateCredential = (id, credentialBody) => client.put(`/credentials/${id}`, credentialBody); //credentialBody: ICredential\r\n\r\nconst deleteCredential = (id) => client.delete(`/credentials/${id}`);\r\n\r\nexport default {\r\n    getCredentials,\r\n    getCredentialParams,\r\n    getSpecificCredential,\r\n    createNewCredential,\r\n    updateCredential,\r\n    deleteCredential,\r\n};\r\n","import client from \"./client\";\r\n\r\nconst geOAuth2PopupURL = (credentialId) => client.get(\"/oauth2\", { params: { credentialId } });\r\nconst geOAuth2RedirectURL = () => client.get(\"/oauth2-redirecturl\");\r\n\r\nexport default {\r\n    geOAuth2PopupURL,\r\n    geOAuth2RedirectURL,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    Stack,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    IconButton,\r\n    Switch,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// API\r\nimport credentialApi from \"api/credential\";\r\nimport oauth2Api from \"api/oauth2\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\nimport useScriptRef from 'hooks/useScriptRef';\r\n\r\n// icons\r\nimport { IconTrash, IconCopy } from '@tabler/icons';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\nconst ADD_NEW_CREDENTIAL = '+ Add New Credential';\r\n\r\n// ==============================|| CREDENTIAL INPUT ||============================== //\r\n\r\nconst CredentialInput = ({ \r\n    initialParams,\r\n    paramsType,\r\n    initialValues, \r\n    initialValidation, \r\n    valueChanged, \r\n    paramsChanged,\r\n    onSubmit,\r\n    ...others \r\n}) => {\r\n    const scriptedRef = useScriptRef();\r\n    const theme = useTheme();\r\n\r\n    const [credentialValidation, setCredentialValidation] = useState({});\r\n    const [credentialValues, setCredentialValues] = useState({});\r\n    const [nodeCredentialName, setNodeCredentialName] = useState('');\r\n    const [credentialParams, setCredentialParams] = useState([]);\r\n    const [credentialOptions, setCredentialOptions] = useState([]);\r\n    const [oAuth2RedirectURL, setOAuth2RedirectURL] = useState('');\r\n\r\n    const getCredentialParamsApi = useApi(credentialApi.getCredentialParams);\r\n    const getRegisteredCredentialsApi = useApi(credentialApi.getCredentials);\r\n    const getSpecificCredentialApi = useApi(credentialApi.getSpecificCredential);\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const getCredentialRequestBody = (values) => {\r\n        if (credentialParams.length === 0) throw new Error('Credential params empty');\r\n        \r\n        const credentialData = {};\r\n        for (let i = 0; i < credentialParams.length; i+=1 ) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in values) credentialData[credParamName] = values[credParamName];\r\n        }\r\n        delete credentialData.name;\r\n\r\n        const credBody = {\r\n            name: values.name,\r\n            nodeCredentialName: values.credentialMethod,\r\n            credentialData\r\n        };\r\n\r\n        return credBody;\r\n    }\r\n\r\n    const updateYupValidation = (inputName, validationKey) => {\r\n        const updateValidation = {\r\n            ...credentialValidation,\r\n            [inputName]: Yup.object({[validationKey]: Yup.string().required(`${inputName} is required`) })\r\n        };\r\n        setCredentialValidation(updateValidation);\r\n    };\r\n\r\n    const clearCredentialParams = () => {\r\n        const updateParams = initialParams.filter(item => credentialParams.every(paramItem => item.name !== paramItem.name));\r\n        setCredentialParams([]);\r\n        setOAuth2RedirectURL('');\r\n\r\n        paramsChanged(updateParams, paramsType);\r\n    }\r\n\r\n    const clearCredentialParamsValues = (value) => {\r\n        let updateValues = JSON.parse(JSON.stringify(credentialValues));\r\n        \r\n        for (let i = 0; i < credentialParams.length; i+=1 ) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in updateValues) delete updateValues[credParamName];\r\n        }\r\n        updateValues = {\r\n            ...updateValues,\r\n            registeredCredential: value\r\n        };\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n    \r\n    const onDeleteCredential = async(credentialId) => {\r\n        const response = await credentialApi.deleteCredential(credentialId);\r\n        if (response.data) {\r\n            clearCredentialParams();\r\n            clearCredentialParamsValues('');\r\n        }\r\n    }\r\n\r\n    const openOAuth2PopUpWindow = (oAuth2PopupURL) => {\r\n        const windowWidth = 500;\r\n        const windowHeight = 400;\r\n        const left = window.screenX + (window.outerWidth - windowWidth) / 2;\r\n        const top = window.screenY + (window.outerHeight - windowHeight) / 2.5;\r\n        const title = `Connect Credential`;\r\n        const url = oAuth2PopupURL;\r\n        const popup = window.open(url, title, `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`);\r\n        return popup;\r\n    }\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    // getRegisteredCredentialsApi successful\r\n    useEffect(() => {\r\n        if (getRegisteredCredentialsApi.data) {\r\n            const credentialOptions = [];\r\n            if (getRegisteredCredentialsApi.data.length) {\r\n                for (let i = 0; i < getRegisteredCredentialsApi.data.length; i+=1 ) {\r\n                    credentialOptions.push({\r\n                        _id: getRegisteredCredentialsApi.data[i]._id,\r\n                        name: getRegisteredCredentialsApi.data[i].name,\r\n                    });\r\n                }\r\n            }\r\n            credentialOptions.push({\r\n                name: ADD_NEW_CREDENTIAL\r\n            });\r\n            setCredentialOptions(credentialOptions);\r\n            if (initialParams.find((prm) => prm.name === 'registeredCredential')) {\r\n                updateYupValidation('registeredCredential', 'name');\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getRegisteredCredentialsApi.data]);\r\n\r\n\r\n    // getCredentialParamsApi successful\r\n    useEffect(() => {\r\n        if (getCredentialParamsApi.data) {\r\n\r\n            const newCredentialParams = getCredentialParamsApi.data.credentials;\r\n\r\n            const credentialNameParam = {\r\n\t\t\t\tlabel: 'Credential Name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '',\r\n            };\r\n\r\n            newCredentialParams.unshift(credentialNameParam);\r\n\r\n            setCredentialParams(newCredentialParams);\r\n\r\n            const updateParams = initialParams;\r\n\r\n            for (let i = 0; i < newCredentialParams.length; i+=1 ) {\r\n                const credParamName = newCredentialParams[i].name;\r\n                if (initialParams.find((prm) => prm.name === credParamName) === undefined) {\r\n                    updateParams.push(newCredentialParams[i]);\r\n                }\r\n            }\r\n            paramsChanged(updateParams, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getCredentialParamsApi.data]);\r\n\r\n\r\n    // getSpecificCredentialApi successful\r\n    useEffect(() => {\r\n        if (getSpecificCredentialApi.data) {\r\n            const updateValues = {\r\n                ...credentialValues,\r\n                ...getSpecificCredentialApi.data.credentialData,\r\n                name: getSpecificCredentialApi.data.name,\r\n            };\r\n            valueChanged(updateValues, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificCredentialApi.data]);\r\n\r\n\r\n    // Initialize values\r\n    useEffect(() => {\r\n        setCredentialValues(initialValues);\r\n        if (initialValues && initialValues.credentialMethod) {\r\n            getRegisteredCredentialsApi.request(initialValues.credentialMethod);\r\n            setNodeCredentialName(initialValues.credentialMethod);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [initialValues]);\r\n\r\n\r\n    // Initialize validation\r\n    useEffect(() => {\r\n        setCredentialValidation(initialValidation);\r\n    \r\n    }, [initialValidation]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={credentialValues}\r\n                validationSchema={Yup.object().shape(credentialValidation)}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    try {\r\n                        if (scriptedRef.current) {\r\n                            const isAddNewCredential = values && values.registeredCredential && values.registeredCredential.name === ADD_NEW_CREDENTIAL;\r\n                          \r\n                            if (!isAddNewCredential && (credentialParams.length === 0 || !values.credentialMethod)) {\r\n                                onSubmit(values.credentialMethod ? {...values, submit: true} : {submit: true}, paramsType);\r\n                                setStatus({ success: true });\r\n                                setSubmitting(false);\r\n                            \r\n                            } else {\r\n                                const body = getCredentialRequestBody(values);\r\n                                let response;\r\n                                if (isAddNewCredential) {\r\n                                    response = await credentialApi.createNewCredential(body);\r\n                                } else {\r\n                                    response = await credentialApi.updateCredential(values.registeredCredential._id, body);\r\n                                }\r\n                                if (response.data) {\r\n\r\n                                    // Open oAuth2 window\r\n                                    if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                        const oAuth2PopupURL = await oauth2Api.geOAuth2PopupURL(response.data._id);\r\n                                        const popUpWindow = openOAuth2PopUpWindow(oAuth2PopupURL.data);\r\n\r\n                                        const oAuth2Completed = async(event) => {\r\n                                            if (event.data === 'success') {\r\n                                                window.removeEventListener('message', oAuth2Completed, false);\r\n\r\n                                                const submitValues = {\r\n                                                    credentialMethod: values.credentialMethod,\r\n                                                    registeredCredential: {\r\n                                                        _id: response.data._id,\r\n                                                        name: response.data.name,\r\n                                                    },\r\n                                                    submit: true\r\n                                                }\r\n                                                clearCredentialParams();\r\n                                                onSubmit(submitValues, paramsType);\r\n                                                setStatus({ success: true });\r\n                                                setSubmitting(false);\r\n\r\n                                                if (popUpWindow) {\r\n                                                    popUpWindow.close();\r\n                                                }\r\n                                            }\r\n                                        };\r\n                                        window.addEventListener('message', oAuth2Completed, false);\r\n                                        return;\r\n                                    }\r\n\r\n                                    const submitValues = {\r\n                                        credentialMethod: values.credentialMethod,\r\n                                        registeredCredential: {\r\n                                            _id: response.data._id,\r\n                                            name: response.data.name,\r\n                                        },\r\n                                        submit: true\r\n                                    }\r\n                                    clearCredentialParams();\r\n                                    onSubmit(submitValues, paramsType);\r\n                                    setStatus({ success: true });\r\n                                    setSubmitting(false);\r\n                                } else {\r\n                                    throw new Error(response);\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n\r\n                        {initialParams.map((input) => {\r\n\r\n                            if (input.type === 'options') {\r\n\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        options={availableOptions}\r\n                                        value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                            clearCredentialParams();\r\n                                            if (selection) {\r\n                                                getRegisteredCredentialsApi.request(value);\r\n                                                setNodeCredentialName(value);\r\n                                            } else {\r\n                                                setCredentialOptions([]);\r\n                                            }\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        {initialParams.find((prm) => prm.name === 'registeredCredential') && (\r\n                        <FormControl \r\n                            fullWidth\r\n                            sx={{ mb: 1, mt: 1 }}\r\n                        >\r\n                            <Stack direction=\"row\">\r\n                                <Typography variant=\"overline\">Registered Credential</Typography>\r\n                                <Tooltip title=\"Select previously registered credential OR add new credential\" placement=\"right\">\r\n                                    <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                </Tooltip>\r\n                            </Stack>\r\n                            <Autocomplete\r\n                                id=\"registered-credential\"\r\n                                freeSolo\r\n                                options={credentialOptions}\r\n                                value={values.registeredCredential && values.credentialMethod ? values.registeredCredential : \" \"}\r\n                                getOptionLabel={(option) => option.name || \" \"}\r\n                                onChange={async(e, selectedCredential) => {\r\n                                    setFieldValue('registeredCredential', selectedCredential !== null ? selectedCredential : initialValues.registeredCredential);\r\n                                    const overwriteValues = {\r\n                                        ...values,\r\n                                        registeredCredential: selectedCredential\r\n                                    };\r\n                                    onChanged(overwriteValues);\r\n                                    if (selectedCredential) {\r\n                                        if (selectedCredential.name !== ADD_NEW_CREDENTIAL) {\r\n                                            getSpecificCredentialApi.request(selectedCredential._id);\r\n                                        } else {\r\n                                            clearCredentialParamsValues(selectedCredential);\r\n                                        }\r\n                                        getCredentialParamsApi.request(nodeCredentialName);\r\n                                        if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                            const redirectURLResp = await oauth2Api.geOAuth2RedirectURL();\r\n                                            if (redirectURLResp.data) setOAuth2RedirectURL(redirectURLResp.data);\r\n                                        }\r\n                                    }\r\n                                }}\r\n                                onInputChange={(e, value) => {\r\n                                    if (!value) {\r\n                                        clearCredentialParams();\r\n                                        clearCredentialParamsValues('');\r\n                                    }\r\n                                }}\r\n                                onBlur={handleBlur}\r\n                                PopperComponent={StyledPopper}\r\n                                renderInput={(params) => (\r\n                                    <TextField \r\n                                        {...params}\r\n                                        value={values.registeredCredential}\r\n                                        error={Boolean(errors.registeredCredential)}\r\n                                    />\r\n                                )}\r\n                                renderOption={(props, option) => (\r\n                                    <Box component=\"li\" {...props}>\r\n                                        <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                            <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                {option.name} \r\n                                            </Typography>\r\n                                        </div>\r\n                                    </Box>\r\n                                )}\r\n                            />\r\n                            {errors.registeredCredential && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*Registered Credential is required</span>}\r\n                        </FormControl>\r\n                        )}\r\n\r\n                        {values && values.registeredCredential && values.registeredCredential._id && (\r\n                        <Button sx={{ mb: 2 }} size=\"small\" variant=\"outlined\" startIcon={<IconTrash size={15} />} onClick={() => onDeleteCredential(values.registeredCredential._id)}>\r\n                            Delete Credential\r\n                        </Button>)}\r\n\r\n                        {oAuth2RedirectURL &&\r\n                        <div>\r\n                            <Typography variant=\"overline\">OAuth2 Redirect URL</Typography>\r\n                            <Stack direction=\"row\">\r\n                                <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{oAuth2RedirectURL}</Typography>\r\n                                <IconButton title=\"Copy URL\" color=\"primary\" onClick={() => navigator.clipboard.writeText(oAuth2RedirectURL)}>\r\n                                    <IconCopy />\r\n                                </IconButton>\r\n                            </Stack>\r\n                        </div>}\r\n\r\n                        {values.credentialMethod && credentialParams.map((input) => {\r\n\r\n                            if (input.type === 'json') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <PerfectScrollbar \r\n                                        style={{ \r\n                                            border: '1px solid',\r\n                                            borderColor: theme.palette.grey['500'],\r\n                                            borderRadius: '12px', \r\n                                            height: '200px', \r\n                                            maxHeight: '200px', \r\n                                            overflowX: 'hidden',\r\n                                            backgroundColor: 'white'\r\n                                        }}\r\n                                        onScroll={e => e.stopPropagation()}\r\n                                        >\r\n                                        <Editor\r\n                                            placeholder={input.placeholder}\r\n                                            value={values[inputName] || ''}\r\n                                            onBlur={e => {\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: e.target.value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onValueChange={code => {\r\n                                                setFieldValue(inputName, code);\r\n                                            }}\r\n                                            highlight={code => highlight(code, languages.json)}\r\n                                            padding={10}\r\n                                            style={{\r\n                                                fontSize: '0.875rem',\r\n                                                minHeight: '200px',\r\n                                                width: '100%',\r\n                                            }}\r\n                                            textareaClassName=\"editor__textarea\"\r\n                                        />\r\n                                    </PerfectScrollbar>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <OutlinedInput\r\n                                        id={inputName}\r\n                                        type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                        value={values[inputName] || ''}\r\n                                        placeholder={input.placeholder}\r\n                                        name={inputName}\r\n                                        onBlur={e => {\r\n                                            handleBlur(e);\r\n                                            onChanged(values);\r\n                                        }}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Switch\r\n                                        checked={!!values[inputName]}\r\n                                        onChange={(event) => {\r\n                                            setFieldValue(inputName, event.target.checked);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: event.target.checked\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        options={availableOptions}\r\n                                        value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    {values && values.registeredCredential && \r\n                                    (values.registeredCredential.name === ADD_NEW_CREDENTIAL || credentialParams.length) ? \r\n                                    'Save and Continue' : 'Continue'}\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nCredentialInput.propTypes = {\r\n    initialParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object, \r\n    initialValidation: PropTypes.object, \r\n    valueChanged: PropTypes.func, \r\n    paramsChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default CredentialInput;\r\n"],"sourceRoot":""}