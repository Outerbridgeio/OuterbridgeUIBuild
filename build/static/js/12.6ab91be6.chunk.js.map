{"version":3,"sources":["ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","api/wallets.js","views/wallets/WalletDialog.js","assets/images/wallet_empty.svg","views/wallets/index.js"],"names":["WorkflowCard","Card","CardContent","Grid","container","direction","item","justifyContent","Skeleton","variant","width","height","sx","my","CardWrapper","styled","MainCard","backgroundColor","color","theme","darkTextPrimary","overflow","position","boxShadow","cursor","ItemCard","isLoading","data","images","onClick","useTheme","chipSX","padding","activeWorkflowSX","palette","success","dark","light","getNetworkItem","network","networks","find","ntw","name","border","content","Box","p","style","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontSize","fontWeight","mt","mb","flexGrow","secondary","whiteSpace","textOverflow","maxWidth","substring","slice","flowData","executionCount","deployed","Chip","label","marginTop","map","img","objectFit","alt","src","client","get","id","body","post","put","delete","WalletDialog","show","dialogProps","onCancel","onConfirm","portalElement","document","getElementById","dispatch","useDispatch","useNotifier","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","useState","wallet_details","walletDetails","setWalletDetails","walletData","setWalletData","walletParams","setWalletParams","walletValues","setWalletValues","walletValidation","setWalletValidation","walletCredential","setWalletCredential","expanded","setExpanded","isReadyToAdd","setIsReadyToAdd","isEditVariableDialogOpen","setEditVariableDialog","editVariableDialogProps","setEditVariableDialogProps","walletParamsType","getSpecificWalletApi","useApi","walletsApi","getWalletCredentialApi","handleAccordionChange","event","isExpanded","reset","onEditVariableDialogOpen","input","values","arrayItemBody","cancelButtonName","confirmButtonName","hideVariables","addNewWallet","type","createNewWalletBody","walletInfo","providerCredential","JSON","stringify","credentials","privateKey","message","options","key","Date","getTime","Math","random","action","Button","persist","saveWallet","saveWalletBody","deleteWallet","valueChanged","formValues","paramsType","updateWalletData","index","indexOf","length","i","paramType","submit","onSubmit","showHideOptions","displayType","returnOptions","toBeDeleteOptions","option","displayOptions","Object","keys","forEach","path","comparisonValue","groundValue","lodash","Array","isArray","includes","push","filter","opt","initializeFormValuesAndParams","initialValues","params","clonedParams","cloneDeep","handleCredentialParams","privateKeyField","default","validationSchema","optional","Yup","required","setYupValidation","transformWalletResponse","walletResponseData","parse","e","console","error","initializeNodeData","useEffect","walletCredResponseData","request","checkIsReadyToAdd","component","Dialog","open","onClose","DialogTitle","title","DialogContent","balance","Stack","primary","IconButton","navigator","clipboard","writeText","window","networkExplorers","mnemonic","size","ml","startIcon","Accordion","onChange","AccordionSummary","expandIcon","Avatar","typography","smallAvatar","background","AccordionDetails","InputParameters","nodeParamsValidation","setVariableSelectorState","Divider","CredentialInput","initialParams","initialValidation","paramsChanged","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","undefined","originalParam","updateWalletDetails","EditVariableDialog","updateValues","DialogActions","disabled","createPortal","Wallets","setLoading","showDialog","setShowDialog","setDialogProps","getAllWalletsApi","loading","mr","main","spacing","gridSpacing","lg","md","sm","xs","_id","WalletEmptySVG"],"mappings":"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","file":"static/js/12.6ab91be6.chunk.js","sourcesContent":["// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\nexport default WorkflowCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Box, Grid, Chip, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard';\r\n\r\n// Const\r\nimport { networks } from 'store/constant';\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}));\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme();\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    };\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    };\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction=\"column\">\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && (\r\n                                    <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                        <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                    </div>\r\n                                )}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction=\"row\">\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200],\r\n                                                overflow: 'hidden',\r\n                                                whiteSpace: 'nowrap',\r\n                                                textOverflow: 'ellipsis',\r\n                                                maxWidth: 250\r\n                                            }}\r\n                                        >\r\n                                            {`${data.address.substring(0, 8)}...${data.address.slice(-4)}`}\r\n                                        </Typography>\r\n                                    )}\r\n                                    {data.flowData && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200]\r\n                                            }}\r\n                                        >\r\n                                            Total Executions: {data.executionCount || '0'}\r\n                                        </Typography>\r\n                                    )}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label=\"Deployed\" sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip\r\n                                        label={getNetworkItem(data.network).label}\r\n                                        sx={{ ...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            {images && (\r\n                                <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                    {images.map((img) => (\r\n                                        <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                            <img\r\n                                                style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\r\n                                                alt=\"\"\r\n                                                src={img}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default ItemCard;\r\n","import client from './client';\r\n\r\nconst getAllWallets = () => client.get('/wallets');\r\n\r\nconst getSpecificWallet = (id) => client.get(`/wallets/${id}`);\r\n\r\nconst createNewWallet = (body) => client.post(`/wallets`, body); //body: IWallet\r\n\r\nconst updateWallet = (id, body) => client.put(`/wallets/${id}`, body); //body: IWallet\r\n\r\nconst deleteWallet = (id) => client.delete(`/wallets/${id}`);\r\n\r\nconst getWalletCredential = (id) => client.get(`/wallets/credential/${id}`);\r\n\r\nexport default {\r\n    getAllWallets,\r\n    getSpecificWallet,\r\n    createNewWallet,\r\n    updateWallet,\r\n    deleteWallet,\r\n    getWalletCredential\r\n};\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions';\r\n\r\nimport {\r\n    Avatar,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Divider,\r\n    Typography,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Stack,\r\n    IconButton\r\n} from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport * as Yup from 'yup';\r\nimport lodash from 'lodash';\r\n\r\n// project imports\r\nimport InputParameters from 'views/inputs/InputParameters';\r\nimport CredentialInput from 'views/inputs/CredentialInput';\r\nimport EditVariableDialog from 'ui-component/dialog/EditVariableDialog';\r\n\r\n// Icons\r\nimport { IconCheck, IconX, IconArrowUpRightCircle, IconCopy, IconKey } from '@tabler/icons';\r\n\r\n// API\r\nimport walletsApi from 'api/wallets';\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi';\r\n\r\n// Const\r\nimport { wallet_details, networkExplorers, privateKeyField } from 'store/constant';\r\n\r\n// utils\r\nimport { handleCredentialParams, initializeNodeData } from 'utils/genericHelper';\r\nimport useNotifier from 'utils/useNotifier';\r\n\r\nconst WalletDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier();\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args));\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args));\r\n\r\n    const [walletDetails, setWalletDetails] = useState(wallet_details);\r\n    const [walletData, setWalletData] = useState({});\r\n    const [walletParams, setWalletParams] = useState([]);\r\n    const [walletValues, setWalletValues] = useState({});\r\n    const [walletValidation, setWalletValidation] = useState({});\r\n    const [walletCredential, setWalletCredential] = useState({});\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [isReadyToAdd, setIsReadyToAdd] = useState(false);\r\n    const [isEditVariableDialogOpen, setEditVariableDialog] = useState(false);\r\n    const [editVariableDialogProps, setEditVariableDialogProps] = useState({});\r\n    const walletParamsType = ['networks', 'credentials', 'walletInfo'];\r\n\r\n    const getSpecificWalletApi = useApi(walletsApi.getSpecificWallet);\r\n    const getWalletCredentialApi = useApi(walletsApi.getWalletCredential);\r\n\r\n    const handleAccordionChange = (expanded) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? expanded : false);\r\n    };\r\n\r\n    const reset = () => {\r\n        setWalletData({});\r\n        setWalletParams([]);\r\n        setWalletValues({});\r\n        setWalletValidation({});\r\n        setWalletCredential({});\r\n        setIsReadyToAdd(false);\r\n        setExpanded(false);\r\n    };\r\n\r\n    const checkIsReadyToAdd = () => {\r\n        for (let i = 0; i < walletParamsType.length; i += 1) {\r\n            const paramType = walletParamsType[i];\r\n            if (!walletData[paramType] || !walletData[paramType].submit) {\r\n                setIsReadyToAdd(false);\r\n                return;\r\n            }\r\n        }\r\n        setIsReadyToAdd(true);\r\n    };\r\n\r\n    const onEditVariableDialogOpen = (input, values, arrayItemBody) => {\r\n        const dialogProps = {\r\n            input,\r\n            values,\r\n            arrayItemBody,\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            hideVariables: true\r\n        };\r\n\r\n        setEditVariableDialogProps(dialogProps);\r\n        setEditVariableDialog(true);\r\n    };\r\n\r\n    const addNewWallet = async (type) => {\r\n        const createNewWalletBody = {\r\n            network: walletData.networks.network,\r\n            name: walletData.walletInfo.name,\r\n            providerCredential: JSON.stringify(walletData.credentials)\r\n        };\r\n        if (type === 'IMPORT') createNewWalletBody.privateKey = walletData.walletInfo.privateKey;\r\n        const createResp = await walletsApi.createNewWallet(createNewWalletBody);\r\n        if (createResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'New wallet added',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to add new wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    const saveWallet = async () => {\r\n        const saveWalletBody = {\r\n            network: walletData.networks.network,\r\n            name: walletData.walletInfo.name,\r\n            providerCredential: JSON.stringify(walletData.credentials)\r\n        };\r\n        const saveResp = await walletsApi.updateWallet(dialogProps.id, saveWalletBody);\r\n        if (saveResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Wallet saved',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to save wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    const deleteWallet = async () => {\r\n        const deleteResp = await walletsApi.deleteWallet(dialogProps.id);\r\n        if (deleteResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Wallet deleted',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to delete wallet',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateWalletData = {\r\n            ...walletData,\r\n            [paramsType]: formValues\r\n        };\r\n\r\n        const index = walletParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== walletParamsType.length - 1) {\r\n            for (let i = index + 1; i < walletParamsType.length; i += 1) {\r\n                const paramType = walletParamsType[i];\r\n                if (updateWalletData[paramType]) updateWalletData[paramType].submit = null;\r\n            }\r\n        }\r\n\r\n        setWalletData(updateWalletData);\r\n    };\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n        // Because formParams options can be changed due to show hide options,\r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod');\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod');\r\n\r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = walletDetails[paramsType].find((param) => param.name === 'credentialMethod');\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options;\r\n            }\r\n        }\r\n\r\n        const updateWalletDetails = {\r\n            ...walletDetails,\r\n            [paramsType]: formParams\r\n        };\r\n        setWalletDetails(updateWalletDetails);\r\n    };\r\n\r\n    const onSubmit = async (formValues, paramsType) => {\r\n        const updateWalletData = {\r\n            ...walletData,\r\n            [paramsType]: formValues\r\n        };\r\n        setWalletData(updateWalletData);\r\n\r\n        const index = walletParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== walletParamsType.length - 1) {\r\n            setExpanded(walletParamsType[index + 1]);\r\n        } else if (index === walletParamsType.length - 1) {\r\n            setExpanded(false);\r\n        }\r\n    };\r\n\r\n    const showHideOptions = (displayType, options) => {\r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n\r\n        for (let i = 0; i < returnOptions.length; i += 1) {\r\n            const option = returnOptions[i];\r\n            const displayOptions = option[displayType];\r\n\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n                    const comparisonValue = displayOptions[path];\r\n                    const groundValue = lodash.get(walletData, path, '');\r\n\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    };\r\n\r\n    const displayOptions = (params) => {\r\n        let clonedParams = params;\r\n\r\n        for (let i = 0; i < clonedParams.length; i += 1) {\r\n            const input = clonedParams[i];\r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', input.options);\r\n                input.options = showHideOptions('hide', input.options);\r\n            }\r\n        }\r\n\r\n        return clonedParams;\r\n    };\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {};\r\n        for (let i = 0; i < params.length; i += 1) {\r\n            const input = params[i];\r\n            if (input.type === 'string' && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if (input.type === 'number' && !input.optional) {\r\n                validationSchema[input.name] = Yup.number().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if ((input.type === 'options' || input.type === 'asyncOptions') && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            }\r\n        }\r\n        return validationSchema;\r\n    };\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n        const initialValues = {};\r\n        let walletParams = displayOptions(lodash.cloneDeep(walletDetails[paramsType] || []));\r\n        walletParams = handleCredentialParams(walletParams, paramsType, walletDetails[paramsType], walletData);\r\n\r\n        if (dialogProps.type === 'IMPORT' && paramsType === 'walletInfo') {\r\n            walletParams.push(...privateKeyField);\r\n        }\r\n\r\n        for (let i = 0; i < walletParams.length; i += 1) {\r\n            const input = walletParams[i];\r\n\r\n            // Load from walletData values\r\n            if (paramsType in walletData && input.name in walletData[paramsType]) {\r\n                initialValues[input.name] = walletData[paramsType][input.name];\r\n\r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name]);\r\n                    if (!optionVal) delete initialValues[input.name];\r\n                }\r\n            } else {\r\n                // Load from walletParams default values\r\n                initialValues[input.name] = input.default || '';\r\n            }\r\n        }\r\n\r\n        initialValues.submit = null;\r\n\r\n        setWalletValues(initialValues);\r\n        setWalletValidation(setYupValidation(walletParams));\r\n        setWalletParams(walletParams);\r\n    };\r\n\r\n    const transformWalletResponse = (walletResponseData, walletDetails) => {\r\n        const walletData = {\r\n            networks: {},\r\n            credentials: {},\r\n            walletInfo: {}\r\n        };\r\n\r\n        if (walletResponseData) {\r\n            walletData.networks = { network: walletResponseData.network, submit: true };\r\n            walletData.walletInfo = { ...walletResponseData, submit: true };\r\n            if (walletResponseData.providerCredential) {\r\n                try {\r\n                    walletData.credentials = JSON.parse(walletResponseData.providerCredential);\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n            }\r\n        } else {\r\n            walletData.networks = initializeNodeData(walletDetails.networks);\r\n            walletData.credentials = initializeNodeData(walletDetails.credentials);\r\n            walletData.walletInfo = initializeNodeData(walletDetails.walletInfo);\r\n        }\r\n        return walletData;\r\n    };\r\n\r\n    // Get Wallet Details from API\r\n    useEffect(() => {\r\n        if (getSpecificWalletApi.data) {\r\n            const walletResponseData = getSpecificWalletApi.data;\r\n            setWalletData(transformWalletResponse(walletResponseData));\r\n            setExpanded('networks');\r\n        }\r\n    }, [getSpecificWalletApi.data]);\r\n\r\n    // Get Wallet Credential from API\r\n    useEffect(() => {\r\n        if (getWalletCredentialApi.data) {\r\n            const walletCredResponseData = getWalletCredentialApi.data;\r\n            setWalletCredential(walletCredResponseData);\r\n        }\r\n    }, [getWalletCredentialApi.data]);\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (show && (dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT')) {\r\n            reset();\r\n            setWalletData(transformWalletResponse(null, walletDetails));\r\n            setExpanded('networks');\r\n        } else if (show && dialogProps.type === 'EDIT' && dialogProps.id) {\r\n            reset();\r\n            getSpecificWalletApi.request(dialogProps.id);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show, dialogProps]);\r\n\r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (walletDetails && walletData && expanded) {\r\n            initializeFormValuesAndParams(expanded);\r\n            checkIsReadyToAdd();\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [walletDetails, walletData, expanded]);\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} onClose={onCancel} aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {walletData && walletData.walletInfo && walletData.walletInfo.address && dialogProps.type === 'EDIT' && (\r\n                    <Box sx={{ p: 2 }}>\r\n                        <Typography sx={{ p: 1 }} variant=\"overline\">\r\n                            BALANCE\r\n                        </Typography>\r\n                        <Typography sx={{ p: 1, mb: 1 }} variant=\"h3\">\r\n                            {walletData.walletInfo.balance}\r\n                        </Typography>\r\n                        <Typography sx={{ p: 1 }} variant=\"overline\">\r\n                            ADDRESS\r\n                        </Typography>\r\n                        <Stack direction=\"row\" sx={{ p: 1, mb: 1 }}>\r\n                            <Typography\r\n                                sx={{\r\n                                    p: 1,\r\n                                    borderRadius: 10,\r\n                                    backgroundColor: theme.palette.primary.light,\r\n                                    width: 'max-content',\r\n                                    height: 'max-content'\r\n                                }}\r\n                                variant=\"h5\"\r\n                            >\r\n                                {walletData.walletInfo.address}\r\n                            </Typography>\r\n                            <IconButton\r\n                                title=\"Copy Address\"\r\n                                color=\"primary\"\r\n                                onClick={() => navigator.clipboard.writeText(walletData.walletInfo.address)}\r\n                            >\r\n                                <IconCopy />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                title=\"Open in Block Explorer\"\r\n                                color=\"primary\"\r\n                                onClick={() =>\r\n                                    window.open(\r\n                                        `${networkExplorers[walletData.networks.network]}/address/${walletData.walletInfo.address}`,\r\n                                        '_blank'\r\n                                    )\r\n                                }\r\n                            >\r\n                                <IconArrowUpRightCircle />\r\n                            </IconButton>\r\n                        </Stack>\r\n                        {walletCredential && walletCredential.privateKey && (\r\n                            <>\r\n                                <Typography sx={{ p: 1 }} variant=\"overline\">\r\n                                    PRIVATE KEY\r\n                                </Typography>\r\n                                <Stack direction=\"row\" sx={{ p: 1, mb: 1 }}>\r\n                                    <Typography\r\n                                        sx={{\r\n                                            p: 1,\r\n                                            borderRadius: 10,\r\n                                            backgroundColor: theme.palette.primary.light,\r\n                                            width: 'max-content',\r\n                                            height: 'max-content'\r\n                                        }}\r\n                                        variant=\"h5\"\r\n                                    >\r\n                                        {walletCredential.privateKey}\r\n                                    </Typography>\r\n                                    <IconButton\r\n                                        title=\"Copy Key\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => navigator.clipboard.writeText(walletCredential.privateKey)}\r\n                                    >\r\n                                        <IconCopy />\r\n                                    </IconButton>\r\n                                </Stack>\r\n                            </>\r\n                        )}\r\n                        {walletCredential && walletCredential.mnemonic && (\r\n                            <>\r\n                                <Typography sx={{ p: 1 }} variant=\"overline\">\r\n                                    mnemonic\r\n                                </Typography>\r\n                                <Stack direction=\"row\" sx={{ p: 1, mb: 1 }}>\r\n                                    <Typography\r\n                                        sx={{\r\n                                            p: 1,\r\n                                            borderRadius: 10,\r\n                                            backgroundColor: theme.palette.primary.light,\r\n                                            width: 'max-content',\r\n                                            height: 'max-content'\r\n                                        }}\r\n                                        variant=\"h5\"\r\n                                    >\r\n                                        {walletCredential.mnemonic}\r\n                                    </Typography>\r\n                                    <IconButton\r\n                                        title=\"Copy Mnemonic\"\r\n                                        color=\"primary\"\r\n                                        onClick={() => navigator.clipboard.writeText(walletCredential.mnemonic)}\r\n                                    >\r\n                                        <IconCopy />\r\n                                    </IconButton>\r\n                                </Stack>\r\n                            </>\r\n                        )}\r\n                        {!Object.keys(walletCredential).length && (\r\n                            <Button\r\n                                size=\"small\"\r\n                                sx={{ ml: 1 }}\r\n                                variant=\"contained\"\r\n                                startIcon={<IconKey />}\r\n                                onClick={() => getWalletCredentialApi.request(dialogProps.id)}\r\n                            >\r\n                                View PrivateKey and Mnemonic\r\n                            </Button>\r\n                        )}\r\n                    </Box>\r\n                )}\r\n\r\n                {/* networks */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"networks-content\" id=\"networks-header\">\r\n                            <Typography variant=\"h4\">Networks</Typography>\r\n                            {walletData && walletData.networks && walletData.networks.submit && (\r\n                                <Avatar\r\n                                    variant=\"rounded\"\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters\r\n                                paramsType=\"networks\"\r\n                                params={walletParams}\r\n                                initialValues={walletValues}\r\n                                nodeParamsValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* credentials */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'credentials'} onChange={handleAccordionChange('credentials')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"credentials-content\" id=\"credentials-header\">\r\n                            <Typography variant=\"h4\">Credentials</Typography>\r\n                            {walletData && walletData.credentials && walletData.credentials.submit && (\r\n                                <Avatar\r\n                                    variant=\"rounded\"\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <CredentialInput\r\n                                paramsType=\"credentials\"\r\n                                initialParams={walletParams}\r\n                                initialValues={walletValues}\r\n                                initialValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                paramsChanged={paramsChanged}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* walletInfo */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'walletInfo'} onChange={handleAccordionChange('walletInfo')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"walletInfo-content\" id=\"walletInfo-header\">\r\n                            <Typography variant=\"h4\">Wallet Details</Typography>\r\n                            {walletData && walletData.walletInfo && walletData.walletInfo.submit && (\r\n                                <Avatar\r\n                                    variant=\"rounded\"\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters\r\n                                paramsType=\"walletInfo\"\r\n                                params={walletParams}\r\n                                initialValues={walletValues}\r\n                                nodeParamsValidation={walletValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n                <EditVariableDialog\r\n                    key={JSON.stringify(editVariableDialogProps)}\r\n                    show={isEditVariableDialogOpen}\r\n                    dialogProps={editVariableDialogProps}\r\n                    onCancel={() => setEditVariableDialog(false)}\r\n                    onConfirm={(updateValues) => {\r\n                        valueChanged(updateValues, expanded);\r\n                        setEditVariableDialog(false);\r\n                    }}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                {dialogProps.type === 'EDIT' && (\r\n                    <Button variant=\"contained\" color=\"error\" onClick={() => deleteWallet()}>\r\n                        Delete\r\n                    </Button>\r\n                )}\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={!isReadyToAdd}\r\n                    onClick={() =>\r\n                        dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT' ? addNewWallet(dialogProps.type) : saveWallet()\r\n                    }\r\n                >\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n};\r\n\r\nWalletDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n};\r\n\r\nexport default WalletDialog;\r\n","export default __webpack_public_path__ + \"static/media/wallet_empty.f647428f.svg\";","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ItemCard from 'ui-component/cards/ItemCard';\r\nimport WalletDialog from './WalletDialog';\r\nimport WalletEmptySVG from 'assets/images/wallet_empty.svg';\r\n\r\n// const\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// API\r\nimport walletsApi from 'api/wallets';\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi';\r\n\r\n// ==============================|| WALLETS ||============================== //\r\n\r\nconst Wallets = () => {\r\n    const theme = useTheme();\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [showDialog, setShowDialog] = useState(false);\r\n    const [dialogProps, setDialogProps] = useState({});\r\n\r\n    const getAllWalletsApi = useApi(walletsApi.getAllWallets);\r\n\r\n    const addNew = () => {\r\n        const dialogProp = {\r\n            title: 'Add New Wallet',\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add'\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const importNew = () => {\r\n        const dialogProp = {\r\n            title: 'Import Wallet',\r\n            type: 'IMPORT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'IMPORT'\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const edit = (id) => {\r\n        const dialogProp = {\r\n            title: 'Edit Wallet',\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            id\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const onConfirm = () => {\r\n        setShowDialog(false);\r\n        getAllWalletsApi.request();\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllWalletsApi.request();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllWalletsApi.loading);\r\n    }, [getAllWalletsApi.loading]);\r\n\r\n    return (\r\n        <>\r\n            <MainCard>\r\n                <Stack flexDirection=\"row\">\r\n                    <h1>Wallets</h1>\r\n                    <Grid sx={{ mb: 1.25 }} container direction=\"row\">\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n                        <Grid item>\r\n                            <Button variant=\"contained\" sx={{ color: 'white', mr: 2 }} onClick={addNew}>\r\n                                Add New\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ color: 'white', backgroundColor: theme.palette.secondary.main }}\r\n                                onClick={importNew}\r\n                            >\r\n                                Import Wallet\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Stack>\r\n                <Grid container spacing={gridSpacing}>\r\n                    {!isLoading &&\r\n                        getAllWalletsApi.data &&\r\n                        getAllWalletsApi.data.map((data, index) => (\r\n                            <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                                <ItemCard isLoading={isLoading} onClick={() => edit(data._id)} data={data} />\r\n                            </Grid>\r\n                        ))}\r\n                </Grid>\r\n                {!isLoading && (!getAllWalletsApi.data || getAllWalletsApi.data.length === 0) && (\r\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection=\"column\">\r\n                        <Box sx={{ p: 2, height: 'auto' }}>\r\n                            <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={WalletEmptySVG} alt=\"WalletEmptySVG\" />\r\n                        </Box>\r\n                        <div>No Wallets Yet</div>\r\n                    </Stack>\r\n                )}\r\n            </MainCard>\r\n            <WalletDialog\r\n                show={showDialog}\r\n                dialogProps={dialogProps}\r\n                onCancel={() => setShowDialog(false)}\r\n                onConfirm={onConfirm}\r\n            ></WalletDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Wallets;\r\n"],"sourceRoot":""}