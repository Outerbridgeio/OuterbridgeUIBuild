{"version":3,"sources":["utils/genericHelper.js","ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","ui-component/TooltipWithParser.js","ui-component/extended/AnimateButton.js","ui-component/dialog/ExpandDataDialog.js","hooks/useScriptRef.js","utils/useNotifier.js","ui-component/dialog/EditVariableDialog.js","views/inputs/ArrayInputParameters.js","views/inputs/OptionParamsResponse.js","views/inputs/AsyncSelectWrapper.js","views/inputs/InputParameters.js","api/credential.js","api/oauth2.js","views/inputs/CredentialInput.js"],"names":["numberOrExpressionRegex","getAvailableNodeIdsForVariable","nodes","edges","targetNodeId","reverse","graph","nodeDependencies","i","length","nodeId","id","source","target","Object","prototype","hasOwnProperty","call","push","constructNodeDirectedGraph","exploreNodes","nodeQueue","exploredNodes","shift","parentNodeIds","inputEdges","filter","edg","targetHandle","includes","j","neighbourNodeIds","neighNodeId","getAllConnectedNodesFromTarget","setPath","Set","delete","generateWebhookEndpoint","characters","Array","from","map","charAt","Math","floor","random","join","getUniqueNodeId","nodeData","totalSameNodes","data","name","checkIfNodeLabelUnique","nodeLabel","label","initializeNodeData","nodeParams","initialValues","input","default","type","newObj","array","submit","addAnchors","newNodeId","incoming","outgoing","inputAnchors","newInput","outputAnchors","newOutput","getUniqueNodeLabel","actions","credentials","networks","inputParameters","getEdgeLabelName","sourceSplit","split","checkMultipleTriggers","node","convertDateStringToDateObject","dateString","undefined","date","moment","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","splitDataURI","getFolderName","base64ArrayStr","base64Array","JSON","parse","filenames","filename","e","generateExportFlowData","flowData","selected","newNodeData","wallet","credentialMethod","isHideRegisteredCredential","params","paramsType","nodeFlowData","clonedParams","selectedCredentialMethodOption","options","find","opt","hideRegisteredCredential","handleCredentialParams","reorganizedParams","nPrm","lodash","cloneDeep","prm","copyToClipboard","src","isArray","navigator","clipboard","writeText","stringify","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","setData","error","setError","loading","setLoading","request","result","TooltipWithParser","parser","placement","style","height","width","AnimateButton","offset1","offset2","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","ExpandDataDialog","show","dialogProps","onCancel","onCopyClick","enableClipboard","portalElement","document","getElementById","component","open","fullWidth","maxWidth","onClose","fontSize","createPortal","useScriptRef","scripted","useRef","useEffect","current","displayed","useNotifier","dispatch","useDispatch","notifications","useSelector","state","notifier","useSnackbar","enqueueSnackbar","closeSnackbar","React","forEach","key","message","dismissed","event","reason","myKey","onExited","removeSnackbar","EditVariableDialog","onConfirm","inputValue","setInputValue","setInput","expanded","setExpanded","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","copiedVariableBody","setCopiedVariableBody","languages","js","languageType","setLanguageType","onMouseUp","selectionEnd","value","cursorPosition","textBeforeCursorPosition","substring","textAfterCursorPosition","onClipboardCopy","namespaces","namespace","returnVariablePath","test","endsWith","values","inputValues","arrayItemBody","arrayItemValues","arrayItemInput","toString","json","display","flexDirection","flex","mb","ml","grey","borderRadius","maxHeight","overflowX","backgroundColor","onValueChange","code","placeholder","highlight","onBlur","padding","minHeight","textareaClassName","hideVariables","availableNodesForVariable","marginLeft","pl","pr","py","breakpoints","down","top","my","index","onChange","isExpanded","expandIcon","position","collapsed","outputResponses","output","size","right","color","onClick","dialogProp","onExpandDialogClicked","cancelButtonName","updateArrayValues","updateInitialValues","arrayItemIndex","updateValues","onSave","confirmButtonName","StyledPopper","styled","Popper","autocompleteClasses","listbox","boxSizing","margin","DateCustomInput","paddingTop","paddingBottom","paddingRight","paddingLeft","cursor","fontWeight","textAlign","opacity","ArrayInputParameters","arrayParams","arrayGroupName","errors","onArrayInputChange","onArrayInputBlur","onArrayItemRemove","onArrayItemMouseUp","onEditVariableDialogOpen","customization","processUpdateValues","inputName","onInputChange","onInputBlur","valueIndex","path","_","Box","p","light","Fab","main","splice","onRemoveClick","paramIndex","FormControl","mt","Boolean","Stack","Typography","description","marginBottom","Button","startIcon","marginRight","hidden","files","file","reader","FileReader","onload","evt","readAsDataURL","handleFileUpload","directory","webkitdirectory","readFile","fileIndex","webkitRelativePath","handleFolderUpload","onScroll","stopPropagation","customInput","showTimeSelect","isClearable","timeInputLabel","dateFormat","toISOString","OutlinedInput","Switch","checked","inputProps","availableOptions","Autocomplete","freeSolo","onOpen","option","selection","PopperComponent","renderInput","TextField","renderOption","props","OptionParamsResponse","getSelectedValue","getSelectedOptionInputParams","selectedOption","getSelectedOptionExampleParams","exampleParameters","getSelectedOptionExampleResponse","exampleResponse","dangerouslySetInnerHTML","__html","AsyncSelectWrapper","loadMethod","loadFromDbCollections","onMenuOpen","onSetError","customStyles","provided","isSelected","control","singleValue","menuList","asyncOptions","setAsyncOptions","styles","formatOptionLabel","context","getOptionLabel","getOptionValue","loadOptions","callback","post","then","response","returnOptions","toBeDeleteOptions","displayTypes","displayType","displayOptions","keys","comparisonValue","groundValue","get","RegExp","showHideOptions","toLowerCase","defaultOptions","bottom","fontStyle","replace","formatErrorMessage","InputParameters","nodeParamsValidation","valueChanged","onSubmit","setVariableSelectorState","scriptedRef","onChanged","findMatchingOptions","enableReinitialize","validationSchema","Yup","shape","setErrors","setStatus","setSubmitting","success","err","console","handleBlur","handleChange","handleSubmit","setFieldValue","isSubmitting","noValidate","overwriteValues","multiline","rows","maxRows","minRows","arrayParamItems","templateArray","arrayItemsValues","variableState","body","disableElevation","arrayItems","arrayName","onAddArrayItem","disabled","nodeCredentialName","client","isEncrypted","credentialBody","put","credentialId","ADD_NEW_CREDENTIAL","CredentialInput","initialParams","initialValidation","paramsChanged","credentialValidation","setCredentialValidation","credentialValues","setCredentialValues","setNodeCredentialName","credentialParams","setCredentialParams","credentialOptions","setCredentialOptions","oAuth2RedirectURL","setOAuth2RedirectURL","getCredentialParamsApi","useApi","credentialApi","getRegisteredCredentialsApi","getSpecificCredentialApi","getCredentialRequestBody","Error","credentialData","credParamName","clearCredentialParams","updateParams","item","every","paramItem","clearCredentialParamsValues","registeredCredential","onDeleteCredential","openOAuth2PopUpWindow","oAuth2PopupURL","left","window","screenX","outerWidth","screenY","outerHeight","url","_id","validationKey","updateValidation","required","updateYupValidation","newCredentialParams","unshift","isAddNewCredential","oauth2Api","popUpWindow","oAuth2Completed","removeEventListener","submitValues","close","addEventListener","selectedCredential","redirectURLResp","IconButton"],"mappings":"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","file":"static/js/3.6ed87917.chunk.js","sourcesContent":["import lodash from 'lodash'\r\nimport moment from 'moment'\r\n\r\nexport const numberOrExpressionRegex = /^(\\d+\\.?\\d*|{{.*}})$/ //return true if string consists only numbers OR expression {{}}\r\n\r\nexport const constructNodeDirectedGraph = (nodes, edges, reverse = false) => {\r\n    const graph = {}\r\n    const nodeDependencies = {}\r\n\r\n    // Initialize node dependencies and graph\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const nodeId = nodes[i].id\r\n        nodeDependencies[nodeId] = 0\r\n        graph[nodeId] = []\r\n    }\r\n\r\n    for (let i = 0; i < edges.length; i += 1) {\r\n        const source = edges[i].source\r\n        const target = edges[i].target\r\n\r\n        if (Object.prototype.hasOwnProperty.call(graph, source)) {\r\n            graph[source].push(target)\r\n        } else {\r\n            graph[source] = [target]\r\n        }\r\n\r\n        if (reverse) {\r\n            if (Object.prototype.hasOwnProperty.call(graph, target)) {\r\n                graph[target].push(source)\r\n            } else {\r\n                graph[target] = [source]\r\n            }\r\n        }\r\n\r\n        nodeDependencies[target] += 1\r\n    }\r\n\r\n    return { graph, nodeDependencies }\r\n}\r\n\r\n// Find starting node with 0 dependencies\r\nexport const findStartingNodeIds = (nodes, nodeDependencies) => {\r\n    const startingNodeIds = []\r\n    Object.keys(nodeDependencies).forEach((nodeId) => {\r\n        if (nodeDependencies[nodeId] === 0) {\r\n            const node = nodes.find((nd) => nd.id === nodeId)\r\n            if (node && node.data && node.data.type && (node.data.type === 'trigger' || node.data.type === 'webhook')) {\r\n                startingNodeIds.push(nodeId)\r\n            }\r\n        }\r\n    })\r\n\r\n    return startingNodeIds\r\n}\r\n\r\n// Backtrack function to find all paths from start to target node\r\nexport const getAllPathsFromStartToTarget = (startNodeId, targetNodeId, graph) => {\r\n    const paths = []\r\n    const visitedNodeIds = new Set()\r\n\r\n    const DFS = (currentNodeId, endNodeId, tempPath) => {\r\n        if (currentNodeId === endNodeId) {\r\n            paths.push(lodash.cloneDeep(tempPath))\r\n            return\r\n        }\r\n\r\n        const neighbourNodeIds = graph[currentNodeId]\r\n        visitedNodeIds.add(currentNodeId)\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i += 1) {\r\n            const neighNodeId = neighbourNodeIds[i]\r\n            if (!visitedNodeIds.has(neighNodeId)) {\r\n                tempPath.push(neighNodeId)\r\n                DFS(neighNodeId, endNodeId, tempPath)\r\n                tempPath.pop()\r\n            }\r\n        }\r\n        visitedNodeIds.delete(currentNodeId)\r\n    }\r\n\r\n    DFS(startNodeId, targetNodeId, [startNodeId])\r\n    return paths\r\n}\r\n\r\n// Breadth First Search to get all connected parent nodes from target\r\nexport const getAllConnectedNodesFromTarget = (targetNodeId, edges, graph) => {\r\n    const nodeQueue = []\r\n    const exploredNodes = []\r\n\r\n    nodeQueue.push(targetNodeId)\r\n    exploredNodes.push(targetNodeId)\r\n\r\n    while (nodeQueue.length) {\r\n        const nodeId = nodeQueue.shift() || ''\r\n        const parentNodeIds = []\r\n\r\n        const inputEdges = edges.filter((edg) => edg.target === nodeId && edg.targetHandle.includes('-input-'))\r\n        if (inputEdges && inputEdges.length) {\r\n            for (let j = 0; j < inputEdges.length; j += 1) {\r\n                parentNodeIds.push(inputEdges[j].source)\r\n            }\r\n        }\r\n\r\n        const neighbourNodeIds = graph[nodeId]\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i += 1) {\r\n            const neighNodeId = neighbourNodeIds[i]\r\n            if (parentNodeIds.includes(neighNodeId)) {\r\n                if (!exploredNodes.includes(neighNodeId)) {\r\n                    exploredNodes.push(neighNodeId)\r\n                    nodeQueue.push(neighNodeId)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return exploredNodes\r\n}\r\n\r\nexport const getAvailableNodeIdsForVariable = (nodes, edges, targetNodeId) => {\r\n    const { graph } = constructNodeDirectedGraph(nodes, edges, true)\r\n    const exploreNodes = getAllConnectedNodesFromTarget(targetNodeId, edges, graph)\r\n    const setPath = new Set(exploreNodes)\r\n    setPath.delete(targetNodeId)\r\n    return [...setPath]\r\n}\r\n\r\nexport const generateWebhookEndpoint = () => {\r\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789'\r\n    const webhookEndpoint = Array.from({ length: 15 })\r\n        .map(() => {\r\n            return characters.charAt(Math.floor(Math.random() * characters.length))\r\n        })\r\n        .join('')\r\n    return webhookEndpoint\r\n}\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`\r\n        }\r\n    }\r\n    return nodeId\r\n}\r\n\r\nconst getUniqueNodeLabel = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1\r\n        }\r\n    }\r\n\r\n    // Get unique label\r\n    let nodeLabel = `${nodeData.label}_${totalSameNodes}`\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.label === nodeLabel) {\r\n            totalSameNodes += 1\r\n            nodeLabel = `${nodeData.label}_${totalSameNodes}`\r\n        }\r\n    }\r\n    return totalSameNodes === 0 ? nodeData.label : nodeLabel\r\n}\r\n\r\nexport const checkIfNodeLabelUnique = (nodeLabel, nodes) => {\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.label === nodeLabel) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nexport const initializeNodeData = (nodeParams) => {\r\n    const initialValues = {}\r\n\r\n    for (let i = 0; i < nodeParams.length; i += 1) {\r\n        const input = nodeParams[i]\r\n\r\n        // Load from nodeParams default values\r\n        initialValues[input.name] = input.default || ''\r\n\r\n        // Special case for array, always initialize the item if default is not set\r\n        if (input.type === 'array' && !input.default) {\r\n            const newObj = {}\r\n            for (let j = 0; j < input.array.length; j += 1) {\r\n                newObj[input.array[j].name] = input.array[j].default || ''\r\n            }\r\n            initialValues[input.name] = [newObj]\r\n        }\r\n    }\r\n\r\n    initialValues.submit = null\r\n\r\n    return initialValues\r\n}\r\n\r\nexport const addAnchors = (nodeData, nodes, newNodeId) => {\r\n    const incoming = nodeData.incoming || 0\r\n    const outgoing = nodeData.outgoing || 0\r\n\r\n    const inputAnchors = []\r\n    for (let i = 0; i < incoming; i += 1) {\r\n        const newInput = {\r\n            id: `${newNodeId}-input-${i}`\r\n        }\r\n        inputAnchors.push(newInput)\r\n    }\r\n\r\n    const outputAnchors = []\r\n    for (let i = 0; i < outgoing; i += 1) {\r\n        const newOutput = {\r\n            id: `${newNodeId}-output-${i}`\r\n        }\r\n        outputAnchors.push(newOutput)\r\n    }\r\n\r\n    nodeData.inputAnchors = inputAnchors\r\n    nodeData.outputAnchors = outputAnchors\r\n    nodeData.label = getUniqueNodeLabel(nodeData, nodes)\r\n\r\n    if (nodeData.actions) nodeData.actions = initializeNodeData(nodeData.actions)\r\n    if (nodeData.credentials) nodeData.credentials = initializeNodeData(nodeData.credentials)\r\n    if (nodeData.networks) nodeData.networks = initializeNodeData(nodeData.networks)\r\n    if (nodeData.inputParameters) nodeData.inputParameters = initializeNodeData(nodeData.inputParameters)\r\n\r\n    return nodeData\r\n}\r\n\r\nexport const getEdgeLabelName = (source) => {\r\n    const sourceSplit = source.split('-')\r\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\r\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length - 1]\r\n        return outputAnchorsIndex === '0' ? 'true' : 'false'\r\n    }\r\n    return ''\r\n}\r\n\r\nexport const checkMultipleTriggers = (nodes) => {\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i]\r\n        if (node.data.type === 'webhook' || node.data.type === 'trigger') {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined\r\n\r\n    const date = moment(dateString)\r\n    if (!date.isValid) return undefined\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes())\r\n}\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    const splitDataURI = fileBase64.split(',')\r\n    const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\r\n    return filename\r\n}\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr)\r\n        const filenames = []\r\n        for (let i = 0; i < base64Array.length; i += 1) {\r\n            const fileBase64 = base64Array[i]\r\n            const splitDataURI = fileBase64.split(',')\r\n            const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\r\n            filenames.push(filename)\r\n        }\r\n        return filenames.length ? filenames.join(',') : ''\r\n    } catch (e) {\r\n        return ''\r\n    }\r\n}\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes\r\n    const edges = flowData.edges\r\n\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        nodes[i].selected = false\r\n        const node = nodes[i]\r\n        const newNodeData = {\r\n            label: node.data.label,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            inputAnchors: node.data.inputAnchors,\r\n            outputAnchors: node.data.outputAnchors,\r\n            selected: false\r\n        }\r\n        if (node.data.inputParameters) {\r\n            newNodeData.inputParameters = { ...node.data.inputParameters, submit: null }\r\n            if (node.data.inputParameters.wallet) delete newNodeData.inputParameters.wallet\r\n        }\r\n        if (node.data.actions) {\r\n            newNodeData.actions = { ...node.data.actions, submit: null }\r\n            if (node.data.actions.wallet) delete newNodeData.actions.wallet\r\n        }\r\n        if (node.data.networks) {\r\n            newNodeData.networks = { ...node.data.networks, submit: null }\r\n            if (node.data.networks.wallet) delete newNodeData.networks.wallet\r\n        }\r\n        if (node.data.credentials && node.data.credentials.credentialMethod) {\r\n            newNodeData.credentials = { credentialMethod: node.data.credentials.credentialMethod, submit: null }\r\n            if (node.data.credentials.wallet) delete newNodeData.credentials.wallet\r\n        }\r\n\r\n        nodes[i].data = newNodeData\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    }\r\n    return exportJson\r\n}\r\n\r\nconst isHideRegisteredCredential = (params, paramsType, nodeFlowData) => {\r\n    if (!nodeFlowData[paramsType] || !nodeFlowData[paramsType]['credentialMethod']) return undefined\r\n    let clonedParams = params\r\n\r\n    for (let i = 0; i < clonedParams.length; i += 1) {\r\n        const input = clonedParams[i]\r\n        if (input.type === 'options') {\r\n            const selectedCredentialMethodOption = input.options.find((opt) => opt.name === nodeFlowData[paramsType]['credentialMethod'])\r\n            if (\r\n                selectedCredentialMethodOption &&\r\n                selectedCredentialMethodOption !== undefined &&\r\n                selectedCredentialMethodOption.hideRegisteredCredential\r\n            )\r\n                return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nexport const handleCredentialParams = (nodeParams, paramsType, reorganizedParams, nodeFlowData) => {\r\n    if (\r\n        paramsType === 'credentials' &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') === undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        !isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Add hard-coded registeredCredential params\r\n        nodeParams.push({\r\n            name: 'registeredCredential'\r\n        })\r\n    } else if (\r\n        paramsType === 'credentials' &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') !== undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential')\r\n    } else if (paramsType === 'credentials' && nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') === undefined) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential')\r\n    }\r\n    return nodeParams\r\n}\r\n\r\nexport const copyToClipboard = (e) => {\r\n    const src = e.src\r\n    if (Array.isArray(src) || typeof src === 'object') {\r\n        navigator.clipboard.writeText(JSON.stringify(src, null, '  '))\r\n    } else {\r\n        navigator.clipboard.writeText(src)\r\n    }\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material'\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n}\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(function MainCard(\r\n    {\r\n        border = true,\r\n        boxShadow,\r\n        children,\r\n        content = true,\r\n        contentClass = '',\r\n        contentSX = {},\r\n        darkTitle,\r\n        secondary,\r\n        shadow,\r\n        sx = {},\r\n        title,\r\n        ...others\r\n    },\r\n    ref\r\n) {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Card\r\n            ref={ref}\r\n            {...others}\r\n            sx={{\r\n                border: border ? '1px solid' : 'none',\r\n                borderColor: theme.palette.primary[200] + 75,\r\n                ':hover': {\r\n                    boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                },\r\n                ...sx\r\n            }}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={headerSX} title={<Typography variant='h3'>{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && <Divider />}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={contentSX} className={contentClass}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    )\r\n})\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n}\r\n\r\nexport default MainCard\r\n","import axios from 'axios'\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        'Content-type': 'application/json'\r\n    }\r\n})\r\n\r\nexport default apiClient\r\n","import { useState } from 'react'\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true)\r\n        try {\r\n            const result = await apiFunc(...args)\r\n            setData(result.data)\r\n        } catch (err) {\r\n            setError(err || 'Unexpected Error!')\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    }\r\n}\r\n","import { Info } from '@mui/icons-material'\r\nimport { IconButton, Tooltip } from '@mui/material'\r\nimport parser from 'html-react-parser'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const TooltipWithParser = ({ title }) => {\r\n    return (\r\n        <Tooltip title={parser(title)} placement='right'>\r\n            <IconButton>\r\n                <Info style={{ height: 18, width: 18 }} />\r\n            </IconButton>\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nTooltipWithParser.propTypes = {\r\n    title: PropTypes.node\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion'\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(function AnimateButton({ children, type, direction, offset, scale }, ref) {\r\n    let offset1\r\n    let offset2\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset\r\n            offset2 = 0\r\n            break\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0\r\n            offset2 = offset\r\n            break\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2)\r\n    const [y, cycleY] = useCycle(offset1, offset2)\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            )\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                )\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            )\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                }\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            )\r\n    }\r\n})\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n}\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n}\r\n\r\nexport default AnimateButton\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\r\nimport ReactJson from 'react-json-view'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper'\r\n\r\nconst ExpandDataDialog = ({ show, dialogProps, onCancel, onCopyClick, enableClipboard }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='md'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {!enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={(e) => copyToClipboard(e)} />}\r\n                {enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={(e) => onCopyClick(e, dialogProps.node)} />}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nExpandDataDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onCopyClick: PropTypes.func,\r\n    enableClipboard: PropTypes.bool\r\n}\r\n\r\nexport default ExpandDataDialog\r\n","import { useEffect, useRef } from 'react'\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true)\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false\r\n        },\r\n        []\r\n    )\r\n\r\n    return scripted\r\n}\r\n\r\nexport default useScriptRef\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useSnackbar } from 'notistack'\r\nimport { removeSnackbar } from 'store/actions'\r\n\r\nlet displayed = []\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch()\r\n    const notifier = useSelector((state) => state.notifier)\r\n    const { notifications } = notifier\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar()\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id]\r\n    }\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter((key) => id !== key)]\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key)\r\n                return\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey)\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey))\r\n                    removeDisplayed(myKey)\r\n                }\r\n            })\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key)\r\n        })\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch])\r\n}\r\n\r\nexport default useNotifier\r\n","import { createPortal } from 'react-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    IconButton,\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails\r\n} from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport ReactJson from 'react-json-view'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { IconArrowsMaximize } from '@tabler/icons'\r\nimport ExpandDataDialog from './ExpandDataDialog'\r\nimport Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport 'prismjs/themes/prism.css'\r\n\r\nimport './EditVariableDialog.css'\r\n\r\nconst isPositiveNumeric = (value) => /^\\d+$/.test(value)\r\n\r\nconst EditVariableDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const theme = useTheme()\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [input, setInput] = useState(null)\r\n    const [expanded, setExpanded] = useState(false)\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\r\n    const [expandDialogProps, setExpandDialogProps] = useState({})\r\n    const [copiedVariableBody, setCopiedVariableBody] = useState({})\r\n    const [languageType, setLanguageType] = useState(languages.js)\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false)\r\n    }\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        }\r\n        setExpandDialogProps(dialogProp)\r\n        setShowExpandDialog(true)\r\n    }\r\n\r\n    const onMouseUp = (e) => {\r\n        if (e.target && e.target.selectionEnd && e.target.value) {\r\n            const cursorPosition = e.target.selectionEnd\r\n            const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition)\r\n            const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length)\r\n            const body = {\r\n                textBeforeCursorPosition,\r\n                textAfterCursorPosition\r\n            }\r\n            setCopiedVariableBody(body)\r\n        } else {\r\n            setCopiedVariableBody({})\r\n        }\r\n    }\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace\r\n        let returnVariablePath = `${node.id}`\r\n        for (let i = 0; i < namespaces.length; i += 1) {\r\n            const namespace = namespaces[i]\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1)\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`\r\n                } else {\r\n                    returnVariablePath += namespace\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.'\r\n                }\r\n            }\r\n        }\r\n        if (copiedVariableBody) {\r\n            let newInput = ''\r\n            if (copiedVariableBody.textBeforeCursorPosition === undefined && copiedVariableBody.textAfterCursorPosition === undefined)\r\n                newInput = `${inputValue}${`{{${returnVariablePath}}}`}`\r\n            else\r\n                newInput = `${copiedVariableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${copiedVariableBody.textAfterCursorPosition}`\r\n            setInputValue(newInput)\r\n        }\r\n    }\r\n\r\n    const onSave = (value) => {\r\n        // ArrayInputParameter\r\n        if (dialogProps.arrayItemBody) {\r\n            const updateArrayValues = {\r\n                ...dialogProps.arrayItemBody.arrayItemValues,\r\n                [dialogProps.arrayItemBody.arrayItemInput.name]: value\r\n            }\r\n            const updateInitialValues = dialogProps.arrayItemBody.initialValues\r\n            updateInitialValues[dialogProps.arrayItemBody.arrayItemIndex] = updateArrayValues\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: updateInitialValues\r\n            }\r\n            onConfirm(updateValues)\r\n        } else {\r\n            // InputParameter\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: value,\r\n                submit: null\r\n            }\r\n            onConfirm(updateValues)\r\n        }\r\n    }\r\n\r\n    // Handle Accordian\r\n    useEffect(() => {\r\n        if (dialogProps.values && dialogProps.input) {\r\n            let inputValues = dialogProps.values\r\n            let input = dialogProps.input\r\n            if (dialogProps.arrayItemBody) {\r\n                inputValues = dialogProps.arrayItemBody.arrayItemValues\r\n                input = dialogProps.arrayItemBody.arrayItemInput\r\n            }\r\n            setInput(input)\r\n            setInputValue(inputValues[input.name].toString() || '')\r\n            if (input.type === 'json' || input.type === 'string' || input.type === 'number') setLanguageType(languages.json)\r\n            if (input.type === 'code') setLanguageType(languages.js)\r\n        }\r\n    }, [dialogProps])\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} fullWidth maxWidth='lg' aria-labelledby='alert-dialog-title' aria-describedby='alert-dialog-description'>\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {input && (input.type === 'json' || input.type === 'string' || input.type === 'number' || input.type === 'code') && (\r\n                        <div style={{ flex: 1 }}>\r\n                            <Typography sx={{ mb: 2, ml: 1 }} variant='h4'>\r\n                                Input\r\n                            </Typography>\r\n                            <PerfectScrollbar\r\n                                style={{\r\n                                    border: '1px solid',\r\n                                    borderColor: theme.palette.grey['500'],\r\n                                    borderRadius: '12px',\r\n                                    height: '100%',\r\n                                    maxHeight: 'calc(100vh - 220px)',\r\n                                    overflowX: 'hidden',\r\n                                    backgroundColor: 'white'\r\n                                }}\r\n                            >\r\n                                <Editor\r\n                                    value={inputValue}\r\n                                    onValueChange={(code) => setInputValue(code)}\r\n                                    placeholder={input.placeholder}\r\n                                    highlight={(code) => highlight(code, languageType)}\r\n                                    onMouseUp={(e) => onMouseUp(e)}\r\n                                    onBlur={(e) => onMouseUp(e)}\r\n                                    padding={10}\r\n                                    style={{\r\n                                        fontSize: '0.875rem',\r\n                                        minHeight: 'calc(100vh - 220px)',\r\n                                        width: '100%'\r\n                                    }}\r\n                                    textareaClassName='editor__textarea'\r\n                                />\r\n                            </PerfectScrollbar>\r\n                        </div>\r\n                    )}\r\n                    {!dialogProps.hideVariables && (\r\n                        <div style={{ flex: 1 }}>\r\n                            <Typography sx={{ mb: 2, ml: 2 }} variant='h4'>\r\n                                Variables\r\n                            </Typography>\r\n                            {dialogProps.availableNodesForVariable.length === 0 && (\r\n                                <div style={{ padding: 10, marginLeft: 10 }}>\r\n                                    <span>No Variables. Try connect to other nodes. </span>\r\n                                </div>\r\n                            )}\r\n                            {dialogProps.availableNodesForVariable.length > 0 && (\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                                    <Box sx={{ pl: 2, pr: 2 }}>\r\n                                        <List\r\n                                            sx={{\r\n                                                width: '100%',\r\n                                                py: 0,\r\n                                                borderRadius: '10px',\r\n                                                [theme.breakpoints.down('md')]: {\r\n                                                    maxWidth: 300\r\n                                                },\r\n                                                '& .MuiListItemSecondaryAction-root': {\r\n                                                    top: 22\r\n                                                },\r\n                                                '& .MuiDivider-root': {\r\n                                                    my: 0\r\n                                                },\r\n                                                '& .list-container': {\r\n                                                    pl: 7\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            {dialogProps.availableNodesForVariable.map((node, index) => (\r\n                                                <Box key={index}>\r\n                                                    <Accordion\r\n                                                        expanded={expanded === node.data.label}\r\n                                                        onChange={handleAccordionChange(node.data.label)}\r\n                                                    >\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls={`${node.data.label}-content`}\r\n                                                            id={`${node.data.label}-header`}\r\n                                                        >\r\n                                                            <Typography variant='h5'>{node.data.label}</Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <div style={{ position: 'relative' }}>\r\n                                                                <ReactJson\r\n                                                                    collapsed\r\n                                                                    src={\r\n                                                                        node.data.outputResponses && node.data.outputResponses.output\r\n                                                                            ? node.data.outputResponses.output\r\n                                                                            : {}\r\n                                                                    }\r\n                                                                    enableClipboard={(e) => onClipboardCopy(e, node)}\r\n                                                                />\r\n                                                                <IconButton\r\n                                                                    size='small'\r\n                                                                    sx={{\r\n                                                                        height: 25,\r\n                                                                        width: 25,\r\n                                                                        position: 'absolute',\r\n                                                                        top: -5,\r\n                                                                        right: 5\r\n                                                                    }}\r\n                                                                    title='Expand Variable'\r\n                                                                    color='primary'\r\n                                                                    onClick={() =>\r\n                                                                        onExpandDialogClicked(\r\n                                                                            node.data.outputResponses && node.data.outputResponses.output\r\n                                                                                ? node.data.outputResponses.output\r\n                                                                                : {},\r\n                                                                            node\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    <IconArrowsMaximize />\r\n                                                                </IconButton>\r\n                                                            </div>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Box>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Box>\r\n                                </PerfectScrollbar>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                    <ExpandDataDialog\r\n                        enableClipboard\r\n                        show={showExpandDialog}\r\n                        dialogProps={expandDialogProps}\r\n                        onCancel={() => setShowExpandDialog(false)}\r\n                        onCopyClick={(e, node) => {\r\n                            onClipboardCopy(e, node)\r\n                            setShowExpandDialog(false)\r\n                        }}\r\n                    ></ExpandDataDialog>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <Button variant='contained' onClick={() => onSave(inputValue)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nEditVariableDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default EditVariableDialog\r\n","import { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n\r\n// material-ui\r\nimport { Box, Switch, Fab, FormControl, OutlinedInput, Popper, TextField, Typography, Stack, Button } from '@mui/material'\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'\r\nimport { useTheme, styled } from '@mui/material/styles'\r\nimport { TooltipWithParser } from '../../ui-component/TooltipWithParser'\r\n\r\n// icons\r\nimport { IconX, IconUpload } from '@tabler/icons'\r\n\r\n// third party\r\nimport lodash from 'lodash'\r\nimport Editor from 'react-simple-code-editor'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport 'prismjs/themes/prism.css'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper'\r\n\r\n//css\r\nimport './InputParameters.css'\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n})\r\n\r\nconst DateCustomInput = forwardRef(function DateCustomInput({ value, onClick }, ref) {\r\n    return (\r\n        <button\r\n            style={{\r\n                backgroundColor: '#fafafa',\r\n                paddingTop: 8,\r\n                paddingBottom: 8,\r\n                paddingRight: 12,\r\n                paddingLeft: 12,\r\n                borderRadius: 12,\r\n                width: '100%',\r\n                height: 50,\r\n                border: `1px solid #BDBDBD`,\r\n                cursor: 'pointer',\r\n                fontWeight: 'bold',\r\n                textAlign: 'start',\r\n                color: '#212121',\r\n                opacity: 0.9\r\n            }}\r\n            type='button'\r\n            onClick={onClick}\r\n            ref={ref}\r\n        >\r\n            {value}\r\n        </button>\r\n    )\r\n})\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\n// ==============================|| ARRAY INPUT PARAMETERS ||============================== //\r\n\r\nconst ArrayInputParameters = ({\r\n    initialValues,\r\n    arrayParams,\r\n    paramsType,\r\n    arrayGroupName,\r\n    errors,\r\n    onArrayInputChange,\r\n    onArrayInputBlur,\r\n    onArrayItemRemove,\r\n    onArrayItemMouseUp,\r\n    onEditVariableDialogOpen\r\n}) => {\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const processUpdateValues = (inputValue, inputName, values, index) => {\r\n        const updateArrayValues = {\r\n            ...values,\r\n            [inputName]: inputValue\r\n        }\r\n        const updateInitialValues = initialValues\r\n        updateInitialValues[index] = updateArrayValues\r\n        return updateInitialValues\r\n    }\r\n\r\n    const onInputChange = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index)\r\n        onArrayInputChange(updateInitialValues)\r\n    }\r\n\r\n    const onInputBlur = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index)\r\n        onArrayInputBlur(updateInitialValues)\r\n    }\r\n\r\n    const onRemoveClick = (index) => {\r\n        const updateInitialValues = initialValues\r\n        updateInitialValues.splice(index, 1)\r\n        onArrayItemRemove(updateInitialValues)\r\n        onArrayItemMouseUp(false)\r\n    }\r\n\r\n    const onMouseUp = (e, inputName, valueIndex) => {\r\n        const cursorPosition = e.target.selectionEnd\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition)\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length)\r\n        const path = `${paramsType}.${arrayGroupName}[${valueIndex}].${inputName}`\r\n        const body = {\r\n            textBeforeCursorPosition,\r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        }\r\n        onArrayItemMouseUp(true, body)\r\n    }\r\n\r\n    const handleFolderUpload = (e, values, inputName, index) => {\r\n        if (!e.target.files) return\r\n        const files = e.target.files\r\n        const reader = new FileReader()\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if (fileIndex >= files.length) {\r\n                onInputChange(JSON.stringify(base64Array), inputName, values, index)\r\n                return\r\n            }\r\n            const file = files[fileIndex]\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return\r\n                }\r\n                const { result } = evt.target\r\n                const value = result + `,filepath:${file.webkitRelativePath}`\r\n                base64Array.push(value)\r\n                readFile(fileIndex + 1, lodash.cloneDeep(base64Array))\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n        readFile(0, [])\r\n    }\r\n\r\n    const handleFileUpload = (e, onInputChange, values, inputName, index) => {\r\n        if (!e.target.files) {\r\n            return\r\n        }\r\n\r\n        const file = e.target.files[0]\r\n        const { name } = file\r\n\r\n        const reader = new FileReader()\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return\r\n            }\r\n            const { result } = evt.target\r\n            const value = result + `,filename:${name}`\r\n            onInputChange(value, inputName, values, index)\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value)\r\n\r\n    const getDefaultOptionValue = () => ''\r\n\r\n    return (\r\n        <>\r\n            {arrayParams.map((_, index) => {\r\n                const params = arrayParams[index] || []\r\n                const values = initialValues[index] || {}\r\n\r\n                return (\r\n                    <Box\r\n                        sx={{\r\n                            p: 2,\r\n                            mb: 2,\r\n                            backgroundColor: theme.palette.secondary.light,\r\n                            borderRadius: `${customization.borderRadius}px`,\r\n                            position: 'relative'\r\n                        }}\r\n                        key={index}\r\n                    >\r\n                        {arrayParams.length > 1 && (\r\n                            <Fab\r\n                                sx={{\r\n                                    minHeight: 30,\r\n                                    height: 30,\r\n                                    width: 30,\r\n                                    backgroundColor: theme.palette.secondary.light,\r\n                                    color: theme.palette.secondary.main,\r\n                                    position: 'absolute',\r\n                                    right: -10,\r\n                                    top: -10\r\n                                }}\r\n                                size='small'\r\n                                onClick={() => onRemoveClick(index)}\r\n                            >\r\n                                <IconX />\r\n                            </Fab>\r\n                        )}\r\n\r\n                        {params.map((input, paramIndex) => {\r\n                            if (input.type === 'file' || input.type === 'folder') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                        </Stack>\r\n\r\n                                        {input.type === 'file' && (\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: 'bold',\r\n                                                    color: theme.palette.grey['800'],\r\n                                                    marginBottom: '1rem'\r\n                                                }}\r\n                                            >\r\n                                                {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload'}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        {input.type === 'folder' && (\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: 'bold',\r\n                                                    color: theme.palette.grey['800'],\r\n                                                    marginBottom: '1rem'\r\n                                                }}\r\n                                            >\r\n                                                {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload'}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        <Button\r\n                                            variant='outlined'\r\n                                            component='label'\r\n                                            fullWidth\r\n                                            startIcon={<IconUpload />}\r\n                                            sx={{ marginRight: '1rem' }}\r\n                                        >\r\n                                            {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                            {input.type === 'file' && (\r\n                                                <input type='file' hidden onChange={(e) => handleFileUpload(e, values, inputName, index)} />\r\n                                            )}\r\n                                            {input.type === 'folder' && (\r\n                                                <input\r\n                                                    type='file'\r\n                                                    // https://github.com/jsx-eslint/eslint-plugin-react/issues/3454\r\n                                                    // eslint-disable-next-line react/no-unknown-property\r\n                                                    directory=''\r\n                                                    // eslint-disable-next-line react/no-unknown-property\r\n                                                    webkitdirectory=''\r\n                                                    hidden\r\n                                                    onChange={(e) => handleFolderUpload(e, values, inputName, index)}\r\n                                                />\r\n                                            )}\r\n                                        </Button>\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'json' || input.type === 'code') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack sx={{ position: 'relative' }} direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                            <Button\r\n                                                sx={{\r\n                                                    position: 'absolute',\r\n                                                    fontSize: '0.6875rem',\r\n                                                    right: 0,\r\n                                                    top: 5,\r\n                                                    height: 25,\r\n                                                    width: 'max-content'\r\n                                                }}\r\n                                                variant='outlined'\r\n                                                onClick={() => onEditVariableDialogOpen(input, values, index)}\r\n                                            >\r\n                                                Edit Variables\r\n                                            </Button>\r\n                                        </Stack>\r\n                                        <PerfectScrollbar\r\n                                            style={{\r\n                                                border: '1px solid',\r\n                                                borderColor: theme.palette.grey['500'],\r\n                                                borderRadius: '12px',\r\n                                                height: '200px',\r\n                                                maxHeight: '200px',\r\n                                                overflowX: 'hidden',\r\n                                                backgroundColor: 'white'\r\n                                            }}\r\n                                            onScroll={(e) => e.stopPropagation()}\r\n                                        >\r\n                                            <Editor\r\n                                                placeholder={input.placeholder}\r\n                                                value={values[inputName] || ''}\r\n                                                onBlur={(e) => {\r\n                                                    onInputBlur(e.target.value, inputName, values, index)\r\n                                                    onMouseUp(e, inputName, index)\r\n                                                }}\r\n                                                onValueChange={(code) => onInputChange(code, inputName, values, index)}\r\n                                                onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                                highlight={(code) => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                                padding={10}\r\n                                                style={{\r\n                                                    fontSize: '0.875rem',\r\n                                                    minHeight: '200px',\r\n                                                    width: '100%'\r\n                                                }}\r\n                                                textareaClassName='editor__textarea'\r\n                                            />\r\n                                        </PerfectScrollbar>\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'date') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                        </Stack>\r\n                                        <DatePicker\r\n                                            customInput={<DateCustomInput />}\r\n                                            selected={convertDateStringToDateObject(values[inputName]) || null}\r\n                                            showTimeSelect\r\n                                            isClearable\r\n                                            timeInputLabel='Time:'\r\n                                            dateFormat='MM/dd/yyyy h:mm aa'\r\n                                            onChange={(date) => {\r\n                                                const inputValue = date ? date.toISOString() : null\r\n                                                onInputChange(inputValue, inputName, values, index)\r\n                                                onArrayItemMouseUp(false)\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack sx={{ position: 'relative' }} direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                            {(input.type === 'string' || input.type === 'number') && (\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        position: 'absolute',\r\n                                                        fontSize: '0.6875rem',\r\n                                                        right: 0,\r\n                                                        top: 5,\r\n                                                        height: 25,\r\n                                                        width: 'max-content'\r\n                                                    }}\r\n                                                    variant='outlined'\r\n                                                    onClick={() => onEditVariableDialogOpen(input, values, index)}\r\n                                                >\r\n                                                    Edit Variables\r\n                                                </Button>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <OutlinedInput\r\n                                            id={inputName}\r\n                                            type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                            value={values[inputName] || ''}\r\n                                            placeholder={input.placeholder}\r\n                                            name={inputName}\r\n                                            onBlur={(e) => {\r\n                                                const inputValue = e.target.value\r\n                                                onInputBlur(inputValue, inputName, values, index)\r\n                                                onMouseUp(e, inputName, index)\r\n                                            }}\r\n                                            onChange={(e) => {\r\n                                                const inputValue = e.target.value\r\n                                                onInputChange(inputValue, inputName, values, index)\r\n                                            }}\r\n                                            onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n                                const inputName = input.name\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                        </Stack>\r\n                                        <Switch\r\n                                            checked={!!values[inputName]}\r\n                                            onChange={(event) => {\r\n                                                onInputChange(event.target.checked, inputName, values, index)\r\n                                            }}\r\n                                            inputProps={{ 'aria-label': 'controlled' }}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n                                const inputName = input.name\r\n                                const availableOptions = input.options || []\r\n\r\n                                return (\r\n                                    <FormControl key={`${inputName}_${paramIndex}`} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                        <Stack direction='row'>\r\n                                            <Typography variant='overline'>{input.label}</Typography>\r\n                                            {input.description && <TooltipWithParser title={input.description} />}\r\n                                        </Stack>\r\n                                        <Autocomplete\r\n                                            id={inputName}\r\n                                            freeSolo\r\n                                            onOpen={() => onArrayItemMouseUp(false)}\r\n                                            options={availableOptions}\r\n                                            value={findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()}\r\n                                            onChange={(e, selection) => {\r\n                                                const value = selection ? selection.name : ''\r\n                                                onInputBlur(value, inputName, values, index)\r\n                                            }}\r\n                                            PopperComponent={StyledPopper}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    value={values[inputName]}\r\n                                                    error={\r\n                                                        errors && errors.length > 0 && errors[index]\r\n                                                            ? Boolean(errors[index][inputName])\r\n                                                            : false\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            renderOption={(props, option) => (\r\n                                                <Box component='li' {...props}>\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                        <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                            {option.label}\r\n                                                        </Typography>\r\n                                                        {option.description && <Typography sx={{ p: 1 }}>{option.description}</Typography>}\r\n                                                    </div>\r\n                                                </Box>\r\n                                            )}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n                            return null\r\n                        })}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nArrayInputParameters.propTypes = {\r\n    initialValues: PropTypes.array,\r\n    arrayParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    arrayGroupName: PropTypes.string,\r\n    errors: PropTypes.array,\r\n    onArrayInputChange: PropTypes.func,\r\n    onArrayInputBlur: PropTypes.func,\r\n    onArrayItemRemove: PropTypes.func,\r\n    onArrayItemMouseUp: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func\r\n}\r\n\r\nexport default ArrayInputParameters\r\n","import PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { Box, Typography } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper'\r\n\r\n//css\r\nimport './OptionParamsResponse.css'\r\n\r\n// ==============================|| OPTION PARAMS RESPONSE ||============================== //\r\n\r\nconst OptionParamsResponse = ({ value, options }) => {\r\n    const theme = useTheme()\r\n\r\n    const getSelectedValue = (value) => options.find((option) => option.name === value)\r\n\r\n    const getSelectedOptionInputParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value)\r\n        if (selectedOption) {\r\n            return selectedOption.inputParameters || ''\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getSelectedOptionExampleParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value)\r\n        if (selectedOption) {\r\n            return selectedOption.exampleParameters || ''\r\n        }\r\n        return ''\r\n    }\r\n\r\n    const getSelectedOptionExampleResponse = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value)\r\n        if (selectedOption) {\r\n            return selectedOption.exampleResponse || ''\r\n        }\r\n        return ''\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getSelectedValue(value) && getSelectedOptionInputParams(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant='h6'>\r\n                        Parameters\r\n                    </Typography>\r\n                    <div className='params' dangerouslySetInnerHTML={{ __html: getSelectedOptionInputParams(value) }} />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleParams(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant='h6'>\r\n                        Example Parameters\r\n                    </Typography>\r\n                    <ReactJson\r\n                        collapsed\r\n                        src={JSON.parse(getSelectedOptionExampleParams(value))}\r\n                        enableClipboard={(e) => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleResponse(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant='h6'>\r\n                        Example Response\r\n                    </Typography>\r\n                    <ReactJson collapsed src={getSelectedOptionExampleResponse(value)} enableClipboard={(e) => copyToClipboard(e)} />\r\n                </Box>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n\r\nOptionParamsResponse.propTypes = {\r\n    value: PropTypes.string,\r\n    options: PropTypes.array\r\n}\r\n\r\nexport default OptionParamsResponse\r\n","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { TooltipWithParser } from '../../ui-component/TooltipWithParser'\r\n\r\n// material-ui\r\nimport { Typography, Stack } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport OptionParamsResponse from './OptionParamsResponse'\r\n\r\n// third party\r\nimport lodash from 'lodash'\r\nimport AsyncSelect from 'react-select/async'\r\nimport axios from 'axios'\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons'\r\n\r\n// Constant\r\nimport { baseURL } from 'store/constant'\r\n\r\n// ==============================|| ASYNC SELECT WRAPPER ||============================== //\r\n\r\nconst AsyncSelectWrapper = ({\r\n    title,\r\n    description,\r\n    value,\r\n    loadMethod,\r\n    loadFromDbCollections,\r\n    nodeFlowData,\r\n    error,\r\n    onChange,\r\n    onMenuOpen,\r\n    onSetError\r\n}) => {\r\n    const theme = useTheme()\r\n\r\n    const customStyles = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            paddingTop: 15,\r\n            paddingBottom: 15,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            cursor: 'pointer',\r\n            fontWeight: '500',\r\n            backgroundColor: state.isSelected ? theme.palette.primary.light : '',\r\n            color: 'black',\r\n            '&:hover': {\r\n                backgroundColor: theme.palette.grey['200']\r\n            }\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            cursor: 'text',\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 6,\r\n            paddingLeft: 6,\r\n            borderRadius: 12,\r\n            '&:hover': {\r\n                borderColor: theme.palette.grey['700']\r\n            }\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            fontWeight: '600'\r\n        }),\r\n        menuList: (provided) => ({\r\n            ...provided,\r\n            boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n            borderRadius: '10px'\r\n        })\r\n    }\r\n\r\n    const [asyncOptions, setAsyncOptions] = useState([])\r\n\r\n    const getSelectedValue = (value) => asyncOptions.find((option) => option.name === value)\r\n\r\n    const getDefaultOptionValue = () => ''\r\n\r\n    const formatErrorMessage = (error) => {\r\n        if (error) return `*${error.replace(/[\"]/g, '')}`\r\n        return ''\r\n    }\r\n\r\n    const showHideOptions = (options) => {\r\n        let returnOptions = options\r\n        const toBeDeleteOptions = []\r\n        const displayTypes = ['show', 'hide']\r\n\r\n        for (let x = 0; x < displayTypes.length; x += 1) {\r\n            const displayType = displayTypes[x]\r\n\r\n            for (let i = 0; i < returnOptions.length; i += 1) {\r\n                const option = returnOptions[i]\r\n                const displayOptions = option[displayType]\r\n\r\n                if (displayOptions) {\r\n                    Object.keys(displayOptions).forEach((path) => {\r\n                        const comparisonValue = displayOptions[path]\r\n                        const groundValue = lodash.get(nodeFlowData, path, '')\r\n\r\n                        if (Array.isArray(comparisonValue)) {\r\n                            if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option)\r\n                            }\r\n                            if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option)\r\n                            }\r\n                        } else if (typeof comparisonValue === 'string') {\r\n                            if (\r\n                                displayType === 'show' &&\r\n                                !(comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                            ) {\r\n                                toBeDeleteOptions.push(option)\r\n                            }\r\n                            if (\r\n                                displayType === 'hide' &&\r\n                                (comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                            ) {\r\n                                toBeDeleteOptions.push(option)\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]))\r\n        }\r\n\r\n        return returnOptions\r\n    }\r\n\r\n    const loadOptions = (inputValue, callback) => {\r\n        axios\r\n            .post(`${baseURL}/api/v1/node-load-method/${nodeFlowData.name}`, { ...nodeFlowData, loadMethod, loadFromDbCollections })\r\n            .then((response) => {\r\n                const data = response.data\r\n                const filteredOption = (data || []).filter((i) => i.label.toLowerCase().includes(inputValue.toLowerCase()))\r\n                const options = showHideOptions(filteredOption)\r\n                setAsyncOptions(options)\r\n                callback(options)\r\n            })\r\n    }\r\n\r\n    const formatOptionLabel = ({ label, description }, { context }) => (\r\n        <>\r\n            {context === 'menu' && (\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <div>{label}</div>\r\n                    {description && <span style={{ fontWeight: 400, paddingTop: 10, paddingBottom: 10 }}>{description}</span>}\r\n                </div>\r\n            )}\r\n            {context === 'value' && (\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <div>{label}</div>\r\n                </div>\r\n            )}\r\n        </>\r\n    )\r\n\r\n    useEffect(() => () => setAsyncOptions([]), [])\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            const selectedOption = asyncOptions.find((option) => option.name === value)\r\n            if (!selectedOption) {\r\n                onSetError()\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [asyncOptions])\r\n\r\n    return (\r\n        <>\r\n            <Stack direction='row'>\r\n                <Typography variant='overline'>{title}</Typography>\r\n                {description && <TooltipWithParser title={description} />}\r\n            </Stack>\r\n            <div style={{ position: 'relative' }}>\r\n                <AsyncSelect\r\n                    key={JSON.stringify(nodeFlowData)} // to reload async select whenever flowdata changed\r\n                    styles={customStyles}\r\n                    value={getSelectedValue(value) || getDefaultOptionValue()}\r\n                    formatOptionLabel={formatOptionLabel}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionValue={(option) => option.name}\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onChange={onChange}\r\n                    onMenuOpen={onMenuOpen}\r\n                />\r\n                <button\r\n                    style={{\r\n                        minHeight: 10,\r\n                        height: 27,\r\n                        width: 30,\r\n                        backgroundColor: '#FAFAFA',\r\n                        color: theme.palette.grey['500'],\r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        margin: 'auto',\r\n                        border: 'none',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                    title='Clear Selection'\r\n                    type='button'\r\n                    onClick={() => onChange(null)}\r\n                >\r\n                    <IconX />\r\n                </button>\r\n            </div>\r\n            {error && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>{formatErrorMessage(error)}</span>}\r\n\r\n            <OptionParamsResponse value={value} options={asyncOptions} />\r\n        </>\r\n    )\r\n}\r\n\r\nAsyncSelectWrapper.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    value: PropTypes.string,\r\n    loadMethod: PropTypes.string,\r\n    loadFromDbCollections: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    error: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onMenuOpen: PropTypes.func,\r\n    onSetError: PropTypes.func\r\n}\r\n\r\nexport default AsyncSelectWrapper\r\n","import PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n\r\n// material-ui\r\nimport { Box, Button, Stack, FormControl, OutlinedInput, Popper, TextField, Typography, Switch } from '@mui/material'\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'\r\nimport { styled, useTheme } from '@mui/material/styles'\r\n\r\n// third party\r\nimport lodash from 'lodash'\r\nimport * as Yup from 'yup'\r\nimport { Formik } from 'formik'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport 'prismjs/themes/prism.css'\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nimport { TooltipWithParser } from '../../ui-component/TooltipWithParser'\r\n\r\n// project imports\r\nimport useScriptRef from 'hooks/useScriptRef'\r\nimport AnimateButton from 'ui-component/extended/AnimateButton'\r\nimport ArrayInputParameters from './ArrayInputParameters'\r\nimport OptionParamsResponse from './OptionParamsResponse'\r\nimport AsyncSelectWrapper from './AsyncSelectWrapper'\r\n\r\n// icons\r\nimport { IconPlus, IconUpload } from '@tabler/icons'\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper'\r\n\r\n//css\r\nimport './InputParameters.css'\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n})\r\n\r\nconst DateCustomInput = forwardRef(function DateCustomInput({ value, onClick }, ref) {\r\n    return (\r\n        <button\r\n            style={{\r\n                backgroundColor: '#fafafa',\r\n                paddingTop: 8,\r\n                paddingBottom: 8,\r\n                paddingRight: 12,\r\n                paddingLeft: 12,\r\n                borderRadius: 12,\r\n                width: '100%',\r\n                height: 50,\r\n                border: `1px solid #BDBDBD`,\r\n                cursor: 'pointer',\r\n                fontWeight: 'bold',\r\n                textAlign: 'start',\r\n                color: '#212121',\r\n                opacity: 0.9\r\n            }}\r\n            type='button'\r\n            onClick={onClick}\r\n            ref={ref}\r\n        >\r\n            {value}\r\n        </button>\r\n    )\r\n})\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n}\r\n\r\n// ==============================|| INPUT PARAMETERS ||============================== //\r\n\r\nconst InputParameters = ({\r\n    params,\r\n    paramsType,\r\n    initialValues,\r\n    nodeParamsValidation,\r\n    nodeFlowData,\r\n    valueChanged,\r\n    onSubmit,\r\n    setVariableSelectorState,\r\n    onEditVariableDialogOpen,\r\n    ...others\r\n}) => {\r\n    const theme = useTheme()\r\n\r\n    const scriptedRef = useScriptRef()\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values\r\n        updateValues.submit = null\r\n        valueChanged(updateValues, paramsType)\r\n    }\r\n\r\n    const onMouseUp = (e, inputName) => {\r\n        const cursorPosition = e.target.selectionEnd\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition)\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length)\r\n        const path = `${paramsType}.${inputName}`\r\n        const body = {\r\n            textBeforeCursorPosition,\r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        }\r\n        setVariableSelectorState(true, body)\r\n    }\r\n\r\n    const onAddArrayItem = (values, arrayItems, arrayName) => {\r\n        const updateValues = {\r\n            ...values,\r\n            [arrayName]: arrayItems\r\n        }\r\n        valueChanged(updateValues, paramsType)\r\n    }\r\n\r\n    const handleFolderUpload = (e, setFieldValue, values, inputName) => {\r\n        setVariableSelectorState(false)\r\n        if (!e.target.files) return\r\n        const files = e.target.files\r\n        const reader = new FileReader()\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if (fileIndex >= files.length) {\r\n                setFieldValue(inputName, JSON.stringify(base64Array))\r\n                const overwriteValues = {\r\n                    ...values,\r\n                    [inputName]: JSON.stringify(base64Array)\r\n                }\r\n                onChanged(overwriteValues)\r\n                return\r\n            }\r\n            const file = files[fileIndex]\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return\r\n                }\r\n                const { result } = evt.target\r\n                const value = result + `,filepath:${file.webkitRelativePath}`\r\n                base64Array.push(value)\r\n                readFile(fileIndex + 1, lodash.cloneDeep(base64Array))\r\n            }\r\n            reader.readAsDataURL(file)\r\n        }\r\n        readFile(0, [])\r\n    }\r\n\r\n    const handleFileUpload = (e, setFieldValue, values, inputName) => {\r\n        setVariableSelectorState(false)\r\n        if (!e.target.files) return\r\n\r\n        const file = e.target.files[0]\r\n        const { name } = file\r\n\r\n        const reader = new FileReader()\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return\r\n            }\r\n            const { result } = evt.target\r\n\r\n            const value = result + `,filename:${name}`\r\n            setFieldValue(inputName, value)\r\n            const overwriteValues = {\r\n                ...values,\r\n                [inputName]: value\r\n            }\r\n            onChanged(overwriteValues)\r\n        }\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value)\r\n\r\n    const getDefaultOptionValue = () => ''\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={initialValues}\r\n                    validationSchema={Yup.object().shape(nodeParamsValidation)}\r\n                    onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                        setVariableSelectorState(false)\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                values.submit = true\r\n                                setStatus({ success: true })\r\n                                setSubmitting(false)\r\n                                onSubmit(values, paramsType)\r\n                            }\r\n                        } catch (err) {\r\n                            console.error(err)\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false })\r\n                                setErrors({ submit: err.message })\r\n                                setSubmitting(false)\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                        <form noValidate onSubmit={handleSubmit} {...others}>\r\n                            {params.map((input) => {\r\n                                if (input.type === 'file' || input.type === 'folder') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n\r\n                                            {input.type === 'file' && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: 'bold',\r\n                                                        color: theme.palette.grey['800'],\r\n                                                        marginBottom: '1rem'\r\n                                                    }}\r\n                                                >\r\n                                                    {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload'}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            {input.type === 'folder' && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: 'bold',\r\n                                                        color: theme.palette.grey['800'],\r\n                                                        marginBottom: '1rem'\r\n                                                    }}\r\n                                                >\r\n                                                    {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload'}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            <Button\r\n                                                variant='outlined'\r\n                                                component='label'\r\n                                                fullWidth\r\n                                                startIcon={<IconUpload />}\r\n                                                sx={{ marginRight: '1rem' }}\r\n                                            >\r\n                                                {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                                {input.type === 'file' && (\r\n                                                    <input\r\n                                                        type='file'\r\n                                                        hidden\r\n                                                        onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName)}\r\n                                                    />\r\n                                                )}\r\n                                                {input.type === 'folder' && (\r\n                                                    <input\r\n                                                        type='file'\r\n                                                        // https://github.com/jsx-eslint/eslint-plugin-react/issues/3454\r\n                                                        // eslint-disable-next-line react/no-unknown-property\r\n                                                        directory=''\r\n                                                        // eslint-disable-next-line react/no-unknown-property\r\n                                                        webkitdirectory=''\r\n                                                        hidden\r\n                                                        onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName)}\r\n                                                    />\r\n                                                )}\r\n                                            </Button>\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'json' || input.type === 'code') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack sx={{ position: 'relative' }} direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        position: 'absolute',\r\n                                                        fontSize: '0.6875rem',\r\n                                                        right: 0,\r\n                                                        top: 5,\r\n                                                        height: 25,\r\n                                                        width: 'max-content'\r\n                                                    }}\r\n                                                    variant='outlined'\r\n                                                    onClick={() => onEditVariableDialogOpen(input, values)}\r\n                                                >\r\n                                                    Edit Variables\r\n                                                </Button>\r\n                                            </Stack>\r\n                                            <PerfectScrollbar\r\n                                                style={{\r\n                                                    border: '1px solid',\r\n                                                    borderColor: theme.palette.grey['500'],\r\n                                                    borderRadius: '12px',\r\n                                                    height: '200px',\r\n                                                    maxHeight: '200px',\r\n                                                    overflowX: 'hidden',\r\n                                                    backgroundColor: 'white'\r\n                                                }}\r\n                                                onScroll={(e) => e.stopPropagation()}\r\n                                            >\r\n                                                <Editor\r\n                                                    placeholder={input.placeholder}\r\n                                                    value={values[inputName] || ''}\r\n                                                    onBlur={(e) => {\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: e.target.value\r\n                                                        }\r\n                                                        onChanged(overwriteValues)\r\n                                                        onMouseUp(e, inputName)\r\n                                                    }}\r\n                                                    onValueChange={(code) => {\r\n                                                        setFieldValue(inputName, code)\r\n                                                    }}\r\n                                                    onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                                    highlight={(code) =>\r\n                                                        highlight(code, input.type === 'json' ? languages.json : languages.js)\r\n                                                    }\r\n                                                    padding={10}\r\n                                                    style={{\r\n                                                        fontSize: '0.875rem',\r\n                                                        minHeight: '200px',\r\n                                                        width: '100%'\r\n                                                    }}\r\n                                                    textareaClassName='editor__textarea'\r\n                                                />\r\n                                            </PerfectScrollbar>\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'date') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <DatePicker\r\n                                                customInput={<DateCustomInput />}\r\n                                                selected={convertDateStringToDateObject(values[inputName]) || null}\r\n                                                showTimeSelect\r\n                                                isClearable\r\n                                                timeInputLabel='Time:'\r\n                                                dateFormat='MM/dd/yyyy h:mm aa'\r\n                                                onChange={(date) => {\r\n                                                    const value = date ? date.toISOString() : null\r\n                                                    setVariableSelectorState(false)\r\n                                                    setFieldValue(inputName, value)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack sx={{ position: 'relative' }} direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                                {(input.type === 'string' || input.type === 'number') && (\r\n                                                    <Button\r\n                                                        sx={{\r\n                                                            position: 'absolute',\r\n                                                            fontSize: '0.6875rem',\r\n                                                            right: 0,\r\n                                                            top: 5,\r\n                                                            height: 25,\r\n                                                            width: 'max-content'\r\n                                                        }}\r\n                                                        variant='outlined'\r\n                                                        onClick={() => onEditVariableDialogOpen(input, values)}\r\n                                                    >\r\n                                                        Edit Variables\r\n                                                    </Button>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <OutlinedInput\r\n                                                id={inputName}\r\n                                                type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                                placeholder={input.placeholder}\r\n                                                multiline={!!input.rows}\r\n                                                maxRows={input.rows || 0}\r\n                                                minRows={input.rows || 0}\r\n                                                value={values[inputName] || ''}\r\n                                                name={inputName}\r\n                                                onBlur={(e) => {\r\n                                                    handleBlur(e)\r\n                                                    onChanged(values)\r\n                                                    onMouseUp(e, inputName)\r\n                                                }}\r\n                                                onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'boolean') {\r\n                                    const inputName = input.name\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <Switch\r\n                                                checked={!!values[inputName]}\r\n                                                onChange={(event) => {\r\n                                                    setVariableSelectorState(false)\r\n                                                    setFieldValue(inputName, event.target.checked)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: event.target.checked\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'asyncOptions') {\r\n                                    const inputName = input.name\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <AsyncSelectWrapper\r\n                                                title={input.label}\r\n                                                description={input.description}\r\n                                                value={values[inputName]}\r\n                                                loadMethod={input.loadMethod}\r\n                                                loadFromDbCollections={input.loadFromDbCollections || []}\r\n                                                nodeFlowData={nodeFlowData}\r\n                                                error={JSON.stringify(errors[inputName])}\r\n                                                onChange={(selection) => {\r\n                                                    const value = selection ? selection.name : ''\r\n                                                    setFieldValue(inputName, value)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                onMenuOpen={() => setVariableSelectorState(false)}\r\n                                                onSetError={() => {\r\n                                                    const value = ''\r\n                                                    setFieldValue(inputName, value)\r\n                                                }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'options') {\r\n                                    const inputName = input.name\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <Autocomplete\r\n                                                id={inputName}\r\n                                                freeSolo\r\n                                                onOpen={() => setVariableSelectorState(false)}\r\n                                                options={input.options || []}\r\n                                                value={findMatchingOptions(input.options, values[inputName]) || getDefaultOptionValue()}\r\n                                                onChange={(e, selection) => {\r\n                                                    const value = selection ? selection.name : ''\r\n                                                    setFieldValue(inputName, value)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                onInputChange={(e, value) => {\r\n                                                    if (!value) setFieldValue(inputName, '')\r\n                                                }}\r\n                                                onBlur={handleBlur}\r\n                                                PopperComponent={StyledPopper}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField {...params} value={values[inputName]} error={Boolean(errors[inputName])} />\r\n                                                )}\r\n                                                renderOption={(props, option) => (\r\n                                                    <Box component='li' {...props}>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                            <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                                {option.label}\r\n                                                            </Typography>\r\n                                                            {option.description && (\r\n                                                                <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                )}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                            <OptionParamsResponse value={values[inputName]} options={input.options || []} />\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n\r\n                                if (input.type === 'array') {\r\n                                    const arrayParamItems = input.arrayParams\r\n                                    const templateArray = input.array\r\n                                    const inputName = input.name\r\n                                    const arrayItemsValues = values[inputName] || []\r\n\r\n                                    return (\r\n                                        <Stack sx={{ mt: 1 }} key={inputName}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <ArrayInputParameters\r\n                                                initialValues={arrayItemsValues}\r\n                                                arrayParams={arrayParamItems}\r\n                                                paramsType={paramsType}\r\n                                                arrayGroupName={inputName}\r\n                                                errors={errors[inputName] ? errors[inputName] : []}\r\n                                                onArrayInputChange={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues)\r\n                                                }}\r\n                                                onArrayInputBlur={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: updateInitialValues\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                onArrayItemRemove={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues)\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: updateInitialValues\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                }}\r\n                                                onArrayItemMouseUp={(variableState, body) => {\r\n                                                    if (body) setVariableSelectorState(variableState, body)\r\n                                                    else setVariableSelectorState(variableState)\r\n                                                }}\r\n                                                onEditVariableDialogOpen={(arrayItemInput, arrayItemValues, arrayItemIndex) => {\r\n                                                    const arrayItemBody = {\r\n                                                        arrayItemInput,\r\n                                                        arrayItemValues,\r\n                                                        arrayItemIndex,\r\n                                                        initialValues: arrayItemsValues\r\n                                                    }\r\n                                                    onEditVariableDialogOpen(input, values, arrayItemBody)\r\n                                                }}\r\n                                            />\r\n                                            <Box key={inputName} sx={{ mb: 2 }}>\r\n                                                <AnimateButton>\r\n                                                    <Button\r\n                                                        disableElevation\r\n                                                        fullWidth\r\n                                                        size='small'\r\n                                                        variant='outlined'\r\n                                                        color='secondary'\r\n                                                        startIcon={<IconPlus />}\r\n                                                        onClick={() => {\r\n                                                            setVariableSelectorState(false)\r\n                                                            let newObj = {}\r\n                                                            if (input.default && input.default.length) {\r\n                                                                newObj = input.default[0]\r\n                                                            } else {\r\n                                                                for (let i = 0; i < templateArray.length; i += 1) {\r\n                                                                    newObj[templateArray[i].name] = templateArray[i].default || ''\r\n                                                                }\r\n                                                            }\r\n                                                            arrayItemsValues.push(newObj)\r\n                                                            onAddArrayItem(values, arrayItemsValues, inputName)\r\n                                                        }}\r\n                                                    >\r\n                                                        Add {input.label}\r\n                                                    </Button>\r\n                                                </AnimateButton>\r\n                                            </Box>\r\n                                        </Stack>\r\n                                    )\r\n                                }\r\n                                return null\r\n                            })}\r\n\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                        fullWidth\r\n                                        size='large'\r\n                                        type='submit'\r\n                                        variant='contained'\r\n                                        color='secondary'\r\n                                    >\r\n                                        Continue\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nInputParameters.propTypes = {\r\n    params: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object,\r\n    nodeParamsValidation: PropTypes.object,\r\n    nodeFlowData: PropTypes.object,\r\n    valueChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n    setVariableSelectorState: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func\r\n}\r\n\r\nexport default InputParameters\r\n","import client from './client'\r\n\r\nconst getCredentials = (nodeCredentialName) => client.get('/credentials', { params: { nodeCredentialName } })\r\n\r\nconst getCredentialParams = (name) => client.get(`/node-credentials/${name}`)\r\n\r\nconst getSpecificCredential = (id, isEncrypted) => client.get(`/credentials/${id}`, { params: { isEncrypted } })\r\n\r\nconst createNewCredential = (credentialBody) => client.post(`/credentials`, credentialBody) //credentialBody: ICredential\r\n\r\nconst updateCredential = (id, credentialBody) => client.put(`/credentials/${id}`, credentialBody) //credentialBody: ICredential\r\n\r\nconst deleteCredential = (id) => client.delete(`/credentials/${id}`)\r\n\r\nexport default {\r\n    getCredentials,\r\n    getCredentialParams,\r\n    getSpecificCredential,\r\n    createNewCredential,\r\n    updateCredential,\r\n    deleteCredential\r\n}\r\n","import client from './client'\r\n\r\nconst geOAuth2PopupURL = (credentialId) => client.get('/oauth2', { params: { credentialId } })\r\nconst geOAuth2RedirectURL = () => client.get('/oauth2-redirecturl')\r\n\r\nexport default {\r\n    geOAuth2PopupURL,\r\n    geOAuth2RedirectURL\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { Box, Button, FormControl, Stack, OutlinedInput, Popper, TextField, Typography, IconButton, Switch } from '@mui/material'\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete'\r\nimport { useTheme, styled } from '@mui/material/styles'\r\n\r\n// third party\r\nimport * as Yup from 'yup'\r\nimport { Formik } from 'formik'\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport Editor from 'react-simple-code-editor'\r\nimport { highlight, languages } from 'prismjs/components/prism-core'\r\nimport 'prismjs/components/prism-clike'\r\nimport 'prismjs/components/prism-javascript'\r\nimport 'prismjs/components/prism-json'\r\nimport 'prismjs/components/prism-markup'\r\nimport 'prismjs/themes/prism.css'\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton'\r\n\r\n// API\r\nimport credentialApi from 'api/credential'\r\nimport oauth2Api from 'api/oauth2'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\nimport useScriptRef from 'hooks/useScriptRef'\r\n\r\n// icons\r\nimport { IconTrash, IconCopy } from '@tabler/icons'\r\n\r\n//css\r\nimport './InputParameters.css'\r\n\r\nimport { TooltipWithParser } from '../../ui-component/TooltipWithParser'\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n})\r\n\r\nconst ADD_NEW_CREDENTIAL = '+ Add New Credential'\r\n\r\n// ==============================|| CREDENTIAL INPUT ||============================== //\r\n\r\nconst CredentialInput = ({\r\n    initialParams,\r\n    paramsType,\r\n    initialValues,\r\n    initialValidation,\r\n    valueChanged,\r\n    paramsChanged,\r\n    onSubmit,\r\n    ...others\r\n}) => {\r\n    const scriptedRef = useScriptRef()\r\n    const theme = useTheme()\r\n\r\n    const [credentialValidation, setCredentialValidation] = useState({})\r\n    const [credentialValues, setCredentialValues] = useState({})\r\n    const [nodeCredentialName, setNodeCredentialName] = useState('')\r\n    const [credentialParams, setCredentialParams] = useState([])\r\n    const [credentialOptions, setCredentialOptions] = useState([])\r\n    const [oAuth2RedirectURL, setOAuth2RedirectURL] = useState('')\r\n\r\n    const getCredentialParamsApi = useApi(credentialApi.getCredentialParams)\r\n    const getRegisteredCredentialsApi = useApi(credentialApi.getCredentials)\r\n    const getSpecificCredentialApi = useApi(credentialApi.getSpecificCredential)\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values\r\n        updateValues.submit = null\r\n        valueChanged(updateValues, paramsType)\r\n    }\r\n\r\n    const getCredentialRequestBody = (values) => {\r\n        if (credentialParams.length === 0) throw new Error('Credential params empty')\r\n\r\n        const credentialData = {}\r\n        for (let i = 0; i < credentialParams.length; i += 1) {\r\n            const credParamName = credentialParams[i].name\r\n            if (credParamName in values) credentialData[credParamName] = values[credParamName]\r\n        }\r\n        delete credentialData.name\r\n\r\n        const credBody = {\r\n            name: values.name,\r\n            nodeCredentialName: values.credentialMethod,\r\n            credentialData\r\n        }\r\n\r\n        return credBody\r\n    }\r\n\r\n    const updateYupValidation = (inputName, validationKey) => {\r\n        const updateValidation = {\r\n            ...credentialValidation,\r\n            [inputName]: Yup.object({ [validationKey]: Yup.string().required(`${inputName} is required`) })\r\n        }\r\n        setCredentialValidation(updateValidation)\r\n    }\r\n\r\n    const clearCredentialParams = () => {\r\n        const updateParams = initialParams.filter((item) => credentialParams.every((paramItem) => item.name !== paramItem.name))\r\n        setCredentialParams([])\r\n        setOAuth2RedirectURL('')\r\n\r\n        paramsChanged(updateParams, paramsType)\r\n    }\r\n\r\n    const clearCredentialParamsValues = (value) => {\r\n        let updateValues = JSON.parse(JSON.stringify(credentialValues))\r\n\r\n        for (let i = 0; i < credentialParams.length; i += 1) {\r\n            const credParamName = credentialParams[i].name\r\n            if (credParamName in updateValues) delete updateValues[credParamName]\r\n        }\r\n        updateValues = {\r\n            ...updateValues,\r\n            registeredCredential: value\r\n        }\r\n        valueChanged(updateValues, paramsType)\r\n    }\r\n\r\n    const onDeleteCredential = async (credentialId) => {\r\n        const response = await credentialApi.deleteCredential(credentialId)\r\n        if (response.data) {\r\n            clearCredentialParams()\r\n            clearCredentialParamsValues('')\r\n        }\r\n    }\r\n\r\n    const openOAuth2PopUpWindow = (oAuth2PopupURL) => {\r\n        const windowWidth = 500\r\n        const windowHeight = 400\r\n        const left = window.screenX + (window.outerWidth - windowWidth) / 2\r\n        const top = window.screenY + (window.outerHeight - windowHeight) / 2.5\r\n        const title = `Connect Credential`\r\n        const url = oAuth2PopupURL\r\n        const popup = window.open(url, title, `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`)\r\n        return popup\r\n    }\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value)\r\n\r\n    const getDefaultOptionValue = () => ''\r\n\r\n    // getRegisteredCredentialsApi successful\r\n    useEffect(() => {\r\n        if (getRegisteredCredentialsApi.data) {\r\n            const credentialOptions = []\r\n            if (getRegisteredCredentialsApi.data.length) {\r\n                for (let i = 0; i < getRegisteredCredentialsApi.data.length; i += 1) {\r\n                    credentialOptions.push({\r\n                        _id: getRegisteredCredentialsApi.data[i]._id,\r\n                        name: getRegisteredCredentialsApi.data[i].name\r\n                    })\r\n                }\r\n            }\r\n            credentialOptions.push({\r\n                name: ADD_NEW_CREDENTIAL\r\n            })\r\n            setCredentialOptions(credentialOptions)\r\n            if (initialParams.find((prm) => prm.name === 'registeredCredential')) {\r\n                updateYupValidation('registeredCredential', 'name')\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getRegisteredCredentialsApi.data])\r\n\r\n    // getCredentialParamsApi successful\r\n    useEffect(() => {\r\n        if (getCredentialParamsApi.data) {\r\n            const newCredentialParams = getCredentialParamsApi.data.credentials\r\n\r\n            const credentialNameParam = {\r\n                label: 'Credential Name',\r\n                name: 'name',\r\n                type: 'string',\r\n                default: ''\r\n            }\r\n\r\n            newCredentialParams.unshift(credentialNameParam)\r\n\r\n            setCredentialParams(newCredentialParams)\r\n\r\n            const updateParams = initialParams\r\n\r\n            for (let i = 0; i < newCredentialParams.length; i += 1) {\r\n                const credParamName = newCredentialParams[i].name\r\n                if (initialParams.find((prm) => prm.name === credParamName) === undefined) {\r\n                    updateParams.push(newCredentialParams[i])\r\n                }\r\n            }\r\n            paramsChanged(updateParams, paramsType)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getCredentialParamsApi.data])\r\n\r\n    // getSpecificCredentialApi successful\r\n    useEffect(() => {\r\n        if (getSpecificCredentialApi.data) {\r\n            const updateValues = {\r\n                ...credentialValues,\r\n                ...getSpecificCredentialApi.data.credentialData,\r\n                name: getSpecificCredentialApi.data.name\r\n            }\r\n            valueChanged(updateValues, paramsType)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificCredentialApi.data])\r\n\r\n    // Initialize values\r\n    useEffect(() => {\r\n        setCredentialValues(initialValues)\r\n        if (initialValues && initialValues.credentialMethod) {\r\n            getRegisteredCredentialsApi.request(initialValues.credentialMethod)\r\n            setNodeCredentialName(initialValues.credentialMethod)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [initialValues])\r\n\r\n    // Initialize validation\r\n    useEffect(() => {\r\n        setCredentialValidation(initialValidation)\r\n    }, [initialValidation])\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={credentialValues}\r\n                    validationSchema={Yup.object().shape(credentialValidation)}\r\n                    onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                const isAddNewCredential =\r\n                                    values && values.registeredCredential && values.registeredCredential.name === ADD_NEW_CREDENTIAL\r\n\r\n                                if (!isAddNewCredential && (credentialParams.length === 0 || !values.credentialMethod)) {\r\n                                    onSubmit(values.credentialMethod ? { ...values, submit: true } : { submit: true }, paramsType)\r\n                                    setStatus({ success: true })\r\n                                    setSubmitting(false)\r\n                                } else {\r\n                                    const body = getCredentialRequestBody(values)\r\n                                    let response\r\n                                    if (isAddNewCredential) {\r\n                                        response = await credentialApi.createNewCredential(body)\r\n                                    } else {\r\n                                        response = await credentialApi.updateCredential(values.registeredCredential._id, body)\r\n                                    }\r\n                                    if (response.data) {\r\n                                        // Open oAuth2 window\r\n                                        if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                            const oAuth2PopupURL = await oauth2Api.geOAuth2PopupURL(response.data._id)\r\n                                            const popUpWindow = openOAuth2PopUpWindow(oAuth2PopupURL.data)\r\n\r\n                                            const oAuth2Completed = async (event) => {\r\n                                                if (event.data === 'success') {\r\n                                                    window.removeEventListener('message', oAuth2Completed, false)\r\n\r\n                                                    const submitValues = {\r\n                                                        credentialMethod: values.credentialMethod,\r\n                                                        registeredCredential: {\r\n                                                            _id: response.data._id,\r\n                                                            name: response.data.name\r\n                                                        },\r\n                                                        submit: true\r\n                                                    }\r\n                                                    clearCredentialParams()\r\n                                                    onSubmit(submitValues, paramsType)\r\n                                                    setStatus({ success: true })\r\n                                                    setSubmitting(false)\r\n\r\n                                                    if (popUpWindow) {\r\n                                                        popUpWindow.close()\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            window.addEventListener('message', oAuth2Completed, false)\r\n                                            return\r\n                                        }\r\n\r\n                                        const submitValues = {\r\n                                            credentialMethod: values.credentialMethod,\r\n                                            registeredCredential: {\r\n                                                _id: response.data._id,\r\n                                                name: response.data.name\r\n                                            },\r\n                                            submit: true\r\n                                        }\r\n                                        clearCredentialParams()\r\n                                        onSubmit(submitValues, paramsType)\r\n                                        setStatus({ success: true })\r\n                                        setSubmitting(false)\r\n                                    } else {\r\n                                        throw new Error(response)\r\n                                    }\r\n                                }\r\n                            }\r\n                        } catch (err) {\r\n                            console.error(err)\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false })\r\n                                setErrors({ submit: err.message })\r\n                                setSubmitting(false)\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                        <form noValidate onSubmit={handleSubmit} {...others}>\r\n                            {initialParams.map((input) => {\r\n                                if (input.type === 'options') {\r\n                                    const inputName = input.name\r\n                                    const availableOptions = input.options || []\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <Stack direction='row'>\r\n                                                <Typography variant='overline'>{input.label}</Typography>\r\n                                                {input.description && <TooltipWithParser title={input.description} />}\r\n                                            </Stack>\r\n                                            <Autocomplete\r\n                                                id={inputName}\r\n                                                freeSolo\r\n                                                options={availableOptions}\r\n                                                value={findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()}\r\n                                                onChange={(e, selection) => {\r\n                                                    const value = selection ? selection.name : ''\r\n                                                    setFieldValue(inputName, value)\r\n                                                    const overwriteValues = {\r\n                                                        [inputName]: value\r\n                                                    }\r\n                                                    onChanged(overwriteValues)\r\n                                                    clearCredentialParams()\r\n                                                    if (selection) {\r\n                                                        getRegisteredCredentialsApi.request(value)\r\n                                                        setNodeCredentialName(value)\r\n                                                    } else {\r\n                                                        setCredentialOptions([])\r\n                                                    }\r\n                                                }}\r\n                                                onBlur={handleBlur}\r\n                                                PopperComponent={StyledPopper}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField {...params} value={values[inputName]} error={Boolean(errors[inputName])} />\r\n                                                )}\r\n                                                renderOption={(props, option) => (\r\n                                                    <Box component='li' {...props}>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                            <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                                {option.label}\r\n                                                            </Typography>\r\n                                                            {option.description && (\r\n                                                                <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                )}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    )\r\n                                }\r\n                                return null\r\n                            })}\r\n\r\n                            {initialParams.find((prm) => prm.name === 'registeredCredential') && (\r\n                                <FormControl fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                    <Stack direction='row'>\r\n                                        <Typography variant='overline'>Registered Credential</Typography>\r\n                                        <TooltipWithParser title='Select previously registered credential OR add new credential' />\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id='registered-credential'\r\n                                        freeSolo\r\n                                        options={credentialOptions}\r\n                                        value={values.registeredCredential && values.credentialMethod ? values.registeredCredential : ' '}\r\n                                        getOptionLabel={(option) => option.name || ' '}\r\n                                        onChange={async (e, selectedCredential) => {\r\n                                            setFieldValue(\r\n                                                'registeredCredential',\r\n                                                selectedCredential !== null ? selectedCredential : initialValues.registeredCredential\r\n                                            )\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                registeredCredential: selectedCredential\r\n                                            }\r\n                                            onChanged(overwriteValues)\r\n                                            if (selectedCredential) {\r\n                                                if (selectedCredential.name !== ADD_NEW_CREDENTIAL) {\r\n                                                    getSpecificCredentialApi.request(selectedCredential._id)\r\n                                                } else {\r\n                                                    clearCredentialParamsValues(selectedCredential)\r\n                                                }\r\n                                                getCredentialParamsApi.request(nodeCredentialName)\r\n                                                if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                                    const redirectURLResp = await oauth2Api.geOAuth2RedirectURL()\r\n                                                    if (redirectURLResp.data) setOAuth2RedirectURL(redirectURLResp.data)\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                        onInputChange={(e, value) => {\r\n                                            if (!value) {\r\n                                                clearCredentialParams()\r\n                                                clearCredentialParamsValues('')\r\n                                            }\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                value={values.registeredCredential}\r\n                                                error={Boolean(errors.registeredCredential)}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component='li' {...props}>\r\n                                                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                    <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                        {option.name}\r\n                                                    </Typography>\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors.registeredCredential && (\r\n                                        <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                            *Registered Credential is required\r\n                                        </span>\r\n                                    )}\r\n                                </FormControl>\r\n                            )}\r\n\r\n                            {values && values.registeredCredential && values.registeredCredential._id && (\r\n                                <Button\r\n                                    sx={{ mb: 2 }}\r\n                                    size='small'\r\n                                    variant='outlined'\r\n                                    startIcon={<IconTrash size={15} />}\r\n                                    onClick={() => onDeleteCredential(values.registeredCredential._id)}\r\n                                >\r\n                                    Delete Credential\r\n                                </Button>\r\n                            )}\r\n\r\n                            {oAuth2RedirectURL && (\r\n                                <div>\r\n                                    <Typography variant='overline'>OAuth2 Redirect URL</Typography>\r\n                                    <Stack direction='row'>\r\n                                        <Typography\r\n                                            sx={{\r\n                                                p: 1,\r\n                                                borderRadius: 10,\r\n                                                backgroundColor: theme.palette.primary.light,\r\n                                                width: 'max-content',\r\n                                                height: 'max-content'\r\n                                            }}\r\n                                            variant='h5'\r\n                                        >\r\n                                            {oAuth2RedirectURL}\r\n                                        </Typography>\r\n                                        <IconButton\r\n                                            title='Copy URL'\r\n                                            color='primary'\r\n                                            onClick={() => navigator.clipboard.writeText(oAuth2RedirectURL)}\r\n                                        >\r\n                                            <IconCopy />\r\n                                        </IconButton>\r\n                                    </Stack>\r\n                                </div>\r\n                            )}\r\n\r\n                            {values.credentialMethod &&\r\n                                credentialParams.map((input) => {\r\n                                    if (input.type === 'json') {\r\n                                        const inputName = input.name\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction='row'>\r\n                                                    <Typography variant='overline'>{input.label}</Typography>\r\n                                                    {input.description && <TooltipWithParser title={input.description} />}\r\n                                                </Stack>\r\n                                                <PerfectScrollbar\r\n                                                    style={{\r\n                                                        border: '1px solid',\r\n                                                        borderColor: theme.palette.grey['500'],\r\n                                                        borderRadius: '12px',\r\n                                                        height: '200px',\r\n                                                        maxHeight: '200px',\r\n                                                        overflowX: 'hidden',\r\n                                                        backgroundColor: 'white'\r\n                                                    }}\r\n                                                    onScroll={(e) => e.stopPropagation()}\r\n                                                >\r\n                                                    <Editor\r\n                                                        placeholder={input.placeholder}\r\n                                                        value={values[inputName] || ''}\r\n                                                        onBlur={(e) => {\r\n                                                            const overwriteValues = {\r\n                                                                ...values,\r\n                                                                [inputName]: e.target.value\r\n                                                            }\r\n                                                            onChanged(overwriteValues)\r\n                                                        }}\r\n                                                        onValueChange={(code) => {\r\n                                                            setFieldValue(inputName, code)\r\n                                                        }}\r\n                                                        highlight={(code) => highlight(code, languages.json)}\r\n                                                        padding={10}\r\n                                                        style={{\r\n                                                            fontSize: '0.875rem',\r\n                                                            minHeight: '200px',\r\n                                                            width: '100%'\r\n                                                        }}\r\n                                                        textareaClassName='editor__textarea'\r\n                                                    />\r\n                                                </PerfectScrollbar>\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        )\r\n                                    }\r\n\r\n                                    if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                        const inputName = input.name\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction='row'>\r\n                                                    <Typography variant='overline'>{input.label}</Typography>\r\n                                                    {input.description && <TooltipWithParser title={input.description} />}\r\n                                                </Stack>\r\n                                                <OutlinedInput\r\n                                                    id={inputName}\r\n                                                    type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                                    value={values[inputName] || ''}\r\n                                                    placeholder={input.placeholder}\r\n                                                    name={inputName}\r\n                                                    onBlur={(e) => {\r\n                                                        handleBlur(e)\r\n                                                        onChanged(values)\r\n                                                    }}\r\n                                                    onChange={handleChange}\r\n                                                />\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        )\r\n                                    }\r\n\r\n                                    if (input.type === 'boolean') {\r\n                                        const inputName = input.name\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction='row'>\r\n                                                    <Typography variant='overline'>{input.label}</Typography>\r\n                                                    {input.description && <TooltipWithParser title={input.description} />}\r\n                                                </Stack>\r\n                                                <Switch\r\n                                                    checked={!!values[inputName]}\r\n                                                    onChange={(event) => {\r\n                                                        setFieldValue(inputName, event.target.checked)\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: event.target.checked\r\n                                                        }\r\n                                                        onChanged(overwriteValues)\r\n                                                    }}\r\n                                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                            </FormControl>\r\n                                        )\r\n                                    }\r\n\r\n                                    if (input.type === 'options') {\r\n                                        const inputName = input.name\r\n                                        const availableOptions = input.options || []\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                                <Stack direction='row'>\r\n                                                    <Typography variant='overline'>{input.label}</Typography>\r\n                                                    {input.description && <TooltipWithParser title={input.description} />}\r\n                                                </Stack>\r\n                                                <Autocomplete\r\n                                                    id={inputName}\r\n                                                    freeSolo\r\n                                                    options={availableOptions}\r\n                                                    value={\r\n                                                        findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()\r\n                                                    }\r\n                                                    onChange={(e, selection) => {\r\n                                                        const value = selection ? selection.name : ''\r\n                                                        setFieldValue(inputName, value)\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: value\r\n                                                        }\r\n                                                        onChanged(overwriteValues)\r\n                                                    }}\r\n                                                    onBlur={handleBlur}\r\n                                                    PopperComponent={StyledPopper}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            value={values[inputName]}\r\n                                                            error={Boolean(errors[inputName])}\r\n                                                        />\r\n                                                    )}\r\n                                                    renderOption={(props, option) => (\r\n                                                        <Box component='li' {...props}>\r\n                                                            <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                                <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                                    {option.label}\r\n                                                                </Typography>\r\n                                                                {option.description && (\r\n                                                                    <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </Box>\r\n                                                    )}\r\n                                                />\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        )\r\n                                    }\r\n                                    return null\r\n                                })}\r\n\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                        fullWidth\r\n                                        size='large'\r\n                                        type='submit'\r\n                                        variant='contained'\r\n                                        color='secondary'\r\n                                    >\r\n                                        {values &&\r\n                                        values.registeredCredential &&\r\n                                        (values.registeredCredential.name === ADD_NEW_CREDENTIAL || credentialParams.length)\r\n                                            ? 'Save and Continue'\r\n                                            : 'Continue'}\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nCredentialInput.propTypes = {\r\n    initialParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object,\r\n    initialValidation: PropTypes.object,\r\n    valueChanged: PropTypes.func,\r\n    paramsChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func\r\n}\r\n\r\nexport default CredentialInput\r\n"],"sourceRoot":""}