{"version":3,"sources":["api/workflows.js","views/canvas/CanvasNode.js","views/canvas/ButtonEdge.js","ui-component/extended/Transitions.js","ui-component/dialog/AttachmentDialog.js","ui-component/dialog/HTMLDialog.js","hooks/useConfirm.js","ui-component/dialog/ExpandDataDialog.js","api/executions.js","views/executions/index.js","menu-items/settings.js","views/settings/index.js","ui-component/dialog/SaveWorkflowDialog.js","views/canvas/CanvasHeader.js","views/canvas/AddNodes.js","api/nodes.js","views/output/OutputResponses.js","views/canvas/VariableSelector.js","ui-component/dialog/EditVariableDialog.js","views/canvas/EditNodes.js","ui-component/dialog/ConfirmDialog.js","ui-component/dialog/TestWorkflowDialog.js","api/webhooks.js","views/canvas/index.js"],"names":["getAllWorkflows","client","get","getSpecificWorkflow","shortId","createNewWorkflow","body","post","updateWorkflow","put","deployWorkflow","deleteWorkflow","delete","testWorkflow","startingNodeId","CardWrapper","styled","MainCard","theme","backgroundColor","border","color","darkTextPrimary","width","height","padding","boxShadow","borderColor","palette","primary","main","handlerPosition","CanvasNode","data","useTheme","content","sx","selected","text","secondary","outputResponses","submit","Avatar","variant","typography","smallAvatar","borderRadius","background","success","dark","ml","position","top","right","needRetest","warning","Box","inputAnchors","map","inputAnchor","index","type","Position","Top","id","style","left","length","display","flexDirection","alignItems","item","marginRight","commonAvatar","largeAvatar","cursor","src","baseURL","name","alt","Typography","fontSize","fontWeight","label","outputAnchors","outputAnchor","Bottom","bottom","ButtonEdge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","markerEnd","edgePath","getBezierPath","getEdgeCenter","edgeCenterX","edgeCenterY","dispatch","useDispatch","className","d","x","y","labelStyle","fill","labelBgStyle","labelBgPadding","labelBgBorderRadius","foreignObjectSize","requiredExtensions","onClick","event","evt","stopPropagation","REMOVE_EDGE","edgeId","onEdgeClick","Transitions","forwardRef","ref","children","direction","others","positionSX","transformOrigin","Grow","Collapse","Fade","timeout","appear","enter","exit","Slide","Zoom","defaultProps","TabPanel","props","value","other","role","hidden","p","AttachmentDialog","show","dialogProps","onCancel","portalElement","document","getElementById","useState","setValue","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","component","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","title","DialogContent","Tabs","onChange","newValue","executionData","execObj","execObjIndex","Tab","attachments","attachment","attchIndex","marginBottom","justifyContent","filename","contentType","size","href","download","rel","target","borderStyle","minHeight","minWidth","createPortal","resolveCallback","HTMLDialog","html","overflow","dangerouslySetInnerHTML","__html","ExpandDataDialog","onCopyClick","enableClipboard","e","copyToClipboard","node","useConfirm","useContext","ConfirmContext","confirmState","closeConfirm","HIDE_CONFIRM","confirm","confirmPayload","SHOW_CONFIRM","payload","Promise","res","onConfirm","Executions","workflowShortId","execution","executionCount","isExecutionOpen","anchorEl","expanded","setExpanded","setOpen","showHTMLDialog","setShowHTMLDialog","HTMLDialogProps","setHTMLDialogProps","showAttachmentDialog","setShowAttachmentDialog","attachmentDialogProps","setAttachmentDialogProps","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","varPrevOpen","useRef","useNotifier","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","setChipBgColor","execState","light","error","grey","deleteExecution","executionShortId","description","confirmButtonName","cancelButtonName","executionsApi","workflowsApi","workflowResponse","SET_WORKFLOW","workflow","message","options","key","Date","getTime","random","action","Button","errorData","response","status","statusText","persist","useEffect","current","Popper","placement","undefined","transition","disablePortal","popperOptions","modifiers","offset","zIndex","TransitionProps","in","Paper","elevation","shadow","shadows","Stack","maxHeight","overflowX","List","py","breakpoints","down","my","pl","exec","Accordion","isExpanded","AccordionSummary","expandIcon","mr","mb","state","Chip","moment","createdDate","format","IconButton","JSON","parse","execData","execDataIndex","AccordionDetails","nodeLabel","collapsed","dialogProp","onExpandDialogClicked","mt","pb","icons","IconTrash","IconFileUpload","IconFileExport","settings","url","icon","Settings","isSettingsOpen","onSettingsItemClick","onUploadFile","settingsMenu","setSettingsMenu","filter","menu","items","NavItem","level","navType","SaveWorkflowDialog","workflowName","setWorkflowName","isReadyToSave","setIsReadyToSave","OutlinedInput","placeholder","DialogActions","disabled","CanvasHeader","handleSaveFlow","handleDeployWorkflow","handleStopWorkflow","handleDeleteWorkflow","handleLoadWorkflow","navigate","useNavigate","workflowNameRef","viewExecutionRef","settingsRef","isEditingWorkflowName","setEditingWorkflowName","setExecutionOpen","setSettingsOpen","workfowDialogOpen","setWorkfowDialogOpen","updateWorkflowApi","useApi","canvas","useSelector","ButtonBase","mediumAvatar","stroke","flexGrow","isDirty","orange","deployed","TextField","inputRef","defaultValue","updateBody","request","setting","flowData","dataStr","stringify","generateExportFlowData","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","console","file","AddNodes","nodesData","customization","searchValue","setSearchValue","nodes","setNodes","anchorRef","prevOpen","handleClose","contains","focus","Fab","ClickAwayListener","onClickAway","pr","setTimeout","returnData","nd","toLowerCase","includes","startAdornment","InputAdornment","inputProps","Divider","onDragStart","dataTransfer","setData","effectAllowed","draggable","ListItemButton","ListItem","ListItemAvatar","objectFit","ListItemText","OutputResponses","nodeId","nodeParamsType","nodeFlowData","edges","onSubmit","outputResponse","setOutputResponse","errorResponse","setErrorResponse","nodeName","setNodeName","nodeType","setNodeType","setNodeLabel","isTestNodeBtnDisabled","disableTestNodeBtn","testNodeLoading","setTestNodeLoading","testNodeApi","nodesApi","output","paramsTypes","paramType","checkIfTestNodeValid","selectedNode","find","testNodeData","errorMessage","loading","webhookEndpoint","spacing","startIcon","navigator","clipboard","writeText","window","respObj","respObjIndex","openAttachmentDialog","AnimateButton","disableElevation","alert","testNodeBody","socket","socketIOClient","on","clientId","disconnect","onTestNodeClick","CircularProgress","marginTop","marginLeft","VariableSelector","isVariableSelectorOpen","onVariableSelected","onClipboardCopy","namespaces","namespace","returnVariablePath","test","endsWith","substring","EditVariableDialog","inputValue","setInputValue","input","setInput","copiedVariableBody","setCopiedVariableBody","languages","js","languageType","setLanguageType","onMouseUp","selectionEnd","cursorPosition","textBeforeCursorPosition","textAfterCursorPosition","newInput","values","inputValues","arrayItemBody","arrayItemValues","arrayItemInput","toString","json","flex","onValueChange","code","highlight","onBlur","textareaClassName","availableNodesForVariable","updateArrayValues","updateInitialValues","initialValues","arrayItemIndex","updateValues","onSave","EditNodes","onNodeLabelUpdate","onNodeValuesUpdate","setNodeFlowData","nodeDetails","setNodeDetails","nodeParams","setNodeParams","setNodeParamsType","nodeParamsInitialValues","setNodeParamsInitialValues","nodeParamsValidation","setNodeParamsValidation","setVariableSelectorOpen","variableBody","setVariableBody","setAvailableNodesForVariable","isEditVariableDialogOpen","setEditVariableDialog","editVariableDialogProps","setEditVariableDialogProps","ps","getSpecificNodeApi","scrollTop","curr","handleAccordionChange","paramsType","handleNodeLabelChange","saveNodeLabel","onEditVariableDialogOpen","variableNodesIds","getAvailableNodeIdsForVariable","nodesForVariable","push","setVariableSelectorState","variableSelectorState","paramsChanged","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","originalParam","updateNodeDetails","valueChanged","formValues","updateNodeFlowData","outputResponsesFlowData","indexOf","showHideParameters","displayType","toBeDeleteParams","displayOptions","Object","keys","forEach","path","comparisonValue","replace","groundValue","lodash","Array","isArray","RegExp","displayParameters","params","arrayIndex","arrayInitialValue","inputArray","j","array","arrayParams","hide","returnParams","prm","showHideOptions","returnOptions","toBeDeleteOptions","option","opt","clonedParams","initializeFormValuesAndParams","reorganizedParams","cloneDeep","handleCredentialParams","default","newObj","validationSchema","inputOptional","optional","Yup","required","matches","numberOrExpressionRegex","setYupValidation","actions","networks","credentials","inputParameters","containerRef","el","pt","textAlign","InputParameters","CredentialInput","initialParams","initialValidation","clonedNodeFlowData","set","ConfirmDialog","DialogContentText","TestWorkflowDialog","onItemClick","nodeTypes","customNode","edgeTypes","buttonedge","Canvas","URLpath","location","pathname","split","startsWith","canvasDataStore","setCanvasDataStore","setWorkflow","isTestWorkflowDialogOpen","setTestWorkflowDialogOpen","testWorkflowDialogProps","setTestWorkflowDialogProps","isTestingWorkflow","setIsTestingWorkflow","useNodesState","onNodesChange","useEdgesState","setEdges","onEdgesChange","rfInstance","setRfInstance","setSelectedNode","reactFlowWrapper","getNodesApi","removeTestTriggersApi","deleteAllTestWebhooksApi","webhooksApi","createNewWorkflowApi","testWorkflowApi","getSpecificWorkflowApi","rfInstanceObject","toObject","newWorkflowBody","savedWorkflowResponse","REMOVE_DIRTY","deployedWorkflowResponse","halt","stoppedWorkflowResponse","onNodeDoubleClick","useCallback","clickedNode","nds","checkIfNodeLabelUnique","getNodes","setDirty","onDragOver","preventDefault","dropEffect","onDrop","reactFlowBounds","getBoundingClientRect","nodeData","getData","checkMultipleTriggers","generateWebhookEndpoint","project","clientX","clientY","newNodeId","getUniqueNodeId","newNode","addAnchors","concat","saveWorkflowSuccess","SET_DIRTY","initialFlow","history","replaceState","getEdges","edge","removeEdgeId","usePrompt","AppBar","enableColorOnDark","bgcolor","Toolbar","onNodeDragStop","onConnect","newEdge","source","sourceHandle","targetHandle","getEdgeLabelName","eds","addEdge","onInit","fitView","nodeStrokeColor","nodeColor","nodeBorderRadius","transform","gap","outputValues"],"mappings":"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","file":"static/js/10.3249cc45.chunk.js","sourcesContent":["import client from \"./client\";\r\n\r\nconst getAllWorkflows = () => client.get(\"/workflows\");\r\n\r\nconst getSpecificWorkflow = (shortId) => client.get(`/workflows/${shortId}`);\r\n\r\nconst createNewWorkflow = (body) => client.post(`/workflows`, body); //body: IWorkflow\r\n\r\nconst updateWorkflow = (shortId, body) => client.put(`/workflows/${shortId}`, body); //body: IWorkflow\r\n\r\nconst deployWorkflow = (shortId, body) => client.post(`/workflows/deploy/${shortId}`, body || {}); //body: { halt: boolean }\r\n\r\nconst testWorkflow = (startingNodeId, body) => client.post(`/workflows/test/${startingNodeId}`, body); //body: ITestWorkflowBody\r\n\r\nconst deleteWorkflow = (shortId) => client.delete(`/workflows/${shortId}`);\r\n\r\nexport default {\r\n    getAllWorkflows,\r\n    getSpecificWorkflow,\r\n    createNewWorkflow,\r\n    updateWorkflow,\r\n    deployWorkflow,\r\n    deleteWorkflow,\r\n    testWorkflow\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { Handle, Position } from 'react-flow-renderer';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Avatar, Box, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\n// icons\r\nimport { IconCheck, IconExclamationMark } from '@tabler/icons';\r\n\r\n// const\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    border: 'solid 1px',\r\n    color: theme.darkTextPrimary,\r\n    width: '200px',\r\n    height: 'auto',\r\n    padding: '10px',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    '&:hover': {\r\n        borderColor: theme.palette.primary.main\r\n    },\r\n}));\r\n\r\nconst handlerPosition = [\r\n    [['50%']],\r\n    [['30%'], ['70%']],\r\n];\r\n\r\n// ===========================|| CANVAS NODE ||=========================== //\r\n\r\nconst CanvasNode = ({ data }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <>\r\n            <CardWrapper \r\n                content={false} \r\n                sx={{\r\n                    borderColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary\r\n                }} \r\n                border={false}\r\n            >\r\n                {data && data.outputResponses && data.outputResponses.submit && (\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            ...theme.typography.smallAvatar,\r\n                            borderRadius: '50%',\r\n                            background: theme.palette.success.dark,\r\n                            color: 'white',\r\n                            ml: 2,\r\n                            position: 'absolute',\r\n                            top: -10,\r\n                            right: -10\r\n                        }}\r\n                    >\r\n                        <IconCheck />\r\n                    </Avatar>\r\n                )}\r\n                \r\n                {data && data.outputResponses && data.outputResponses.needRetest && (\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            ...theme.typography.smallAvatar,\r\n                            borderRadius: '50%',\r\n                            background: theme.palette.warning.dark,\r\n                            color: 'white',\r\n                            ml: 2,\r\n                            position: 'absolute',\r\n                            top: -10,\r\n                            right: -10\r\n                        }}\r\n                    >\r\n                        <IconExclamationMark />\r\n                    </Avatar>\r\n                )}\r\n              \r\n                <Box>\r\n                    {data.inputAnchors.map((inputAnchor, index) => (\r\n                        <Handle \r\n                            type=\"target\"\r\n                            position={Position.Top} \r\n                            key={inputAnchor.id} \r\n                            id={inputAnchor.id} \r\n                            style={{ \r\n                                height: 15,\r\n                                width: 15,\r\n                                top: -7.5,\r\n                                backgroundColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary,\r\n                                left: handlerPosition[data.inputAnchors.length-1][index]\r\n                            }} \r\n                        />\r\n                    ))}\r\n                    <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n                        <Box item style={{width: 50, marginRight: 10}}>\r\n                            <div\r\n                                style={{\r\n                                    ...theme.typography.commonAvatar,\r\n                                    ...theme.typography.largeAvatar,\r\n                                    backgroundColor: 'white',\r\n                                    cursor: 'grab'\r\n                                }}\r\n                            >\r\n                                <img style={{ width: '100%', height: '100%' }} src={`${baseURL}/api/v1/node-icon/${data.name}`} alt=\"Notification\" />\r\n                            </div>\r\n                        </Box>\r\n                        <Box>\r\n                            <Typography\r\n                                sx={{\r\n                                    fontSize: '1rem',\r\n                                    fontWeight: 500,\r\n                                }}\r\n                            >\r\n                                {data.label}\r\n                            </Typography>\r\n                        </Box>\r\n                    </div>\r\n                    {data.outputAnchors.map((outputAnchor, index) => (\r\n                        <Handle \r\n                            type=\"source\" \r\n                            position={Position.Bottom} \r\n                            key={outputAnchor.id} \r\n                            id={outputAnchor.id} \r\n                            style={{ \r\n                                height: 15,\r\n                                width: 15,\r\n                                bottom: -7.5,\r\n                                backgroundColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary,\r\n                                left: handlerPosition[data.outputAnchors.length-1][index] \r\n                            }} \r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </CardWrapper>\r\n        </>\r\n    );\r\n};\r\n\r\nCanvasNode.propTypes = {\r\n    data: PropTypes.object,\r\n};\r\n\r\nexport default CanvasNode;\r\n","import { getBezierPath, getEdgeCenter,  EdgeText } from 'react-flow-renderer';\r\nimport PropTypes from 'prop-types';\r\nimport { useDispatch } from 'react-redux';\r\nimport { REMOVE_EDGE } from 'store/actions';\r\n\r\nimport './index.css';\r\n\r\nconst foreignObjectSize = 40;\r\n\r\nconst ButtonEdge = ({ \r\n    id,\r\n    sourceX,\r\n    sourceY,\r\n    targetX,\r\n    targetY,\r\n    sourcePosition,\r\n    targetPosition,\r\n    style = {},\r\n    data,\r\n    markerEnd\r\n}) => {\r\n\r\n    const edgePath = getBezierPath({\r\n        sourceX,\r\n        sourceY,\r\n        sourcePosition,\r\n        targetX,\r\n        targetY,\r\n        targetPosition,\r\n    });\r\n\r\n    const [edgeCenterX, edgeCenterY] = getEdgeCenter({\r\n        sourceX,\r\n        sourceY,\r\n        targetX,\r\n        targetY,\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onEdgeClick = (evt, id) => {\r\n        evt.stopPropagation();\r\n        dispatch({ type: REMOVE_EDGE, edgeId: id });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <path\r\n                id={id}\r\n                style={style}\r\n                className=\"react-flow__edge-path\"\r\n                d={edgePath}\r\n                markerEnd={markerEnd}\r\n            />\r\n            {data && data.label && \r\n            <EdgeText\r\n                x={sourceX + 10}\r\n                y={sourceY + 10}\r\n                label={data.label}\r\n                labelStyle={{ fill: 'black' }}\r\n                labelBgStyle={{ fill: 'transparent' }}\r\n                labelBgPadding={[2, 4]}\r\n                labelBgBorderRadius={2}\r\n            />}\r\n            <foreignObject\r\n                width={foreignObjectSize}\r\n                height={foreignObjectSize}\r\n                x={edgeCenterX - foreignObjectSize / 2}\r\n                y={edgeCenterY - foreignObjectSize / 2}\r\n                className=\"edgebutton-foreignobject\"\r\n                requiredExtensions=\"http://www.w3.org/1999/xhtml\"\r\n            >\r\n                <div>\r\n                    <button type=\"button\" className=\"edgebutton\" onClick={(event) => onEdgeClick(event, id)}>\r\n                        ×\r\n                    </button>\r\n                </div>\r\n            </foreignObject>\r\n        </>\r\n    );\r\n}\r\n\r\nButtonEdge.propTypes = {\r\n    id: PropTypes.string,\r\n    sourceX: PropTypes.number,\r\n    sourceY: PropTypes.number,\r\n    targetX: PropTypes.number,\r\n    targetY: PropTypes.number,\r\n    sourcePosition: PropTypes.any,\r\n    targetPosition: PropTypes.any,\r\n    style: PropTypes.object,\r\n    data: PropTypes.object,\r\n    markerEnd: PropTypes.any,\r\n};\r\n\r\nexport default ButtonEdge;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { Collapse, Fade, Box, Grow, Slide, Zoom } from '@mui/material';\r\n\r\n// ==============================|| TRANSITIONS ||============================== //\r\n\r\nconst Transitions = forwardRef(({ children, position, type, direction, ...others }, ref) => {\r\n    let positionSX = {\r\n        transformOrigin: '0 0 0'\r\n    };\r\n\r\n    switch (position) {\r\n        case 'top-right':\r\n            positionSX = {\r\n                transformOrigin: 'top right'\r\n            };\r\n            break;\r\n        case 'top':\r\n            positionSX = {\r\n                transformOrigin: 'top'\r\n            };\r\n            break;\r\n        case 'bottom-left':\r\n            positionSX = {\r\n                transformOrigin: 'bottom left'\r\n            };\r\n            break;\r\n        case 'bottom-right':\r\n            positionSX = {\r\n                transformOrigin: 'bottom right'\r\n            };\r\n            break;\r\n        case 'bottom':\r\n            positionSX = {\r\n                transformOrigin: 'bottom'\r\n            };\r\n            break;\r\n        case 'top-left':\r\n        default:\r\n            positionSX = {\r\n                transformOrigin: '0 0 0'\r\n            };\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <Box ref={ref}>\r\n            {type === 'grow' && (\r\n                <Grow {...others}>\r\n                    <Box sx={positionSX}>{children}</Box>\r\n                </Grow>\r\n            )}\r\n            {type === 'collapse' && (\r\n                <Collapse {...others} sx={positionSX}>\r\n                    {children}\r\n                </Collapse>\r\n            )}\r\n            {type === 'fade' && (\r\n                <Fade\r\n                    {...others}\r\n                    timeout={{\r\n                        appear: 500,\r\n                        enter: 600,\r\n                        exit: 400\r\n                    }}\r\n                >\r\n                    <Box sx={positionSX}>{children}</Box>\r\n                </Fade>\r\n            )}\r\n            {type === 'slide' && (\r\n                <Slide\r\n                    {...others}\r\n                    timeout={{\r\n                        appear: 0,\r\n                        enter: 400,\r\n                        exit: 200\r\n                    }}\r\n                    direction={direction}\r\n                >\r\n                    <Box sx={positionSX}>{children}</Box>\r\n                </Slide>\r\n            )}\r\n            {type === 'zoom' && (\r\n                <Zoom {...others}>\r\n                    <Box sx={positionSX}>{children}</Box>\r\n                </Zoom>\r\n            )}\r\n        </Box>\r\n    );\r\n});\r\n\r\nTransitions.propTypes = {\r\n    children: PropTypes.node,\r\n    type: PropTypes.oneOf(['grow', 'fade', 'collapse', 'slide', 'zoom']),\r\n    position: PropTypes.oneOf(['top-left', 'top-right', 'top', 'bottom-left', 'bottom-right', 'bottom']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right'])\r\n};\r\n\r\nTransitions.defaultProps = {\r\n    type: 'grow',\r\n    position: 'top-left',\r\n    direction: 'up'\r\n};\r\n\r\nexport default Transitions;\r\n","import { createPortal } from 'react-dom';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { \r\n    Dialog, \r\n    DialogContent, \r\n    DialogTitle,\r\n    Tabs,\r\n    Tab,\r\n    Box,\r\n    Typography\r\n} from '@mui/material';\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`attachment-tabpanel-${index}`}\r\n            aria-labelledby={`attachment-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ p: 1 }}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n  \r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};\r\n  \r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `attachment-tab-${index}`,\r\n        'aria-controls': `attachment-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst AttachmentDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const formatBytes = (bytes, decimals = 2) => {\r\n        if (bytes === 0) return '0 Bytes';\r\n    \r\n        const k = 1024;\r\n        const dm = decimals < 0 ? 0 : decimals;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n    \r\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    \r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\r\n    }\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            onClose={onCancel}\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Tabs value={value} onChange={handleChange} aria-label=\"attachment tabs\">\r\n                    {dialogProps.executionData.map((execObj, execObjIndex) =>\r\n                        <Tab key={execObjIndex} label={`Item ${execObjIndex}`} {...a11yProps(execObjIndex)} />\r\n                    )}\r\n                </Tabs>\r\n                {dialogProps.executionData.map((execObj, execObjIndex) =>\r\n                    <TabPanel key={execObjIndex} value={value} index={execObjIndex}>\r\n                        {execObj.attachments && execObj.attachments.map((attachment, attchIndex) =>\r\n                            <div key={attchIndex} style={{ marginBottom: 10 }}>\r\n                                <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between'}}>\r\n                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                        {attachment.filename ? attachment.filename : `Attachment ${attchIndex}`} | {attachment.contentType} {attachment.size ? ` | ${formatBytes(attachment.size)}` : '' }\r\n                                    </Typography>\r\n                                    <a href={attachment.content} download rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                        Download File\r\n                                    </a>\r\n                                </div>\r\n                                <embed\r\n                                    src={attachment.content}\r\n                                    width=\"100%\"\r\n                                    height=\"100%\"\r\n                                    type={attachment.contentType}\r\n                                    style={{ borderStyle: \"solid\", minHeight: '100vh', minWidth: '100vh' }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        {!execObj.attachments && <div>No Attachment</div>}\r\n                    </TabPanel>\r\n                )}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nAttachmentDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n};\r\n\r\nexport default AttachmentDialog;\r\n","import { createPortal } from 'react-dom';\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { \r\n    Dialog, \r\n    DialogContent, \r\n    DialogTitle,\r\n    Tabs,\r\n    Tab,\r\n    Box,\r\n} from '@mui/material';\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`attachment-tabpanel-${index}`}\r\n            aria-labelledby={`attachment-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{ p: 1 }}>\r\n                    {children}\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n  \r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n};\r\n  \r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `attachment-tab-${index}`,\r\n        'aria-controls': `attachment-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst HTMLDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            onClose={onCancel}\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Tabs value={value} onChange={handleChange} aria-label=\"attachment tabs\">\r\n                    {dialogProps.executionData.map((execObj, execObjIndex) =>\r\n                        <Tab key={execObjIndex} label={`Item ${execObjIndex}`} {...a11yProps(execObjIndex)} />\r\n                    )}\r\n                </Tabs>\r\n                {dialogProps.executionData.map((execObj, execObjIndex) =>\r\n                    <TabPanel key={execObjIndex} value={value} index={execObjIndex}>\r\n                        {execObj.html && <div style={{ width: '100%', height: '100%', overflow: 'auto' }} dangerouslySetInnerHTML={{ __html: execObj.html }} />}\r\n                        {!execObj.html && <div>No HTML</div>}\r\n                    </TabPanel>\r\n                )}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nHTMLDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n};\r\n\r\nexport default HTMLDialog;\r\n","import { useContext } from 'react';\r\nimport ConfirmContext from 'store/context/ConfirmContext';\r\nimport { HIDE_CONFIRM, SHOW_CONFIRM } from \"store/actions\";\r\n\r\nlet resolveCallback;\r\nconst useConfirm = () => {\r\n    const [confirmState, dispatch] = useContext(ConfirmContext);\r\n\r\n    const closeConfirm = () => {\r\n        dispatch({\r\n            type: HIDE_CONFIRM\r\n        });\r\n    };\r\n\r\n    const onConfirm = () => {\r\n        closeConfirm();\r\n        resolveCallback(true);\r\n    };\r\n\r\n    const onCancel = () => {\r\n        closeConfirm();\r\n        resolveCallback(false);\r\n    };\r\n    const confirm = (confirmPayload) => {\r\n        dispatch({\r\n            type: SHOW_CONFIRM,\r\n            payload: confirmPayload\r\n        });\r\n        return new Promise((res) => {\r\n            resolveCallback = res;\r\n        });\r\n    };\r\n    \r\n    return { confirm, onConfirm, onCancel, confirmState };\r\n}\r\n\r\nexport default useConfirm;","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { \r\n    Dialog, \r\n    DialogContent, \r\n    DialogTitle \r\n} from '@mui/material';\r\nimport ReactJson from 'react-json-view'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\nconst ExpandDataDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onCopyClick,\r\n    enableClipboard,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"md\"\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {!enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={e => copyToClipboard(e)} />}\r\n                {enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={e => onCopyClick(e, dialogProps.node)} />}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nExpandDataDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onCopyClick: PropTypes.func,\r\n    enableClipboard: PropTypes.bool,\r\n};\r\n\r\nexport default ExpandDataDialog;\r\n\r\n","import client from \"./client\";\r\n\r\nconst getAllExecutions = () => client.get(\"/executions\");\r\n\r\nconst getSpecificExecution = (shortId) => client.get(`/executions/${shortId}`);\r\n\r\nconst createNewExecution = (body) => client.post(`/executions`, body); //body: IExecution\r\n\r\nconst updateExecution = (shortId, body) => client.put(`/executions/${shortId}`, body); //body: IExecution\r\n\r\nconst deleteExecution = (shortId) => client.delete(`/executions/${shortId}`);\r\n\r\nexport default {\r\n    getAllExecutions,\r\n    getSpecificExecution,\r\n    createNewExecution,\r\n    updateExecution,\r\n    deleteExecution,\r\n};\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n    SET_WORKFLOW,\r\n    enqueueSnackbar as enqueueSnackbarAction,\r\n    closeSnackbar as closeSnackbarAction,\r\n} from 'store/actions';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport {\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Paper,\r\n    Popper,\r\n    Chip,\r\n    Stack,\r\n    Typography,\r\n    Button,\r\n    IconButton\r\n} from '@mui/material';\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport moment from 'moment';\r\nimport ReactJson from 'react-json-view'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport AttachmentDialog from 'ui-component/dialog/AttachmentDialog';\r\nimport HTMLDialog from 'ui-component/dialog/HTMLDialog';\r\nimport ExpandDataDialog from 'ui-component/dialog/ExpandDataDialog';\r\n\r\n// hooks\r\nimport useConfirm from \"hooks/useConfirm\";\r\nimport useNotifier from 'utils/useNotifier';\r\n\r\n// icon\r\nimport { IconTrash, IconX, IconArrowsMaximize } from '@tabler/icons';\r\n\r\n// API\r\nimport executionsApi from \"api/executions\";\r\nimport workflowsApi from \"api/workflows\";\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\n\r\n// ==============================|| EXECUTIONS ||============================== //\r\n\r\nconst Executions = ({ workflowShortId, execution, executionCount, isExecutionOpen, anchorEl }) => {\r\n    const theme = useTheme();\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [showHTMLDialog, setShowHTMLDialog] = useState(false);\r\n    const [HTMLDialogProps, setHTMLDialogProps] = useState({});\r\n    const [showAttachmentDialog, setShowAttachmentDialog] = useState(false);\r\n    const [attachmentDialogProps, setAttachmentDialogProps] = useState({});\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false);\r\n    const [expandDialogProps, setExpandDialogProps] = useState({});\r\n\r\n    const dispatch = useDispatch();\r\n    const varPrevOpen = useRef(open);\r\n    const { confirm } = useConfirm();\r\n\r\n    useNotifier();\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args));\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args));\r\n\r\n    const handleAccordionChange = (executionShortId) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? executionShortId : false);\r\n    };\r\n\r\n    const setChipColor = (execState) => {\r\n        if (execState === 'INPROGRESS') return theme.palette.warning.dark;\r\n        if (execState === 'FINISHED') return theme.palette.success.dark;\r\n        if (execState === 'ERROR') return theme.palette.error.dark;\r\n        if (execState === 'TERMINATED' || execState === 'TIMEOUT') return theme.palette.grey['700'];\r\n        return theme.palette.primary.dark;\r\n    }\r\n\r\n    const setChipBgColor = (execState) => {\r\n        if (execState === 'INPROGRESS') return theme.palette.warning.light;\r\n        if (execState === 'FINISHED') return theme.palette.success.light;\r\n        if (execState === 'ERROR') return theme.palette.error.light;\r\n        if (execState === 'TERMINATED' || execState === 'TIMEOUT') return theme.palette.grey['300'];\r\n        return theme.palette.primary.light;\r\n    }\r\n\r\n    const openAttachmentDialog = (executionData) => {\r\n        const dialogProp = {\r\n            title: 'Attachments',\r\n            executionData\r\n        };\r\n        setAttachmentDialogProps(dialogProp);\r\n        setShowAttachmentDialog(true);\r\n    };\r\n\r\n    const openHTMLDialog = (executionData) => {\r\n        const dialogProp = {\r\n            title: 'HTML',\r\n            executionData\r\n        };\r\n        setHTMLDialogProps(dialogProp);\r\n        setShowHTMLDialog(true);\r\n    };\r\n\r\n    const onExpandDialogClicked = (executionData, nodeLabel) => {\r\n        const dialogProp = {\r\n            title: `Execution Data: ${nodeLabel}`,\r\n            data: executionData\r\n        };\r\n        setExpandDialogProps(dialogProp);\r\n        setShowExpandDialog(true);\r\n    };\r\n\r\n    const deleteExecution = async(e, executionShortId) => {\r\n        e.stopPropagation();\r\n        const confirmPayload = {\r\n            title: `Delete`,\r\n            description: `Delete execution ${executionShortId}?`,\r\n            confirmButtonName: 'Delete',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload);\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                const executionResp = await executionsApi.deleteExecution(executionShortId);\r\n                if (executionResp.data) {\r\n                    const workflowResponse = await workflowsApi.getSpecificWorkflow(workflowShortId);\r\n                    if (workflowResponse.data) dispatch({ type: SET_WORKFLOW, workflow: workflowResponse.data });\r\n                }\r\n                enqueueSnackbar({\r\n                    message: 'Execution deleted!',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: key => (\r\n                            <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        ),\r\n                    },\r\n                });\r\n    \r\n            } catch (error) {\r\n                const errorData =  error.response.data || `${error.response.status}: ${error.response.statusText}`;\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: key => (\r\n                            <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        ),\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    // Handle Accordian\r\n    useEffect(() => {\r\n        varPrevOpen.current = open;\r\n\r\n    }, [open]);\r\n\r\n    useEffect(() => {\r\n        setOpen(isExecutionOpen);\r\n    }, [isExecutionOpen]);\r\n\r\n    return (\r\n        <>\r\n           <Popper\r\n                placement=\"bottom-end\"\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [170, 20]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{zIndex: 1000}}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                <Box sx={{ p: 2 }}>\r\n                                    <Stack>\r\n                                        <Typography variant=\"h4\">{executionCount} Executions</Typography>\r\n                                    </Stack>\r\n                                </Box>\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                     \r\n                                    {executionCount === 0 && execution.length === 0 && <Box sx={{ p: 2 }}>No executions yet</Box>}\r\n\r\n                                    {executionCount > 0 && execution.length > 0 && (\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <List\r\n                                            sx={{\r\n                                                width: '100%',\r\n                                                maxWidth: 330,\r\n                                                py: 0,\r\n                                                borderRadius: '10px',\r\n                                                [theme.breakpoints.down('md')]: {\r\n                                                    maxWidth: 300\r\n                                                },\r\n                                                '& .MuiListItemSecondaryAction-root': {\r\n                                                    top: 22\r\n                                                },\r\n                                                '& .MuiDivider-root': {\r\n                                                    my: 0\r\n                                                },\r\n                                                '& .list-container': {\r\n                                                    pl: 7\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            {execution && execution.map((exec, index) => (\r\n                                                <Box key={index}>\r\n                                                    <Accordion expanded={expanded === exec.shortId} onChange={handleAccordionChange(exec.shortId)}>\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls={`${exec.shortId}-content`}\r\n                                                            id={`${exec.shortId}-header`}\r\n                                                        >\r\n                                                            <Stack sx={{ p: 1, mr: 1 }} direction=\"column\">\r\n                                                                <Stack sx={{ mb: 1, alignItems: 'center' }} direction=\"row\">\r\n                                                                    <Typography variant=\"h5\">\r\n                                                                        {exec.shortId}\r\n                                                                    </Typography>\r\n                                                                    {exec.state && (\r\n                                                                        <Chip \r\n                                                                            sx={{\r\n                                                                                color: setChipColor(exec.state), \r\n                                                                                backgroundColor: setChipBgColor(exec.state),\r\n                                                                                ml: 1 \r\n                                                                            }} \r\n                                                                            label={exec.state}\r\n                                                                        />\r\n                                                                    )}\r\n                                                                </Stack>\r\n                                                                <Stack sx={{ mb: -1, alignItems: 'center' }} direction=\"row\">\r\n                                                                    <Typography variant=\"h6\" sx={{ color: theme.palette.grey['500'] }}>\r\n                                                                        {moment(exec.createdDate).format('MMMM Do YYYY, h:mm:ss A z')}\r\n                                                                    </Typography>\r\n                                                                    <IconButton size=\"small\" sx={{ height: 25, width: 25, ml: 1 }} title=\"Delete Execution\" color=\"error\" onClick={(e) => deleteExecution(e, exec.shortId)}>\r\n                                                                        <IconTrash />\r\n                                                                    </IconButton>\r\n                                                                </Stack>\r\n                                                            </Stack>\r\n                                                        </AccordionSummary>\r\n                                                        {JSON.parse(exec.executionData).map((execData, execDataIndex) => (\r\n                                                        <AccordionDetails key={execDataIndex}>\r\n                                                            <Box \r\n                                                                sx={{\r\n                                                                    p: 2,\r\n                                                                    backgroundColor: theme.palette.secondary.light, \r\n                                                                    borderRadius: `15px`,\r\n                                                                    position: 'relative'\r\n                                                                }}\r\n                                                                key={execDataIndex}\r\n                                                            >\r\n                                                                <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                                    {execData.nodeLabel} \r\n                                                                </Typography>\r\n                                                                <ReactJson \r\n                                                                    collapsed \r\n                                                                    src={execData.data}\r\n                                                                    enableClipboard={e => copyToClipboard(e)}\r\n                                                                />\r\n                                                                <IconButton \r\n                                                                    size=\"small\" \r\n                                                                    sx={{ \r\n                                                                        height: 25, \r\n                                                                        width: 25, \r\n                                                                        position: 'absolute', \r\n                                                                        top: 5, \r\n                                                                        right: 5 \r\n                                                                    }}\r\n                                                                    title=\"Expand Data\"\r\n                                                                    color=\"primary\"\r\n                                                                    onClick={() => onExpandDialogClicked(execData.data, execData.nodeLabel)}\r\n                                                                >\r\n                                                                    <IconArrowsMaximize />\r\n                                                                </IconButton>\r\n                                                                <div>\r\n                                                                    {execData.data.map((execObj, execObjIndex) =>\r\n                                                                        <div key={execObjIndex}>\r\n\r\n                                                                            {execObj.html && (\r\n                                                                            <Typography sx={{p: 1, mt: 2}} variant=\"h5\">\r\n                                                                                HTML\r\n                                                                            </Typography>)}\r\n                                                                            {execObj.html && <div style={{ width: '100%', height: '100%', maxHeight: 400, overflow: 'auto', backgroundColor: 'white', borderRadius: 5 }} dangerouslySetInnerHTML={{ __html: execObj.html }} />}\r\n                                                                            {execObj.html && <Button sx={{ mt: 1}} size=\"small\" variant=\"contained\" onClick={() => openHTMLDialog(execData.data)}>View HTML</Button>}\r\n\r\n                                                                            {execObj.attachments && (\r\n                                                                            <Typography sx={{p: 1, pb: 0, mt: 2}} variant=\"h5\">\r\n                                                                                Attachments\r\n                                                                            </Typography>)}\r\n                                                                            {execObj.attachments && execObj.attachments.map((attachment, attchIndex) =>\r\n                                                                                <div key={attchIndex}>\r\n                                                                                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                                                                                        Item {execObjIndex} | {attachment.filename ? attachment.filename : `Attachment ${attchIndex}`}\r\n                                                                                    </Typography>\r\n                                                                                    <embed\r\n                                                                                        src={attachment.content}\r\n                                                                                        width=\"100%\"\r\n                                                                                        height=\"100%\"\r\n                                                                                        style={{ borderStyle: \"solid\" }}\r\n                                                                                        type={attachment.contentType}\r\n                                                                                    />\r\n                                                                                    <Button size=\"small\" variant=\"contained\" onClick={() => openAttachmentDialog(execData.data)}>View Attachment</Button>\r\n                                                                                </div>\r\n                                                                            )}\r\n                                                                        </div>\r\n                                                                    )}\r\n                                                                </div>\r\n                                                            </Box>\r\n                                                        </AccordionDetails>\r\n                                                        ))}\r\n                                                    </Accordion>\r\n                                                </Box>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Box>\r\n                                    )}\r\n                                </PerfectScrollbar>\r\n                            </MainCard>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n            <AttachmentDialog\r\n                show={showAttachmentDialog}\r\n                dialogProps={attachmentDialogProps}\r\n                onCancel={() => setShowAttachmentDialog(false)}\r\n            ></AttachmentDialog>\r\n            <HTMLDialog\r\n                show={showHTMLDialog}\r\n                dialogProps={HTMLDialogProps}\r\n                onCancel={() => setShowHTMLDialog(false)}\r\n            ></HTMLDialog>\r\n            <ExpandDataDialog\r\n                show={showExpandDialog}\r\n                dialogProps={expandDialogProps}\r\n                onCancel={() => setShowExpandDialog(false)}\r\n            ></ExpandDataDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nExecutions.propTypes = {\r\n    workflowShortId: PropTypes.string,\r\n    execution: PropTypes.array,\r\n    executionCount: PropTypes.number,\r\n    isExecutionOpen: PropTypes.bool,\r\n    anchorEl: PropTypes.any,\r\n};\r\n\r\nexport default Executions;\r\n","// assets\r\nimport { IconTrash, IconFileUpload, IconFileExport } from '@tabler/icons';\r\n\r\n// constant\r\nconst icons = { IconTrash, IconFileUpload, IconFileExport };\r\n\r\n// ==============================|| SETTINGS MENU ITEMS ||============================== //\r\n\r\nconst settings = {\r\n    id: 'settings',\r\n    title: '',\r\n    type: 'group',\r\n    children: [\r\n        {\r\n            id: 'loadWorkflow',\r\n            title: 'Load Workflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconFileUpload,\r\n        },\r\n        {\r\n            id: 'exportWorkflow',\r\n            title: 'Export Workflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconFileExport,\r\n        },\r\n        {\r\n            id: 'deleteWorkflow',\r\n            title: 'Delete Workflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconTrash,\r\n        }\r\n    ],\r\n};\r\n\r\nexport default settings;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Box,\r\n    List,\r\n    Paper,\r\n    Popper,\r\n} from '@mui/material';\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport NavItem from 'layout/MainLayout/Sidebar/MenuList/NavItem';\r\n\r\nimport settings from 'menu-items/settings';\r\n\r\n// ==============================|| SETTINGS ||============================== //\r\n\r\nconst Settings = ({ workflow, isSettingsOpen, anchorEl, onSettingsItemClick, onUploadFile }) => {\r\n    const theme = useTheme();\r\n    const [settingsMenu, setSettingsMenu] = useState([]);\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (workflow && !workflow.shortId) {\r\n            const settingsMenu = settings.children.filter((menu) => menu.id === 'loadWorkflow');\r\n            setSettingsMenu(settingsMenu);\r\n\r\n        } else if (workflow && workflow.shortId) {\r\n            const settingsMenu = settings.children;\r\n            setSettingsMenu(settingsMenu);\r\n        }\r\n    }, [workflow]);\r\n\r\n\r\n    useEffect(() => {\r\n        setOpen(isSettingsOpen);\r\n    }, [isSettingsOpen]);\r\n\r\n    // settings list items\r\n    const items = settingsMenu.map((menu) => {\r\n        return <NavItem key={menu.id} item={menu} level={1} navType=\"SETTINGS\" onClick={(id) => onSettingsItemClick(id)} onUploadFile={onUploadFile} />;\r\n    });\r\n\r\n    return (\r\n        <>\r\n           <Popper\r\n                placement=\"bottom-end\"\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [170, 20]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{zIndex: 1000}}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <List>\r\n                                           {items}\r\n                                        </List>\r\n                                    </Box>\r\n                                </PerfectScrollbar>\r\n                            </MainCard>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\n\r\nSettings.propTypes = {\r\n    workflow: PropTypes.object,\r\n    isSettingsOpen: PropTypes.bool,\r\n    anchorEl: PropTypes.any,\r\n    onSettingsItemClick: PropTypes.func,\r\n    onUploadFile: PropTypes.func\r\n};\r\n\r\nexport default Settings;\r\n","import { createPortal } from 'react-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { \r\n    Button, \r\n    Dialog, \r\n    DialogActions,\r\n    DialogContent, \r\n    OutlinedInput,\r\n    DialogTitle \r\n} from '@mui/material';\r\n\r\nconst SaveWorkflowDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onConfirm,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const [workflowName, setWorkflowName] = useState('');\r\n    const [isReadyToSave, setIsReadyToSave] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (workflowName) setIsReadyToSave(true);\r\n        else setIsReadyToSave(false);\r\n\r\n    }, [workflowName]);\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"xs\"\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <OutlinedInput\r\n                    sx={{ mt: 1 }}\r\n                    id=\"workflow-name\"\r\n                    type='text'\r\n                    fullWidth\r\n                    placeholder=\"My New Workflow\"\r\n                    value={workflowName}\r\n                    onChange={(e) => setWorkflowName(e.target.value)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>\r\n                    {dialogProps.cancelButtonName}\r\n                </Button>\r\n                <Button disabled={!isReadyToSave} variant=\"contained\" onClick={() => onConfirm(workflowName)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nSaveWorkflowDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func,\r\n};\r\n\r\nexport default SaveWorkflowDialog;\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Avatar, Box, ButtonBase, Typography, Stack, TextField, Chip } from '@mui/material';\r\n\r\n// icons\r\nimport { IconSettings, IconChevronLeft, IconDeviceFloppy, IconRocket, IconPencil, IconCheck, IconX, IconPlayerPause, IconListCheck } from '@tabler/icons';\r\n\r\n// project imports\r\nimport Executions from 'views/executions';\r\nimport Settings from 'views/settings';\r\nimport SaveWorkflowDialog from 'ui-component/dialog/SaveWorkflowDialog';\r\n\r\n// API\r\nimport workflowsApi from \"api/workflows\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// utils\r\nimport { \r\n    generateExportFlowData\r\n} from  'utils/genericHelper';\r\n\r\n// ==============================|| CANVAS HEADER ||============================== //\r\n\r\nconst CanvasHeader = ({ \r\n    workflow, \r\n    handleSaveFlow,\r\n    handleDeployWorkflow, \r\n    handleStopWorkflow, \r\n    handleDeleteWorkflow,\r\n    handleLoadWorkflow\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n    const workflowNameRef = useRef();\r\n    const viewExecutionRef = useRef();\r\n    const settingsRef = useRef();\r\n\r\n    const [isEditingWorkflowName, setEditingWorkflowName] = useState(null);\r\n    const [workflowName, setWorkflowName] = useState('');\r\n    const [isExecutionOpen, setExecutionOpen] = useState(false);\r\n    const [isSettingsOpen, setSettingsOpen] = useState(false);\r\n    const [workfowDialogOpen, setWorkfowDialogOpen] = useState(false);\r\n\r\n    const updateWorkflowApi = useApi(workflowsApi.updateWorkflow);\r\n    const canvas = useSelector((state) => state.canvas);\r\n\r\n    const onSettingsItemClick = (setting) => {\r\n\r\n        setSettingsOpen(false);\r\n        \r\n        if (setting === 'deleteWorkflow') {\r\n            handleDeleteWorkflow();\r\n\r\n        } else if (setting === 'exportWorkflow') {\r\n            try {\r\n                const flowData = JSON.parse(workflow.flowData);\r\n                let dataStr = JSON.stringify(generateExportFlowData(flowData));\r\n                let dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r\n\r\n                let exportFileDefaultName = `${workflow.name} Workflow.json`;\r\n\r\n                let linkElement = document.createElement('a');\r\n                linkElement.setAttribute('href', dataUri);\r\n                linkElement.setAttribute('download', exportFileDefaultName);\r\n                linkElement.click();\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    const onUploadFile = (file) => {\r\n        setSettingsOpen(false);\r\n        handleLoadWorkflow(file);\r\n    }\r\n\r\n    const submitWorkflowName = () => {\r\n        if (workflow.shortId) {\r\n            const updateBody = {\r\n                name: workflowNameRef.current.value\r\n            };\r\n            updateWorkflowApi.request(workflow.shortId, updateBody);\r\n        }\r\n    };\r\n\r\n    const onSaveWorkflowClick = () => {\r\n        if (workflow.shortId) handleSaveFlow(workflow.name);\r\n        else setWorkfowDialogOpen(true);\r\n    }\r\n\r\n    const onConfirmSaveName = (workflowName) => {\r\n        setWorkfowDialogOpen(false);\r\n        handleSaveFlow(workflowName);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (updateWorkflowApi.data) {\r\n            setWorkflowName(updateWorkflowApi.data.name);\r\n        }\r\n        setEditingWorkflowName(false);\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateWorkflowApi.data]);\r\n\r\n    useEffect(() => {\r\n        if (workflow) {\r\n            setWorkflowName(workflow.name);\r\n        }\r\n    }, [workflow]);\r\n\r\n    return (\r\n        <>\r\n            <Box >\r\n                <ButtonBase title=\"Back\" sx={{ borderRadius: '50%' }}>\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.secondary.light,\r\n                            color: theme.palette.secondary.dark,\r\n                            '&:hover': {\r\n                                background: theme.palette.secondary.dark,\r\n                                color: theme.palette.secondary.light\r\n                            }\r\n                        }}\r\n                        color=\"inherit\"\r\n                        onClick={() => navigate(-1)}\r\n                    >\r\n                        <IconChevronLeft stroke={1.5} size=\"1.3rem\" />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                {!isEditingWorkflowName && (\r\n                <Stack flexDirection=\"row\">\r\n                    <Typography\r\n                        sx={{\r\n                            fontSize: '1.5rem',\r\n                            fontWeight: 600,\r\n                            ml: 2\r\n                        }}\r\n                    >\r\n                        {canvas.isDirty && <strong style={{color: theme.palette.orange.main}}>*</strong> } {workflowName}\r\n                    </Typography>\r\n                    {workflow?.shortId && (\r\n                    <ButtonBase title=\"Edit Name\" sx={{ borderRadius: '50%' }}>\r\n                        <Avatar\r\n                            variant=\"rounded\"\r\n                            sx={{\r\n                                ...theme.typography.commonAvatar,\r\n                                ...theme.typography.mediumAvatar,\r\n                                transition: 'all .2s ease-in-out',\r\n                                background: 'white',\r\n                                color: theme.palette.text.dark,\r\n                                ml: 1,\r\n                                '&:hover': {\r\n                                    background: theme.palette.secondary.light,\r\n                                    color: theme.palette.secondary.dark,\r\n                                }\r\n                            }}\r\n                            color=\"inherit\"\r\n                            onClick={() => setEditingWorkflowName(true)}\r\n                        >\r\n                            <IconPencil stroke={1.5} size=\"1.3rem\" />\r\n                        </Avatar>\r\n                    </ButtonBase>)}\r\n                    {workflow?.deployed && (\r\n                        <Chip \r\n                            sx={{\r\n                                color: theme.palette.success.dark, \r\n                                backgroundColor: theme.palette.success.light, \r\n                                ml: 1\r\n                            }} \r\n                            label=\"Deployed\" \r\n                            color=\"success\" \r\n                        />\r\n                    )}\r\n                </Stack>\r\n                )}\r\n                {isEditingWorkflowName && (\r\n                <Stack flexDirection=\"row\">\r\n                    <TextField\r\n                        size=\"small\"\r\n                        inputRef={workflowNameRef}\r\n                        sx={{\r\n                            width: '50%',\r\n                            ml: 2\r\n                        }}\r\n                        defaultValue={workflowName}\r\n                    />\r\n                    <ButtonBase title=\"Save Name\" sx={{ borderRadius: '50%' }}>\r\n                        <Avatar\r\n                            variant=\"rounded\"\r\n                            sx={{\r\n                                ...theme.typography.commonAvatar,\r\n                                ...theme.typography.mediumAvatar,\r\n                                transition: 'all .2s ease-in-out',\r\n                                background: 'white',\r\n                                color: theme.palette.text.dark,\r\n                                ml: 1,\r\n                                '&:hover': {\r\n                                    background: theme.palette.secondary.light,\r\n                                    color: theme.palette.secondary.dark,\r\n                                }\r\n                            }}\r\n                            color=\"inherit\"\r\n                            onClick={submitWorkflowName}\r\n                        >\r\n                            <IconCheck stroke={1.5} size=\"1.3rem\" />\r\n                        </Avatar>\r\n                    </ButtonBase>\r\n                    <ButtonBase title=\"Cancel\" sx={{ borderRadius: '50%' }}>\r\n                        <Avatar\r\n                            variant=\"rounded\"\r\n                            sx={{\r\n                                ...theme.typography.commonAvatar,\r\n                                ...theme.typography.mediumAvatar,\r\n                                transition: 'all .2s ease-in-out',\r\n                                background: 'white',\r\n                                color: theme.palette.text.dark,\r\n                                ml: 1,\r\n                                '&:hover': {\r\n                                    background: theme.palette.error.light,\r\n                                    color: theme.palette.error.dark,\r\n                                }\r\n                            }}\r\n                            color=\"inherit\"\r\n                            onClick={() => setEditingWorkflowName(false)}\r\n                        >\r\n                            <IconX stroke={1.5} size=\"1.3rem\" />\r\n                        </Avatar>\r\n                    </ButtonBase>\r\n                </Stack>\r\n                )}\r\n            </Box>\r\n            <Box >\r\n                {workflow?.shortId && (\r\n                <ButtonBase ref={viewExecutionRef} title=\"View Executions\" sx={{ borderRadius: '50%', mr: 2 }}>\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            width: '54px',\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.success.light,\r\n                            color: theme.palette.success.dark,\r\n                            '&:hover': {\r\n                                background: theme.palette.success.dark,\r\n                                color: theme.palette.success.light\r\n                            }\r\n                        }}\r\n                        color=\"inherit\"\r\n                        onClick={() => setExecutionOpen(!isExecutionOpen)}\r\n                    >\r\n                       <h6>{workflow?.executionCount}</h6>&nbsp;<IconListCheck stroke={1.5} size=\"1.3rem\" />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n                )}\r\n                {workflow?.shortId && (\r\n                <ButtonBase title={workflow?.deployed ? \"Stop Workflow\" : \"Deploy Workflow\"} sx={{ borderRadius: '50%', mr: 2 }}>\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.primary.light,\r\n                            color: theme.palette.primary.dark,\r\n                            '&:hover': {\r\n                                background: theme.palette.primary.dark,\r\n                                color: theme.palette.primary.light\r\n                            }\r\n                        }}\r\n                        color=\"inherit\"\r\n                        onClick={workflow?.deployed ? handleStopWorkflow : handleDeployWorkflow}\r\n                    >\r\n                        {workflow?.deployed ? <IconPlayerPause stroke={1.5} size=\"1.3rem\" /> : <IconRocket stroke={1.5} size=\"1.3rem\" />}\r\n                    </Avatar>\r\n                </ButtonBase>\r\n                )}\r\n                <ButtonBase title=\"Save Workflow\" sx={{ borderRadius: '50%', mr: 2 }}>\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.secondary.light,\r\n                            color: theme.palette.secondary.dark,\r\n                            '&:hover': {\r\n                                background: theme.palette.secondary.dark,\r\n                                color: theme.palette.secondary.light\r\n                            }\r\n                        }}\r\n                        color=\"inherit\"\r\n                        onClick={onSaveWorkflowClick}\r\n                    >\r\n                        <IconDeviceFloppy stroke={1.5} size=\"1.3rem\" />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n                <ButtonBase ref={settingsRef}  title=\"Settings\" sx={{ borderRadius: '50%' }}>\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.grey[300],\r\n                            color: theme.palette.grey[700],\r\n                            '&:hover': {\r\n                                background: theme.palette.grey[700],\r\n                                color: theme.palette.grey[300],\r\n                            }\r\n                        }}\r\n                        onClick={() => setSettingsOpen(!isSettingsOpen)}\r\n                    >\r\n                        <IconSettings stroke={1.5} size=\"1.3rem\" />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n            {workflow?.shortId && (\r\n            <Executions\r\n                workflowShortId={workflow?.shortId}\r\n                execution={workflow?.execution}\r\n                executionCount={workflow?.executionCount}\r\n                isExecutionOpen={isExecutionOpen}\r\n                anchorEl={viewExecutionRef.current}\r\n            />\r\n            )}\r\n            <Settings\r\n                workflow={workflow}\r\n                isSettingsOpen={isSettingsOpen}\r\n                anchorEl={settingsRef.current}\r\n                onSettingsItemClick={onSettingsItemClick}\r\n                onUploadFile={onUploadFile}\r\n            />\r\n            <SaveWorkflowDialog\r\n                show={workfowDialogOpen}\r\n                dialogProps={{\r\n                    title: `Save New Workflow`,\r\n                    confirmButtonName: 'Save',\r\n                    cancelButtonName: 'Cancel'\r\n                }}\r\n                onCancel={() => setWorkfowDialogOpen(false)}\r\n                onConfirm={onConfirmSaveName}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nCanvasHeader.propTypes = {\r\n    workflow: PropTypes.object,\r\n    handleSaveFlow: PropTypes.func,\r\n    handleDeployWorkflow: PropTypes.func,\r\n    handleStopWorkflow: PropTypes.func,\r\n    handleDeleteWorkflow: PropTypes.func,\r\n    handleLoadWorkflow: PropTypes.func,\r\n};\r\n\r\nexport default CanvasHeader;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Box,\r\n    Fab,\r\n    ClickAwayListener,\r\n    Divider,\r\n    InputAdornment,\r\n    List,\r\n    ListItemButton,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    OutlinedInput,\r\n    Paper,\r\n    Popper,\r\n    Stack,\r\n    Typography\r\n} from '@mui/material';\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Transitions from 'ui-component/extended/Transitions';\r\n\r\n// icons\r\nimport { IconPlus, IconSearch, IconMinus } from '@tabler/icons';\r\n\r\n// const\r\nimport { baseURL } from 'store/constant';\r\n\r\n// ==============================|| ADD NODES||============================== //\r\n\r\nconst AddNodes = ({ nodesData, node }) => {\r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [nodes, setNodes] = useState([]);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const anchorRef = useRef(null);\r\n    const prevOpen = useRef(open);\r\n\r\n    const filterSearch = (value) => {\r\n        setSearchValue(value);\r\n        setTimeout(() => {\r\n            if (value) {\r\n                const returnData = nodesData.filter((nd) => nd.name.toLowerCase().includes(value.toLowerCase()));\r\n                setNodes(returnData);\r\n\r\n            } else if (value === '') {\r\n                setNodes(nodesData);\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const onDragStart = (event, node) => {\r\n        event.dataTransfer.setData('application/reactflow', JSON.stringify(node));\r\n        event.dataTransfer.effectAllowed = 'move';\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus();\r\n        }\r\n\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    useEffect(() => {\r\n        if (node) setOpen(false);\r\n    }, [node]);\r\n\r\n    useEffect(() => {\r\n        if (nodesData) setNodes(nodesData);\r\n    }, [nodesData]);\r\n\r\n    return (\r\n        <>\r\n            <Fab \r\n                sx={{ left: 20, top: 20 }} \r\n                ref={anchorRef}\r\n                size=\"small\" \r\n                color=\"primary\" \r\n                aria-label=\"add\" \r\n                title=\"Add Node\"\r\n                onClick={handleToggle}\r\n            >\r\n                {open ? <IconMinus /> : <IconPlus />}\r\n            </Fab>\r\n            <Popper\r\n                placement=\"bottom-end\"\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [-40, 14]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{zIndex: 1000}}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <Stack>\r\n                                            <Typography variant=\"h4\">Add Nodes</Typography>\r\n                                        </Stack>\r\n                                        <OutlinedInput\r\n                                            sx={{ width: '100%', pr: 1, pl: 2, my: 2 }}\r\n                                            id=\"input-search-node\"\r\n                                            value={searchValue}\r\n                                            onChange={(e) => filterSearch(e.target.value)}\r\n                                            placeholder=\"Search nodes\"\r\n                                            startAdornment={\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <IconSearch stroke={1.5} size=\"1rem\" color={theme.palette.grey[500]} />\r\n                                                </InputAdornment>\r\n                                            }\r\n                                            aria-describedby=\"search-helper-text\"\r\n                                            inputProps={{\r\n                                                'aria-label': 'weight'\r\n                                            }}\r\n                                        />\r\n                                        <Divider />\r\n                                    </Box>\r\n                                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                        <Box sx={{ p: 2 }}>\r\n                                            <List\r\n                                                sx={{\r\n                                                    width: '100%',\r\n                                                    maxWidth: 330,\r\n                                                    py: 0,\r\n                                                    borderRadius: '10px',\r\n                                                    [theme.breakpoints.down('md')]: {\r\n                                                        maxWidth: 300\r\n                                                    },\r\n                                                    '& .MuiListItemSecondaryAction-root': {\r\n                                                        top: 22\r\n                                                    },\r\n                                                    '& .MuiDivider-root': {\r\n                                                        my: 0\r\n                                                    },\r\n                                                    '& .list-container': {\r\n                                                        pl: 7\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {nodes.map((node) => (\r\n                                                    <div key={node.name} onDragStart={(event) => onDragStart(event, node)} draggable>\r\n                                                        <ListItemButton\r\n                                                            sx={{ p: 0, borderRadius: `${customization.borderRadius}px`, cursor: 'move' }}\r\n                                                        >\r\n                                                            <ListItem alignItems=\"center\">\r\n                                                                <ListItemAvatar>\r\n                                                                    <div style={{ width: 50, height: 50, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                                                        <img style={{ width: '100%', height: '100%', padding: 10, objectFit: 'contain' }} alt={node.name} src={`${baseURL}/api/v1/node-icon/${node.name}`} />\r\n                                                                    </div>\r\n                                                                </ListItemAvatar>\r\n                                                                <ListItemText sx={{ ml: 1 }} primary={node.label} secondary={node.description} />\r\n                                                            </ListItem>\r\n                                                        </ListItemButton>\r\n                                                        <Divider />\r\n                                                    </div>\r\n                                                ))}\r\n                                            </List>\r\n                                        </Box>\r\n                                    </PerfectScrollbar>\r\n                                </MainCard>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\n\r\nAddNodes.propTypes = {\r\n    nodesData: PropTypes.array,\r\n    node: PropTypes.object,\r\n};\r\n\r\nexport default AddNodes;\r\n","import client from \"./client\";\r\n\r\nconst getAllNodes = () => client.get(\"/nodes\");\r\n\r\nconst getSpecificNode = (name) => client.get(`/nodes/${name}`);\r\n\r\nconst testNode = (name, body) => client.post(`/node-test/${name}`, body); //body: ITestNodeBody\r\n\r\nconst loadMethodNode = (name, nodeData) => client.post(`/node-load-method/${name}`, nodeData); //nodeData: INodeData\r\n\r\nconst removeTestTriggers = () => client.post(`/remove-test-triggers`);\r\n\r\nexport default {\r\n    getAllNodes,\r\n    getSpecificNode,\r\n    testNode,\r\n    loadMethodNode,\r\n    removeTestTriggers,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    Chip,\r\n    CircularProgress,\r\n    Stack,\r\n    Typography,\r\n    IconButton\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view'\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport AttachmentDialog from 'ui-component/dialog/AttachmentDialog';\r\nimport HTMLDialog from 'ui-component/dialog/HTMLDialog';\r\nimport ExpandDataDialog from 'ui-component/dialog/ExpandDataDialog';\r\n\r\n// API\r\nimport nodesApi from \"api/nodes\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// icons\r\nimport { IconExclamationMark, IconCopy, IconArrowUpRightCircle, IconX, IconArrowsMaximize } from '@tabler/icons';\r\n\r\n// const\r\nimport { baseURL } from 'store/constant';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\n\r\n// ==============================|| OUTPUT RESPONSES ||============================== //\r\n\r\nconst OutputResponses = ({ nodeId, nodeParamsType, nodeFlowData, nodes, edges, workflow, onSubmit }) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const [outputResponse, setOutputResponse] = useState([]);\r\n    const [errorResponse, setErrorResponse] = useState(null);\r\n    const [nodeName, setNodeName] = useState(null);\r\n    const [nodeType, setNodeType] = useState(null);\r\n    const [nodeLabel, setNodeLabel] = useState(null);\r\n    const [isTestNodeBtnDisabled, disableTestNodeBtn] = useState(true);\r\n    const [testNodeLoading, setTestNodeLoading] = useState(null);\r\n    const [showHTMLDialog, setShowHTMLDialog] = useState(false);\r\n    const [HTMLDialogProps, setHTMLDialogProps] = useState({});\r\n    const [showAttachmentDialog, setShowAttachmentDialog] = useState(false);\r\n    const [attachmentDialogProps, setAttachmentDialogProps] = useState({});\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false);\r\n    const [expandDialogProps, setExpandDialogProps] = useState({});\r\n\r\n    const testNodeApi = useApi(nodesApi.testNode);\r\n\r\n    const onTestNodeClick = (nodeType) => {\r\n \r\n        /* If workflow is already deployed, stop it first to be safe.\r\n        *  Because it could cause throttled calls\r\n        */\r\n        if (workflow.deployed) {\r\n            setTestNodeLoading(false);\r\n            alert('Testing trigger requires stopping workflow. Please stop workflow first');\r\n            return;\r\n        }\r\n  \r\n        const testNodeBody = {\r\n            nodes,\r\n            edges,\r\n            nodeId\r\n        };\r\n\r\n        try {\r\n            setTestNodeLoading(true);\r\n\r\n            if (nodeType === 'webhook') {\r\n\r\n                const socket = socketIOClient(baseURL);\r\n\r\n                socket.on('connect', async() => {\r\n                    testNodeBody.clientId = socket.id;\r\n                    testNodeApi.request(nodeFlowData.name, testNodeBody);\r\n                });\r\n                \r\n                socket.on('testWebhookNodeResponse', (data) => {\r\n                    setOutputResponse(data);\r\n                    setTestNodeLoading(false);\r\n                    const formValues = {\r\n                        submit: true,\r\n                        needRetest: null,\r\n                        output: data,\r\n                    };\r\n                    onSubmit(formValues, 'outputResponses');\r\n                    socket.disconnect();\r\n                });\r\n\r\n            } else {\r\n                testNodeApi.request(nodeFlowData.name, testNodeBody);\r\n            }\r\n\r\n        } catch(error) {\r\n            setTestNodeLoading(false);\r\n            setOutputResponse([]);\r\n            setErrorResponse(error);\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const checkIfTestNodeValid = () => {\r\n        const paramsTypes = nodeParamsType.filter((type) => type !== 'outputResponses');\r\n        for (let i = 0; i < paramsTypes.length; i+= 1) {\r\n            const paramType = paramsTypes[i];\r\n\r\n            if (!nodeFlowData[paramType] || !nodeFlowData[paramType].submit) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const openAttachmentDialog = (outputResponse) => {\r\n        const dialogProp = {\r\n            title: 'Attachments',\r\n            executionData: outputResponse\r\n        };\r\n        setAttachmentDialogProps(dialogProp);\r\n        setShowAttachmentDialog(true);\r\n    };\r\n\r\n    const openHTMLDialog = (executionData) => {\r\n        const dialogProp = {\r\n            title: 'HTML',\r\n            executionData\r\n        };\r\n        setHTMLDialogProps(dialogProp);\r\n        setShowHTMLDialog(true);\r\n    };\r\n\r\n    const onExpandDialogClicked = (executionData) => {\r\n        const dialogProp = {\r\n            title: `Output Responses: ${nodeLabel} `,\r\n            data: executionData\r\n        };\r\n        setExpandDialogProps(dialogProp);\r\n        setShowExpandDialog(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (nodeFlowData && nodeFlowData.outputResponses && nodeFlowData.outputResponses.output) {\r\n            setOutputResponse(nodeFlowData.outputResponses.output);\r\n        } else {\r\n            setOutputResponse([]);\r\n        }\r\n\r\n        disableTestNodeBtn(checkIfTestNodeValid());\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [nodeFlowData, nodeParamsType]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (nodes && nodeId) {\r\n            const selectedNode = nodes.find((nd) => nd.id === nodeId);\r\n            if (selectedNode) {\r\n                setNodeName(selectedNode.data.name);\r\n                setNodeType(selectedNode.data.type);\r\n                setNodeLabel(selectedNode.data.label);\r\n            }\r\n        }\r\n\r\n    }, [nodes, nodeId]);\r\n\r\n\r\n    // Test node successful\r\n    useEffect(() => {\r\n        if (testNodeApi.data && nodeType && nodeType !== 'webhook') {\r\n            const testNodeData = testNodeApi.data;\r\n            setOutputResponse(testNodeData);\r\n            setErrorResponse(null);\r\n            const formValues = {\r\n                submit: true,\r\n                needRetest: null,\r\n                output: testNodeData,\r\n            };\r\n            onSubmit(formValues, 'outputResponses')\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testNodeApi.data]);\r\n\r\n\r\n    // Test node error\r\n    useEffect(() => {\r\n        if (testNodeApi.error && nodeType && nodeType !== 'webhook') {\r\n\r\n            let errorMessage = 'Unexpected Error.';\r\n\r\n            if (testNodeApi.error.response && testNodeApi.error.response.data) {\r\n                errorMessage = testNodeApi.error.response.data;\r\n\r\n            } else if (testNodeApi.error.message) {\r\n                errorMessage = testNodeApi.error.message;\r\n            }\r\n            \r\n            setErrorResponse(errorMessage);\r\n            setOutputResponse([]);\r\n            const formValues = {\r\n                submit: null,\r\n                needRetest: null,\r\n                output: [],\r\n            };\r\n            onSubmit(formValues, 'outputResponses')\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testNodeApi.error]);\r\n\r\n\r\n    // Test node loading\r\n    useEffect(() => {\r\n        if (nodeType && nodeType !== 'webhook') setTestNodeLoading(testNodeApi.loading);\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testNodeApi.loading]);\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            {nodeFlowData && nodeFlowData.outputResponses && nodeFlowData.outputResponses.needRetest && (\r\n                <Chip sx={{mb: 2}} icon={<IconExclamationMark />} label=\"Retest the node for updated parameters\" color=\"warning\" />\r\n            )}\r\n            {nodeName && nodeName === 'webhook' && (\r\n                <Box sx={{ mb: 3 }}>\r\n                    <Typography variant=\"h5\" sx={{ mb: 1 }}>{`${baseURL}/api/v1/webhook/${nodeFlowData.webhookEndpoint}`}</Typography>\r\n                    <Stack direction=\"row\" spacing={2}>\r\n                        <Button size=\"small\" variant=\"outlined\" startIcon={<IconCopy />} onClick={() => navigator.clipboard.writeText(`${baseURL}/api/v1/webhook/${nodeFlowData.webhookEndpoint}`)}>\r\n                            Copy URL\r\n                        </Button>\r\n                        <Button size=\"small\" variant=\"outlined\" startIcon={<IconArrowUpRightCircle />} onClick={() => window.open(`${baseURL}/api/v1/webhook/${nodeFlowData.webhookEndpoint}`, \"_blank\")}>\r\n                            Open in New Tab\r\n                        </Button>\r\n                    </Stack>\r\n                </Box>\r\n            )}\r\n            {errorResponse && (<Box sx={{mb: 2}}>\r\n                <Chip sx={{mb: 2}} icon={<IconX />} label=\"Error\" color=\"error\" />\r\n                <div style={{color: 'red'}}>{errorResponse}</div>\r\n            </Box>)}\r\n            <Box sx={{position: 'relative'}}>\r\n                <ReactJson collapsed src={outputResponse} enableClipboard={e => copyToClipboard(e)}/>\r\n                <IconButton \r\n                    size=\"small\" \r\n                    sx={{ \r\n                        height: 25, \r\n                        width: 25, \r\n                        position: 'absolute', \r\n                        top: -5, \r\n                        right: 5 \r\n                    }}\r\n                    title=\"Expand Data\"\r\n                    color=\"primary\"\r\n                    onClick={() => onExpandDialogClicked(outputResponse)}\r\n                >\r\n                    <IconArrowsMaximize />\r\n                </IconButton>\r\n                <div>\r\n                    {outputResponse.map((respObj, respObjIndex) =>\r\n                        <div key={respObjIndex}>\r\n\r\n                            {respObj.html && (\r\n                            <Typography sx={{p: 1, mt: 2}} variant=\"h5\">\r\n                                HTML\r\n                            </Typography>)}\r\n                            {respObj.html && <div style={{ width: '100%', height: '100%', maxHeight: 400, overflow: 'auto', backgroundColor: 'white', borderRadius: 5 }} dangerouslySetInnerHTML={{ __html: respObj.html }} />}\r\n                            {respObj.html && <Button sx={{ mt: 1}} size=\"small\" variant=\"contained\" onClick={() => openHTMLDialog(outputResponse)}>View HTML</Button>}\r\n\r\n                            {respObj.attachments && (\r\n                            <Typography sx={{p: 1, mt: 2, pb: 0}} variant=\"h5\">\r\n                                Attachments\r\n                            </Typography>)}\r\n                            {respObj.attachments && respObj.attachments.map((attachment, attchIndex) =>\r\n                                <div key={attchIndex}>\r\n                                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                                        Item {respObjIndex} | {attachment.filename ? attachment.filename : `Attachment ${attchIndex}`}\r\n                                    </Typography>\r\n                                    <embed\r\n                                        src={attachment.content}\r\n                                        width=\"100%\"\r\n                                        height=\"100%\"\r\n                                        style={{ borderStyle: \"solid\" }}\r\n                                        type={attachment.contentType}\r\n                                    />\r\n                                    <Button size=\"small\" variant=\"contained\" onClick={() => openAttachmentDialog(outputResponse)}>View Attachment</Button>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </Box>\r\n            <Box sx={{ mt: 2, position: 'relative' }}>\r\n                <AnimateButton>\r\n                    <Button\r\n                        disableElevation\r\n                        disabled={isTestNodeBtnDisabled || testNodeLoading}\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => onTestNodeClick(nodeType)}\r\n                    >\r\n                        Test Node\r\n                    </Button>\r\n                </AnimateButton >\r\n                {testNodeLoading && (<CircularProgress\r\n                    size={24} \r\n                    sx={{\r\n                        color: theme.palette.secondary.main,\r\n                        position: 'absolute',\r\n                        top: '50%',\r\n                        left: '50%',\r\n                        marginTop: '-12px',\r\n                        marginLeft: '-12px',\r\n                    }}\r\n                />)}\r\n            </Box>\r\n        </Box>\r\n        <AttachmentDialog\r\n            show={showAttachmentDialog}\r\n            dialogProps={attachmentDialogProps}\r\n            onCancel={() => setShowAttachmentDialog(false)}\r\n        ></AttachmentDialog>\r\n        <HTMLDialog\r\n            show={showHTMLDialog}\r\n            dialogProps={HTMLDialogProps}\r\n            onCancel={() => setShowHTMLDialog(false)}\r\n        ></HTMLDialog>\r\n        <ExpandDataDialog\r\n            show={showExpandDialog}\r\n            dialogProps={expandDialogProps}\r\n            onCancel={() => setShowExpandDialog(false)}\r\n        ></ExpandDataDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nOutputResponses.propTypes = {\r\n    nodeId: PropTypes.string, \r\n    nodeParamsType: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    nodes: PropTypes.array, \r\n    edges: PropTypes.array, \r\n    workflow: PropTypes.object,\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default OutputResponses;\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport {\r\n    Box,\r\n    Fab,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Paper,\r\n    Popper,\r\n    Stack,\r\n    Typography,\r\n    IconButton,\r\n} from '@mui/material';\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport ReactJson from 'react-json-view';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport ExpandDataDialog from 'ui-component/dialog/ExpandDataDialog';\r\n\r\n// icons\r\nimport { IconX, IconArrowsMaximize } from '@tabler/icons';\r\n\r\n// ==============================|| VARIABLE SELECTOR ||============================== //\r\n\r\nconst isPositiveNumeric = (value) =>  /^\\d+$/.test(value);\r\n\r\nconst VariableSelector = ({ nodes, isVariableSelectorOpen, anchorEl, onVariableSelected, handleClose }) => {\r\n    const theme = useTheme();\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false);\r\n    const [expandDialogProps, setExpandDialogProps] = useState({});\r\n\r\n    const varPrevOpen = useRef(open);\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false);\r\n    };\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace;\r\n        let returnVariablePath = `${node.id}`;\r\n        for (let i = 0; i < namespaces.length; i+=1 ) {\r\n            const namespace = namespaces[i];\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1);\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`;\r\n                } else {\r\n                    returnVariablePath += namespace;\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.';\r\n                }\r\n            }\r\n        }\r\n        onVariableSelected(returnVariablePath);\r\n    };\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        };\r\n        setExpandDialogProps(dialogProp);\r\n        setShowExpandDialog(true);\r\n    };\r\n\r\n    // Handle Accordian\r\n    useEffect(() => {\r\n        varPrevOpen.current = open;\r\n\r\n    }, [open]);\r\n\r\n    useEffect(() => {\r\n        setOpen(isVariableSelectorOpen);\r\n    }, [isVariableSelectorOpen]);\r\n\r\n    return (\r\n        <>\r\n           <Popper\r\n                placement=\"right-start\"\r\n                open={open}\r\n                role={undefined}\r\n                transition\r\n                anchorEl={anchorEl}\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [55, 350]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{zIndex: 900, width: 350}}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <Fab \r\n                                sx={{ \r\n                                    minHeight: 30, \r\n                                    height: 30, width: 30, \r\n                                    backgroundColor: theme.palette.secondary.light, \r\n                                    color: theme.palette.secondary.main, \r\n                                    position: 'absolute', \r\n                                    right: -10, top: -10 \r\n                                }} \r\n                                size=\"small\"\r\n                                onClick={handleClose}\r\n                            >\r\n                                <IconX />\r\n                            </Fab>\r\n                            <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                <Box sx={{ p: 2 }}>\r\n                                    <Stack>\r\n                                        <Typography variant=\"h4\">Variable Selector</Typography>\r\n                                    </Stack>\r\n                                    \r\n                                </Box>\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                      \r\n                                    {nodes && nodes.length === 0 && <Box sx={{ p: 2 }}>No variables</Box>}\r\n\r\n                                    {nodes && nodes.length > 0 && (\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <List\r\n                                            sx={{\r\n                                                width: '100%',\r\n                                                maxWidth: 330,\r\n                                                py: 0,\r\n                                                borderRadius: '10px',\r\n                                                [theme.breakpoints.down('md')]: {\r\n                                                    maxWidth: 300\r\n                                                },\r\n                                                '& .MuiListItemSecondaryAction-root': {\r\n                                                    top: 22\r\n                                                },\r\n                                                '& .MuiDivider-root': {\r\n                                                    my: 0\r\n                                                },\r\n                                                '& .list-container': {\r\n                                                    pl: 7\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            {nodes.map((node, index) => (\r\n                                                <Box key={index}>\r\n                                                    <Accordion expanded={expanded === node.data.label} onChange={handleAccordionChange(node.data.label)}>\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls={`${node.data.label}-content`}\r\n                                                            id={`${node.data.label}-header`}\r\n                                                        >\r\n                                                            <Typography variant=\"h5\">\r\n                                                                {node.data.label}\r\n                                                            </Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <div style={{position: 'relative'}}>\r\n                                                                <ReactJson collapsed src={(node.data.outputResponses && node.data.outputResponses.output) ? node.data.outputResponses.output : {}} enableClipboard={e => onClipboardCopy(e, node)}/>\r\n                                                                <IconButton \r\n                                                                    size=\"small\" \r\n                                                                    sx={{ \r\n                                                                        height: 25, \r\n                                                                        width: 25, \r\n                                                                        position: 'absolute', \r\n                                                                        top: -5, \r\n                                                                        right: 5 \r\n                                                                    }}\r\n                                                                    title=\"Expand Variable\"\r\n                                                                    color=\"primary\"\r\n                                                                    onClick={() => onExpandDialogClicked((node.data.outputResponses && node.data.outputResponses.output) ? node.data.outputResponses.output : {}, node)}\r\n                                                                >\r\n                                                                    <IconArrowsMaximize />\r\n                                                                </IconButton>\r\n                                                            </div>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Box>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Box>\r\n                                    )}\r\n                                </PerfectScrollbar>\r\n                            </MainCard>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n            <ExpandDataDialog\r\n                enableClipboard\r\n                show={showExpandDialog}\r\n                dialogProps={expandDialogProps}\r\n                onCancel={() => setShowExpandDialog(false)}\r\n                onCopyClick={(e, node) => {\r\n                    onClipboardCopy(e, node);\r\n                    setShowExpandDialog(false);\r\n                }}                                                \r\n            ></ExpandDataDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nVariableSelector.propTypes = {\r\n    nodes: PropTypes.array,\r\n    isVariableSelectorOpen: PropTypes.bool,\r\n    anchorEl: PropTypes.any,\r\n    onVariableSelected: PropTypes.func,\r\n    handleClose: PropTypes.func,\r\n};\r\n\r\nexport default VariableSelector;\r\n","import { createPortal } from 'react-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n    Button, \r\n    Dialog, \r\n    DialogActions,\r\n    DialogContent, \r\n    IconButton,\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ReactJson from 'react-json-view';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { IconArrowsMaximize } from '@tabler/icons';\r\nimport ExpandDataDialog from './ExpandDataDialog';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nimport './EditVariableDialog.css';\r\n\r\nconst isPositiveNumeric = (value) =>  /^\\d+$/.test(value);\r\n\r\nconst EditVariableDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onConfirm,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [input, setInput] = useState(null);\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false);\r\n    const [expandDialogProps, setExpandDialogProps] = useState({});\r\n    const [copiedVariableBody, setCopiedVariableBody] = useState({});\r\n    const [languageType, setLanguageType] = useState(languages.js);\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false);\r\n    };\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        };\r\n        setExpandDialogProps(dialogProp);\r\n        setShowExpandDialog(true);\r\n    };\r\n\r\n    const onMouseUp = (e) => {\r\n        if (e.target && e.target.selectionEnd && e.target.value) {\r\n            const cursorPosition = e.target.selectionEnd;\r\n            const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n            const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n            const body = {\r\n                textBeforeCursorPosition, \r\n                textAfterCursorPosition,\r\n            }\r\n            setCopiedVariableBody(body);\r\n        } else {\r\n            setCopiedVariableBody({});\r\n        }\r\n    }\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace;\r\n        let returnVariablePath = `${node.id}`;\r\n        for (let i = 0; i < namespaces.length; i+=1 ) {\r\n            const namespace = namespaces[i];\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1);\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`;\r\n                } else {\r\n                    returnVariablePath += namespace;\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.';\r\n                }\r\n            }\r\n        }\r\n        if (copiedVariableBody) {\r\n            let newInput = '';\r\n            if (copiedVariableBody.textBeforeCursorPosition === undefined && copiedVariableBody.textAfterCursorPosition === undefined)\r\n                newInput = `${inputValue}${`{{${returnVariablePath}}}`}`;\r\n            else\r\n                newInput = `${copiedVariableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${copiedVariableBody.textAfterCursorPosition}`;\r\n            setInputValue(newInput);\r\n        }\r\n    };\r\n\r\n    const onSave = (value) => {\r\n        // ArrayInputParameter\r\n        if (dialogProps.arrayItemBody) {\r\n            const updateArrayValues = {\r\n                ...dialogProps.arrayItemBody.arrayItemValues,\r\n                [dialogProps.arrayItemBody.arrayItemInput.name]: value\r\n            };\r\n            const updateInitialValues = dialogProps.arrayItemBody.initialValues;\r\n            updateInitialValues[dialogProps.arrayItemBody.arrayItemIndex] = updateArrayValues;\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: updateInitialValues\r\n            };\r\n            onConfirm(updateValues);\r\n        }\r\n        else {\r\n            // InputParameter\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: value,\r\n                submit: null\r\n            };\r\n            onConfirm(updateValues);\r\n        }\r\n    }\r\n\r\n     // Handle Accordian\r\n     useEffect(() => {\r\n        if(dialogProps.values && dialogProps.input) {\r\n            let inputValues = dialogProps.values;\r\n            let input = dialogProps.input;\r\n            if (dialogProps.arrayItemBody) {\r\n                inputValues = dialogProps.arrayItemBody.arrayItemValues;\r\n                input = dialogProps.arrayItemBody.arrayItemInput;\r\n            }\r\n            setInput(input);\r\n            setInputValue(inputValues[input.name].toString() || '');\r\n            if (input.type === 'json' || input.type === 'string' || input.type === 'number') \r\n                setLanguageType(languages.json);\r\n            if (input.type === 'code')\r\n                setLanguageType(languages.js);\r\n        }\r\n       \r\n    }, [dialogProps]);\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"lg\"\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                {input && (input.type === 'json' || input.type === 'string' || \r\n                input.type === 'number' || input.type === 'code') &&\r\n                <div style={{ flex: 1 }}>\r\n                    <Typography sx={{ mb: 2, ml: 1 }} variant=\"h4\">Input</Typography>\r\n                    <PerfectScrollbar \r\n                        style={{ \r\n                            border: '1px solid',\r\n                            borderColor: theme.palette.grey['500'],\r\n                            borderRadius: '12px', \r\n                            height: '100%', \r\n                            maxHeight: 'calc(100vh - 220px)', \r\n                            overflowX: 'hidden' \r\n                        }}>\r\n                        <Editor\r\n                            value={inputValue}\r\n                            onValueChange={code => setInputValue(code)}\r\n                            placeholder={input.placeholder}\r\n                            highlight={code => highlight(code, languageType)}\r\n                            onMouseUp={e => onMouseUp(e)}\r\n                            onBlur={e => onMouseUp(e)}\r\n                            padding={10}\r\n                            style={{\r\n                                fontSize: '0.875rem',\r\n                                minHeight: 'calc(100vh - 220px)',\r\n                                width: '100%',\r\n                            }}\r\n                            textareaClassName=\"editor__textarea\"\r\n                        />\r\n                    </PerfectScrollbar>\r\n                </div>\r\n                }\r\n                <div style={{ flex: 1 }}>\r\n                    <Typography sx={{ mb: 2, ml: 2 }} variant=\"h4\">Variables</Typography>\r\n                    {dialogProps.availableNodesForVariable.length === 0 && \r\n                    <div style={{ padding: 10, marginLeft: 10 }}>\r\n                        <span>No Variables. Try connect to other nodes. </span>\r\n                    </div>}\r\n                    {dialogProps.availableNodesForVariable.length > 0 &&\r\n                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                        <Box sx={{ pl: 2, pr: 2 }}>\r\n                            <List\r\n                                sx={{\r\n                                    width: '100%',\r\n                                    py: 0,\r\n                                    borderRadius: '10px',\r\n                                    [theme.breakpoints.down('md')]: {\r\n                                        maxWidth: 300\r\n                                    },\r\n                                    '& .MuiListItemSecondaryAction-root': {\r\n                                        top: 22\r\n                                    },\r\n                                    '& .MuiDivider-root': {\r\n                                        my: 0\r\n                                    },\r\n                                    '& .list-container': {\r\n                                        pl: 7\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {dialogProps.availableNodesForVariable.map((node, index) => (\r\n                                    <Box key={index}>\r\n                                        <Accordion expanded={expanded === node.data.label} onChange={handleAccordionChange(node.data.label)}>\r\n                                            <AccordionSummary\r\n                                                expandIcon={<ExpandMoreIcon />}\r\n                                                aria-controls={`${node.data.label}-content`}\r\n                                                id={`${node.data.label}-header`}\r\n                                            >\r\n                                                <Typography variant=\"h5\">\r\n                                                    {node.data.label}\r\n                                                </Typography>\r\n                                            </AccordionSummary>\r\n                                            <AccordionDetails>\r\n                                                <div style={{position: 'relative'}}>\r\n                                                    <ReactJson collapsed src={(node.data.outputResponses && node.data.outputResponses.output)? node.data.outputResponses.output : {}} enableClipboard={e => onClipboardCopy(e, node)}/>\r\n                                                    <IconButton \r\n                                                        size=\"small\" \r\n                                                        sx={{ \r\n                                                            height: 25, \r\n                                                            width: 25, \r\n                                                            position: 'absolute', \r\n                                                            top: -5, \r\n                                                            right: 5 \r\n                                                        }}\r\n                                                        title=\"Expand Variable\"\r\n                                                        color=\"primary\"\r\n                                                        onClick={() => onExpandDialogClicked((node.data.outputResponses && node.data.outputResponses.output) ? node.data.outputResponses.output : {}, node)}\r\n                                                    >\r\n                                                        <IconArrowsMaximize />\r\n                                                    </IconButton>\r\n                                                </div>\r\n                                            </AccordionDetails>\r\n                                        </Accordion>\r\n                                    </Box>\r\n                                ))}\r\n                            </List>\r\n                        </Box>\r\n                    </PerfectScrollbar>}\r\n                </div>\r\n                <ExpandDataDialog\r\n                    enableClipboard\r\n                    show={showExpandDialog}\r\n                    dialogProps={expandDialogProps}\r\n                    onCancel={() => setShowExpandDialog(false)}\r\n                    onCopyClick={(e, node) => {\r\n                        onClipboardCopy(e, node);\r\n                        setShowExpandDialog(false);\r\n                    }}                                                \r\n                ></ExpandDataDialog>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>\r\n                    {dialogProps.cancelButtonName}\r\n                </Button>\r\n                <Button variant=\"contained\" onClick={() => onSave(inputValue)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nEditVariableDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func,\r\n};\r\n\r\nexport default EditVariableDialog;\r\n\r\n","import { useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Fab,\r\n    ClickAwayListener,\r\n    Divider,\r\n    Paper,\r\n    Stack,\r\n    Popper,\r\n    Typography,\r\n    TextField,\r\n    Avatar,\r\n} from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport * as Yup from 'yup';\r\nimport lodash from 'lodash';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport InputParameters from 'views/inputs/InputParameters';\r\nimport CredentialInput from 'views/inputs/CredentialInput';\r\nimport OutputResponses from 'views/output/OutputResponses';\r\nimport VariableSelector from './VariableSelector';\r\nimport EditVariableDialog from 'ui-component/dialog/EditVariableDialog';\r\n\r\n// API\r\nimport nodesApi from \"api/nodes\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// icons\r\nimport { IconPencil, IconMinus, IconCheck } from '@tabler/icons';\r\n\r\n// utils\r\nimport { getAvailableNodeIdsForVariable, numberOrExpressionRegex, handleCredentialParams } from 'utils/genericHelper';\r\n\r\n// ==============================|| EDIT NODES||============================== //\r\n\r\nconst EditNodes = ({ node, nodes, edges, workflow, onNodeLabelUpdate, onNodeValuesUpdate }) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const [nodeFlowData, setNodeFlowData] = useState(null);\r\n    const [nodeLabel, setNodeLabel] = useState('');\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [nodeDetails, setNodeDetails] = useState(null);\r\n    const [nodeParams, setNodeParams] = useState([]);\r\n    const [nodeParamsType, setNodeParamsType] = useState([]);\r\n    const [nodeParamsInitialValues, setNodeParamsInitialValues] = useState({});\r\n    const [nodeParamsValidation, setNodeParamsValidation] = useState({});\r\n    const [isVariableSelectorOpen, setVariableSelectorOpen] = useState(false);\r\n    const [variableBody, setVariableBody] = useState({});\r\n    const [availableNodesForVariable, setAvailableNodesForVariable] = useState(null);\r\n    const [isEditVariableDialogOpen, setEditVariableDialog] = useState(false);\r\n    const [editVariableDialogProps, setEditVariableDialogProps] = useState({});\r\n\r\n    const anchorRef = useRef(null);\r\n    const ps = useRef();\r\n\r\n    const getSpecificNodeApi = useApi(nodesApi.getSpecificNode);\r\n \r\n    const scrollTop = () => {\r\n        const curr = ps.current;\r\n        if (curr) {\r\n            curr.scrollTop = 0;\r\n        }\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n        setVariableSelectorOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n        if (open) setVariableSelectorOpen(false);\r\n    };\r\n\r\n    const handleAccordionChange = (paramsType) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? paramsType : false);\r\n        scrollTop();\r\n    };\r\n\r\n    const handleNodeLabelChange = (event) => {\r\n        setNodeLabel(event.target.value);\r\n    };\r\n\r\n    const saveNodeLabel = () => {\r\n        onNodeLabelUpdate(nodeLabel);\r\n    };\r\n\r\n    const onEditVariableDialogOpen = (input, values, arrayItemBody) => {\r\n        const variableNodesIds = getAvailableNodeIdsForVariable(nodes, edges, node.id);\r\n           \r\n        const nodesForVariable = [];\r\n        for (let i = 0; i < variableNodesIds.length; i+=1 ) {\r\n            const nodeId = variableNodesIds[i];\r\n            const node = nodes.find((nd) => nd.id === nodeId);\r\n            if (node && node.data.outputResponses) {\r\n                nodesForVariable.push(node);\r\n            }\r\n        }\r\n\r\n        const dialogProps = {\r\n            input,\r\n            values,\r\n            arrayItemBody,\r\n            availableNodesForVariable: nodesForVariable,\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n        }\r\n\r\n        setEditVariableDialogProps(dialogProps);\r\n        setEditVariableDialog(true);\r\n    }\r\n    \r\n    const setVariableSelectorState = (variableSelectorState, body) => {\r\n        setVariableSelectorOpen(variableSelectorState);\r\n        if (body) {\r\n            setVariableBody(body);\r\n            const variableNodesIds = getAvailableNodeIdsForVariable(nodes, edges, node.id);\r\n           \r\n            const nodesForVariable = [];\r\n            for (let i = 0; i < variableNodesIds.length; i+=1 ) {\r\n                const nodeId = variableNodesIds[i];\r\n                const node = nodes.find((nd) => nd.id === nodeId);\r\n                if (node && node.data.outputResponses) {\r\n                    nodesForVariable.push(node);\r\n                }\r\n            }\r\n            setAvailableNodesForVariable(nodesForVariable);\r\n        }\r\n    };\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n\r\n        // Because formParams options can be changed due to show hide options, \r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod');\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod');\r\n        \r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = nodeDetails[paramsType].find((param) => param.name === 'credentialMethod');\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options;\r\n            }\r\n        }\r\n\r\n        const updateNodeDetails = {\r\n            ...nodeDetails,\r\n            [paramsType]: formParams\r\n        };\r\n        setNodeDetails(updateNodeDetails);\r\n    };\r\n\r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateNodeFlowData = {\r\n            ...nodeFlowData,\r\n            [paramsType]: formValues\r\n        };\r\n        // If input parameters change, notify output has to be retest\r\n        if (nodeFlowData.outputResponses) {\r\n            const outputResponsesFlowData = nodeFlowData.outputResponses;\r\n            outputResponsesFlowData.submit = null;\r\n            outputResponsesFlowData.needRetest = true;\r\n            updateNodeFlowData.outputResponses = outputResponsesFlowData;\r\n        }\r\n\r\n        setNodeFlowData(updateNodeFlowData);\r\n        onNodeValuesUpdate(updateNodeFlowData);\r\n    };\r\n\r\n    const onVariableSelected = (returnVariablePath) => {\r\n        if (variableBody) {\r\n            const path = variableBody.path;\r\n            const paramsType = variableBody.paramsType;\r\n            const newInput = `${variableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${variableBody.textAfterCursorPosition}`;\r\n            const clonedNodeFlowData = lodash.cloneDeep(nodeFlowData);\r\n            lodash.set(clonedNodeFlowData, path, newInput);\r\n            valueChanged(clonedNodeFlowData[paramsType], paramsType);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formValues, paramsType) => {\r\n        const updateNodeFlowData = {\r\n            ...nodeFlowData,\r\n            [paramsType]: formValues\r\n        };\r\n        setNodeFlowData(updateNodeFlowData);\r\n        onNodeValuesUpdate(updateNodeFlowData);\r\n\r\n        const index = nodeParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== nodeParamsType.length - 1) {\r\n            setExpanded(nodeParamsType[index+1]);\r\n            scrollTop();\r\n        }\r\n    };\r\n\r\n    const showHideParameters = (input, displayType, index, toBeDeleteParams) => {\r\n        const displayOptions = input[displayType];\r\n        Object.keys(displayOptions).forEach((path) => {\r\n            const comparisonValue = displayOptions[path];\r\n            if (path.includes(\"$index\")) {\r\n                path = path.replace(\"$index\", index);\r\n            }\r\n            const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n            if (Array.isArray(comparisonValue)) {\r\n                if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                    toBeDeleteParams.push(input);\r\n                }\r\n                if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                    toBeDeleteParams.push(input);\r\n                }\r\n            } else if (typeof comparisonValue === 'string') {\r\n                if (displayType === 'show' && !((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                    toBeDeleteParams.push(input);\r\n                }\r\n                if (displayType === 'hide' && ((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                    toBeDeleteParams.push(input);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    const displayParameters = (params, paramsType, arrayIndex) => {\r\n        const toBeDeleteParams = [];\r\n \r\n        for (let i = 0; i < params.length; i+= 1) {\r\n            const input = params[i];\r\n\r\n            if (input.type === 'array') {\r\n                const arrayInitialValue = lodash.get(nodeFlowData, `${paramsType}.${input.name}`, []);\r\n                const inputArray = [];\r\n                for (let j = arrayIndex; j < arrayInitialValue.length; j+= 1) {\r\n                    inputArray.push(displayParameters(input.array || [], paramsType, j));\r\n                }\r\n                input.arrayParams = inputArray;\r\n            }\r\n            if (input.show) {\r\n                showHideParameters(input, 'show', arrayIndex, toBeDeleteParams);\r\n            }\r\n            if (input.hide) {\r\n                showHideParameters(input, 'hide', arrayIndex, toBeDeleteParams);\r\n            }\r\n        }\r\n\r\n        let returnParams = params;\r\n        for (let i = 0; i < toBeDeleteParams.length; i+= 1) {\r\n            returnParams = returnParams.filter((prm) => JSON.stringify(prm) !== JSON.stringify(toBeDeleteParams[i]));\r\n        }\r\n        return returnParams;\r\n    };\r\n\r\n    const showHideOptions = (displayType, index, options) => {\r\n       \r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n\r\n        for (let i = 0; i < returnOptions.length; i+= 1) {\r\n            const option = returnOptions[i];\r\n            const displayOptions = option[displayType];\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n                    const comparisonValue = displayOptions[path];\r\n\r\n                    if (path.includes(\"$index\")) {\r\n                        path = path.replace(\"$index\", index);\r\n                    }\r\n                    const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                    } else if (typeof comparisonValue === 'string') {\r\n                        if (displayType === 'show' && !((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                        if (displayType === 'hide' && ((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i+= 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    }\r\n\r\n    const displayOptions = (params, paramsType, arrayIndex) => {\r\n      \r\n        let clonedParams = params;\r\n\r\n        for (let i = 0; i < clonedParams.length; i+= 1) {\r\n            const input = clonedParams[i];\r\n\r\n            if (input.type === 'array') {\r\n                const arrayInitialValue = lodash.get(nodeFlowData, `${paramsType}.${input.name}`, []);\r\n                const inputArray = [];\r\n                for (let j = arrayIndex; j < arrayInitialValue.length; j+= 1) {\r\n                    inputArray.push(displayOptions(input.arrayParams[j] || [], paramsType, j));\r\n                }\r\n                input.arrayParams = inputArray;\r\n            }\r\n            \r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', arrayIndex, input.options);\r\n                input.options = showHideOptions('hide', arrayIndex, input.options);\r\n            }\r\n        }\r\n      \r\n        return clonedParams;\r\n    };\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {};\r\n        for (let i = 0; i < params.length; i+= 1) {\r\n            const input = params[i];\r\n            let inputOptional = input.optional;\r\n\r\n            if (typeof input.optional === 'object' && input.optional !== null) {\r\n                const keys = Object.keys(input.optional);\r\n                inputOptional = true;\r\n                for (let j = 0; j < keys.length; j+= 1) {\r\n                    const path = keys[j];\r\n                    const comparisonValue = input.optional[path];\r\n                    const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        inputOptional = inputOptional && comparisonValue.includes(groundValue);\r\n                        \r\n                    } else if (typeof comparisonValue === 'string') {\r\n                        inputOptional = inputOptional && ((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)));\r\n                    }\r\n                }\r\n            }\r\n\r\n            if ((\r\n                input.type === 'string' || \r\n                input.type === 'password' || \r\n                input.type === 'date' || \r\n                input.type === 'code' || \r\n                input.type === 'json' || \r\n                input.type === 'file' || \r\n                input.type === 'options' || \r\n                input.type === 'asyncOptions'\r\n                ) && !inputOptional ) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n\r\n            } else if (input.type === 'number' && !inputOptional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`).matches(\r\n                    numberOrExpressionRegex,\r\n                    `${input.label} must be numbers or a variable expression.`\r\n                );\r\n\r\n            }  else if (input.type === 'array' && !inputOptional) {\r\n                /*\r\n                ************\r\n                * Limitation on different object shape within array: https://github.com/jquense/yup/issues/757\r\n                ************\r\n                const innerValidationSchema = setYupValidation(input.arrayParams);\r\n                validationSchema[input.name] = Yup.array(Yup.object(innerValidationSchema)).required(`Must have ${input.label}`).min(1, `Minimum of 1 ${input.label}`);\r\n                */\r\n            }\r\n        }\r\n        return validationSchema;\r\n    };\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n\r\n        const initialValues = {};\r\n\r\n        const reorganizedParams = displayParameters(nodeDetails[paramsType] || [], paramsType, 0);\r\n        let nodeParams = displayOptions(lodash.cloneDeep(reorganizedParams), paramsType, 0);\r\n\r\n        nodeParams = handleCredentialParams(nodeParams, paramsType, reorganizedParams, nodeFlowData);\r\n        \r\n        for (let i = 0; i < nodeParams.length; i+= 1) {\r\n            const input = nodeParams[i];\r\n\r\n            // Load from nodeFlowData values\r\n            if (paramsType in nodeFlowData && input.name in nodeFlowData[paramsType]) {\r\n                initialValues[input.name] = nodeFlowData[paramsType][input.name];\r\n         \r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name]);\r\n                    if (!optionVal) delete initialValues[input.name];\r\n                }\r\n            } else {\r\n                // Load from nodeParams default values\r\n                initialValues[input.name] = input.default || '';\r\n\r\n                // Special case for array, always initialize the item if default is not set\r\n                if (input.type === 'array' && !input.default) {\r\n                    const newObj = {};\r\n                    for (let j = 0; j < input.array.length; j+= 1) {\r\n                        newObj[input.array[j].name] = input.array[j].default || '';\r\n                    }\r\n                    initialValues[input.name] = [newObj];\r\n                }\r\n            }\r\n        }\r\n        \r\n        initialValues.submit = null;\r\n        \r\n        setNodeParamsInitialValues(initialValues);\r\n        setNodeParamsValidation(setYupValidation(nodeParams));\r\n        setNodeParams(nodeParams);\r\n    };\r\n\r\n    // Handle Accordian\r\n    const prevOpen = useRef(open);\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus();\r\n        }\r\n\r\n        prevOpen.current = open;\r\n\r\n    }, [open]);\r\n\r\n\r\n    // Get Node Details from API\r\n    useEffect(() => {\r\n        if (getSpecificNodeApi.data) {\r\n\r\n            const nodeDetails = getSpecificNodeApi.data;\r\n\r\n            setNodeDetails(nodeDetails);\r\n\r\n            const nodeParamsType = [];\r\n\r\n            if (nodeDetails.actions) nodeParamsType.push('actions');\r\n            if (nodeDetails.networks) nodeParamsType.push('networks');\r\n            if (nodeDetails.credentials) nodeParamsType.push('credentials');\r\n            if (nodeDetails.inputParameters) nodeParamsType.push('inputParameters');\r\n            nodeParamsType.push('outputResponses');\r\n\r\n            setNodeParamsType(nodeParamsType);\r\n\r\n            if (nodeParamsType.length) {\r\n                setExpanded(nodeParamsType[0]);\r\n                scrollTop();\r\n            }\r\n        }\r\n\r\n    }, [getSpecificNodeApi.data]); \r\n\r\n   \r\n    // Initialization\r\n    useEffect(() => {\r\n        if (node) {\r\n            setOpen(true);\r\n            setNodeLabel(node.data.label);\r\n            setNodeFlowData(node.data);\r\n            getSpecificNodeApi.request(node.data.name);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [node]); \r\n\r\n\r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (nodeDetails && nodeFlowData && expanded) {\r\n            initializeFormValuesAndParams(expanded);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [nodeDetails, nodeFlowData, expanded]);\r\n\r\n    return (\r\n        <>\r\n            <Fab \r\n                sx={{ left: 40, top: 20 }} \r\n                ref={anchorRef}\r\n                size=\"small\" \r\n                color=\"secondary\" \r\n                onClick={handleToggle}\r\n                title=\"Edit Node\"\r\n            >\r\n                {open ? <IconMinus /> : <IconPencil />}\r\n            </Fab>\r\n            <Popper\r\n                placement=\"bottom-end\"\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [-80, 14]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{zIndex: 1000}}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <Stack>\r\n                                            <Typography variant=\"h4\">Edit Nodes</Typography>\r\n                                        </Stack>\r\n                                    </Box>\r\n                                    <PerfectScrollbar containerRef={(el) => {ps.current = el}} style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                        \r\n                                        {!node && <Box sx={{ p: 2 }}>No data</Box>}\r\n\r\n                                        {nodeFlowData && nodeFlowData.label && (\r\n                                            <Box sx={{ pl: 4, pr: 4, pt: 2, pb: 2, textAlign: 'center', display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                                <TextField \r\n                                                    id={nodeFlowData.name}\r\n                                                    label=\"Node Label\"\r\n                                                    variant=\"outlined\"\r\n                                                    value={nodeLabel}\r\n                                                    onChange={handleNodeLabelChange}\r\n                                                    fullWidth\r\n                                                />\r\n                                                <Fab \r\n                                                    sx={{ \r\n                                                        minHeight: 10, \r\n                                                        height: 27, width: 30, \r\n                                                        backgroundColor: theme.palette.secondary.light, \r\n                                                        color: theme.palette.secondary.main, \r\n                                                        ml: 2\r\n                                                    }} \r\n                                                    size=\"small\"\r\n                                                    title=\"Validate and Save\"\r\n                                                    onClick={saveNodeLabel}\r\n                                                >\r\n                                                    <IconCheck />\r\n                                                </Fab>\r\n                                                \r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {/* actions */}\r\n                                        {nodeParamsType.includes('actions') && \r\n                                            (<Box sx={{ p: 2 }}>\r\n                                                <Accordion expanded={expanded === 'actions'} onChange={handleAccordionChange('actions')}>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls=\"actions-content\"\r\n                                                        id=\"actions-header\" \r\n                                                    >\r\n                                                        <Typography variant=\"h4\">\r\n                                                            Actions\r\n                                                        </Typography>\r\n                                                        {nodeFlowData && nodeFlowData.actions && nodeFlowData.actions.submit &&\r\n                                                        (<Avatar\r\n                                                            variant=\"rounded\"\r\n                                                            sx={{\r\n                                                                ...theme.typography.smallAvatar,\r\n                                                                borderRadius: '50%',\r\n                                                                background: theme.palette.success.dark,\r\n                                                                color: 'white',\r\n                                                                ml: 2\r\n                                                            }}\r\n                                                        >\r\n                                                            <IconCheck />\r\n                                                        </Avatar>)}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <InputParameters \r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            params={nodeParams} \r\n                                                            paramsType=\"actions\"\r\n                                                            initialValues={nodeParamsInitialValues} \r\n                                                            nodeParamsValidation={nodeParamsValidation}\r\n                                                            nodeFlowData={nodeFlowData}\r\n                                                            setVariableSelectorState={setVariableSelectorState}\r\n                                                            onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                                                            valueChanged={valueChanged}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>)\r\n                                        }\r\n\r\n                                        {/* networks */}\r\n                                        {nodeParamsType.includes('networks') && \r\n                                            (<Box sx={{ p: 2 }}>\r\n                                                <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls=\"networks-content\"\r\n                                                        id=\"networks-header\" \r\n                                                    >\r\n                                                        <Typography variant=\"h4\">\r\n                                                            Networks\r\n                                                        </Typography>\r\n                                                        {nodeFlowData && nodeFlowData.networks && nodeFlowData.networks.submit &&\r\n                                                        (<Avatar\r\n                                                            variant=\"rounded\"\r\n                                                            sx={{\r\n                                                                ...theme.typography.smallAvatar,\r\n                                                                borderRadius: '50%',\r\n                                                                background: theme.palette.success.dark,\r\n                                                                color: 'white',\r\n                                                                ml: 2\r\n                                                            }}\r\n                                                        >\r\n                                                            <IconCheck />\r\n                                                        </Avatar>)}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <InputParameters \r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            params={nodeParams} \r\n                                                            paramsType=\"networks\"\r\n                                                            initialValues={nodeParamsInitialValues} \r\n                                                            nodeParamsValidation={nodeParamsValidation}\r\n                                                            nodeFlowData={nodeFlowData}\r\n                                                            setVariableSelectorState={setVariableSelectorState}\r\n                                                            onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                                                            valueChanged={valueChanged}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>)\r\n                                        }\r\n\r\n                                        {/* credentials */}\r\n                                        {nodeParamsType.includes('credentials') && \r\n                                            (<Box sx={{ p: 2 }}>\r\n                                                <Accordion expanded={expanded === 'credentials'} onChange={handleAccordionChange('credentials')}>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls=\"credentials-content\"\r\n                                                        id=\"credentials-header\" \r\n                                                    >\r\n                                                        <Typography variant=\"h4\">\r\n                                                            Credentials\r\n                                                        </Typography>\r\n                                                        {nodeFlowData && nodeFlowData.credentials && nodeFlowData.credentials.submit &&\r\n                                                        (<Avatar\r\n                                                            variant=\"rounded\"\r\n                                                            sx={{\r\n                                                                ...theme.typography.smallAvatar,\r\n                                                                borderRadius: '50%',\r\n                                                                background: theme.palette.success.dark,\r\n                                                                color: 'white',\r\n                                                                ml: 2\r\n                                                            }}\r\n                                                        >\r\n                                                            <IconCheck />\r\n                                                        </Avatar>)}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <CredentialInput \r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            initialParams={nodeParams} \r\n                                                            paramsType=\"credentials\"\r\n                                                            initialValues={nodeParamsInitialValues} \r\n                                                            initialValidation={nodeParamsValidation}\r\n                                                            valueChanged={valueChanged}\r\n                                                            paramsChanged={paramsChanged}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>)\r\n                                        }\r\n\r\n                                        {/* inputParameters */}\r\n                                        {nodeParamsType.includes('inputParameters') && \r\n                                            (<Box sx={{ p: 2 }}>\r\n                                                <Accordion expanded={expanded === 'inputParameters'} onChange={handleAccordionChange('inputParameters')}>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls=\"inputParameters-content\"\r\n                                                        id=\"inputParameters-header\" \r\n                                                    >\r\n                                                        <Typography variant=\"h4\">\r\n                                                            Input Parameters\r\n                                                        </Typography>\r\n                                                        {nodeFlowData && nodeFlowData.inputParameters && nodeFlowData.inputParameters.submit &&\r\n                                                        (<Avatar\r\n                                                            variant=\"rounded\"\r\n                                                            sx={{\r\n                                                                ...theme.typography.smallAvatar,\r\n                                                                borderRadius: '50%',\r\n                                                                background: theme.palette.success.dark,\r\n                                                                color: 'white',\r\n                                                                ml: 2\r\n                                                            }}\r\n                                                        >\r\n                                                            <IconCheck />\r\n                                                        </Avatar>)}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <InputParameters \r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            params={nodeParams} \r\n                                                            paramsType=\"inputParameters\"\r\n                                                            initialValues={nodeParamsInitialValues}\r\n                                                            nodeParamsValidation={nodeParamsValidation}\r\n                                                            nodeFlowData={nodeFlowData}\r\n                                                            setVariableSelectorState={setVariableSelectorState}\r\n                                                            onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                                                            valueChanged={valueChanged}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>)\r\n                                        }\r\n\r\n                                        {/* outputResponses */}\r\n                                        {nodeDetails && nodeFlowData && \r\n                                            (<Box sx={{ p: 2 }}>\r\n                                                <Accordion expanded={expanded === 'outputResponses'} onChange={handleAccordionChange('outputResponses')}>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls=\"outputResponses-content\"\r\n                                                        id=\"outputResponses-header\" \r\n                                                    >\r\n                                                        <Typography variant=\"h4\">\r\n                                                            Output Responses\r\n                                                        </Typography>\r\n                                                        {nodeFlowData && nodeFlowData.outputResponses && nodeFlowData.outputResponses.submit &&\r\n                                                        (<Avatar\r\n                                                            variant=\"rounded\"\r\n                                                            sx={{\r\n                                                                ...theme.typography.smallAvatar,\r\n                                                                borderRadius: '50%',\r\n                                                                background: theme.palette.success.dark,\r\n                                                                color: 'white',\r\n                                                                ml: 2\r\n                                                            }}\r\n                                                        >\r\n                                                            <IconCheck />\r\n                                                        </Avatar>)}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <OutputResponses \r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            nodeId={node.id}\r\n                                                            nodeParamsType={nodeParamsType}\r\n                                                            nodeFlowData={nodeFlowData}\r\n                                                            nodes={nodes}\r\n                                                            edges={edges}\r\n                                                            workflow={workflow}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>)\r\n                                        }\r\n                                    </PerfectScrollbar>\r\n                                    <VariableSelector \r\n                                        key={JSON.stringify(availableNodesForVariable)} \r\n                                        nodes={availableNodesForVariable} \r\n                                        isVariableSelectorOpen={isVariableSelectorOpen} \r\n                                        anchorEl={anchorRef.current}\r\n                                        onVariableSelected={(returnVariablePath) => onVariableSelected(returnVariablePath)} \r\n                                        handleClose={() => setVariableSelectorOpen(false)}\r\n                                    />\r\n                                    <EditVariableDialog \r\n                                        key={JSON.stringify(editVariableDialogProps)} \r\n                                        show={isEditVariableDialogOpen}\r\n                                        dialogProps={editVariableDialogProps}\r\n                                        onCancel={() => setEditVariableDialog(false)}\r\n                                        onConfirm={(updateValues) => {\r\n                                            valueChanged(updateValues, expanded);\r\n                                            setEditVariableDialog(false);\r\n                                        }}\r\n                                    />\r\n                                </MainCard>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\n\r\nEditNodes.propTypes = {\r\n    node: PropTypes.object,\r\n    nodes: PropTypes.array,\r\n    edges: PropTypes.array,\r\n    workflow: PropTypes.object,\r\n    onNodeLabelUpdate: PropTypes.func,\r\n    onNodeValuesUpdate: PropTypes.func,\r\n};\r\n\r\nexport default EditNodes;\r\n","import { createPortal } from 'react-dom';\r\nimport { \r\n    Button, \r\n    Dialog, \r\n    DialogActions,\r\n    DialogContent, \r\n    DialogContentText,\r\n    DialogTitle \r\n} from '@mui/material';\r\nimport useConfirm from 'hooks/useConfirm';\r\n\r\nconst ConfirmDialog = () => {\r\n\r\n    const { onConfirm, onCancel, confirmState } = useConfirm();\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const component = confirmState.show ? (\r\n        <Dialog\r\n            fullWidth\r\n            maxWidth=\"xs\"\r\n            open={confirmState.show}\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {confirmState.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText sx={{ color: 'black' }} id=\"alert-dialog-description\">\r\n                    {confirmState.description}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>\r\n                    {confirmState.cancelButtonName}\r\n                </Button>\r\n                <Button variant=\"contained\" onClick={onConfirm}>\r\n                    {confirmState.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nexport default ConfirmDialog;\r\n\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { \r\n    Dialog, \r\n    DialogContent, \r\n    DialogTitle,\r\n    Box,\r\n    Divider,\r\n    InputAdornment,\r\n    List,\r\n    ListItemButton,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    OutlinedInput,\r\n    Stack\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// icons\r\nimport { IconSearch } from '@tabler/icons';\r\n\r\n// const\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst TestWorkflowDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onItemClick,\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [nodes, setNodes] = useState([]);\r\n\r\n    const filterSearch = (value) => {\r\n        setSearchValue(value);\r\n        setTimeout(() => {\r\n            if (value) {\r\n                const returnData = dialogProps.nodes.filter((nd) => nd.data.label.toLowerCase().includes(value.toLowerCase()));\r\n                setNodes(returnData);\r\n\r\n            } else if (value === '') {\r\n                setNodes(dialogProps.nodes);\r\n            }\r\n        }, 500);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.nodes) {\r\n            setNodes(dialogProps.nodes);\r\n        }\r\n    }, [dialogProps]);\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"md\"\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Stack>\r\n                    <span>Select a starting point to test from. Workflow will be executed from the starting point till the end.</span>\r\n                </Stack>\r\n                <Box sx={{ p: 2 }}>\r\n                    <OutlinedInput\r\n                        sx={{ width: '100%', pr: 1, pl: 2, my: 2 }}\r\n                        id=\"input-search-node\"\r\n                        value={searchValue}\r\n                        onChange={(e) => filterSearch(e.target.value)}\r\n                        placeholder=\"Search nodes\"\r\n                        startAdornment={\r\n                            <InputAdornment position=\"start\">\r\n                                <IconSearch stroke={1.5} size=\"1rem\" color={theme.palette.grey[500]} />\r\n                            </InputAdornment>\r\n                        }\r\n                        aria-describedby=\"search-helper-text\"\r\n                        inputProps={{\r\n                            'aria-label': 'weight'\r\n                        }}\r\n                    />\r\n                    <Divider />\r\n                </Box>\r\n                <div>\r\n                    <Box sx={{ p: 2 }}>\r\n                        <List\r\n                            sx={{\r\n                                width: '100%',\r\n                                py: 0,\r\n                                borderRadius: '10px',\r\n                                [theme.breakpoints.down('md')]: {\r\n                                    maxWidth: 300\r\n                                },\r\n                                '& .MuiListItemSecondaryAction-root': {\r\n                                    top: 22\r\n                                },\r\n                                '& .MuiDivider-root': {\r\n                                    my: 0\r\n                                },\r\n                                '& .list-container': {\r\n                                    pl: 7\r\n                                }\r\n                            }}\r\n                        >\r\n                            {nodes.map((node) => (\r\n                                <div key={node.id}>\r\n                                    <ListItemButton\r\n                                        sx={{ p: 0, borderRadius: `${customization.borderRadius}px` }}\r\n                                        onClick={() => onItemClick(node.id)}\r\n                                    >\r\n                                        <ListItem alignItems=\"center\">\r\n                                            <ListItemAvatar>\r\n                                                <div style={{ width: 50, height: 50, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                                    <img style={{ width: '100%', height: '100%', padding: 10, objectFit: 'contain' }} alt={node.data.name} src={`${baseURL}/api/v1/node-icon/${node.data.name}`} />\r\n                                                </div>\r\n                                            </ListItemAvatar>\r\n                                            <ListItemText sx={{ ml: 1 }} primary={node.data.label} secondary={node.data.description} />\r\n                                        </ListItem>\r\n                                    </ListItemButton>\r\n                                    <Divider />\r\n                                </div>\r\n                            ))}\r\n                        </List>\r\n                    </Box>\r\n                </div>\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nTestWorkflowDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onItemClick: PropTypes.func,\r\n};\r\n\r\nexport default TestWorkflowDialog;\r\n\r\n","import client from \"./client\";\r\n\r\nconst deleteAllTestWebhooks = () => client.post(`/remove-test-webhooks`);\r\n\r\nexport default {\r\n    deleteAllTestWebhooks,\r\n};\r\n","import { useEffect, useRef, useState, useCallback } from 'react';\r\nimport ReactFlow, {\r\n    ReactFlowProvider,\r\n    addEdge,\r\n    MiniMap,\r\n    Controls,\r\n    Background,\r\n    useNodesState,\r\n    useEdgesState,\r\n} from 'react-flow-renderer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { usePrompt, useNavigate } from \"react-router-dom\";\r\nimport { \r\n    REMOVE_DIRTY, \r\n    SET_DIRTY, \r\n    SET_WORKFLOW,\r\n    enqueueSnackbar as enqueueSnackbarAction,\r\n    closeSnackbar as closeSnackbarAction,\r\n} from 'store/actions';\r\n\r\n// material-ui\r\nimport { Toolbar, Box, AppBar, Button, Fab, CircularProgress } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport CanvasNode from './CanvasNode';\r\nimport ButtonEdge from './ButtonEdge';\r\nimport CanvasHeader from './CanvasHeader';\r\nimport AddNodes from './AddNodes';\r\nimport EditNodes from './EditNodes';\r\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog';\r\nimport TestWorkflowDialog from 'ui-component/dialog/TestWorkflowDialog';\r\n\r\n// API\r\nimport nodesApi from \"api/nodes\";\r\nimport workflowsApi from \"api/workflows\";\r\nimport webhooksApi from \"api/webhooks\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\nimport useConfirm from \"hooks/useConfirm\";\r\n\r\n// icons\r\nimport { IconX, IconBolt } from '@tabler/icons';\r\n\r\n// third party\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\n// utils\r\nimport { \r\n    generateWebhookEndpoint, \r\n    getUniqueNodeId, \r\n    checkIfNodeLabelUnique, \r\n    addAnchors,\r\n    getEdgeLabelName,\r\n    checkMultipleTriggers\r\n} from  'utils/genericHelper';\r\nimport useNotifier from 'utils/useNotifier';\r\n\r\n// const\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst nodeTypes = { customNode: CanvasNode };\r\nconst edgeTypes = { buttonedge: ButtonEdge };\r\n\r\n// ==============================|| CANVAS ||============================== //\r\n\r\nconst Canvas = () => {\r\n\r\n    const theme = useTheme();\r\n    const navigate = useNavigate();\r\n\r\n    const URLpath = document.location.pathname.toString().split('/');\r\n    const workflowShortId = (URLpath[URLpath.length - 1] && URLpath[URLpath.length - 1].startsWith('W')) ? URLpath[URLpath.length - 1] : '';\r\n\r\n    const { confirm } = useConfirm();\r\n\r\n    const dispatch = useDispatch();\r\n    const canvas = useSelector((state) => state.canvas);\r\n    const [canvasDataStore, setCanvasDataStore] = useState(canvas);\r\n    const [workflow, setWorkflow] = useState(null);\r\n    const [isTestWorkflowDialogOpen, setTestWorkflowDialogOpen] = useState(false);\r\n    const [testWorkflowDialogProps, setTestWorkflowDialogProps] = useState({});\r\n    const [isTestingWorkflow, setIsTestingWorkflow] = useState(false);\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier();\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args));\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args));\r\n\r\n    // ==============================|| ReactFlow ||============================== //\r\n\r\n    const [nodes, setNodes, onNodesChange] = useNodesState();\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState();\r\n   \r\n    const [rfInstance, setRfInstance] = useState(null);\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n   \r\n    const reactFlowWrapper = useRef(null);\r\n\r\n    // ==============================|| Workflow API ||============================== //\r\n\r\n    const getNodesApi = useApi(nodesApi.getAllNodes);\r\n    const removeTestTriggersApi = useApi(nodesApi.removeTestTriggers);\r\n    const deleteAllTestWebhooksApi = useApi(webhooksApi.deleteAllTestWebhooks);\r\n    const createNewWorkflowApi = useApi(workflowsApi.createNewWorkflow);\r\n    const testWorkflowApi = useApi(workflowsApi.testWorkflow);\r\n    const updateWorkflowApi = useApi(workflowsApi.updateWorkflow);\r\n    const getSpecificWorkflowApi = useApi(workflowsApi.getSpecificWorkflow);\r\n\r\n    // ==============================|| Events & Actions ||============================== //\r\n\r\n    const onConnect = (params) => {\r\n        const newEdge = { \r\n            ...params, \r\n            type: 'buttonedge', \r\n            id: `${params.source}-${params.sourceHandle}-${params.target}-${params.targetHandle}`,\r\n            data: { label: getEdgeLabelName(params.sourceHandle) }\r\n        };\r\n        setEdges((eds) => addEdge(newEdge, eds));\r\n        setDirty();\r\n    };\r\n\r\n    const handleTestWorkflow = () => {\r\n        try {\r\n            if (workflow.deployed) {\r\n                alert('Testing workflow requires stopping deployed workflow. Please stop deployed workflow first');\r\n                return;\r\n            }\r\n            const rfInstanceObject = rfInstance.toObject();\r\n            const nodes = rfInstanceObject.nodes || [];\r\n            setTestWorkflowDialogOpen(true);\r\n            setTestWorkflowDialogProps({\r\n                title: 'Test Workflow',\r\n                nodes: nodes.filter((nd) => !nd.id.includes('ifElse'))\r\n            });\r\n            \r\n        } catch(e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    const onStartingPointClick = (startingNodeId) => {\r\n        try {\r\n            const socket = socketIOClient(baseURL);\r\n            const rfInstanceObject = rfInstance.toObject();\r\n            const nodes = rfInstanceObject.nodes || [];\r\n            const edges = rfInstanceObject.edges || [];\r\n            setTestWorkflowDialogOpen(false);\r\n\r\n            socket.on('connect', () => {\r\n                const clientId = socket.id;\r\n                const node = nodes.find((nd) => nd.id === startingNodeId);\r\n                const nodeData = node.data;\r\n                const body = {\r\n                    nodes,\r\n                    edges,\r\n                    clientId,\r\n                    nodeData\r\n                };\r\n                testWorkflowApi.request(startingNodeId, body);\r\n                setNodes((nds) =>\r\n                    nds.map((node) => {\r\n                        node.data =  {\r\n                            ...node.data,\r\n                            outputResponses: {\r\n                                submit: null,\r\n                                needRetest: null,\r\n                                output: null,\r\n                            },\r\n                            selected: false,\r\n                        };\r\n                        return node;\r\n                    })\r\n                );\r\n                setIsTestingWorkflow(true);\r\n            });\r\n\r\n            socket.on('testWorkflowNodeResponse', (value) => {\r\n                const {\r\n                    nodeId,\r\n                    data,\r\n                    status\r\n                } = value;\r\n\r\n                const node = nodes.find((nd) => nd.id === nodeId);\r\n                if (node) {\r\n                    const outputValues = {\r\n                        submit: status === 'FINISHED' ? true : null,\r\n                        needRetest: status === 'FINISHED' ? null : true,\r\n                        output: data,\r\n                    };\r\n                    const nodeData = node.data;\r\n                    nodeData['outputResponses'] = outputValues;\r\n                    setNodes((nds) =>\r\n                        nds.map((node) => {\r\n                            if (node.id === nodeId) {\r\n                                node.data = {\r\n                                    ...nodeData,\r\n                                    selected: false,\r\n                                };\r\n                            }\r\n                            return node;\r\n                        })\r\n                    );\r\n                }\r\n            });\r\n\r\n            socket.on('testWorkflowNodeFinish', () => {\r\n                setIsTestingWorkflow(false);\r\n                socket.disconnect();\r\n            });\r\n\r\n        } catch(e) {\r\n            console.error(e);\r\n        }  \r\n    }\r\n\r\n    const handleLoadWorkflow = (file) => {\r\n        try {\r\n            const flowData = JSON.parse(file);\r\n            const nodes = flowData.nodes || [];\r\n\r\n            for (let i = 0; i < nodes.length; i+= 1) {\r\n                const nodeData = nodes[i].data;\r\n                if (nodeData.type === 'webhook') nodeData.webhookEndpoint = generateWebhookEndpoint();\r\n            }\r\n\r\n            setNodes(nodes);\r\n            setEdges(flowData.edges || []);\r\n            setDirty();\r\n\r\n        } catch(e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    const handleDeployWorkflow = async() => {\r\n        if (rfInstance) {\r\n\r\n            const rfInstanceObject = rfInstance.toObject();\r\n            const flowData = JSON.stringify(rfInstanceObject);\r\n            \r\n            try {\r\n                // Always save workflow first\r\n                let savedWorkflowResponse;\r\n                if (!workflow.shortId) {\r\n                    const newWorkflowBody = {\r\n                        name: workflow.name,\r\n                        deployed: false,\r\n                        flowData\r\n                    };\r\n                    const response = await workflowsApi.createNewWorkflow(newWorkflowBody)\r\n                    savedWorkflowResponse = response.data;\r\n                } else {\r\n                    const updateBody = {\r\n                        flowData\r\n                    };\r\n                    const response = await workflowsApi.updateWorkflow(workflow.shortId, updateBody)\r\n                    savedWorkflowResponse = response.data;\r\n                }\r\n\r\n                dispatch({ type: REMOVE_DIRTY });\r\n                \r\n                // Then deploy\r\n                const response = await workflowsApi.deployWorkflow(savedWorkflowResponse.shortId)\r\n                const deployedWorkflowResponse = response.data;\r\n                dispatch({ type: SET_WORKFLOW, workflow: deployedWorkflowResponse });\r\n\r\n                enqueueSnackbar({\r\n                    message: 'Workflow deployed!',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: key => (\r\n                            <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        ),\r\n                    },\r\n                });\r\n\r\n            } catch (error) {\r\n                const errorData =  error.response.data || `${error.response.status}: ${error.response.statusText}`;\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: key => (\r\n                            <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        ),\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleStopWorkflow = async() => {\r\n        try {\r\n            const response = await workflowsApi.deployWorkflow(workflow.shortId, { halt: true });\r\n            const stoppedWorkflowResponse = response.data;\r\n            dispatch({ type: SET_WORKFLOW, workflow: stoppedWorkflowResponse });\r\n\r\n            enqueueSnackbar({\r\n                message: 'Workflow stopped',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n\r\n        } catch (error) {\r\n            const errorData =  error.response.data || `${error.response.status}: ${error.response.statusText}`;\r\n            enqueueSnackbar({\r\n                message: errorData,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleDeleteWorkflow = async() => {\r\n        const confirmPayload = {\r\n            title: `Delete`,\r\n            description: `Delete workflow ${workflow.name}?`,\r\n            confirmButtonName: 'Delete',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload);\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                await workflowsApi.deleteWorkflow(workflow.shortId);\r\n                navigate(-1);\r\n    \r\n            } catch (error) {\r\n                const errorData =  error.response.data || `${error.response.status}: ${error.response.statusText}`;\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: key => (\r\n                            <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        ),\r\n                    },\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSaveFlow = (workflowName) => {        \r\n        if (rfInstance) {\r\n\r\n            setNodes((nds) =>\r\n                nds.map((node) => {\r\n                    node.data =  {\r\n                        ...node.data,\r\n                        selected: false,\r\n                    };\r\n                    return node;\r\n                })\r\n            );\r\n\r\n            const rfInstanceObject = rfInstance.toObject();\r\n            const flowData = JSON.stringify(rfInstanceObject);\r\n            \r\n            if (!workflow.shortId) {\r\n                const newWorkflowBody = {\r\n                    name: workflowName,\r\n                    deployed: false,\r\n                    flowData\r\n                };\r\n                createNewWorkflowApi.request(newWorkflowBody);\r\n            } else {\r\n                const updateBody = {\r\n                    name: workflowName,\r\n                    flowData\r\n                };\r\n                updateWorkflowApi.request(workflow.shortId, updateBody);\r\n            }\r\n        }\r\n    };\r\n\r\n    // eslint-disable-next-line\r\n    const onNodeDoubleClick = useCallback((event, clickedNode) => {\r\n        setSelectedNode(clickedNode);\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === clickedNode.id) {\r\n                    node.data =  {\r\n                        ...node.data,\r\n                        selected: true,\r\n                    };\r\n                } else {\r\n                    node.data =  {\r\n                        ...node.data,\r\n                        selected: false,\r\n                    };\r\n                }\r\n\r\n                return node;\r\n            })\r\n        );\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n    const onNodeLabelUpdate = useCallback((nodeLabel) => {\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === selectedNode.id) {\r\n                    if (!checkIfNodeLabelUnique(nodeLabel, rfInstance.getNodes())) {\r\n                        enqueueSnackbar({\r\n                            message: 'Duplicated node label',\r\n                            options: {\r\n                                key: new Date().getTime() + Math.random(),\r\n                                variant: 'error',\r\n                                persist: true,\r\n                                action: key => (\r\n                                    <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                                        <IconX />\r\n                                    </Button>\r\n                                ),\r\n                            },\r\n                        });\r\n                    } else {\r\n                        if (node.data.label !== nodeLabel) {\r\n                            setTimeout(() => setDirty(), 0);\r\n                        }\r\n                        node.data =  {\r\n                            ...node.data,\r\n                            label: nodeLabel,\r\n                        };\r\n                    }\r\n                }\r\n                return node;\r\n            })\r\n        );\r\n    });\r\n\r\n    // eslint-disable-next-line\r\n    const onNodeValuesUpdate = useCallback((nodeFlowData) => {\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === selectedNode.id) {\r\n                    setTimeout(() => setDirty(), 0);\r\n                    node.data = {\r\n                        ...node.data,\r\n                        ...nodeFlowData,\r\n                        selected: true,\r\n                    };\r\n                }\r\n                return node;\r\n            })\r\n        );\r\n    });\r\n\r\n    const onDragOver = useCallback((event) => {\r\n        event.preventDefault();\r\n        event.dataTransfer.dropEffect = 'move';\r\n    }, []);\r\n    \r\n    const onDrop = useCallback(\r\n        (event) => {\r\n            event.preventDefault();\r\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n            let nodeData = event.dataTransfer.getData('application/reactflow');\r\n\r\n            // check if the dropped element is valid\r\n            if (typeof nodeData === 'undefined' || !nodeData) {\r\n                return;\r\n            }\r\n\r\n            nodeData = JSON.parse(nodeData);\r\n\r\n            // check if workflow contains multiple triggers/webhooks\r\n            if ((nodeData.type === 'webhook' || nodeData.type === 'trigger') && \r\n              checkMultipleTriggers(rfInstance.getNodes())) {\r\n                enqueueSnackbar({\r\n                    message: 'Workflow can only contains 1 trigger or webhook node',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: key => (\r\n                            <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        ),\r\n                    },\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (nodeData.type === 'webhook') nodeData.webhookEndpoint = generateWebhookEndpoint();\r\n\r\n            const position = rfInstance.project({\r\n                x: event.clientX - reactFlowBounds.left - 100,\r\n                y: event.clientY - reactFlowBounds.top - 50,\r\n            });\r\n\r\n            const newNodeId = getUniqueNodeId(nodeData, rfInstance.getNodes());\r\n         \r\n            const newNode = {\r\n                id: newNodeId,\r\n                position,\r\n                type: \"customNode\",\r\n                data: addAnchors(nodeData, rfInstance.getNodes(), newNodeId)\r\n            };\r\n\r\n            setSelectedNode(newNode);\r\n            setNodes((nds) =>\r\n                nds.concat(newNode).map((node) => {\r\n                    if (node.id === newNode.id) {\r\n                        node.data =  {\r\n                            ...node.data,\r\n                            selected: true,\r\n                        };\r\n                    } else {\r\n                        node.data =  {\r\n                            ...node.data,\r\n                            selected: false,\r\n                        };\r\n                    }\r\n\r\n                    return node;\r\n                })\r\n            );\r\n            setTimeout(() => setDirty(), 0);\r\n        },\r\n        \r\n        // eslint-disable-next-line\r\n        [rfInstance]\r\n    );\r\n\r\n    const saveWorkflowSuccess = () => {\r\n        dispatch({ type: REMOVE_DIRTY });\r\n        enqueueSnackbar({\r\n            message: 'Workflow saved',\r\n            options: {\r\n                key: new Date().getTime() + Math.random(),\r\n                variant: 'success',\r\n                action: key => (\r\n                    <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                        <IconX />\r\n                    </Button>\r\n                ),\r\n            },\r\n        });\r\n    };\r\n\r\n    const setDirty = () => {\r\n        dispatch({ type: SET_DIRTY });\r\n    }\r\n\r\n    // ==============================|| useEffect ||============================== //\r\n\r\n    // Get specific workflow successful\r\n    useEffect(() => {\r\n        if (getSpecificWorkflowApi.data) {\r\n            const workflow = getSpecificWorkflowApi.data;\r\n            const initialFlow = workflow.flowData ? JSON.parse(workflow.flowData) : [];\r\n            setNodes(initialFlow.nodes || []);\r\n            setEdges(initialFlow.edges || []);\r\n            dispatch({ type: SET_WORKFLOW, workflow });\r\n\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificWorkflowApi.data]);\r\n\r\n\r\n    // Create new workflow successful\r\n    useEffect(() => {\r\n        if (createNewWorkflowApi.data) {\r\n            const workflow = createNewWorkflowApi.data;\r\n            dispatch({ type: SET_WORKFLOW, workflow });\r\n            saveWorkflowSuccess();\r\n            window.history.replaceState(null, null, `/canvas/${workflow.shortId}`)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [createNewWorkflowApi.data]);\r\n\r\n\r\n    // Update workflow successful\r\n    useEffect(() => {\r\n        if (updateWorkflowApi.data) {\r\n            dispatch({ type: SET_WORKFLOW, workflow: updateWorkflowApi.data });\r\n            saveWorkflowSuccess();\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateWorkflowApi.data]);\r\n\r\n\r\n    // Test workflow failed\r\n    useEffect(() => {\r\n        if (testWorkflowApi.error) {\r\n            enqueueSnackbar({\r\n                message: 'Test workflow failed',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testWorkflowApi.error]);\r\n\r\n\r\n    // Listen to edge button click remove redux event\r\n    useEffect(() => {\r\n        if (rfInstance) {\r\n            const edges = rfInstance.getEdges();\r\n            setEdges(edges.filter(edge => edge.id !== canvasDataStore.removeEdgeId));\r\n            setDirty();\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [canvasDataStore.removeEdgeId]);\r\n\r\n\r\n    useEffect(() => setWorkflow(canvasDataStore.workflow), [canvasDataStore.workflow]);\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        removeTestTriggersApi.request();\r\n        deleteAllTestWebhooksApi.request();\r\n\r\n        if (workflowShortId) {\r\n            getSpecificWorkflowApi.request(workflowShortId);\r\n\r\n        } else {\r\n            setNodes([]);\r\n            setEdges([]);\r\n            dispatch({ \r\n                type: SET_WORKFLOW, \r\n                workflow: {\r\n                    name: 'Untitled workflow',\r\n                }\r\n            });\r\n        }\r\n\r\n        getNodesApi.request();\r\n     \r\n        // Clear dirty state before leaving and remove any ongoing test triggers and webhooks\r\n        return () => {\r\n            removeTestTriggersApi.request();\r\n            deleteAllTestWebhooksApi.request();\r\n\r\n            setTimeout(() => dispatch({ type: REMOVE_DIRTY }), 0);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        setCanvasDataStore(canvas)\r\n    }, [canvas]);\r\n\r\n    usePrompt( 'You have unsaved changes! Do you want to navigate away?', canvasDataStore.isDirty );\r\n    \r\n    return (\r\n    <>\r\n        <Box>\r\n            <AppBar\r\n                enableColorOnDark\r\n                position=\"fixed\"\r\n                color=\"inherit\"\r\n                elevation={1}\r\n                sx={{\r\n                    bgcolor: theme.palette.background.default,\r\n                }}\r\n            >\r\n                <Toolbar>\r\n                    <CanvasHeader \r\n                        workflow={workflow} \r\n                        handleSaveFlow={handleSaveFlow} \r\n                        handleDeployWorkflow={handleDeployWorkflow}\r\n                        handleStopWorkflow={handleStopWorkflow}\r\n                        handleDeleteWorkflow={handleDeleteWorkflow}\r\n                        handleLoadWorkflow={handleLoadWorkflow}\r\n                    />\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Box sx={{ marginTop: '70px', height: '90vh', width: '100%' }} >\r\n                <div className=\"reactflow-parent-wrapper\">\r\n                    <ReactFlowProvider>\r\n                        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n                            <ReactFlow\r\n                                nodes={nodes}\r\n                                edges={edges}\r\n                                onNodesChange={onNodesChange}\r\n                                onNodeDoubleClick={onNodeDoubleClick}\r\n                                onEdgesChange={onEdgesChange}\r\n                                onDrop={onDrop}\r\n                                onDragOver={onDragOver}\r\n                                onNodeDragStop={setDirty}\r\n                                nodeTypes={nodeTypes}\r\n                                edgeTypes={edgeTypes}\r\n                                onConnect={onConnect}\r\n                                onInit={setRfInstance}\r\n                                fitView\r\n                            >\r\n                                <MiniMap\r\n                                    nodeStrokeColor={() => theme.palette.primary.main }\r\n                                    nodeColor={() => theme.palette.primary.main }\r\n                                    nodeBorderRadius={2}\r\n                                />\r\n                                <Controls \r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        flexDirection: 'row',\r\n                                        left: '50%',\r\n                                        transform: 'translate(-50%, -50%)'\r\n                                    }}\r\n                                />\r\n                                <Background color=\"#aaa\" gap={16} />\r\n                                <AddNodes \r\n                                    nodesData={getNodesApi.data} \r\n                                    node={selectedNode} \r\n                                />\r\n                                <EditNodes \r\n                                    nodes={nodes} \r\n                                    edges={edges} \r\n                                    node={selectedNode} \r\n                                    workflow={workflow} \r\n                                    onNodeLabelUpdate={onNodeLabelUpdate} \r\n                                    onNodeValuesUpdate={onNodeValuesUpdate} \r\n                                />\r\n                                <Fab \r\n                                    sx={{ position: 'absolute', right: 20, top: 20,}} \r\n                                    size=\"small\" \r\n                                    color=\"warning\"\r\n                                    aria-label=\"test\" \r\n                                    title=\"Test Workflow\"\r\n                                    disabled={isTestingWorkflow}\r\n                                    onClick={handleTestWorkflow}\r\n                                >\r\n                                    {<IconBolt />}\r\n                                </Fab>\r\n                                {isTestingWorkflow && (\r\n                                    <CircularProgress\r\n                                        size={50}\r\n                                        sx={{\r\n                                            color: theme.palette.warning.dark,\r\n                                            position: 'absolute',\r\n                                            right: 15,\r\n                                            top: 15,\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </ReactFlow>\r\n                        </div>\r\n                    </ReactFlowProvider>\r\n                </div>\r\n            </Box>\r\n            <ConfirmDialog />\r\n            <TestWorkflowDialog\r\n                show={isTestWorkflowDialogOpen}\r\n                dialogProps={testWorkflowDialogProps}\r\n                onCancel={() => setTestWorkflowDialogOpen(false)}\r\n                onItemClick={onStartingPointClick}\r\n            />\r\n        </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n"],"sourceRoot":""}