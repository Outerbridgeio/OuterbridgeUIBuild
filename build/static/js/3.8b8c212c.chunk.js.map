{"version":3,"sources":["utils/genericHelper.js","ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","ui-component/extended/AnimateButton.js","ui-component/dialog/ExpandDataDialog.js","hooks/useScriptRef.js","utils/useNotifier.js","ui-component/dialog/EditVariableDialog.js","views/inputs/ArrayInputParameters.js","views/inputs/OptionParamsResponse.js","views/inputs/AsyncSelectWrapper.js","views/inputs/InputParameters.js","api/credential.js","api/oauth2.js","views/inputs/CredentialInput.js"],"names":["numberOrExpressionRegex","getAvailableNodeIdsForVariable","nodes","edges","targetNodeId","reverse","graph","nodeDependencies","i","length","nodeId","id","source","target","Object","prototype","hasOwnProperty","call","push","constructNodeDirectedGraph","exploreNodes","nodeQueue","exploredNodes","shift","parentNodeIds","inputEdges","filter","edg","targetHandle","includes","j","neighbourNodeIds","neighNodeId","getAllConnectedNodesFromTarget","setPath","Set","delete","generateWebhookEndpoint","characters","Array","from","map","charAt","Math","floor","random","join","getUniqueNodeId","nodeData","totalSameNodes","data","name","checkIfNodeLabelUnique","nodeLabel","label","initializeNodeData","nodeParams","initialValues","input","default","type","newObj","array","submit","addAnchors","newNodeId","incoming","outgoing","inputAnchors","newInput","outputAnchors","newOutput","getUniqueNodeLabel","actions","credentials","networks","inputParameters","getEdgeLabelName","sourceSplit","split","checkMultipleTriggers","node","convertDateStringToDateObject","dateString","undefined","date","moment","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","splitDataURI","getFolderName","base64ArrayStr","base64Array","JSON","parse","filenames","filename","e","generateExportFlowData","flowData","selected","newNodeData","wallet","credentialMethod","isHideRegisteredCredential","params","paramsType","nodeFlowData","clonedParams","selectedCredentialMethodOption","options","find","opt","hideRegisteredCredential","handleCredentialParams","reorganizedParams","nPrm","lodash","cloneDeep","prm","copyToClipboard","src","isArray","navigator","clipboard","writeText","stringify","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","setData","error","setError","loading","setLoading","request","result","AnimateButton","offset1","offset2","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","ExpandDataDialog","show","dialogProps","onCancel","onCopyClick","enableClipboard","portalElement","document","getElementById","component","open","fullWidth","maxWidth","onClose","fontSize","createPortal","useScriptRef","scripted","useRef","useEffect","current","displayed","useNotifier","dispatch","useDispatch","notifications","useSelector","state","notifier","useSnackbar","enqueueSnackbar","closeSnackbar","React","forEach","key","message","dismissed","event","reason","myKey","onExited","removeSnackbar","EditVariableDialog","onConfirm","inputValue","setInputValue","setInput","expanded","setExpanded","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","copiedVariableBody","setCopiedVariableBody","languages","js","languageType","setLanguageType","onMouseUp","selectionEnd","value","cursorPosition","textBeforeCursorPosition","substring","textAfterCursorPosition","onClipboardCopy","namespaces","namespace","returnVariablePath","test","endsWith","values","inputValues","arrayItemBody","arrayItemValues","arrayItemInput","toString","json","style","display","flexDirection","flex","mb","ml","grey","borderRadius","height","maxHeight","overflowX","backgroundColor","onValueChange","code","placeholder","highlight","onBlur","padding","minHeight","width","textareaClassName","hideVariables","availableNodesForVariable","marginLeft","pl","pr","py","breakpoints","down","top","my","index","onChange","isExpanded","expandIcon","position","collapsed","outputResponses","output","size","right","color","onClick","dialogProp","onExpandDialogClicked","cancelButtonName","updateArrayValues","updateInitialValues","arrayItemIndex","updateValues","onSave","confirmButtonName","StyledPopper","styled","Popper","autocompleteClasses","listbox","boxSizing","margin","DateCustomInput","paddingTop","paddingBottom","paddingRight","paddingLeft","cursor","fontWeight","textAlign","opacity","propTypes","PropTypes","string","func","ArrayInputParameters","arrayParams","arrayGroupName","errors","onArrayInputChange","onArrayInputBlur","onArrayItemRemove","onArrayItemMouseUp","onEditVariableDialogOpen","customization","processUpdateValues","inputName","onInputChange","onInputBlur","valueIndex","path","_","Box","p","light","Fab","main","splice","onRemoveClick","paramIndex","FormControl","mt","Boolean","Stack","Typography","description","Tooltip","placement","IconButton","Info","marginBottom","Button","startIcon","marginRight","hidden","files","file","reader","FileReader","onload","evt","readAsDataURL","handleFileUpload","directory","webkitdirectory","readFile","fileIndex","webkitRelativePath","handleFolderUpload","onScroll","stopPropagation","customInput","showTimeSelect","isClearable","timeInputLabel","dateFormat","toISOString","OutlinedInput","Switch","checked","inputProps","availableOptions","Autocomplete","freeSolo","onOpen","option","selection","PopperComponent","renderInput","TextField","renderOption","props","OptionParamsResponse","getSelectedValue","getSelectedOptionInputParams","selectedOption","getSelectedOptionExampleParams","exampleParameters","getSelectedOptionExampleResponse","exampleResponse","dangerouslySetInnerHTML","__html","AsyncSelectWrapper","loadMethod","loadFromDbCollections","onMenuOpen","onSetError","customStyles","provided","isSelected","control","singleValue","menuList","asyncOptions","setAsyncOptions","styles","formatOptionLabel","context","getOptionLabel","getOptionValue","loadOptions","callback","post","then","response","returnOptions","toBeDeleteOptions","displayTypes","displayType","displayOptions","keys","comparisonValue","groundValue","get","RegExp","showHideOptions","toLowerCase","defaultOptions","bottom","fontStyle","replace","formatErrorMessage","InputParameters","nodeParamsValidation","valueChanged","onSubmit","setVariableSelectorState","scriptedRef","onChanged","findMatchingOptions","enableReinitialize","validationSchema","Yup","shape","setErrors","setStatus","setSubmitting","success","err","console","handleBlur","handleChange","handleSubmit","setFieldValue","isSubmitting","noValidate","overwriteValues","multiline","rows","maxRows","minRows","arrayParamItems","templateArray","arrayItemsValues","variableState","body","disableElevation","arrayItems","arrayName","onAddArrayItem","disabled","nodeCredentialName","client","isEncrypted","credentialBody","put","credentialId","ADD_NEW_CREDENTIAL","CredentialInput","initialParams","initialValidation","paramsChanged","credentialValidation","setCredentialValidation","credentialValues","setCredentialValues","setNodeCredentialName","credentialParams","setCredentialParams","credentialOptions","setCredentialOptions","oAuth2RedirectURL","setOAuth2RedirectURL","getCredentialParamsApi","useApi","credentialApi","getRegisteredCredentialsApi","getSpecificCredentialApi","getCredentialRequestBody","Error","credentialData","credParamName","clearCredentialParams","updateParams","item","every","paramItem","clearCredentialParamsValues","registeredCredential","onDeleteCredential","openOAuth2PopUpWindow","oAuth2PopupURL","left","window","screenX","outerWidth","screenY","outerHeight","url","_id","validationKey","updateValidation","required","updateYupValidation","newCredentialParams","unshift","isAddNewCredential","oauth2Api","popUpWindow","oAuth2Completed","removeEventListener","submitValues","close","addEventListener","selectedCredential","redirectURLResp"],"mappings":"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","file":"static/js/3.8b8c212c.chunk.js","sourcesContent":["import lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport const numberOrExpressionRegex = /^(\\d+\\.?\\d*|{{.*}})$/; //return true if string consists only numbers OR expression {{}}\r\n\r\nexport const constructNodeDirectedGraph = (nodes, edges, reverse = false) => {\r\n    const graph = {};\r\n    const nodeDependencies = {};\r\n\r\n    // Initialize node dependencies and graph\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const nodeId = nodes[i].id;\r\n        nodeDependencies[nodeId] = 0;\r\n        graph[nodeId] = [];\r\n    }\r\n\r\n    for (let i = 0; i < edges.length; i += 1) {\r\n        const source = edges[i].source;\r\n        const target = edges[i].target;\r\n\r\n        if (Object.prototype.hasOwnProperty.call(graph, source)) {\r\n            graph[source].push(target);\r\n        } else {\r\n            graph[source] = [target];\r\n        }\r\n\r\n        if (reverse) {\r\n            if (Object.prototype.hasOwnProperty.call(graph, target)) {\r\n                graph[target].push(source);\r\n            } else {\r\n                graph[target] = [source];\r\n            }\r\n        }\r\n\r\n        nodeDependencies[target] += 1;\r\n    }\r\n\r\n    return { graph, nodeDependencies };\r\n};\r\n\r\n// Find starting node with 0 dependencies\r\nexport const findStartingNodeIds = (nodes, nodeDependencies) => {\r\n    const startingNodeIds = [];\r\n    Object.keys(nodeDependencies).forEach((nodeId) => {\r\n        if (nodeDependencies[nodeId] === 0) {\r\n            const node = nodes.find((nd) => nd.id === nodeId);\r\n            if (node && node.data && node.data.type && (node.data.type === 'trigger' || node.data.type === 'webhook')) {\r\n                startingNodeIds.push(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    return startingNodeIds;\r\n};\r\n\r\n// Backtrack function to find all paths from start to target node\r\nexport const getAllPathsFromStartToTarget = (startNodeId, targetNodeId, graph) => {\r\n    const paths = [];\r\n    const visitedNodeIds = new Set();\r\n\r\n    const DFS = (currentNodeId, endNodeId, tempPath) => {\r\n        if (currentNodeId === endNodeId) {\r\n            paths.push(lodash.cloneDeep(tempPath));\r\n            return;\r\n        }\r\n\r\n        const neighbourNodeIds = graph[currentNodeId];\r\n        visitedNodeIds.add(currentNodeId);\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i += 1) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (!visitedNodeIds.has(neighNodeId)) {\r\n                tempPath.push(neighNodeId);\r\n                DFS(neighNodeId, endNodeId, tempPath);\r\n                tempPath.pop();\r\n            }\r\n        }\r\n        visitedNodeIds.delete(currentNodeId);\r\n    };\r\n\r\n    DFS(startNodeId, targetNodeId, [startNodeId]);\r\n    return paths;\r\n};\r\n\r\n// Breadth First Search to get all connected parent nodes from target\r\nexport const getAllConnectedNodesFromTarget = (targetNodeId, edges, graph) => {\r\n    const nodeQueue = [];\r\n    const exploredNodes = [];\r\n\r\n    nodeQueue.push(targetNodeId);\r\n    exploredNodes.push(targetNodeId);\r\n\r\n    while (nodeQueue.length) {\r\n        const nodeId = nodeQueue.shift() || '';\r\n        const parentNodeIds = [];\r\n\r\n        const inputEdges = edges.filter((edg) => edg.target === nodeId && edg.targetHandle.includes('-input-'));\r\n        if (inputEdges && inputEdges.length) {\r\n            for (let j = 0; j < inputEdges.length; j += 1) {\r\n                parentNodeIds.push(inputEdges[j].source);\r\n            }\r\n        }\r\n\r\n        const neighbourNodeIds = graph[nodeId];\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i += 1) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (parentNodeIds.includes(neighNodeId)) {\r\n                if (!exploredNodes.includes(neighNodeId)) {\r\n                    exploredNodes.push(neighNodeId);\r\n                    nodeQueue.push(neighNodeId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return exploredNodes;\r\n};\r\n\r\nexport const getAvailableNodeIdsForVariable = (nodes, edges, targetNodeId) => {\r\n    const { graph } = constructNodeDirectedGraph(nodes, edges, true);\r\n    const exploreNodes = getAllConnectedNodesFromTarget(targetNodeId, edges, graph);\r\n    const setPath = new Set(exploreNodes);\r\n    setPath.delete(targetNodeId);\r\n    return [...setPath];\r\n};\r\n\r\nexport const generateWebhookEndpoint = () => {\r\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n    const webhookEndpoint = Array.from({ length: 15 })\r\n        .map(() => {\r\n            return characters.charAt(Math.floor(Math.random() * characters.length));\r\n        })\r\n        .join('');\r\n    return webhookEndpoint;\r\n};\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1;\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return nodeId;\r\n};\r\n\r\nconst getUniqueNodeLabel = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique label\r\n    let nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            totalSameNodes += 1;\r\n            nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return totalSameNodes === 0 ? nodeData.label : nodeLabel;\r\n};\r\n\r\nexport const checkIfNodeLabelUnique = (nodeLabel, nodes) => {\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const initializeNodeData = (nodeParams) => {\r\n    const initialValues = {};\r\n\r\n    for (let i = 0; i < nodeParams.length; i += 1) {\r\n        const input = nodeParams[i];\r\n\r\n        // Load from nodeParams default values\r\n        initialValues[input.name] = input.default || '';\r\n\r\n        // Special case for array, always initialize the item if default is not set\r\n        if (input.type === 'array' && !input.default) {\r\n            const newObj = {};\r\n            for (let j = 0; j < input.array.length; j += 1) {\r\n                newObj[input.array[j].name] = input.array[j].default || '';\r\n            }\r\n            initialValues[input.name] = [newObj];\r\n        }\r\n    }\r\n\r\n    initialValues.submit = null;\r\n\r\n    return initialValues;\r\n};\r\n\r\nexport const addAnchors = (nodeData, nodes, newNodeId) => {\r\n    const incoming = nodeData.incoming || 0;\r\n    const outgoing = nodeData.outgoing || 0;\r\n\r\n    const inputAnchors = [];\r\n    for (let i = 0; i < incoming; i += 1) {\r\n        const newInput = {\r\n            id: `${newNodeId}-input-${i}`\r\n        };\r\n        inputAnchors.push(newInput);\r\n    }\r\n\r\n    const outputAnchors = [];\r\n    for (let i = 0; i < outgoing; i += 1) {\r\n        const newOutput = {\r\n            id: `${newNodeId}-output-${i}`\r\n        };\r\n        outputAnchors.push(newOutput);\r\n    }\r\n\r\n    nodeData.inputAnchors = inputAnchors;\r\n    nodeData.outputAnchors = outputAnchors;\r\n    nodeData.label = getUniqueNodeLabel(nodeData, nodes);\r\n\r\n    if (nodeData.actions) nodeData.actions = initializeNodeData(nodeData.actions);\r\n    if (nodeData.credentials) nodeData.credentials = initializeNodeData(nodeData.credentials);\r\n    if (nodeData.networks) nodeData.networks = initializeNodeData(nodeData.networks);\r\n    if (nodeData.inputParameters) nodeData.inputParameters = initializeNodeData(nodeData.inputParameters);\r\n\r\n    return nodeData;\r\n};\r\n\r\nexport const getEdgeLabelName = (source) => {\r\n    const sourceSplit = source.split('-');\r\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\r\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length - 1];\r\n        return outputAnchorsIndex === '0' ? 'true' : 'false';\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const checkMultipleTriggers = (nodes) => {\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.type === 'webhook' || node.data.type === 'trigger') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined;\r\n\r\n    const date = moment(dateString);\r\n    if (!date.isValid) return undefined;\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes());\r\n};\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    const splitDataURI = fileBase64.split(',');\r\n    const filename = splitDataURI[splitDataURI.length - 1].split(':')[1];\r\n    return filename;\r\n};\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr);\r\n        const filenames = [];\r\n        for (let i = 0; i < base64Array.length; i += 1) {\r\n            const fileBase64 = base64Array[i];\r\n            const splitDataURI = fileBase64.split(',');\r\n            const filename = splitDataURI[splitDataURI.length - 1].split(':')[1];\r\n            filenames.push(filename);\r\n        }\r\n        return filenames.length ? filenames.join(',') : '';\r\n    } catch (e) {\r\n        return '';\r\n    }\r\n};\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes;\r\n    const edges = flowData.edges;\r\n\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        nodes[i].selected = false;\r\n        const node = nodes[i];\r\n        const newNodeData = {\r\n            label: node.data.label,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            inputAnchors: node.data.inputAnchors,\r\n            outputAnchors: node.data.outputAnchors,\r\n            selected: false\r\n        };\r\n        if (node.data.inputParameters) {\r\n            newNodeData.inputParameters = { ...node.data.inputParameters, submit: null };\r\n            if (node.data.inputParameters.wallet) delete newNodeData.inputParameters.wallet;\r\n        }\r\n        if (node.data.actions) {\r\n            newNodeData.actions = { ...node.data.actions, submit: null };\r\n            if (node.data.actions.wallet) delete newNodeData.actions.wallet;\r\n        }\r\n        if (node.data.networks) {\r\n            newNodeData.networks = { ...node.data.networks, submit: null };\r\n            if (node.data.networks.wallet) delete newNodeData.networks.wallet;\r\n        }\r\n        if (node.data.credentials && node.data.credentials.credentialMethod) {\r\n            newNodeData.credentials = { credentialMethod: node.data.credentials.credentialMethod, submit: null };\r\n            if (node.data.credentials.wallet) delete newNodeData.credentials.wallet;\r\n        }\r\n\r\n        nodes[i].data = newNodeData;\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    };\r\n    return exportJson;\r\n};\r\n\r\nconst isHideRegisteredCredential = (params, paramsType, nodeFlowData) => {\r\n    if (!nodeFlowData[paramsType] || !nodeFlowData[paramsType]['credentialMethod']) return undefined;\r\n    let clonedParams = params;\r\n\r\n    for (let i = 0; i < clonedParams.length; i += 1) {\r\n        const input = clonedParams[i];\r\n        if (input.type === 'options') {\r\n            const selectedCredentialMethodOption = input.options.find((opt) => opt.name === nodeFlowData[paramsType]['credentialMethod']);\r\n            if (\r\n                selectedCredentialMethodOption &&\r\n                selectedCredentialMethodOption !== undefined &&\r\n                selectedCredentialMethodOption.hideRegisteredCredential\r\n            )\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const handleCredentialParams = (nodeParams, paramsType, reorganizedParams, nodeFlowData) => {\r\n    if (\r\n        paramsType === 'credentials' &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') === undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        !isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Add hard-coded registeredCredential params\r\n        nodeParams.push({\r\n            name: 'registeredCredential'\r\n        });\r\n    } else if (\r\n        paramsType === 'credentials' &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') !== undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n    } else if (paramsType === 'credentials' && nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') === undefined) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n    }\r\n    return nodeParams;\r\n};\r\n\r\nexport const copyToClipboard = (e) => {\r\n    const src = e.src;\r\n    if (Array.isArray(src) || typeof src === 'object') {\r\n        navigator.clipboard.writeText(JSON.stringify(src, null, '  '));\r\n    } else {\r\n        navigator.clipboard.writeText(src);\r\n    }\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import axios from 'axios';\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        'Content-type': 'application/json'\r\n    }\r\n});\r\n\r\nexport default apiClient;\r\n","import { useState } from 'react';\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true);\r\n        try {\r\n            const result = await apiFunc(...args);\r\n            setData(result.data);\r\n        } catch (err) {\r\n            setError(err || 'Unexpected Error!');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    };\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\r\n    let offset1;\r\n    let offset2;\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset;\r\n            offset2 = 0;\r\n            break;\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0;\r\n            offset2 = offset;\r\n            break;\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2);\r\n    const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                };\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n    }\r\n});\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n};\r\n\r\nexport default AnimateButton;\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material';\r\nimport ReactJson from 'react-json-view';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\nconst ExpandDataDialog = ({ show, dialogProps, onCancel, onCopyClick, enableClipboard }) => {\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"md\"\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {!enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={(e) => copyToClipboard(e)} />}\r\n                {enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={(e) => onCopyClick(e, dialogProps.node)} />}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n};\r\n\r\nExpandDataDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onCopyClick: PropTypes.func,\r\n    enableClipboard: PropTypes.bool\r\n};\r\n\r\nexport default ExpandDataDialog;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true);\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false;\r\n        },\r\n        []\r\n    );\r\n\r\n    return scripted;\r\n};\r\n\r\nexport default useScriptRef;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeSnackbar } from 'store/actions';\r\n\r\nlet displayed = [];\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifier = useSelector((state) => state.notifier);\r\n    const { notifications } = notifier;\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id];\r\n    };\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter((key) => id !== key)];\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey));\r\n                    removeDisplayed(myKey);\r\n                }\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\r\n};\r\n\r\nexport default useNotifier;\r\n","import { createPortal } from 'react-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    IconButton,\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ReactJson from 'react-json-view';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { IconArrowsMaximize } from '@tabler/icons';\r\nimport ExpandDataDialog from './ExpandDataDialog';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nimport './EditVariableDialog.css';\r\n\r\nconst isPositiveNumeric = (value) => /^\\d+$/.test(value);\r\n\r\nconst EditVariableDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [input, setInput] = useState(null);\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false);\r\n    const [expandDialogProps, setExpandDialogProps] = useState({});\r\n    const [copiedVariableBody, setCopiedVariableBody] = useState({});\r\n    const [languageType, setLanguageType] = useState(languages.js);\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false);\r\n    };\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        };\r\n        setExpandDialogProps(dialogProp);\r\n        setShowExpandDialog(true);\r\n    };\r\n\r\n    const onMouseUp = (e) => {\r\n        if (e.target && e.target.selectionEnd && e.target.value) {\r\n            const cursorPosition = e.target.selectionEnd;\r\n            const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n            const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n            const body = {\r\n                textBeforeCursorPosition,\r\n                textAfterCursorPosition\r\n            };\r\n            setCopiedVariableBody(body);\r\n        } else {\r\n            setCopiedVariableBody({});\r\n        }\r\n    };\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace;\r\n        let returnVariablePath = `${node.id}`;\r\n        for (let i = 0; i < namespaces.length; i += 1) {\r\n            const namespace = namespaces[i];\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1);\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`;\r\n                } else {\r\n                    returnVariablePath += namespace;\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.';\r\n                }\r\n            }\r\n        }\r\n        if (copiedVariableBody) {\r\n            let newInput = '';\r\n            if (copiedVariableBody.textBeforeCursorPosition === undefined && copiedVariableBody.textAfterCursorPosition === undefined)\r\n                newInput = `${inputValue}${`{{${returnVariablePath}}}`}`;\r\n            else\r\n                newInput = `${copiedVariableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${copiedVariableBody.textAfterCursorPosition}`;\r\n            setInputValue(newInput);\r\n        }\r\n    };\r\n\r\n    const onSave = (value) => {\r\n        // ArrayInputParameter\r\n        if (dialogProps.arrayItemBody) {\r\n            const updateArrayValues = {\r\n                ...dialogProps.arrayItemBody.arrayItemValues,\r\n                [dialogProps.arrayItemBody.arrayItemInput.name]: value\r\n            };\r\n            const updateInitialValues = dialogProps.arrayItemBody.initialValues;\r\n            updateInitialValues[dialogProps.arrayItemBody.arrayItemIndex] = updateArrayValues;\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: updateInitialValues\r\n            };\r\n            onConfirm(updateValues);\r\n        } else {\r\n            // InputParameter\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: value,\r\n                submit: null\r\n            };\r\n            onConfirm(updateValues);\r\n        }\r\n    };\r\n\r\n    // Handle Accordian\r\n    useEffect(() => {\r\n        if (dialogProps.values && dialogProps.input) {\r\n            let inputValues = dialogProps.values;\r\n            let input = dialogProps.input;\r\n            if (dialogProps.arrayItemBody) {\r\n                inputValues = dialogProps.arrayItemBody.arrayItemValues;\r\n                input = dialogProps.arrayItemBody.arrayItemInput;\r\n            }\r\n            setInput(input);\r\n            setInputValue(inputValues[input.name].toString() || '');\r\n            if (input.type === 'json' || input.type === 'string' || input.type === 'number') setLanguageType(languages.json);\r\n            if (input.type === 'code') setLanguageType(languages.js);\r\n        }\r\n    }, [dialogProps]);\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} fullWidth maxWidth=\"lg\" aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {input && (input.type === 'json' || input.type === 'string' || input.type === 'number' || input.type === 'code') && (\r\n                        <div style={{ flex: 1 }}>\r\n                            <Typography sx={{ mb: 2, ml: 1 }} variant=\"h4\">\r\n                                Input\r\n                            </Typography>\r\n                            <PerfectScrollbar\r\n                                style={{\r\n                                    border: '1px solid',\r\n                                    borderColor: theme.palette.grey['500'],\r\n                                    borderRadius: '12px',\r\n                                    height: '100%',\r\n                                    maxHeight: 'calc(100vh - 220px)',\r\n                                    overflowX: 'hidden',\r\n                                    backgroundColor: 'white'\r\n                                }}\r\n                            >\r\n                                <Editor\r\n                                    value={inputValue}\r\n                                    onValueChange={(code) => setInputValue(code)}\r\n                                    placeholder={input.placeholder}\r\n                                    highlight={(code) => highlight(code, languageType)}\r\n                                    onMouseUp={(e) => onMouseUp(e)}\r\n                                    onBlur={(e) => onMouseUp(e)}\r\n                                    padding={10}\r\n                                    style={{\r\n                                        fontSize: '0.875rem',\r\n                                        minHeight: 'calc(100vh - 220px)',\r\n                                        width: '100%'\r\n                                    }}\r\n                                    textareaClassName=\"editor__textarea\"\r\n                                />\r\n                            </PerfectScrollbar>\r\n                        </div>\r\n                    )}\r\n                    {!dialogProps.hideVariables && (\r\n                        <div style={{ flex: 1 }}>\r\n                            <Typography sx={{ mb: 2, ml: 2 }} variant=\"h4\">\r\n                                Variables\r\n                            </Typography>\r\n                            {dialogProps.availableNodesForVariable.length === 0 && (\r\n                                <div style={{ padding: 10, marginLeft: 10 }}>\r\n                                    <span>No Variables. Try connect to other nodes. </span>\r\n                                </div>\r\n                            )}\r\n                            {dialogProps.availableNodesForVariable.length > 0 && (\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                                    <Box sx={{ pl: 2, pr: 2 }}>\r\n                                        <List\r\n                                            sx={{\r\n                                                width: '100%',\r\n                                                py: 0,\r\n                                                borderRadius: '10px',\r\n                                                [theme.breakpoints.down('md')]: {\r\n                                                    maxWidth: 300\r\n                                                },\r\n                                                '& .MuiListItemSecondaryAction-root': {\r\n                                                    top: 22\r\n                                                },\r\n                                                '& .MuiDivider-root': {\r\n                                                    my: 0\r\n                                                },\r\n                                                '& .list-container': {\r\n                                                    pl: 7\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            {dialogProps.availableNodesForVariable.map((node, index) => (\r\n                                                <Box key={index}>\r\n                                                    <Accordion\r\n                                                        expanded={expanded === node.data.label}\r\n                                                        onChange={handleAccordionChange(node.data.label)}\r\n                                                    >\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls={`${node.data.label}-content`}\r\n                                                            id={`${node.data.label}-header`}\r\n                                                        >\r\n                                                            <Typography variant=\"h5\">{node.data.label}</Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <div style={{ position: 'relative' }}>\r\n                                                                <ReactJson\r\n                                                                    collapsed\r\n                                                                    src={\r\n                                                                        node.data.outputResponses && node.data.outputResponses.output\r\n                                                                            ? node.data.outputResponses.output\r\n                                                                            : {}\r\n                                                                    }\r\n                                                                    enableClipboard={(e) => onClipboardCopy(e, node)}\r\n                                                                />\r\n                                                                <IconButton\r\n                                                                    size=\"small\"\r\n                                                                    sx={{\r\n                                                                        height: 25,\r\n                                                                        width: 25,\r\n                                                                        position: 'absolute',\r\n                                                                        top: -5,\r\n                                                                        right: 5\r\n                                                                    }}\r\n                                                                    title=\"Expand Variable\"\r\n                                                                    color=\"primary\"\r\n                                                                    onClick={() =>\r\n                                                                        onExpandDialogClicked(\r\n                                                                            node.data.outputResponses && node.data.outputResponses.output\r\n                                                                                ? node.data.outputResponses.output\r\n                                                                                : {},\r\n                                                                            node\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    <IconArrowsMaximize />\r\n                                                                </IconButton>\r\n                                                            </div>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Box>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Box>\r\n                                </PerfectScrollbar>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                    <ExpandDataDialog\r\n                        enableClipboard\r\n                        show={showExpandDialog}\r\n                        dialogProps={expandDialogProps}\r\n                        onCancel={() => setShowExpandDialog(false)}\r\n                        onCopyClick={(e, node) => {\r\n                            onClipboardCopy(e, node);\r\n                            setShowExpandDialog(false);\r\n                        }}\r\n                    ></ExpandDataDialog>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <Button variant=\"contained\" onClick={() => onSave(inputValue)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n};\r\n\r\nEditVariableDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n};\r\n\r\nexport default EditVariableDialog;\r\n","import { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Switch,\r\n    Fab,\r\n    FormControl,\r\n    Tooltip,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Stack,\r\n    IconButton,\r\n    Button\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// icons\r\nimport { IconX, IconUpload } from '@tabler/icons';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport Editor from 'react-simple-code-editor';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n});\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button\r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type=\"button\"\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n        {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n};\r\n\r\n// ==============================|| ARRAY INPUT PARAMETERS ||============================== //\r\n\r\nconst ArrayInputParameters = ({\r\n    initialValues,\r\n    arrayParams,\r\n    paramsType,\r\n    arrayGroupName,\r\n    errors,\r\n    onArrayInputChange,\r\n    onArrayInputBlur,\r\n    onArrayItemRemove,\r\n    onArrayItemMouseUp,\r\n    onEditVariableDialogOpen\r\n}) => {\r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    const processUpdateValues = (inputValue, inputName, values, index) => {\r\n        const updateArrayValues = {\r\n            ...values,\r\n            [inputName]: inputValue\r\n        };\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues[index] = updateArrayValues;\r\n        return updateInitialValues;\r\n    };\r\n\r\n    const onInputChange = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputChange(updateInitialValues);\r\n    };\r\n\r\n    const onInputBlur = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputBlur(updateInitialValues);\r\n    };\r\n\r\n    const onRemoveClick = (index) => {\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues.splice(index, 1);\r\n        onArrayItemRemove(updateInitialValues);\r\n        onArrayItemMouseUp(false);\r\n    };\r\n\r\n    const onMouseUp = (e, inputName, valueIndex) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${arrayGroupName}[${valueIndex}].${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition,\r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        };\r\n        onArrayItemMouseUp(true, body);\r\n    };\r\n\r\n    const handleFolderUpload = (e, values, inputName, index) => {\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if (fileIndex >= files.length) {\r\n                onInputChange(JSON.stringify(base64Array), inputName, values, index);\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex + 1, lodash.cloneDeep(base64Array));\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    };\r\n\r\n    const handleFileUpload = (e, onInputChange, values, inputName, index) => {\r\n        if (!e.target.files) {\r\n            return;\r\n        }\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n            const value = result + `,filename:${name}`;\r\n            onInputChange(value, inputName, values, index);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => '';\r\n\r\n    return (\r\n        <>\r\n            {arrayParams.map((_, index) => {\r\n                const params = arrayParams[index] || [];\r\n                const values = initialValues[index] || {};\r\n\r\n                return (\r\n                    <Box\r\n                        sx={{\r\n                            p: 2,\r\n                            mb: 2,\r\n                            backgroundColor: theme.palette.secondary.light,\r\n                            borderRadius: `${customization.borderRadius}px`,\r\n                            position: 'relative'\r\n                        }}\r\n                        key={index}\r\n                    >\r\n                        {arrayParams.length > 1 && (\r\n                            <Fab\r\n                                sx={{\r\n                                    minHeight: 30,\r\n                                    height: 30,\r\n                                    width: 30,\r\n                                    backgroundColor: theme.palette.secondary.light,\r\n                                    color: theme.palette.secondary.main,\r\n                                    position: 'absolute',\r\n                                    right: -10,\r\n                                    top: -10\r\n                                }}\r\n                                size=\"small\"\r\n                                onClick={() => onRemoveClick(index)}\r\n                            >\r\n                                <IconX />\r\n                            </Fab>\r\n                        )}\r\n\r\n                        {params.map((input, paramIndex) => {\r\n                            if (input.type === 'file' || input.type === 'folder') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n\r\n                                        {input.type === 'file' && (\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: 'bold',\r\n                                                    color: theme.palette.grey['800'],\r\n                                                    marginBottom: '1rem'\r\n                                                }}\r\n                                            >\r\n                                                {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload'}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        {input.type === 'folder' && (\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: 'bold',\r\n                                                    color: theme.palette.grey['800'],\r\n                                                    marginBottom: '1rem'\r\n                                                }}\r\n                                            >\r\n                                                {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload'}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            component=\"label\"\r\n                                            fullWidth\r\n                                            startIcon={<IconUpload />}\r\n                                            sx={{ marginRight: '1rem' }}\r\n                                        >\r\n                                            {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                            {input.type === 'file' && (\r\n                                                <input type=\"file\" hidden onChange={(e) => handleFileUpload(e, values, inputName, index)} />\r\n                                            )}\r\n                                            {input.type === 'folder' && (\r\n                                                <input\r\n                                                    type=\"file\"\r\n                                                    directory=\"\"\r\n                                                    webkitdirectory=\"\"\r\n                                                    hidden\r\n                                                    onChange={(e) => handleFolderUpload(e, values, inputName, index)}\r\n                                                />\r\n                                            )}\r\n                                        </Button>\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'json' || input.type === 'code') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                            <Button\r\n                                                sx={{\r\n                                                    position: 'absolute',\r\n                                                    fontSize: '0.6875rem',\r\n                                                    right: 0,\r\n                                                    top: 5,\r\n                                                    height: 25,\r\n                                                    width: 'max-content'\r\n                                                }}\r\n                                                variant=\"outlined\"\r\n                                                onClick={() => onEditVariableDialogOpen(input, values, index)}\r\n                                            >\r\n                                                Edit Variables\r\n                                            </Button>\r\n                                        </Stack>\r\n                                        <PerfectScrollbar\r\n                                            style={{\r\n                                                border: '1px solid',\r\n                                                borderColor: theme.palette.grey['500'],\r\n                                                borderRadius: '12px',\r\n                                                height: '200px',\r\n                                                maxHeight: '200px',\r\n                                                overflowX: 'hidden',\r\n                                                backgroundColor: 'white'\r\n                                            }}\r\n                                            onScroll={(e) => e.stopPropagation()}\r\n                                        >\r\n                                            <Editor\r\n                                                placeholder={input.placeholder}\r\n                                                value={values[inputName] || ''}\r\n                                                onBlur={(e) => {\r\n                                                    onInputBlur(e.target.value, inputName, values, index);\r\n                                                    onMouseUp(e, inputName, index);\r\n                                                }}\r\n                                                onValueChange={(code) => onInputChange(code, inputName, values, index)}\r\n                                                onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                                highlight={(code) => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                                padding={10}\r\n                                                style={{\r\n                                                    fontSize: '0.875rem',\r\n                                                    minHeight: '200px',\r\n                                                    width: '100%'\r\n                                                }}\r\n                                                textareaClassName=\"editor__textarea\"\r\n                                            />\r\n                                        </PerfectScrollbar>\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'date') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <DatePicker\r\n                                            customInput={<DateCustomInput />}\r\n                                            selected={convertDateStringToDateObject(values[inputName]) || null}\r\n                                            showTimeSelect\r\n                                            isClearable\r\n                                            timeInputLabel=\"Time:\"\r\n                                            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                            onChange={(date) => {\r\n                                                const inputValue = date ? date.toISOString() : null;\r\n                                                onInputChange(inputValue, inputName, values, index);\r\n                                                onArrayItemMouseUp(false);\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                            {(input.type === 'string' || input.type === 'number') && (\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        position: 'absolute',\r\n                                                        fontSize: '0.6875rem',\r\n                                                        right: 0,\r\n                                                        top: 5,\r\n                                                        height: 25,\r\n                                                        width: 'max-content'\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    onClick={() => onEditVariableDialogOpen(input, values, index)}\r\n                                                >\r\n                                                    Edit Variables\r\n                                                </Button>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <OutlinedInput\r\n                                            id={inputName}\r\n                                            type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                            value={values[inputName] || ''}\r\n                                            placeholder={input.placeholder}\r\n                                            name={inputName}\r\n                                            onBlur={(e) => {\r\n                                                const inputValue = e.target.value;\r\n                                                onInputBlur(inputValue, inputName, values, index);\r\n                                                onMouseUp(e, inputName, index);\r\n                                            }}\r\n                                            onChange={(e) => {\r\n                                                const inputValue = e.target.value;\r\n                                                onInputChange(inputValue, inputName, values, index);\r\n                                            }}\r\n                                            onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                        />\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <Switch\r\n                                            checked={!!values[inputName]}\r\n                                            onChange={(event) => {\r\n                                                onInputChange(event.target.checked, inputName, values, index);\r\n                                            }}\r\n                                            inputProps={{ 'aria-label': 'controlled' }}\r\n                                        />\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                    <FormControl key={`${inputName}_${paramIndex}`} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <Autocomplete\r\n                                            id={inputName}\r\n                                            freeSolo\r\n                                            onOpen={() => onArrayItemMouseUp(false)}\r\n                                            options={availableOptions}\r\n                                            value={findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()}\r\n                                            onChange={(e, selection) => {\r\n                                                const value = selection ? selection.name : '';\r\n                                                onInputBlur(value, inputName, values, index);\r\n                                            }}\r\n                                            PopperComponent={StyledPopper}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    value={values[inputName]}\r\n                                                    error={\r\n                                                        errors && errors.length > 0 && errors[index]\r\n                                                            ? Boolean(errors[index][inputName])\r\n                                                            : false\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            renderOption={(props, option) => (\r\n                                                <Box component=\"li\" {...props}>\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                        <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                            {option.label}\r\n                                                        </Typography>\r\n                                                        {option.description && <Typography sx={{ p: 1 }}>{option.description}</Typography>}\r\n                                                    </div>\r\n                                                </Box>\r\n                                            )}\r\n                                        />\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n                            return null;\r\n                        })}\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nArrayInputParameters.propTypes = {\r\n    initialValues: PropTypes.array,\r\n    arrayParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    arrayGroupName: PropTypes.string,\r\n    errors: PropTypes.array,\r\n    onArrayInputChange: PropTypes.func,\r\n    onArrayInputBlur: PropTypes.func,\r\n    onArrayItemRemove: PropTypes.func,\r\n    onArrayItemMouseUp: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func\r\n};\r\n\r\nexport default ArrayInputParameters;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './OptionParamsResponse.css';\r\n\r\n// ==============================|| OPTION PARAMS RESPONSE ||============================== //\r\n\r\nconst OptionParamsResponse = ({ value, options }) => {\r\n    const theme = useTheme();\r\n\r\n    const getSelectedValue = (value) => options.find((option) => option.name === value);\r\n\r\n    const getSelectedOptionInputParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.inputParameters || '';\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const getSelectedOptionExampleParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleParameters || '';\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const getSelectedOptionExampleResponse = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleResponse || '';\r\n        }\r\n        return '';\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {getSelectedValue(value) && getSelectedOptionInputParams(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant=\"h6\">\r\n                        Parameters\r\n                    </Typography>\r\n                    <div className=\"params\" dangerouslySetInnerHTML={{ __html: getSelectedOptionInputParams(value) }} />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleParams(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant=\"h6\">\r\n                        Example Parameters\r\n                    </Typography>\r\n                    <ReactJson\r\n                        collapsed\r\n                        src={JSON.parse(getSelectedOptionExampleParams(value))}\r\n                        enableClipboard={(e) => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleResponse(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant=\"h6\">\r\n                        Example Response\r\n                    </Typography>\r\n                    <ReactJson collapsed src={getSelectedOptionExampleResponse(value)} enableClipboard={(e) => copyToClipboard(e)} />\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nOptionParamsResponse.propTypes = {\r\n    value: PropTypes.string,\r\n    options: PropTypes.array\r\n};\r\n\r\nexport default OptionParamsResponse;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Stack, IconButton, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport AsyncSelect from 'react-select/async';\r\nimport axios from 'axios';\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons';\r\n\r\n// Constant\r\nimport { baseURL } from 'store/constant';\r\n\r\n// ==============================|| ASYNC SELECT WRAPPER ||============================== //\r\n\r\nconst AsyncSelectWrapper = ({\r\n    title,\r\n    description,\r\n    value,\r\n    loadMethod,\r\n    loadFromDbCollections,\r\n    nodeFlowData,\r\n    error,\r\n    onChange,\r\n    onMenuOpen,\r\n    onSetError\r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    const customStyles = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            paddingTop: 15,\r\n            paddingBottom: 15,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            cursor: 'pointer',\r\n            fontWeight: '500',\r\n            backgroundColor: state.isSelected ? theme.palette.primary.light : '',\r\n            color: 'black',\r\n            '&:hover': {\r\n                backgroundColor: theme.palette.grey['200']\r\n            }\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            cursor: 'text',\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 6,\r\n            paddingLeft: 6,\r\n            borderRadius: 12,\r\n            '&:hover': {\r\n                borderColor: theme.palette.grey['700']\r\n            }\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            fontWeight: '600'\r\n        }),\r\n        menuList: (provided) => ({\r\n            ...provided,\r\n            boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n            borderRadius: '10px'\r\n        })\r\n    };\r\n\r\n    const [asyncOptions, setAsyncOptions] = useState([]);\r\n\r\n    const getSelectedValue = (value) => asyncOptions.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => '';\r\n\r\n    const formatErrorMessage = (error) => {\r\n        if (error) return `*${error.replace(/[\"]/g, '')}`;\r\n        return '';\r\n    };\r\n\r\n    const showHideOptions = (options) => {\r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n        const displayTypes = ['show', 'hide'];\r\n\r\n        for (let x = 0; x < displayTypes.length; x += 1) {\r\n            const displayType = displayTypes[x];\r\n\r\n            for (let i = 0; i < returnOptions.length; i += 1) {\r\n                const option = returnOptions[i];\r\n                const displayOptions = option[displayType];\r\n\r\n                if (displayOptions) {\r\n                    Object.keys(displayOptions).forEach((path) => {\r\n                        const comparisonValue = displayOptions[path];\r\n                        const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n                        if (Array.isArray(comparisonValue)) {\r\n                            if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        } else if (typeof comparisonValue === 'string') {\r\n                            if (\r\n                                displayType === 'show' &&\r\n                                !(comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                            ) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (\r\n                                displayType === 'hide' &&\r\n                                (comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                            ) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    };\r\n\r\n    const loadOptions = (inputValue, callback) => {\r\n        axios\r\n            .post(`${baseURL}/api/v1/node-load-method/${nodeFlowData.name}`, { ...nodeFlowData, loadMethod, loadFromDbCollections })\r\n            .then((response) => {\r\n                const data = response.data;\r\n                const filteredOption = (data || []).filter((i) => i.label.toLowerCase().includes(inputValue.toLowerCase()));\r\n                const options = showHideOptions(filteredOption);\r\n                setAsyncOptions(options);\r\n                callback(options);\r\n            });\r\n    };\r\n\r\n    const formatOptionLabel = ({ label, description }, { context }) => (\r\n        <>\r\n            {context === 'menu' && (\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <div>{label}</div>\r\n                    {description && <span style={{ fontWeight: 400, paddingTop: 10, paddingBottom: 10 }}>{description}</span>}\r\n                </div>\r\n            )}\r\n            {context === 'value' && (\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <div>{label}</div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n\r\n    useEffect(() => () => setAsyncOptions([]), []);\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            const selectedOption = asyncOptions.find((option) => option.name === value);\r\n            if (!selectedOption) {\r\n                onSetError();\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [asyncOptions]);\r\n\r\n    return (\r\n        <>\r\n            <Stack direction=\"row\">\r\n                <Typography variant=\"overline\">{title}</Typography>\r\n                {description && (\r\n                    <Tooltip title={description} placement=\"right\">\r\n                        <IconButton>\r\n                            <Info style={{ height: 18, width: 18 }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                )}\r\n            </Stack>\r\n            <div style={{ position: 'relative' }}>\r\n                <AsyncSelect\r\n                    key={JSON.stringify(nodeFlowData)} // to reload async select whenever flowdata changed\r\n                    styles={customStyles}\r\n                    value={getSelectedValue(value) || getDefaultOptionValue()}\r\n                    formatOptionLabel={formatOptionLabel}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionValue={(option) => option.name}\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onChange={onChange}\r\n                    onMenuOpen={onMenuOpen}\r\n                />\r\n                <button\r\n                    style={{\r\n                        minHeight: 10,\r\n                        height: 27,\r\n                        width: 30,\r\n                        backgroundColor: '#FAFAFA',\r\n                        color: theme.palette.grey['500'],\r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        margin: 'auto',\r\n                        border: 'none',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                    title=\"Clear Selection\"\r\n                    type=\"button\"\r\n                    onClick={() => onChange(null)}\r\n                >\r\n                    <IconX />\r\n                </button>\r\n            </div>\r\n            {error && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>{formatErrorMessage(error)}</span>}\r\n\r\n            <OptionParamsResponse value={value} options={asyncOptions} />\r\n        </>\r\n    );\r\n};\r\n\r\nAsyncSelectWrapper.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    value: PropTypes.string,\r\n    loadMethod: PropTypes.string,\r\n    loadFromDbCollections: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    error: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onMenuOpen: PropTypes.func,\r\n    onSetError: PropTypes.func\r\n};\r\n\r\nexport default AsyncSelectWrapper;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { Box, Button, Stack, FormControl, OutlinedInput, Popper, TextField, Typography, Switch, IconButton, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// project imports\r\nimport useScriptRef from 'hooks/useScriptRef';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport ArrayInputParameters from './ArrayInputParameters';\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\nimport AsyncSelectWrapper from './AsyncSelectWrapper';\r\n\r\n// icons\r\nimport { IconPlus, IconUpload } from '@tabler/icons';\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n});\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button\r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type=\"button\"\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n        {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n};\r\n\r\n// ==============================|| INPUT PARAMETERS ||============================== //\r\n\r\nconst InputParameters = ({\r\n    params,\r\n    paramsType,\r\n    initialValues,\r\n    nodeParamsValidation,\r\n    nodeFlowData,\r\n    valueChanged,\r\n    onSubmit,\r\n    setVariableSelectorState,\r\n    onEditVariableDialogOpen,\r\n    ...others\r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    const scriptedRef = useScriptRef();\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const onMouseUp = (e, inputName) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition,\r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        };\r\n        setVariableSelectorState(true, body);\r\n    };\r\n\r\n    const onAddArrayItem = (values, arrayItems, arrayName) => {\r\n        const updateValues = {\r\n            ...values,\r\n            [arrayName]: arrayItems\r\n        };\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const handleFolderUpload = (e, setFieldValue, values, inputName) => {\r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if (fileIndex >= files.length) {\r\n                setFieldValue(inputName, JSON.stringify(base64Array));\r\n                const overwriteValues = {\r\n                    ...values,\r\n                    [inputName]: JSON.stringify(base64Array)\r\n                };\r\n                onChanged(overwriteValues);\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex + 1, lodash.cloneDeep(base64Array));\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    };\r\n\r\n    const handleFileUpload = (e, setFieldValue, values, inputName) => {\r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n\r\n            const value = result + `,filename:${name}`;\r\n            setFieldValue(inputName, value);\r\n            const overwriteValues = {\r\n                ...values,\r\n                [inputName]: value\r\n            };\r\n            onChanged(overwriteValues);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => '';\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={initialValues}\r\n                    validationSchema={Yup.object().shape(nodeParamsValidation)}\r\n                    onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                        setVariableSelectorState(false);\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                values.submit = true;\r\n                                setStatus({ success: true });\r\n                                setSubmitting(false);\r\n                                onSubmit(values, paramsType);\r\n                            }\r\n                        } catch (err) {\r\n                            console.error(err);\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false });\r\n                                setErrors({ submit: err.message });\r\n                                setSubmitting(false);\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                        <form noValidate onSubmit={handleSubmit} {...others}>\r\n                            {params.map((input) => {\r\n                                if (input.type === 'file' || input.type === 'folder') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n\r\n                                            {input.type === 'file' && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: 'bold',\r\n                                                        color: theme.palette.grey['800'],\r\n                                                        marginBottom: '1rem'\r\n                                                    }}\r\n                                                >\r\n                                                    {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload'}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            {input.type === 'folder' && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: 'bold',\r\n                                                        color: theme.palette.grey['800'],\r\n                                                        marginBottom: '1rem'\r\n                                                    }}\r\n                                                >\r\n                                                    {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload'}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                component=\"label\"\r\n                                                fullWidth\r\n                                                startIcon={<IconUpload />}\r\n                                                sx={{ marginRight: '1rem' }}\r\n                                            >\r\n                                                {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                                {input.type === 'file' && (\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        hidden\r\n                                                        onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName)}\r\n                                                    />\r\n                                                )}\r\n                                                {input.type === 'folder' && (\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        directory=\"\"\r\n                                                        webkitdirectory=\"\"\r\n                                                        hidden\r\n                                                        onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName)}\r\n                                                    />\r\n                                                )}\r\n                                            </Button>\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'json' || input.type === 'code') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        position: 'absolute',\r\n                                                        fontSize: '0.6875rem',\r\n                                                        right: 0,\r\n                                                        top: 5,\r\n                                                        height: 25,\r\n                                                        width: 'max-content'\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    onClick={() => onEditVariableDialogOpen(input, values)}\r\n                                                >\r\n                                                    Edit Variables\r\n                                                </Button>\r\n                                            </Stack>\r\n                                            <PerfectScrollbar\r\n                                                style={{\r\n                                                    border: '1px solid',\r\n                                                    borderColor: theme.palette.grey['500'],\r\n                                                    borderRadius: '12px',\r\n                                                    height: '200px',\r\n                                                    maxHeight: '200px',\r\n                                                    overflowX: 'hidden',\r\n                                                    backgroundColor: 'white'\r\n                                                }}\r\n                                                onScroll={(e) => e.stopPropagation()}\r\n                                            >\r\n                                                <Editor\r\n                                                    placeholder={input.placeholder}\r\n                                                    value={values[inputName] || ''}\r\n                                                    onBlur={(e) => {\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: e.target.value\r\n                                                        };\r\n                                                        onChanged(overwriteValues);\r\n                                                        onMouseUp(e, inputName);\r\n                                                    }}\r\n                                                    onValueChange={(code) => {\r\n                                                        setFieldValue(inputName, code);\r\n                                                    }}\r\n                                                    onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                                    highlight={(code) =>\r\n                                                        highlight(code, input.type === 'json' ? languages.json : languages.js)\r\n                                                    }\r\n                                                    padding={10}\r\n                                                    style={{\r\n                                                        fontSize: '0.875rem',\r\n                                                        minHeight: '200px',\r\n                                                        width: '100%'\r\n                                                    }}\r\n                                                    textareaClassName=\"editor__textarea\"\r\n                                                />\r\n                                            </PerfectScrollbar>\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'date') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <DatePicker\r\n                                                customInput={<DateCustomInput />}\r\n                                                selected={convertDateStringToDateObject(values[inputName]) || null}\r\n                                                showTimeSelect\r\n                                                isClearable\r\n                                                timeInputLabel=\"Time:\"\r\n                                                dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                                onChange={(date) => {\r\n                                                    const value = date ? date.toISOString() : null;\r\n                                                    setVariableSelectorState(false);\r\n                                                    setFieldValue(inputName, value);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                                {(input.type === 'string' || input.type === 'number') && (\r\n                                                    <Button\r\n                                                        sx={{\r\n                                                            position: 'absolute',\r\n                                                            fontSize: '0.6875rem',\r\n                                                            right: 0,\r\n                                                            top: 5,\r\n                                                            height: 25,\r\n                                                            width: 'max-content'\r\n                                                        }}\r\n                                                        variant=\"outlined\"\r\n                                                        onClick={() => onEditVariableDialogOpen(input, values)}\r\n                                                    >\r\n                                                        Edit Variables\r\n                                                    </Button>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <OutlinedInput\r\n                                                id={inputName}\r\n                                                type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                                placeholder={input.placeholder}\r\n                                                multiline={!!input.rows}\r\n                                                maxRows={input.rows || 0}\r\n                                                minRows={input.rows || 0}\r\n                                                value={values[inputName] || ''}\r\n                                                name={inputName}\r\n                                                onBlur={(e) => {\r\n                                                    handleBlur(e);\r\n                                                    onChanged(values);\r\n                                                    onMouseUp(e, inputName);\r\n                                                }}\r\n                                                onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'boolean') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <Switch\r\n                                                checked={!!values[inputName]}\r\n                                                onChange={(event) => {\r\n                                                    setVariableSelectorState(false);\r\n                                                    setFieldValue(inputName, event.target.checked);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: event.target.checked\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'asyncOptions') {\r\n                                    const inputName = input.name;\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <AsyncSelectWrapper\r\n                                                title={input.label}\r\n                                                description={input.description}\r\n                                                value={values[inputName]}\r\n                                                loadMethod={input.loadMethod}\r\n                                                loadFromDbCollections={input.loadFromDbCollections || []}\r\n                                                nodeFlowData={nodeFlowData}\r\n                                                error={JSON.stringify(errors[inputName])}\r\n                                                onChange={(selection) => {\r\n                                                    const value = selection ? selection.name : '';\r\n                                                    setFieldValue(inputName, value);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                onMenuOpen={() => setVariableSelectorState(false)}\r\n                                                onSetError={() => {\r\n                                                    const value = '';\r\n                                                    setFieldValue(inputName, value);\r\n                                                }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'options') {\r\n                                    const inputName = input.name;\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <Autocomplete\r\n                                                id={inputName}\r\n                                                freeSolo\r\n                                                onOpen={() => setVariableSelectorState(false)}\r\n                                                options={input.options || []}\r\n                                                value={findMatchingOptions(input.options, values[inputName]) || getDefaultOptionValue()}\r\n                                                onChange={(e, selection) => {\r\n                                                    const value = selection ? selection.name : '';\r\n                                                    setFieldValue(inputName, value);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                onInputChange={(e, value) => {\r\n                                                    if (!value) setFieldValue(inputName, '');\r\n                                                }}\r\n                                                onBlur={handleBlur}\r\n                                                PopperComponent={StyledPopper}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField {...params} value={values[inputName]} error={Boolean(errors[inputName])} />\r\n                                                )}\r\n                                                renderOption={(props, option) => (\r\n                                                    <Box component=\"li\" {...props}>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                            <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                                {option.label}\r\n                                                            </Typography>\r\n                                                            {option.description && (\r\n                                                                <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                )}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                            <OptionParamsResponse value={values[inputName]} options={input.options || []} />\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'array') {\r\n                                    const arrayParamItems = input.arrayParams;\r\n                                    const templateArray = input.array;\r\n                                    const inputName = input.name;\r\n                                    const arrayItemsValues = values[inputName] || [];\r\n\r\n                                    return (\r\n                                        <Stack sx={{ mt: 1 }} key={inputName}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <ArrayInputParameters\r\n                                                initialValues={arrayItemsValues}\r\n                                                arrayParams={arrayParamItems}\r\n                                                paramsType={paramsType}\r\n                                                arrayGroupName={inputName}\r\n                                                errors={errors[inputName] ? errors[inputName] : []}\r\n                                                onArrayInputChange={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues);\r\n                                                }}\r\n                                                onArrayInputBlur={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: updateInitialValues\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                onArrayItemRemove={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: updateInitialValues\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                onArrayItemMouseUp={(variableState, body) => {\r\n                                                    if (body) setVariableSelectorState(variableState, body);\r\n                                                    else setVariableSelectorState(variableState);\r\n                                                }}\r\n                                                onEditVariableDialogOpen={(arrayItemInput, arrayItemValues, arrayItemIndex) => {\r\n                                                    const arrayItemBody = {\r\n                                                        arrayItemInput,\r\n                                                        arrayItemValues,\r\n                                                        arrayItemIndex,\r\n                                                        initialValues: arrayItemsValues\r\n                                                    };\r\n                                                    onEditVariableDialogOpen(input, values, arrayItemBody);\r\n                                                }}\r\n                                            />\r\n                                            <Box key={inputName} sx={{ mb: 2 }}>\r\n                                                <AnimateButton>\r\n                                                    <Button\r\n                                                        disableElevation\r\n                                                        fullWidth\r\n                                                        size=\"small\"\r\n                                                        variant=\"outlined\"\r\n                                                        color=\"secondary\"\r\n                                                        startIcon={<IconPlus />}\r\n                                                        onClick={() => {\r\n                                                            setVariableSelectorState(false);\r\n                                                            let newObj = {};\r\n                                                            if (input.default && input.default.length) {\r\n                                                                newObj = input.default[0];\r\n                                                            } else {\r\n                                                                for (let i = 0; i < templateArray.length; i += 1) {\r\n                                                                    newObj[templateArray[i].name] = templateArray[i].default || '';\r\n                                                                }\r\n                                                            }\r\n                                                            arrayItemsValues.push(newObj);\r\n                                                            onAddArrayItem(values, arrayItemsValues, inputName);\r\n                                                        }}\r\n                                                    >\r\n                                                        Add {input.label}\r\n                                                    </Button>\r\n                                                </AnimateButton>\r\n                                            </Box>\r\n                                        </Stack>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        Continue\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nInputParameters.propTypes = {\r\n    params: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object,\r\n    nodeParamsValidation: PropTypes.object,\r\n    nodeFlowData: PropTypes.object,\r\n    valueChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n    setVariableSelectorState: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func\r\n};\r\n\r\nexport default InputParameters;\r\n","import client from './client';\r\n\r\nconst getCredentials = (nodeCredentialName) => client.get('/credentials', { params: { nodeCredentialName } });\r\n\r\nconst getCredentialParams = (name) => client.get(`/node-credentials/${name}`);\r\n\r\nconst getSpecificCredential = (id, isEncrypted) => client.get(`/credentials/${id}`, { params: { isEncrypted } });\r\n\r\nconst createNewCredential = (credentialBody) => client.post(`/credentials`, credentialBody); //credentialBody: ICredential\r\n\r\nconst updateCredential = (id, credentialBody) => client.put(`/credentials/${id}`, credentialBody); //credentialBody: ICredential\r\n\r\nconst deleteCredential = (id) => client.delete(`/credentials/${id}`);\r\n\r\nexport default {\r\n    getCredentials,\r\n    getCredentialParams,\r\n    getSpecificCredential,\r\n    createNewCredential,\r\n    updateCredential,\r\n    deleteCredential\r\n};\r\n","import client from './client';\r\n\r\nconst geOAuth2PopupURL = (credentialId) => client.get('/oauth2', { params: { credentialId } });\r\nconst geOAuth2RedirectURL = () => client.get('/oauth2-redirecturl');\r\n\r\nexport default {\r\n    geOAuth2PopupURL,\r\n    geOAuth2RedirectURL\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Button, FormControl, Stack, OutlinedInput, Popper, TextField, Typography, IconButton, Switch, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// API\r\nimport credentialApi from 'api/credential';\r\nimport oauth2Api from 'api/oauth2';\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi';\r\nimport useScriptRef from 'hooks/useScriptRef';\r\n\r\n// icons\r\nimport { IconTrash, IconCopy } from '@tabler/icons';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n});\r\n\r\nconst ADD_NEW_CREDENTIAL = '+ Add New Credential';\r\n\r\n// ==============================|| CREDENTIAL INPUT ||============================== //\r\n\r\nconst CredentialInput = ({\r\n    initialParams,\r\n    paramsType,\r\n    initialValues,\r\n    initialValidation,\r\n    valueChanged,\r\n    paramsChanged,\r\n    onSubmit,\r\n    ...others\r\n}) => {\r\n    const scriptedRef = useScriptRef();\r\n    const theme = useTheme();\r\n\r\n    const [credentialValidation, setCredentialValidation] = useState({});\r\n    const [credentialValues, setCredentialValues] = useState({});\r\n    const [nodeCredentialName, setNodeCredentialName] = useState('');\r\n    const [credentialParams, setCredentialParams] = useState([]);\r\n    const [credentialOptions, setCredentialOptions] = useState([]);\r\n    const [oAuth2RedirectURL, setOAuth2RedirectURL] = useState('');\r\n\r\n    const getCredentialParamsApi = useApi(credentialApi.getCredentialParams);\r\n    const getRegisteredCredentialsApi = useApi(credentialApi.getCredentials);\r\n    const getSpecificCredentialApi = useApi(credentialApi.getSpecificCredential);\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const getCredentialRequestBody = (values) => {\r\n        if (credentialParams.length === 0) throw new Error('Credential params empty');\r\n\r\n        const credentialData = {};\r\n        for (let i = 0; i < credentialParams.length; i += 1) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in values) credentialData[credParamName] = values[credParamName];\r\n        }\r\n        delete credentialData.name;\r\n\r\n        const credBody = {\r\n            name: values.name,\r\n            nodeCredentialName: values.credentialMethod,\r\n            credentialData\r\n        };\r\n\r\n        return credBody;\r\n    };\r\n\r\n    const updateYupValidation = (inputName, validationKey) => {\r\n        const updateValidation = {\r\n            ...credentialValidation,\r\n            [inputName]: Yup.object({ [validationKey]: Yup.string().required(`${inputName} is required`) })\r\n        };\r\n        setCredentialValidation(updateValidation);\r\n    };\r\n\r\n    const clearCredentialParams = () => {\r\n        const updateParams = initialParams.filter((item) => credentialParams.every((paramItem) => item.name !== paramItem.name));\r\n        setCredentialParams([]);\r\n        setOAuth2RedirectURL('');\r\n\r\n        paramsChanged(updateParams, paramsType);\r\n    };\r\n\r\n    const clearCredentialParamsValues = (value) => {\r\n        let updateValues = JSON.parse(JSON.stringify(credentialValues));\r\n\r\n        for (let i = 0; i < credentialParams.length; i += 1) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in updateValues) delete updateValues[credParamName];\r\n        }\r\n        updateValues = {\r\n            ...updateValues,\r\n            registeredCredential: value\r\n        };\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const onDeleteCredential = async (credentialId) => {\r\n        const response = await credentialApi.deleteCredential(credentialId);\r\n        if (response.data) {\r\n            clearCredentialParams();\r\n            clearCredentialParamsValues('');\r\n        }\r\n    };\r\n\r\n    const openOAuth2PopUpWindow = (oAuth2PopupURL) => {\r\n        const windowWidth = 500;\r\n        const windowHeight = 400;\r\n        const left = window.screenX + (window.outerWidth - windowWidth) / 2;\r\n        const top = window.screenY + (window.outerHeight - windowHeight) / 2.5;\r\n        const title = `Connect Credential`;\r\n        const url = oAuth2PopupURL;\r\n        const popup = window.open(url, title, `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`);\r\n        return popup;\r\n    };\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => '';\r\n\r\n    // getRegisteredCredentialsApi successful\r\n    useEffect(() => {\r\n        if (getRegisteredCredentialsApi.data) {\r\n            const credentialOptions = [];\r\n            if (getRegisteredCredentialsApi.data.length) {\r\n                for (let i = 0; i < getRegisteredCredentialsApi.data.length; i += 1) {\r\n                    credentialOptions.push({\r\n                        _id: getRegisteredCredentialsApi.data[i]._id,\r\n                        name: getRegisteredCredentialsApi.data[i].name\r\n                    });\r\n                }\r\n            }\r\n            credentialOptions.push({\r\n                name: ADD_NEW_CREDENTIAL\r\n            });\r\n            setCredentialOptions(credentialOptions);\r\n            if (initialParams.find((prm) => prm.name === 'registeredCredential')) {\r\n                updateYupValidation('registeredCredential', 'name');\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getRegisteredCredentialsApi.data]);\r\n\r\n    // getCredentialParamsApi successful\r\n    useEffect(() => {\r\n        if (getCredentialParamsApi.data) {\r\n            const newCredentialParams = getCredentialParamsApi.data.credentials;\r\n\r\n            const credentialNameParam = {\r\n                label: 'Credential Name',\r\n                name: 'name',\r\n                type: 'string',\r\n                default: ''\r\n            };\r\n\r\n            newCredentialParams.unshift(credentialNameParam);\r\n\r\n            setCredentialParams(newCredentialParams);\r\n\r\n            const updateParams = initialParams;\r\n\r\n            for (let i = 0; i < newCredentialParams.length; i += 1) {\r\n                const credParamName = newCredentialParams[i].name;\r\n                if (initialParams.find((prm) => prm.name === credParamName) === undefined) {\r\n                    updateParams.push(newCredentialParams[i]);\r\n                }\r\n            }\r\n            paramsChanged(updateParams, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getCredentialParamsApi.data]);\r\n\r\n    // getSpecificCredentialApi successful\r\n    useEffect(() => {\r\n        if (getSpecificCredentialApi.data) {\r\n            const updateValues = {\r\n                ...credentialValues,\r\n                ...getSpecificCredentialApi.data.credentialData,\r\n                name: getSpecificCredentialApi.data.name\r\n            };\r\n            valueChanged(updateValues, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificCredentialApi.data]);\r\n\r\n    // Initialize values\r\n    useEffect(() => {\r\n        setCredentialValues(initialValues);\r\n        if (initialValues && initialValues.credentialMethod) {\r\n            getRegisteredCredentialsApi.request(initialValues.credentialMethod);\r\n            setNodeCredentialName(initialValues.credentialMethod);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [initialValues]);\r\n\r\n    // Initialize validation\r\n    useEffect(() => {\r\n        setCredentialValidation(initialValidation);\r\n    }, [initialValidation]);\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={credentialValues}\r\n                    validationSchema={Yup.object().shape(credentialValidation)}\r\n                    onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                const isAddNewCredential =\r\n                                    values && values.registeredCredential && values.registeredCredential.name === ADD_NEW_CREDENTIAL;\r\n\r\n                                if (!isAddNewCredential && (credentialParams.length === 0 || !values.credentialMethod)) {\r\n                                    onSubmit(values.credentialMethod ? { ...values, submit: true } : { submit: true }, paramsType);\r\n                                    setStatus({ success: true });\r\n                                    setSubmitting(false);\r\n                                } else {\r\n                                    const body = getCredentialRequestBody(values);\r\n                                    let response;\r\n                                    if (isAddNewCredential) {\r\n                                        response = await credentialApi.createNewCredential(body);\r\n                                    } else {\r\n                                        response = await credentialApi.updateCredential(values.registeredCredential._id, body);\r\n                                    }\r\n                                    if (response.data) {\r\n                                        // Open oAuth2 window\r\n                                        if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                            const oAuth2PopupURL = await oauth2Api.geOAuth2PopupURL(response.data._id);\r\n                                            const popUpWindow = openOAuth2PopUpWindow(oAuth2PopupURL.data);\r\n\r\n                                            const oAuth2Completed = async (event) => {\r\n                                                if (event.data === 'success') {\r\n                                                    window.removeEventListener('message', oAuth2Completed, false);\r\n\r\n                                                    const submitValues = {\r\n                                                        credentialMethod: values.credentialMethod,\r\n                                                        registeredCredential: {\r\n                                                            _id: response.data._id,\r\n                                                            name: response.data.name\r\n                                                        },\r\n                                                        submit: true\r\n                                                    };\r\n                                                    clearCredentialParams();\r\n                                                    onSubmit(submitValues, paramsType);\r\n                                                    setStatus({ success: true });\r\n                                                    setSubmitting(false);\r\n\r\n                                                    if (popUpWindow) {\r\n                                                        popUpWindow.close();\r\n                                                    }\r\n                                                }\r\n                                            };\r\n                                            window.addEventListener('message', oAuth2Completed, false);\r\n                                            return;\r\n                                        }\r\n\r\n                                        const submitValues = {\r\n                                            credentialMethod: values.credentialMethod,\r\n                                            registeredCredential: {\r\n                                                _id: response.data._id,\r\n                                                name: response.data.name\r\n                                            },\r\n                                            submit: true\r\n                                        };\r\n                                        clearCredentialParams();\r\n                                        onSubmit(submitValues, paramsType);\r\n                                        setStatus({ success: true });\r\n                                        setSubmitting(false);\r\n                                    } else {\r\n                                        throw new Error(response);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } catch (err) {\r\n                            console.error(err);\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false });\r\n                                setErrors({ submit: err.message });\r\n                                setSubmitting(false);\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                        <form noValidate onSubmit={handleSubmit} {...others}>\r\n                            {initialParams.map((input) => {\r\n                                if (input.type === 'options') {\r\n                                    const inputName = input.name;\r\n                                    const availableOptions = input.options || [];\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <Autocomplete\r\n                                                id={inputName}\r\n                                                freeSolo\r\n                                                options={availableOptions}\r\n                                                value={findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()}\r\n                                                onChange={(e, selection) => {\r\n                                                    const value = selection ? selection.name : '';\r\n                                                    setFieldValue(inputName, value);\r\n                                                    const overwriteValues = {\r\n                                                        [inputName]: value\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                    clearCredentialParams();\r\n                                                    if (selection) {\r\n                                                        getRegisteredCredentialsApi.request(value);\r\n                                                        setNodeCredentialName(value);\r\n                                                    } else {\r\n                                                        setCredentialOptions([]);\r\n                                                    }\r\n                                                }}\r\n                                                onBlur={handleBlur}\r\n                                                PopperComponent={StyledPopper}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField {...params} value={values[inputName]} error={Boolean(errors[inputName])} />\r\n                                                )}\r\n                                                renderOption={(props, option) => (\r\n                                                    <Box component=\"li\" {...props}>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                            <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                                {option.label}\r\n                                                            </Typography>\r\n                                                            {option.description && (\r\n                                                                <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                )}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n\r\n                            {initialParams.find((prm) => prm.name === 'registeredCredential') && (\r\n                                <FormControl fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">Registered Credential</Typography>\r\n                                        <Tooltip title=\"Select previously registered credential OR add new credential\" placement=\"right\">\r\n                                            <IconButton>\r\n                                                <Info style={{ height: 18, width: 18 }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id=\"registered-credential\"\r\n                                        freeSolo\r\n                                        options={credentialOptions}\r\n                                        value={values.registeredCredential && values.credentialMethod ? values.registeredCredential : ' '}\r\n                                        getOptionLabel={(option) => option.name || ' '}\r\n                                        onChange={async (e, selectedCredential) => {\r\n                                            setFieldValue(\r\n                                                'registeredCredential',\r\n                                                selectedCredential !== null ? selectedCredential : initialValues.registeredCredential\r\n                                            );\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                registeredCredential: selectedCredential\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                            if (selectedCredential) {\r\n                                                if (selectedCredential.name !== ADD_NEW_CREDENTIAL) {\r\n                                                    getSpecificCredentialApi.request(selectedCredential._id);\r\n                                                } else {\r\n                                                    clearCredentialParamsValues(selectedCredential);\r\n                                                }\r\n                                                getCredentialParamsApi.request(nodeCredentialName);\r\n                                                if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                                    const redirectURLResp = await oauth2Api.geOAuth2RedirectURL();\r\n                                                    if (redirectURLResp.data) setOAuth2RedirectURL(redirectURLResp.data);\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                        onInputChange={(e, value) => {\r\n                                            if (!value) {\r\n                                                clearCredentialParams();\r\n                                                clearCredentialParamsValues('');\r\n                                            }\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                value={values.registeredCredential}\r\n                                                error={Boolean(errors.registeredCredential)}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                    <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                        {option.name}\r\n                                                    </Typography>\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors.registeredCredential && (\r\n                                        <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                            *Registered Credential is required\r\n                                        </span>\r\n                                    )}\r\n                                </FormControl>\r\n                            )}\r\n\r\n                            {values && values.registeredCredential && values.registeredCredential._id && (\r\n                                <Button\r\n                                    sx={{ mb: 2 }}\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<IconTrash size={15} />}\r\n                                    onClick={() => onDeleteCredential(values.registeredCredential._id)}\r\n                                >\r\n                                    Delete Credential\r\n                                </Button>\r\n                            )}\r\n\r\n                            {oAuth2RedirectURL && (\r\n                                <div>\r\n                                    <Typography variant=\"overline\">OAuth2 Redirect URL</Typography>\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography\r\n                                            sx={{\r\n                                                p: 1,\r\n                                                borderRadius: 10,\r\n                                                backgroundColor: theme.palette.primary.light,\r\n                                                width: 'max-content',\r\n                                                height: 'max-content'\r\n                                            }}\r\n                                            variant=\"h5\"\r\n                                        >\r\n                                            {oAuth2RedirectURL}\r\n                                        </Typography>\r\n                                        <IconButton\r\n                                            title=\"Copy URL\"\r\n                                            color=\"primary\"\r\n                                            onClick={() => navigator.clipboard.writeText(oAuth2RedirectURL)}\r\n                                        >\r\n                                            <IconCopy />\r\n                                        </IconButton>\r\n                                    </Stack>\r\n                                </div>\r\n                            )}\r\n\r\n                            {values.credentialMethod &&\r\n                                credentialParams.map((input) => {\r\n                                    if (input.type === 'json') {\r\n                                        const inputName = input.name;\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction=\"row\">\r\n                                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                    {input.description && (\r\n                                                        <Tooltip title={input.description} placement=\"right\">\r\n                                                            <IconButton>\r\n                                                                <Info style={{ height: 18, width: 18 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                </Stack>\r\n                                                <PerfectScrollbar\r\n                                                    style={{\r\n                                                        border: '1px solid',\r\n                                                        borderColor: theme.palette.grey['500'],\r\n                                                        borderRadius: '12px',\r\n                                                        height: '200px',\r\n                                                        maxHeight: '200px',\r\n                                                        overflowX: 'hidden',\r\n                                                        backgroundColor: 'white'\r\n                                                    }}\r\n                                                    onScroll={(e) => e.stopPropagation()}\r\n                                                >\r\n                                                    <Editor\r\n                                                        placeholder={input.placeholder}\r\n                                                        value={values[inputName] || ''}\r\n                                                        onBlur={(e) => {\r\n                                                            const overwriteValues = {\r\n                                                                ...values,\r\n                                                                [inputName]: e.target.value\r\n                                                            };\r\n                                                            onChanged(overwriteValues);\r\n                                                        }}\r\n                                                        onValueChange={(code) => {\r\n                                                            setFieldValue(inputName, code);\r\n                                                        }}\r\n                                                        highlight={(code) => highlight(code, languages.json)}\r\n                                                        padding={10}\r\n                                                        style={{\r\n                                                            fontSize: '0.875rem',\r\n                                                            minHeight: '200px',\r\n                                                            width: '100%'\r\n                                                        }}\r\n                                                        textareaClassName=\"editor__textarea\"\r\n                                                    />\r\n                                                </PerfectScrollbar>\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        );\r\n                                    }\r\n\r\n                                    if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                        const inputName = input.name;\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction=\"row\">\r\n                                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                    {input.description && (\r\n                                                        <Tooltip title={input.description} placement=\"right\">\r\n                                                            <IconButton>\r\n                                                                <Info style={{ height: 18, width: 18 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                </Stack>\r\n                                                <OutlinedInput\r\n                                                    id={inputName}\r\n                                                    type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                                    value={values[inputName] || ''}\r\n                                                    placeholder={input.placeholder}\r\n                                                    name={inputName}\r\n                                                    onBlur={(e) => {\r\n                                                        handleBlur(e);\r\n                                                        onChanged(values);\r\n                                                    }}\r\n                                                    onChange={handleChange}\r\n                                                />\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        );\r\n                                    }\r\n\r\n                                    if (input.type === 'boolean') {\r\n                                        const inputName = input.name;\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction=\"row\">\r\n                                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                    {input.description && (\r\n                                                        <Tooltip title={input.description} placement=\"right\">\r\n                                                            <IconButton>\r\n                                                                <Info style={{ height: 18, width: 18 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                </Stack>\r\n                                                <Switch\r\n                                                    checked={!!values[inputName]}\r\n                                                    onChange={(event) => {\r\n                                                        setFieldValue(inputName, event.target.checked);\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: event.target.checked\r\n                                                        };\r\n                                                        onChanged(overwriteValues);\r\n                                                    }}\r\n                                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                            </FormControl>\r\n                                        );\r\n                                    }\r\n\r\n                                    if (input.type === 'options') {\r\n                                        const inputName = input.name;\r\n                                        const availableOptions = input.options || [];\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                                <Stack direction=\"row\">\r\n                                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                    {input.description && (\r\n                                                        <Tooltip title={input.description} placement=\"right\">\r\n                                                            <IconButton>\r\n                                                                <Info style={{ height: 18, width: 18 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                </Stack>\r\n                                                <Autocomplete\r\n                                                    id={inputName}\r\n                                                    freeSolo\r\n                                                    options={availableOptions}\r\n                                                    value={\r\n                                                        findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()\r\n                                                    }\r\n                                                    onChange={(e, selection) => {\r\n                                                        const value = selection ? selection.name : '';\r\n                                                        setFieldValue(inputName, value);\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: value\r\n                                                        };\r\n                                                        onChanged(overwriteValues);\r\n                                                    }}\r\n                                                    onBlur={handleBlur}\r\n                                                    PopperComponent={StyledPopper}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            value={values[inputName]}\r\n                                                            error={Boolean(errors[inputName])}\r\n                                                        />\r\n                                                    )}\r\n                                                    renderOption={(props, option) => (\r\n                                                        <Box component=\"li\" {...props}>\r\n                                                            <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                                <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                                    {option.label}\r\n                                                                </Typography>\r\n                                                                {option.description && (\r\n                                                                    <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </Box>\r\n                                                    )}\r\n                                                />\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        {values &&\r\n                                        values.registeredCredential &&\r\n                                        (values.registeredCredential.name === ADD_NEW_CREDENTIAL || credentialParams.length)\r\n                                            ? 'Save and Continue'\r\n                                            : 'Continue'}\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nCredentialInput.propTypes = {\r\n    initialParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object,\r\n    initialValidation: PropTypes.object,\r\n    valueChanged: PropTypes.func,\r\n    paramsChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func\r\n};\r\n\r\nexport default CredentialInput;\r\n"],"sourceRoot":""}