{"version":3,"sources":["utils/genericHelper.js","ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","ui-component/extended/AnimateButton.js","ui-component/dialog/ExpandDataDialog.js","hooks/useScriptRef.js","utils/useNotifier.js","ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","ui-component/dialog/EditVariableDialog.js","views/inputs/ArrayInputParameters.js","views/inputs/OptionParamsResponse.js","views/inputs/AsyncSelectWrapper.js","views/inputs/InputParameters.js","api/credential.js","api/oauth2.js","views/inputs/CredentialInput.js","api/contracts.js","views/contracts/ContractDialog.js","assets/images/contract_empty.svg","views/contracts/index.js"],"names":["numberOrExpressionRegex","getAvailableNodeIdsForVariable","nodes","edges","targetNodeId","reverse","graph","nodeDependencies","i","length","nodeId","id","source","target","Object","prototype","hasOwnProperty","call","push","constructNodeDirectedGraph","exploreNodes","nodeQueue","exploredNodes","shift","parentNodeIds","inputEdges","filter","edg","targetHandle","includes","j","neighbourNodeIds","neighNodeId","getAllConnectedNodesFromTarget","setPath","Set","delete","generateWebhookEndpoint","characters","Array","from","map","charAt","Math","floor","random","join","getUniqueNodeId","nodeData","totalSameNodes","data","name","checkIfNodeLabelUnique","nodeLabel","label","initializeNodeData","nodeParams","initialValues","input","default","type","newObj","array","submit","addAnchors","newNodeId","incoming","outgoing","inputAnchors","newInput","outputAnchors","newOutput","getUniqueNodeLabel","actions","credentials","networks","inputParameters","getEdgeLabelName","sourceSplit","split","checkMultipleTriggers","node","convertDateStringToDateObject","dateString","undefined","date","moment","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","splitDataURI","getFolderName","base64ArrayStr","base64Array","JSON","parse","filenames","filename","e","generateExportFlowData","flowData","selected","newNodeData","wallet","credentialMethod","isHideRegisteredCredential","params","paramsType","nodeFlowData","clonedParams","selectedCredentialMethodOption","options","find","opt","hideRegisteredCredential","handleCredentialParams","reorganizedParams","nPrm","lodash","cloneDeep","prm","copyToClipboard","src","isArray","navigator","clipboard","writeText","stringify","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","setData","error","setError","loading","setLoading","request","result","AnimateButton","offset1","offset2","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","ExpandDataDialog","show","dialogProps","onCancel","onCopyClick","enableClipboard","portalElement","document","getElementById","component","open","fullWidth","maxWidth","onClose","fontSize","createPortal","useScriptRef","scripted","useRef","useEffect","current","displayed","useNotifier","dispatch","useDispatch","notifications","useSelector","state","notifier","useSnackbar","enqueueSnackbar","closeSnackbar","React","forEach","key","message","dismissed","event","reason","myKey","onExited","removeSnackbar","WorkflowCard","Card","CardContent","Grid","container","item","justifyContent","Skeleton","width","height","my","CardWrapper","styled","backgroundColor","color","darkTextPrimary","overflow","position","cursor","ItemCard","isLoading","images","onClick","chipSX","padding","activeWorkflowSX","success","dark","light","getNetworkItem","network","ntw","Box","p","style","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontWeight","mt","mb","flexGrow","whiteSpace","textOverflow","substring","slice","executionCount","deployed","Chip","marginTop","img","objectFit","alt","EditVariableDialog","onConfirm","inputValue","setInputValue","setInput","expanded","setExpanded","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","copiedVariableBody","setCopiedVariableBody","languages","js","languageType","setLanguageType","onMouseUp","selectionEnd","value","cursorPosition","textBeforeCursorPosition","textAfterCursorPosition","onClipboardCopy","namespaces","namespace","returnVariablePath","test","endsWith","values","inputValues","arrayItemBody","arrayItemValues","arrayItemInput","toString","json","flex","ml","grey","maxHeight","overflowX","onValueChange","code","placeholder","highlight","onBlur","minHeight","textareaClassName","hideVariables","availableNodesForVariable","marginLeft","pl","pr","py","breakpoints","down","top","index","onChange","isExpanded","expandIcon","collapsed","outputResponses","output","size","right","dialogProp","onExpandDialogClicked","cancelButtonName","updateArrayValues","updateInitialValues","arrayItemIndex","updateValues","onSave","confirmButtonName","StyledPopper","Popper","autocompleteClasses","listbox","boxSizing","margin","DateCustomInput","paddingTop","paddingBottom","paddingRight","paddingLeft","textAlign","opacity","propTypes","PropTypes","string","func","ArrayInputParameters","arrayParams","arrayGroupName","errors","onArrayInputChange","onArrayInputBlur","onArrayItemRemove","onArrayItemMouseUp","onEditVariableDialogOpen","customization","processUpdateValues","inputName","onInputChange","onInputBlur","valueIndex","path","_","Fab","main","splice","onRemoveClick","paramIndex","FormControl","Boolean","Stack","description","Tooltip","placement","IconButton","Info","marginBottom","Button","startIcon","hidden","files","file","reader","FileReader","onload","evt","readAsDataURL","handleFileUpload","directory","webkitdirectory","readFile","fileIndex","webkitRelativePath","handleFolderUpload","onScroll","stopPropagation","customInput","showTimeSelect","isClearable","timeInputLabel","dateFormat","toISOString","OutlinedInput","Switch","checked","inputProps","availableOptions","Autocomplete","freeSolo","onOpen","option","selection","PopperComponent","renderInput","TextField","renderOption","props","OptionParamsResponse","getSelectedValue","getSelectedOptionInputParams","selectedOption","getSelectedOptionExampleParams","exampleParameters","getSelectedOptionExampleResponse","exampleResponse","dangerouslySetInnerHTML","__html","AsyncSelectWrapper","loadMethod","loadFromDbCollections","onMenuOpen","onSetError","customStyles","provided","isSelected","control","singleValue","menuList","asyncOptions","setAsyncOptions","styles","formatOptionLabel","context","getOptionLabel","getOptionValue","loadOptions","callback","post","then","response","returnOptions","toBeDeleteOptions","displayTypes","displayType","displayOptions","keys","comparisonValue","groundValue","get","RegExp","showHideOptions","toLowerCase","defaultOptions","bottom","fontStyle","replace","formatErrorMessage","InputParameters","nodeParamsValidation","valueChanged","onSubmit","setVariableSelectorState","scriptedRef","onChanged","findMatchingOptions","enableReinitialize","validationSchema","Yup","shape","setErrors","setStatus","setSubmitting","err","console","handleBlur","handleChange","handleSubmit","setFieldValue","isSubmitting","noValidate","overwriteValues","multiline","rows","maxRows","minRows","arrayParamItems","templateArray","arrayItemsValues","variableState","body","disableElevation","arrayItems","arrayName","onAddArrayItem","disabled","nodeCredentialName","client","isEncrypted","credentialBody","put","credentialId","ADD_NEW_CREDENTIAL","CredentialInput","initialParams","initialValidation","paramsChanged","credentialValidation","setCredentialValidation","credentialValues","setCredentialValues","setNodeCredentialName","credentialParams","setCredentialParams","credentialOptions","setCredentialOptions","oAuth2RedirectURL","setOAuth2RedirectURL","getCredentialParamsApi","useApi","credentialApi","getRegisteredCredentialsApi","getSpecificCredentialApi","getCredentialRequestBody","Error","credentialData","credParamName","clearCredentialParams","updateParams","every","paramItem","clearCredentialParamsValues","registeredCredential","onDeleteCredential","openOAuth2PopUpWindow","oAuth2PopupURL","left","window","screenX","outerWidth","screenY","outerHeight","url","_id","validationKey","updateValidation","required","updateYupValidation","newCredentialParams","unshift","isAddNewCredential","oauth2Api","popUpWindow","oAuth2Completed","removeEventListener","submitValues","close","addEventListener","selectedCredential","redirectURLResp","ContractDialog","enqueueSnackbarAction","closeSnackbarAction","contract_details","contractDetails","setContractDetails","contractData","setContractData","contractParams","setContractParams","contractValues","setContractValues","contractValidation","setContractValidation","invalidAddress","setInvalidAddress","invalidABI","setInvalidABI","isReadyToAdd","setIsReadyToAdd","isEditVariableDialogOpen","setEditVariableDialog","editVariableDialogProps","setEditVariableDialogProps","contractParamsType","getSpecificContractApi","contractsApi","handleAccordionChange","reset","addNewContract","createNewContractBody","contractInfo","abi","providerCredential","getTime","persist","saveContract","saveContractBody","deleteContract","fetchABI","formValues","selectedNetwork","uri","resp","updateContractData","status","indexOf","paramType","ethers","utils","isAddress","updateFormValues","initializeFormValuesAndParams","optional","setYupValidation","transformContractResponse","contractResponseData","checkIsReadyToAdd","Dialog","DialogTitle","DialogContent","icon","networkExplorers","Accordion","AccordionSummary","Avatar","typography","smallAvatar","background","AccordionDetails","Divider","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","originalParam","updateContractDetails","DialogActions","Contracts","showDialog","setShowDialog","setDialogProps","getAllContractsApi","spacing","gridSpacing","lg","md","sm","xs","ContractEmptySVG"],"mappings":"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","file":"static/js/9.b80f5295.chunk.js","sourcesContent":["import lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport const numberOrExpressionRegex = /^(\\d+\\.?\\d*|{{.*}})$/; //return true if string consists only numbers OR expression {{}}\r\n\r\nexport const constructNodeDirectedGraph = (nodes, edges, reverse = false) => {\r\n    const graph = {};\r\n    const nodeDependencies = {};\r\n\r\n    // Initialize node dependencies and graph\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const nodeId = nodes[i].id;\r\n        nodeDependencies[nodeId] = 0;\r\n        graph[nodeId] = [];\r\n    }\r\n\r\n    for (let i = 0; i < edges.length; i += 1) {\r\n        const source = edges[i].source;\r\n        const target = edges[i].target;\r\n\r\n        if (Object.prototype.hasOwnProperty.call(graph, source)) {\r\n            graph[source].push(target);\r\n        } else {\r\n            graph[source] = [target];\r\n        }\r\n\r\n        if (reverse) {\r\n            if (Object.prototype.hasOwnProperty.call(graph, target)) {\r\n                graph[target].push(source);\r\n            } else {\r\n                graph[target] = [source];\r\n            }\r\n        }\r\n\r\n        nodeDependencies[target] += 1;\r\n    }\r\n\r\n    return { graph, nodeDependencies };\r\n};\r\n\r\n// Find starting node with 0 dependencies\r\nexport const findStartingNodeIds = (nodes, nodeDependencies) => {\r\n    const startingNodeIds = [];\r\n    Object.keys(nodeDependencies).forEach((nodeId) => {\r\n        if (nodeDependencies[nodeId] === 0) {\r\n            const node = nodes.find((nd) => nd.id === nodeId);\r\n            if (node && node.data && node.data.type && (node.data.type === 'trigger' || node.data.type === 'webhook')) {\r\n                startingNodeIds.push(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    return startingNodeIds;\r\n};\r\n\r\n// Backtrack function to find all paths from start to target node\r\nexport const getAllPathsFromStartToTarget = (startNodeId, targetNodeId, graph) => {\r\n    const paths = [];\r\n    const visitedNodeIds = new Set();\r\n\r\n    const DFS = (currentNodeId, endNodeId, tempPath) => {\r\n        if (currentNodeId === endNodeId) {\r\n            paths.push(lodash.cloneDeep(tempPath));\r\n            return;\r\n        }\r\n\r\n        const neighbourNodeIds = graph[currentNodeId];\r\n        visitedNodeIds.add(currentNodeId);\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i += 1) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (!visitedNodeIds.has(neighNodeId)) {\r\n                tempPath.push(neighNodeId);\r\n                DFS(neighNodeId, endNodeId, tempPath);\r\n                tempPath.pop();\r\n            }\r\n        }\r\n        visitedNodeIds.delete(currentNodeId);\r\n    };\r\n\r\n    DFS(startNodeId, targetNodeId, [startNodeId]);\r\n    return paths;\r\n};\r\n\r\n// Breadth First Search to get all connected parent nodes from target\r\nexport const getAllConnectedNodesFromTarget = (targetNodeId, edges, graph) => {\r\n    const nodeQueue = [];\r\n    const exploredNodes = [];\r\n\r\n    nodeQueue.push(targetNodeId);\r\n    exploredNodes.push(targetNodeId);\r\n\r\n    while (nodeQueue.length) {\r\n        const nodeId = nodeQueue.shift() || '';\r\n        const parentNodeIds = [];\r\n\r\n        const inputEdges = edges.filter((edg) => edg.target === nodeId && edg.targetHandle.includes('-input-'));\r\n        if (inputEdges && inputEdges.length) {\r\n            for (let j = 0; j < inputEdges.length; j += 1) {\r\n                parentNodeIds.push(inputEdges[j].source);\r\n            }\r\n        }\r\n\r\n        const neighbourNodeIds = graph[nodeId];\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i += 1) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (parentNodeIds.includes(neighNodeId)) {\r\n                if (!exploredNodes.includes(neighNodeId)) {\r\n                    exploredNodes.push(neighNodeId);\r\n                    nodeQueue.push(neighNodeId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return exploredNodes;\r\n};\r\n\r\nexport const getAvailableNodeIdsForVariable = (nodes, edges, targetNodeId) => {\r\n    const { graph } = constructNodeDirectedGraph(nodes, edges, true);\r\n    const exploreNodes = getAllConnectedNodesFromTarget(targetNodeId, edges, graph);\r\n    const setPath = new Set(exploreNodes);\r\n    setPath.delete(targetNodeId);\r\n    return [...setPath];\r\n};\r\n\r\nexport const generateWebhookEndpoint = () => {\r\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n    const webhookEndpoint = Array.from({ length: 15 })\r\n        .map(() => {\r\n            return characters.charAt(Math.floor(Math.random() * characters.length));\r\n        })\r\n        .join('');\r\n    return webhookEndpoint;\r\n};\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1;\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return nodeId;\r\n};\r\n\r\nconst getUniqueNodeLabel = (nodeData, nodes) => {\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique label\r\n    let nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            totalSameNodes += 1;\r\n            nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return totalSameNodes === 0 ? nodeData.label : nodeLabel;\r\n};\r\n\r\nexport const checkIfNodeLabelUnique = (nodeLabel, nodes) => {\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const initializeNodeData = (nodeParams) => {\r\n    const initialValues = {};\r\n\r\n    for (let i = 0; i < nodeParams.length; i += 1) {\r\n        const input = nodeParams[i];\r\n\r\n        // Load from nodeParams default values\r\n        initialValues[input.name] = input.default || '';\r\n\r\n        // Special case for array, always initialize the item if default is not set\r\n        if (input.type === 'array' && !input.default) {\r\n            const newObj = {};\r\n            for (let j = 0; j < input.array.length; j += 1) {\r\n                newObj[input.array[j].name] = input.array[j].default || '';\r\n            }\r\n            initialValues[input.name] = [newObj];\r\n        }\r\n    }\r\n\r\n    initialValues.submit = null;\r\n\r\n    return initialValues;\r\n};\r\n\r\nexport const addAnchors = (nodeData, nodes, newNodeId) => {\r\n    const incoming = nodeData.incoming || 0;\r\n    const outgoing = nodeData.outgoing || 0;\r\n\r\n    const inputAnchors = [];\r\n    for (let i = 0; i < incoming; i += 1) {\r\n        const newInput = {\r\n            id: `${newNodeId}-input-${i}`\r\n        };\r\n        inputAnchors.push(newInput);\r\n    }\r\n\r\n    const outputAnchors = [];\r\n    for (let i = 0; i < outgoing; i += 1) {\r\n        const newOutput = {\r\n            id: `${newNodeId}-output-${i}`\r\n        };\r\n        outputAnchors.push(newOutput);\r\n    }\r\n\r\n    nodeData.inputAnchors = inputAnchors;\r\n    nodeData.outputAnchors = outputAnchors;\r\n    nodeData.label = getUniqueNodeLabel(nodeData, nodes);\r\n\r\n    if (nodeData.actions) nodeData.actions = initializeNodeData(nodeData.actions);\r\n    if (nodeData.credentials) nodeData.credentials = initializeNodeData(nodeData.credentials);\r\n    if (nodeData.networks) nodeData.networks = initializeNodeData(nodeData.networks);\r\n    if (nodeData.inputParameters) nodeData.inputParameters = initializeNodeData(nodeData.inputParameters);\r\n\r\n    return nodeData;\r\n};\r\n\r\nexport const getEdgeLabelName = (source) => {\r\n    const sourceSplit = source.split('-');\r\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\r\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length - 1];\r\n        return outputAnchorsIndex === '0' ? 'true' : 'false';\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const checkMultipleTriggers = (nodes) => {\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        const node = nodes[i];\r\n        if (node.data.type === 'webhook' || node.data.type === 'trigger') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined;\r\n\r\n    const date = moment(dateString);\r\n    if (!date.isValid) return undefined;\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes());\r\n};\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    const splitDataURI = fileBase64.split(',');\r\n    const filename = splitDataURI[splitDataURI.length - 1].split(':')[1];\r\n    return filename;\r\n};\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr);\r\n        const filenames = [];\r\n        for (let i = 0; i < base64Array.length; i += 1) {\r\n            const fileBase64 = base64Array[i];\r\n            const splitDataURI = fileBase64.split(',');\r\n            const filename = splitDataURI[splitDataURI.length - 1].split(':')[1];\r\n            filenames.push(filename);\r\n        }\r\n        return filenames.length ? filenames.join(',') : '';\r\n    } catch (e) {\r\n        return '';\r\n    }\r\n};\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes;\r\n    const edges = flowData.edges;\r\n\r\n    for (let i = 0; i < nodes.length; i += 1) {\r\n        nodes[i].selected = false;\r\n        const node = nodes[i];\r\n        const newNodeData = {\r\n            label: node.data.label,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            inputAnchors: node.data.inputAnchors,\r\n            outputAnchors: node.data.outputAnchors,\r\n            selected: false\r\n        };\r\n        if (node.data.inputParameters) {\r\n            newNodeData.inputParameters = { ...node.data.inputParameters, submit: null };\r\n            if (node.data.inputParameters.wallet) delete newNodeData.inputParameters.wallet;\r\n        }\r\n        if (node.data.actions) {\r\n            newNodeData.actions = { ...node.data.actions, submit: null };\r\n            if (node.data.actions.wallet) delete newNodeData.actions.wallet;\r\n        }\r\n        if (node.data.networks) {\r\n            newNodeData.networks = { ...node.data.networks, submit: null };\r\n            if (node.data.networks.wallet) delete newNodeData.networks.wallet;\r\n        }\r\n        if (node.data.credentials && node.data.credentials.credentialMethod) {\r\n            newNodeData.credentials = { credentialMethod: node.data.credentials.credentialMethod, submit: null };\r\n            if (node.data.credentials.wallet) delete newNodeData.credentials.wallet;\r\n        }\r\n\r\n        nodes[i].data = newNodeData;\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    };\r\n    return exportJson;\r\n};\r\n\r\nconst isHideRegisteredCredential = (params, paramsType, nodeFlowData) => {\r\n    if (!nodeFlowData[paramsType] || !nodeFlowData[paramsType]['credentialMethod']) return undefined;\r\n    let clonedParams = params;\r\n\r\n    for (let i = 0; i < clonedParams.length; i += 1) {\r\n        const input = clonedParams[i];\r\n        if (input.type === 'options') {\r\n            const selectedCredentialMethodOption = input.options.find((opt) => opt.name === nodeFlowData[paramsType]['credentialMethod']);\r\n            if (\r\n                selectedCredentialMethodOption &&\r\n                selectedCredentialMethodOption !== undefined &&\r\n                selectedCredentialMethodOption.hideRegisteredCredential\r\n            )\r\n                return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const handleCredentialParams = (nodeParams, paramsType, reorganizedParams, nodeFlowData) => {\r\n    if (\r\n        paramsType === 'credentials' &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') === undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        !isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Add hard-coded registeredCredential params\r\n        nodeParams.push({\r\n            name: 'registeredCredential'\r\n        });\r\n    } else if (\r\n        paramsType === 'credentials' &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') !== undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n    } else if (paramsType === 'credentials' && nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') === undefined) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n    }\r\n    return nodeParams;\r\n};\r\n\r\nexport const copyToClipboard = (e) => {\r\n    const src = e.src;\r\n    if (Array.isArray(src) || typeof src === 'object') {\r\n        navigator.clipboard.writeText(JSON.stringify(src, null, '  '));\r\n    } else {\r\n        navigator.clipboard.writeText(src);\r\n    }\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import axios from 'axios';\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        'Content-type': 'application/json'\r\n    }\r\n});\r\n\r\nexport default apiClient;\r\n","import { useState } from 'react';\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true);\r\n        try {\r\n            const result = await apiFunc(...args);\r\n            setData(result.data);\r\n        } catch (err) {\r\n            setError(err || 'Unexpected Error!');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    };\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\r\n    let offset1;\r\n    let offset2;\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset;\r\n            offset2 = 0;\r\n            break;\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0;\r\n            offset2 = offset;\r\n            break;\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2);\r\n    const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                };\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n    }\r\n});\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n};\r\n\r\nexport default AnimateButton;\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material';\r\nimport ReactJson from 'react-json-view';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\nconst ExpandDataDialog = ({ show, dialogProps, onCancel, onCopyClick, enableClipboard }) => {\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth=\"md\"\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {!enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={(e) => copyToClipboard(e)} />}\r\n                {enableClipboard && <ReactJson src={dialogProps.data} enableClipboard={(e) => onCopyClick(e, dialogProps.node)} />}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n};\r\n\r\nExpandDataDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onCopyClick: PropTypes.func,\r\n    enableClipboard: PropTypes.bool\r\n};\r\n\r\nexport default ExpandDataDialog;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true);\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false;\r\n        },\r\n        []\r\n    );\r\n\r\n    return scripted;\r\n};\r\n\r\nexport default useScriptRef;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeSnackbar } from 'store/actions';\r\n\r\nlet displayed = [];\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifier = useSelector((state) => state.notifier);\r\n    const { notifications } = notifier;\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id];\r\n    };\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter((key) => id !== key)];\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey));\r\n                    removeDisplayed(myKey);\r\n                }\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\r\n};\r\n\r\nexport default useNotifier;\r\n","// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\nexport default WorkflowCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Box, Grid, Chip, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard';\r\n\r\n// Const\r\nimport { networks } from 'store/constant';\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}));\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme();\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    };\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    };\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction=\"column\">\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && (\r\n                                    <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                        <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                    </div>\r\n                                )}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction=\"row\">\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200],\r\n                                                overflow: 'hidden',\r\n                                                whiteSpace: 'nowrap',\r\n                                                textOverflow: 'ellipsis',\r\n                                                maxWidth: 250\r\n                                            }}\r\n                                        >\r\n                                            {`${data.address.substring(0, 8)}...${data.address.slice(-4)}`}\r\n                                        </Typography>\r\n                                    )}\r\n                                    {data.flowData && (\r\n                                        <Typography\r\n                                            sx={{\r\n                                                fontSize: '1rem',\r\n                                                fontWeight: 500,\r\n                                                color: theme.palette.secondary[200]\r\n                                            }}\r\n                                        >\r\n                                            Total Executions: {data.executionCount || '0'}\r\n                                        </Typography>\r\n                                    )}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label=\"Deployed\" sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip\r\n                                        label={getNetworkItem(data.network).label}\r\n                                        sx={{ ...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            {images && (\r\n                                <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                    {images.map((img) => (\r\n                                        <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                            <img\r\n                                                style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }}\r\n                                                alt=\"\"\r\n                                                src={img}\r\n                                            />\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default ItemCard;\r\n","import { createPortal } from 'react-dom';\r\nimport { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    IconButton,\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    Typography,\r\n    AccordionDetails\r\n} from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport ReactJson from 'react-json-view';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { IconArrowsMaximize } from '@tabler/icons';\r\nimport ExpandDataDialog from './ExpandDataDialog';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\nimport './EditVariableDialog.css';\r\n\r\nconst isPositiveNumeric = (value) => /^\\d+$/.test(value);\r\n\r\nconst EditVariableDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [input, setInput] = useState(null);\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false);\r\n    const [expandDialogProps, setExpandDialogProps] = useState({});\r\n    const [copiedVariableBody, setCopiedVariableBody] = useState({});\r\n    const [languageType, setLanguageType] = useState(languages.js);\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false);\r\n    };\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        };\r\n        setExpandDialogProps(dialogProp);\r\n        setShowExpandDialog(true);\r\n    };\r\n\r\n    const onMouseUp = (e) => {\r\n        if (e.target && e.target.selectionEnd && e.target.value) {\r\n            const cursorPosition = e.target.selectionEnd;\r\n            const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n            const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n            const body = {\r\n                textBeforeCursorPosition,\r\n                textAfterCursorPosition\r\n            };\r\n            setCopiedVariableBody(body);\r\n        } else {\r\n            setCopiedVariableBody({});\r\n        }\r\n    };\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace;\r\n        let returnVariablePath = `${node.id}`;\r\n        for (let i = 0; i < namespaces.length; i += 1) {\r\n            const namespace = namespaces[i];\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1);\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`;\r\n                } else {\r\n                    returnVariablePath += namespace;\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.';\r\n                }\r\n            }\r\n        }\r\n        if (copiedVariableBody) {\r\n            let newInput = '';\r\n            if (copiedVariableBody.textBeforeCursorPosition === undefined && copiedVariableBody.textAfterCursorPosition === undefined)\r\n                newInput = `${inputValue}${`{{${returnVariablePath}}}`}`;\r\n            else\r\n                newInput = `${copiedVariableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${copiedVariableBody.textAfterCursorPosition}`;\r\n            setInputValue(newInput);\r\n        }\r\n    };\r\n\r\n    const onSave = (value) => {\r\n        // ArrayInputParameter\r\n        if (dialogProps.arrayItemBody) {\r\n            const updateArrayValues = {\r\n                ...dialogProps.arrayItemBody.arrayItemValues,\r\n                [dialogProps.arrayItemBody.arrayItemInput.name]: value\r\n            };\r\n            const updateInitialValues = dialogProps.arrayItemBody.initialValues;\r\n            updateInitialValues[dialogProps.arrayItemBody.arrayItemIndex] = updateArrayValues;\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: updateInitialValues\r\n            };\r\n            onConfirm(updateValues);\r\n        } else {\r\n            // InputParameter\r\n            const updateValues = {\r\n                ...dialogProps.values,\r\n                [dialogProps.input.name]: value,\r\n                submit: null\r\n            };\r\n            onConfirm(updateValues);\r\n        }\r\n    };\r\n\r\n    // Handle Accordian\r\n    useEffect(() => {\r\n        if (dialogProps.values && dialogProps.input) {\r\n            let inputValues = dialogProps.values;\r\n            let input = dialogProps.input;\r\n            if (dialogProps.arrayItemBody) {\r\n                inputValues = dialogProps.arrayItemBody.arrayItemValues;\r\n                input = dialogProps.arrayItemBody.arrayItemInput;\r\n            }\r\n            setInput(input);\r\n            setInputValue(inputValues[input.name].toString() || '');\r\n            if (input.type === 'json' || input.type === 'string' || input.type === 'number') setLanguageType(languages.json);\r\n            if (input.type === 'code') setLanguageType(languages.js);\r\n        }\r\n    }, [dialogProps]);\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} fullWidth maxWidth=\"lg\" aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\r\n            <DialogContent>\r\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                    {input && (input.type === 'json' || input.type === 'string' || input.type === 'number' || input.type === 'code') && (\r\n                        <div style={{ flex: 1 }}>\r\n                            <Typography sx={{ mb: 2, ml: 1 }} variant=\"h4\">\r\n                                Input\r\n                            </Typography>\r\n                            <PerfectScrollbar\r\n                                style={{\r\n                                    border: '1px solid',\r\n                                    borderColor: theme.palette.grey['500'],\r\n                                    borderRadius: '12px',\r\n                                    height: '100%',\r\n                                    maxHeight: 'calc(100vh - 220px)',\r\n                                    overflowX: 'hidden',\r\n                                    backgroundColor: 'white'\r\n                                }}\r\n                            >\r\n                                <Editor\r\n                                    value={inputValue}\r\n                                    onValueChange={(code) => setInputValue(code)}\r\n                                    placeholder={input.placeholder}\r\n                                    highlight={(code) => highlight(code, languageType)}\r\n                                    onMouseUp={(e) => onMouseUp(e)}\r\n                                    onBlur={(e) => onMouseUp(e)}\r\n                                    padding={10}\r\n                                    style={{\r\n                                        fontSize: '0.875rem',\r\n                                        minHeight: 'calc(100vh - 220px)',\r\n                                        width: '100%'\r\n                                    }}\r\n                                    textareaClassName=\"editor__textarea\"\r\n                                />\r\n                            </PerfectScrollbar>\r\n                        </div>\r\n                    )}\r\n                    {!dialogProps.hideVariables && (\r\n                        <div style={{ flex: 1 }}>\r\n                            <Typography sx={{ mb: 2, ml: 2 }} variant=\"h4\">\r\n                                Variables\r\n                            </Typography>\r\n                            {dialogProps.availableNodesForVariable.length === 0 && (\r\n                                <div style={{ padding: 10, marginLeft: 10 }}>\r\n                                    <span>No Variables. Try connect to other nodes. </span>\r\n                                </div>\r\n                            )}\r\n                            {dialogProps.availableNodesForVariable.length > 0 && (\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 220px)', overflowX: 'hidden' }}>\r\n                                    <Box sx={{ pl: 2, pr: 2 }}>\r\n                                        <List\r\n                                            sx={{\r\n                                                width: '100%',\r\n                                                py: 0,\r\n                                                borderRadius: '10px',\r\n                                                [theme.breakpoints.down('md')]: {\r\n                                                    maxWidth: 300\r\n                                                },\r\n                                                '& .MuiListItemSecondaryAction-root': {\r\n                                                    top: 22\r\n                                                },\r\n                                                '& .MuiDivider-root': {\r\n                                                    my: 0\r\n                                                },\r\n                                                '& .list-container': {\r\n                                                    pl: 7\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            {dialogProps.availableNodesForVariable.map((node, index) => (\r\n                                                <Box key={index}>\r\n                                                    <Accordion\r\n                                                        expanded={expanded === node.data.label}\r\n                                                        onChange={handleAccordionChange(node.data.label)}\r\n                                                    >\r\n                                                        <AccordionSummary\r\n                                                            expandIcon={<ExpandMoreIcon />}\r\n                                                            aria-controls={`${node.data.label}-content`}\r\n                                                            id={`${node.data.label}-header`}\r\n                                                        >\r\n                                                            <Typography variant=\"h5\">{node.data.label}</Typography>\r\n                                                        </AccordionSummary>\r\n                                                        <AccordionDetails>\r\n                                                            <div style={{ position: 'relative' }}>\r\n                                                                <ReactJson\r\n                                                                    collapsed\r\n                                                                    src={\r\n                                                                        node.data.outputResponses && node.data.outputResponses.output\r\n                                                                            ? node.data.outputResponses.output\r\n                                                                            : {}\r\n                                                                    }\r\n                                                                    enableClipboard={(e) => onClipboardCopy(e, node)}\r\n                                                                />\r\n                                                                <IconButton\r\n                                                                    size=\"small\"\r\n                                                                    sx={{\r\n                                                                        height: 25,\r\n                                                                        width: 25,\r\n                                                                        position: 'absolute',\r\n                                                                        top: -5,\r\n                                                                        right: 5\r\n                                                                    }}\r\n                                                                    title=\"Expand Variable\"\r\n                                                                    color=\"primary\"\r\n                                                                    onClick={() =>\r\n                                                                        onExpandDialogClicked(\r\n                                                                            node.data.outputResponses && node.data.outputResponses.output\r\n                                                                                ? node.data.outputResponses.output\r\n                                                                                : {},\r\n                                                                            node\r\n                                                                        )\r\n                                                                    }\r\n                                                                >\r\n                                                                    <IconArrowsMaximize />\r\n                                                                </IconButton>\r\n                                                            </div>\r\n                                                        </AccordionDetails>\r\n                                                    </Accordion>\r\n                                                </Box>\r\n                                            ))}\r\n                                        </List>\r\n                                    </Box>\r\n                                </PerfectScrollbar>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                    <ExpandDataDialog\r\n                        enableClipboard\r\n                        show={showExpandDialog}\r\n                        dialogProps={expandDialogProps}\r\n                        onCancel={() => setShowExpandDialog(false)}\r\n                        onCopyClick={(e, node) => {\r\n                            onClipboardCopy(e, node);\r\n                            setShowExpandDialog(false);\r\n                        }}\r\n                    ></ExpandDataDialog>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <Button variant=\"contained\" onClick={() => onSave(inputValue)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n};\r\n\r\nEditVariableDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n};\r\n\r\nexport default EditVariableDialog;\r\n","import { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Switch,\r\n    Fab,\r\n    FormControl,\r\n    Tooltip,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Stack,\r\n    IconButton,\r\n    Button\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// icons\r\nimport { IconX, IconUpload } from '@tabler/icons';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport Editor from 'react-simple-code-editor';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n});\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button\r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type=\"button\"\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n        {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n};\r\n\r\n// ==============================|| ARRAY INPUT PARAMETERS ||============================== //\r\n\r\nconst ArrayInputParameters = ({\r\n    initialValues,\r\n    arrayParams,\r\n    paramsType,\r\n    arrayGroupName,\r\n    errors,\r\n    onArrayInputChange,\r\n    onArrayInputBlur,\r\n    onArrayItemRemove,\r\n    onArrayItemMouseUp,\r\n    onEditVariableDialogOpen\r\n}) => {\r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    const processUpdateValues = (inputValue, inputName, values, index) => {\r\n        const updateArrayValues = {\r\n            ...values,\r\n            [inputName]: inputValue\r\n        };\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues[index] = updateArrayValues;\r\n        return updateInitialValues;\r\n    };\r\n\r\n    const onInputChange = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputChange(updateInitialValues);\r\n    };\r\n\r\n    const onInputBlur = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputBlur(updateInitialValues);\r\n    };\r\n\r\n    const onRemoveClick = (index) => {\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues.splice(index, 1);\r\n        onArrayItemRemove(updateInitialValues);\r\n        onArrayItemMouseUp(false);\r\n    };\r\n\r\n    const onMouseUp = (e, inputName, valueIndex) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${arrayGroupName}[${valueIndex}].${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition,\r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        };\r\n        onArrayItemMouseUp(true, body);\r\n    };\r\n\r\n    const handleFolderUpload = (e, values, inputName, index) => {\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if (fileIndex >= files.length) {\r\n                onInputChange(JSON.stringify(base64Array), inputName, values, index);\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex + 1, lodash.cloneDeep(base64Array));\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    };\r\n\r\n    const handleFileUpload = (e, onInputChange, values, inputName, index) => {\r\n        if (!e.target.files) {\r\n            return;\r\n        }\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n            const value = result + `,filename:${name}`;\r\n            onInputChange(value, inputName, values, index);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => '';\r\n\r\n    return (\r\n        <>\r\n            {arrayParams.map((_, index) => {\r\n                const params = arrayParams[index] || [];\r\n                const values = initialValues[index] || {};\r\n\r\n                return (\r\n                    <Box\r\n                        sx={{\r\n                            p: 2,\r\n                            mb: 2,\r\n                            backgroundColor: theme.palette.secondary.light,\r\n                            borderRadius: `${customization.borderRadius}px`,\r\n                            position: 'relative'\r\n                        }}\r\n                        key={index}\r\n                    >\r\n                        {arrayParams.length > 1 && (\r\n                            <Fab\r\n                                sx={{\r\n                                    minHeight: 30,\r\n                                    height: 30,\r\n                                    width: 30,\r\n                                    backgroundColor: theme.palette.secondary.light,\r\n                                    color: theme.palette.secondary.main,\r\n                                    position: 'absolute',\r\n                                    right: -10,\r\n                                    top: -10\r\n                                }}\r\n                                size=\"small\"\r\n                                onClick={() => onRemoveClick(index)}\r\n                            >\r\n                                <IconX />\r\n                            </Fab>\r\n                        )}\r\n\r\n                        {params.map((input, paramIndex) => {\r\n                            if (input.type === 'file' || input.type === 'folder') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n\r\n                                        {input.type === 'file' && (\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: 'bold',\r\n                                                    color: theme.palette.grey['800'],\r\n                                                    marginBottom: '1rem'\r\n                                                }}\r\n                                            >\r\n                                                {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload'}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        {input.type === 'folder' && (\r\n                                            <span\r\n                                                style={{\r\n                                                    fontWeight: 'bold',\r\n                                                    color: theme.palette.grey['800'],\r\n                                                    marginBottom: '1rem'\r\n                                                }}\r\n                                            >\r\n                                                {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload'}\r\n                                            </span>\r\n                                        )}\r\n\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            component=\"label\"\r\n                                            fullWidth\r\n                                            startIcon={<IconUpload />}\r\n                                            sx={{ marginRight: '1rem' }}\r\n                                        >\r\n                                            {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                            {input.type === 'file' && (\r\n                                                <input type=\"file\" hidden onChange={(e) => handleFileUpload(e, values, inputName, index)} />\r\n                                            )}\r\n                                            {input.type === 'folder' && (\r\n                                                <input\r\n                                                    type=\"file\"\r\n                                                    directory=\"\"\r\n                                                    webkitdirectory=\"\"\r\n                                                    hidden\r\n                                                    onChange={(e) => handleFolderUpload(e, values, inputName, index)}\r\n                                                />\r\n                                            )}\r\n                                        </Button>\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'json' || input.type === 'code') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                            <Button\r\n                                                sx={{\r\n                                                    position: 'absolute',\r\n                                                    fontSize: '0.6875rem',\r\n                                                    right: 0,\r\n                                                    top: 5,\r\n                                                    height: 25,\r\n                                                    width: 'max-content'\r\n                                                }}\r\n                                                variant=\"outlined\"\r\n                                                onClick={() => onEditVariableDialogOpen(input, values, index)}\r\n                                            >\r\n                                                Edit Variables\r\n                                            </Button>\r\n                                        </Stack>\r\n                                        <PerfectScrollbar\r\n                                            style={{\r\n                                                border: '1px solid',\r\n                                                borderColor: theme.palette.grey['500'],\r\n                                                borderRadius: '12px',\r\n                                                height: '200px',\r\n                                                maxHeight: '200px',\r\n                                                overflowX: 'hidden',\r\n                                                backgroundColor: 'white'\r\n                                            }}\r\n                                            onScroll={(e) => e.stopPropagation()}\r\n                                        >\r\n                                            <Editor\r\n                                                placeholder={input.placeholder}\r\n                                                value={values[inputName] || ''}\r\n                                                onBlur={(e) => {\r\n                                                    onInputBlur(e.target.value, inputName, values, index);\r\n                                                    onMouseUp(e, inputName, index);\r\n                                                }}\r\n                                                onValueChange={(code) => onInputChange(code, inputName, values, index)}\r\n                                                onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                                highlight={(code) => highlight(code, input.type === 'json' ? languages.json : languages.js)}\r\n                                                padding={10}\r\n                                                style={{\r\n                                                    fontSize: '0.875rem',\r\n                                                    minHeight: '200px',\r\n                                                    width: '100%'\r\n                                                }}\r\n                                                textareaClassName=\"editor__textarea\"\r\n                                            />\r\n                                        </PerfectScrollbar>\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'date') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <DatePicker\r\n                                            customInput={<DateCustomInput />}\r\n                                            selected={convertDateStringToDateObject(values[inputName]) || null}\r\n                                            showTimeSelect\r\n                                            isClearable\r\n                                            timeInputLabel=\"Time:\"\r\n                                            dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                            onChange={(date) => {\r\n                                                const inputValue = date ? date.toISOString() : null;\r\n                                                onInputChange(inputValue, inputName, values, index);\r\n                                                onArrayItemMouseUp(false);\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                            {(input.type === 'string' || input.type === 'number') && (\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        position: 'absolute',\r\n                                                        fontSize: '0.6875rem',\r\n                                                        right: 0,\r\n                                                        top: 5,\r\n                                                        height: 25,\r\n                                                        width: 'max-content'\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    onClick={() => onEditVariableDialogOpen(input, values, index)}\r\n                                                >\r\n                                                    Edit Variables\r\n                                                </Button>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <OutlinedInput\r\n                                            id={inputName}\r\n                                            type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                            value={values[inputName] || ''}\r\n                                            placeholder={input.placeholder}\r\n                                            name={inputName}\r\n                                            onBlur={(e) => {\r\n                                                const inputValue = e.target.value;\r\n                                                onInputBlur(inputValue, inputName, values, index);\r\n                                                onMouseUp(e, inputName, index);\r\n                                            }}\r\n                                            onChange={(e) => {\r\n                                                const inputValue = e.target.value;\r\n                                                onInputChange(inputValue, inputName, values, index);\r\n                                            }}\r\n                                            onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                        />\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                    <FormControl\r\n                                        key={`${inputName}_${paramIndex}`}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                        error={errors && errors.length > 0 && errors[index] ? Boolean(errors[index][inputName]) : false}\r\n                                    >\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <Switch\r\n                                            checked={!!values[inputName]}\r\n                                            onChange={(event) => {\r\n                                                onInputChange(event.target.checked, inputName, values, index);\r\n                                            }}\r\n                                            inputProps={{ 'aria-label': 'controlled' }}\r\n                                        />\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                    <FormControl key={`${inputName}_${paramIndex}`} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                                <Tooltip title={input.description} placement=\"right\">\r\n                                                    <IconButton>\r\n                                                        <Info style={{ height: 18, width: 18 }} />\r\n                                                    </IconButton>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <Autocomplete\r\n                                            id={inputName}\r\n                                            freeSolo\r\n                                            onOpen={() => onArrayItemMouseUp(false)}\r\n                                            options={availableOptions}\r\n                                            value={findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()}\r\n                                            onChange={(e, selection) => {\r\n                                                const value = selection ? selection.name : '';\r\n                                                onInputBlur(value, inputName, values, index);\r\n                                            }}\r\n                                            PopperComponent={StyledPopper}\r\n                                            renderInput={(params) => (\r\n                                                <TextField\r\n                                                    {...params}\r\n                                                    value={values[inputName]}\r\n                                                    error={\r\n                                                        errors && errors.length > 0 && errors[index]\r\n                                                            ? Boolean(errors[index][inputName])\r\n                                                            : false\r\n                                                    }\r\n                                                />\r\n                                            )}\r\n                                            renderOption={(props, option) => (\r\n                                                <Box component=\"li\" {...props}>\r\n                                                    <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                        <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                            {option.label}\r\n                                                        </Typography>\r\n                                                        {option.description && <Typography sx={{ p: 1 }}>{option.description}</Typography>}\r\n                                                    </div>\r\n                                                </Box>\r\n                                            )}\r\n                                        />\r\n                                    </FormControl>\r\n                                );\r\n                            }\r\n                            return null;\r\n                        })}\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nArrayInputParameters.propTypes = {\r\n    initialValues: PropTypes.array,\r\n    arrayParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    arrayGroupName: PropTypes.string,\r\n    errors: PropTypes.array,\r\n    onArrayInputChange: PropTypes.func,\r\n    onArrayInputBlur: PropTypes.func,\r\n    onArrayItemRemove: PropTypes.func,\r\n    onArrayItemMouseUp: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func\r\n};\r\n\r\nexport default ArrayInputParameters;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './OptionParamsResponse.css';\r\n\r\n// ==============================|| OPTION PARAMS RESPONSE ||============================== //\r\n\r\nconst OptionParamsResponse = ({ value, options }) => {\r\n    const theme = useTheme();\r\n\r\n    const getSelectedValue = (value) => options.find((option) => option.name === value);\r\n\r\n    const getSelectedOptionInputParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.inputParameters || '';\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const getSelectedOptionExampleParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleParameters || '';\r\n        }\r\n        return '';\r\n    };\r\n\r\n    const getSelectedOptionExampleResponse = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleResponse || '';\r\n        }\r\n        return '';\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {getSelectedValue(value) && getSelectedOptionInputParams(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant=\"h6\">\r\n                        Parameters\r\n                    </Typography>\r\n                    <div className=\"params\" dangerouslySetInnerHTML={{ __html: getSelectedOptionInputParams(value) }} />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleParams(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant=\"h6\">\r\n                        Example Parameters\r\n                    </Typography>\r\n                    <ReactJson\r\n                        collapsed\r\n                        src={JSON.parse(getSelectedOptionExampleParams(value))}\r\n                        enableClipboard={(e) => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleResponse(value) && (\r\n                <Box\r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light,\r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{ p: 1 }} variant=\"h6\">\r\n                        Example Response\r\n                    </Typography>\r\n                    <ReactJson collapsed src={getSelectedOptionExampleResponse(value)} enableClipboard={(e) => copyToClipboard(e)} />\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nOptionParamsResponse.propTypes = {\r\n    value: PropTypes.string,\r\n    options: PropTypes.array\r\n};\r\n\r\nexport default OptionParamsResponse;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Stack, IconButton, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport AsyncSelect from 'react-select/async';\r\nimport axios from 'axios';\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons';\r\n\r\n// Constant\r\nimport { baseURL } from 'store/constant';\r\n\r\n// ==============================|| ASYNC SELECT WRAPPER ||============================== //\r\n\r\nconst AsyncSelectWrapper = ({\r\n    title,\r\n    description,\r\n    value,\r\n    loadMethod,\r\n    loadFromDbCollections,\r\n    nodeFlowData,\r\n    error,\r\n    onChange,\r\n    onMenuOpen,\r\n    onSetError\r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    const customStyles = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            paddingTop: 15,\r\n            paddingBottom: 15,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            cursor: 'pointer',\r\n            fontWeight: '500',\r\n            backgroundColor: state.isSelected ? theme.palette.primary.light : '',\r\n            color: 'black',\r\n            '&:hover': {\r\n                backgroundColor: theme.palette.grey['200']\r\n            }\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            cursor: 'text',\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 6,\r\n            paddingLeft: 6,\r\n            borderRadius: 12,\r\n            '&:hover': {\r\n                borderColor: theme.palette.grey['700']\r\n            }\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            fontWeight: '600'\r\n        }),\r\n        menuList: (provided) => ({\r\n            ...provided,\r\n            boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n            borderRadius: '10px'\r\n        })\r\n    };\r\n\r\n    const [asyncOptions, setAsyncOptions] = useState([]);\r\n\r\n    const getSelectedValue = (value) => asyncOptions.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => '';\r\n\r\n    const formatErrorMessage = (error) => {\r\n        if (error) return `*${error.replace(/[\"]/g, '')}`;\r\n        return '';\r\n    };\r\n\r\n    const showHideOptions = (options) => {\r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n        const displayTypes = ['show', 'hide'];\r\n\r\n        for (let x = 0; x < displayTypes.length; x += 1) {\r\n            const displayType = displayTypes[x];\r\n\r\n            for (let i = 0; i < returnOptions.length; i += 1) {\r\n                const option = returnOptions[i];\r\n                const displayOptions = option[displayType];\r\n\r\n                if (displayOptions) {\r\n                    Object.keys(displayOptions).forEach((path) => {\r\n                        const comparisonValue = displayOptions[path];\r\n                        const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n                        if (Array.isArray(comparisonValue)) {\r\n                            if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        } else if (typeof comparisonValue === 'string') {\r\n                            if (\r\n                                displayType === 'show' &&\r\n                                !(comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                            ) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (\r\n                                displayType === 'hide' &&\r\n                                (comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                            ) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    };\r\n\r\n    const loadOptions = (inputValue, callback) => {\r\n        axios\r\n            .post(`${baseURL}/api/v1/node-load-method/${nodeFlowData.name}`, { ...nodeFlowData, loadMethod, loadFromDbCollections })\r\n            .then((response) => {\r\n                const data = response.data;\r\n                const filteredOption = (data || []).filter((i) => i.label.toLowerCase().includes(inputValue.toLowerCase()));\r\n                const options = showHideOptions(filteredOption);\r\n                setAsyncOptions(options);\r\n                callback(options);\r\n            });\r\n    };\r\n\r\n    const formatOptionLabel = ({ label, description }, { context }) => (\r\n        <>\r\n            {context === 'menu' && (\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <div>{label}</div>\r\n                    {description && <span style={{ fontWeight: 400, paddingTop: 10, paddingBottom: 10 }}>{description}</span>}\r\n                </div>\r\n            )}\r\n            {context === 'value' && (\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <div>{label}</div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n\r\n    useEffect(() => () => setAsyncOptions([]), []);\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            const selectedOption = asyncOptions.find((option) => option.name === value);\r\n            if (!selectedOption) {\r\n                onSetError();\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [asyncOptions]);\r\n\r\n    return (\r\n        <>\r\n            <Stack direction=\"row\">\r\n                <Typography variant=\"overline\">{title}</Typography>\r\n                {description && (\r\n                    <Tooltip title={description} placement=\"right\">\r\n                        <IconButton>\r\n                            <Info style={{ height: 18, width: 18 }} />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                )}\r\n            </Stack>\r\n            <div style={{ position: 'relative' }}>\r\n                <AsyncSelect\r\n                    key={JSON.stringify(nodeFlowData)} // to reload async select whenever flowdata changed\r\n                    styles={customStyles}\r\n                    value={getSelectedValue(value) || getDefaultOptionValue()}\r\n                    formatOptionLabel={formatOptionLabel}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionValue={(option) => option.name}\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onChange={onChange}\r\n                    onMenuOpen={onMenuOpen}\r\n                />\r\n                <button\r\n                    style={{\r\n                        minHeight: 10,\r\n                        height: 27,\r\n                        width: 30,\r\n                        backgroundColor: '#FAFAFA',\r\n                        color: theme.palette.grey['500'],\r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        margin: 'auto',\r\n                        border: 'none',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                    title=\"Clear Selection\"\r\n                    type=\"button\"\r\n                    onClick={() => onChange(null)}\r\n                >\r\n                    <IconX />\r\n                </button>\r\n            </div>\r\n            {error && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>{formatErrorMessage(error)}</span>}\r\n\r\n            <OptionParamsResponse value={value} options={asyncOptions} />\r\n        </>\r\n    );\r\n};\r\n\r\nAsyncSelectWrapper.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    value: PropTypes.string,\r\n    loadMethod: PropTypes.string,\r\n    loadFromDbCollections: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    error: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onMenuOpen: PropTypes.func,\r\n    onSetError: PropTypes.func\r\n};\r\n\r\nexport default AsyncSelectWrapper;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { Box, Button, Stack, FormControl, OutlinedInput, Popper, TextField, Typography, Switch, IconButton, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// project imports\r\nimport useScriptRef from 'hooks/useScriptRef';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport ArrayInputParameters from './ArrayInputParameters';\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\nimport AsyncSelectWrapper from './AsyncSelectWrapper';\r\n\r\n// icons\r\nimport { IconPlus, IconUpload } from '@tabler/icons';\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n});\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button\r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type=\"button\"\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n        {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string,\r\n    onClick: PropTypes.func\r\n};\r\n\r\n// ==============================|| INPUT PARAMETERS ||============================== //\r\n\r\nconst InputParameters = ({\r\n    params,\r\n    paramsType,\r\n    initialValues,\r\n    nodeParamsValidation,\r\n    nodeFlowData,\r\n    valueChanged,\r\n    onSubmit,\r\n    setVariableSelectorState,\r\n    onEditVariableDialogOpen,\r\n    ...others\r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    const scriptedRef = useScriptRef();\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const onMouseUp = (e, inputName) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition,\r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        };\r\n        setVariableSelectorState(true, body);\r\n    };\r\n\r\n    const onAddArrayItem = (values, arrayItems, arrayName) => {\r\n        const updateValues = {\r\n            ...values,\r\n            [arrayName]: arrayItems\r\n        };\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const handleFolderUpload = (e, setFieldValue, values, inputName) => {\r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if (fileIndex >= files.length) {\r\n                setFieldValue(inputName, JSON.stringify(base64Array));\r\n                const overwriteValues = {\r\n                    ...values,\r\n                    [inputName]: JSON.stringify(base64Array)\r\n                };\r\n                onChanged(overwriteValues);\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload = (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex + 1, lodash.cloneDeep(base64Array));\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    };\r\n\r\n    const handleFileUpload = (e, setFieldValue, values, inputName) => {\r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n\r\n            const value = result + `,filename:${name}`;\r\n            setFieldValue(inputName, value);\r\n            const overwriteValues = {\r\n                ...values,\r\n                [inputName]: value\r\n            };\r\n            onChanged(overwriteValues);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => '';\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={initialValues}\r\n                    validationSchema={Yup.object().shape(nodeParamsValidation)}\r\n                    onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                        setVariableSelectorState(false);\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                values.submit = true;\r\n                                setStatus({ success: true });\r\n                                setSubmitting(false);\r\n                                onSubmit(values, paramsType);\r\n                            }\r\n                        } catch (err) {\r\n                            console.error(err);\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false });\r\n                                setErrors({ submit: err.message });\r\n                                setSubmitting(false);\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                        <form noValidate onSubmit={handleSubmit} {...others}>\r\n                            {params.map((input) => {\r\n                                if (input.type === 'file' || input.type === 'folder') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n\r\n                                            {input.type === 'file' && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: 'bold',\r\n                                                        color: theme.palette.grey['800'],\r\n                                                        marginBottom: '1rem'\r\n                                                    }}\r\n                                                >\r\n                                                    {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload'}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            {input.type === 'folder' && (\r\n                                                <span\r\n                                                    style={{\r\n                                                        fontWeight: 'bold',\r\n                                                        color: theme.palette.grey['800'],\r\n                                                        marginBottom: '1rem'\r\n                                                    }}\r\n                                                >\r\n                                                    {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload'}\r\n                                                </span>\r\n                                            )}\r\n\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                component=\"label\"\r\n                                                fullWidth\r\n                                                startIcon={<IconUpload />}\r\n                                                sx={{ marginRight: '1rem' }}\r\n                                            >\r\n                                                {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                                {input.type === 'file' && (\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        hidden\r\n                                                        onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName)}\r\n                                                    />\r\n                                                )}\r\n                                                {input.type === 'folder' && (\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        directory=\"\"\r\n                                                        webkitdirectory=\"\"\r\n                                                        hidden\r\n                                                        onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName)}\r\n                                                    />\r\n                                                )}\r\n                                            </Button>\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'json' || input.type === 'code') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        position: 'absolute',\r\n                                                        fontSize: '0.6875rem',\r\n                                                        right: 0,\r\n                                                        top: 5,\r\n                                                        height: 25,\r\n                                                        width: 'max-content'\r\n                                                    }}\r\n                                                    variant=\"outlined\"\r\n                                                    onClick={() => onEditVariableDialogOpen(input, values)}\r\n                                                >\r\n                                                    Edit Variables\r\n                                                </Button>\r\n                                            </Stack>\r\n                                            <PerfectScrollbar\r\n                                                style={{\r\n                                                    border: '1px solid',\r\n                                                    borderColor: theme.palette.grey['500'],\r\n                                                    borderRadius: '12px',\r\n                                                    height: '200px',\r\n                                                    maxHeight: '200px',\r\n                                                    overflowX: 'hidden',\r\n                                                    backgroundColor: 'white'\r\n                                                }}\r\n                                                onScroll={(e) => e.stopPropagation()}\r\n                                            >\r\n                                                <Editor\r\n                                                    placeholder={input.placeholder}\r\n                                                    value={values[inputName] || ''}\r\n                                                    onBlur={(e) => {\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: e.target.value\r\n                                                        };\r\n                                                        onChanged(overwriteValues);\r\n                                                        onMouseUp(e, inputName);\r\n                                                    }}\r\n                                                    onValueChange={(code) => {\r\n                                                        setFieldValue(inputName, code);\r\n                                                    }}\r\n                                                    onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                                    highlight={(code) =>\r\n                                                        highlight(code, input.type === 'json' ? languages.json : languages.js)\r\n                                                    }\r\n                                                    padding={10}\r\n                                                    style={{\r\n                                                        fontSize: '0.875rem',\r\n                                                        minHeight: '200px',\r\n                                                        width: '100%'\r\n                                                    }}\r\n                                                    textareaClassName=\"editor__textarea\"\r\n                                                />\r\n                                            </PerfectScrollbar>\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'date') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <DatePicker\r\n                                                customInput={<DateCustomInput />}\r\n                                                selected={convertDateStringToDateObject(values[inputName]) || null}\r\n                                                showTimeSelect\r\n                                                isClearable\r\n                                                timeInputLabel=\"Time:\"\r\n                                                dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                                onChange={(date) => {\r\n                                                    const value = date ? date.toISOString() : null;\r\n                                                    setVariableSelectorState(false);\r\n                                                    setFieldValue(inputName, value);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack sx={{ position: 'relative' }} direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                                {(input.type === 'string' || input.type === 'number') && (\r\n                                                    <Button\r\n                                                        sx={{\r\n                                                            position: 'absolute',\r\n                                                            fontSize: '0.6875rem',\r\n                                                            right: 0,\r\n                                                            top: 5,\r\n                                                            height: 25,\r\n                                                            width: 'max-content'\r\n                                                        }}\r\n                                                        variant=\"outlined\"\r\n                                                        onClick={() => onEditVariableDialogOpen(input, values)}\r\n                                                    >\r\n                                                        Edit Variables\r\n                                                    </Button>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <OutlinedInput\r\n                                                id={inputName}\r\n                                                type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                                placeholder={input.placeholder}\r\n                                                multiline={!!input.rows}\r\n                                                maxRows={input.rows || 0}\r\n                                                minRows={input.rows || 0}\r\n                                                value={values[inputName] || ''}\r\n                                                name={inputName}\r\n                                                onBlur={(e) => {\r\n                                                    handleBlur(e);\r\n                                                    onChanged(values);\r\n                                                    onMouseUp(e, inputName);\r\n                                                }}\r\n                                                onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'boolean') {\r\n                                    const inputName = input.name;\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <Switch\r\n                                                checked={!!values[inputName]}\r\n                                                onChange={(event) => {\r\n                                                    setVariableSelectorState(false);\r\n                                                    setFieldValue(inputName, event.target.checked);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: event.target.checked\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                inputProps={{ 'aria-label': 'controlled' }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'asyncOptions') {\r\n                                    const inputName = input.name;\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <AsyncSelectWrapper\r\n                                                title={input.label}\r\n                                                description={input.description}\r\n                                                value={values[inputName]}\r\n                                                loadMethod={input.loadMethod}\r\n                                                loadFromDbCollections={input.loadFromDbCollections || []}\r\n                                                nodeFlowData={nodeFlowData}\r\n                                                error={JSON.stringify(errors[inputName])}\r\n                                                onChange={(selection) => {\r\n                                                    const value = selection ? selection.name : '';\r\n                                                    setFieldValue(inputName, value);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                onMenuOpen={() => setVariableSelectorState(false)}\r\n                                                onSetError={() => {\r\n                                                    const value = '';\r\n                                                    setFieldValue(inputName, value);\r\n                                                }}\r\n                                            />\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'options') {\r\n                                    const inputName = input.name;\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <Autocomplete\r\n                                                id={inputName}\r\n                                                freeSolo\r\n                                                onOpen={() => setVariableSelectorState(false)}\r\n                                                options={input.options || []}\r\n                                                value={findMatchingOptions(input.options, values[inputName]) || getDefaultOptionValue()}\r\n                                                onChange={(e, selection) => {\r\n                                                    const value = selection ? selection.name : '';\r\n                                                    setFieldValue(inputName, value);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: value\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                onInputChange={(e, value) => {\r\n                                                    if (!value) setFieldValue(inputName, '');\r\n                                                }}\r\n                                                onBlur={handleBlur}\r\n                                                PopperComponent={StyledPopper}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField {...params} value={values[inputName]} error={Boolean(errors[inputName])} />\r\n                                                )}\r\n                                                renderOption={(props, option) => (\r\n                                                    <Box component=\"li\" {...props}>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                            <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                                {option.label}\r\n                                                            </Typography>\r\n                                                            {option.description && (\r\n                                                                <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                )}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                            <OptionParamsResponse value={values[inputName]} options={input.options || []} />\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n\r\n                                if (input.type === 'array') {\r\n                                    const arrayParamItems = input.arrayParams;\r\n                                    const templateArray = input.array;\r\n                                    const inputName = input.name;\r\n                                    const arrayItemsValues = values[inputName] || [];\r\n\r\n                                    return (\r\n                                        <Stack sx={{ mt: 1 }} key={inputName}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <ArrayInputParameters\r\n                                                initialValues={arrayItemsValues}\r\n                                                arrayParams={arrayParamItems}\r\n                                                paramsType={paramsType}\r\n                                                arrayGroupName={inputName}\r\n                                                errors={errors[inputName] ? errors[inputName] : []}\r\n                                                onArrayInputChange={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues);\r\n                                                }}\r\n                                                onArrayInputBlur={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: updateInitialValues\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                onArrayItemRemove={(updateInitialValues) => {\r\n                                                    setFieldValue(inputName, updateInitialValues);\r\n                                                    const overwriteValues = {\r\n                                                        ...values,\r\n                                                        [inputName]: updateInitialValues\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                }}\r\n                                                onArrayItemMouseUp={(variableState, body) => {\r\n                                                    if (body) setVariableSelectorState(variableState, body);\r\n                                                    else setVariableSelectorState(variableState);\r\n                                                }}\r\n                                                onEditVariableDialogOpen={(arrayItemInput, arrayItemValues, arrayItemIndex) => {\r\n                                                    const arrayItemBody = {\r\n                                                        arrayItemInput,\r\n                                                        arrayItemValues,\r\n                                                        arrayItemIndex,\r\n                                                        initialValues: arrayItemsValues\r\n                                                    };\r\n                                                    onEditVariableDialogOpen(input, values, arrayItemBody);\r\n                                                }}\r\n                                            />\r\n                                            <Box key={inputName} sx={{ mb: 2 }}>\r\n                                                <AnimateButton>\r\n                                                    <Button\r\n                                                        disableElevation\r\n                                                        fullWidth\r\n                                                        size=\"small\"\r\n                                                        variant=\"outlined\"\r\n                                                        color=\"secondary\"\r\n                                                        startIcon={<IconPlus />}\r\n                                                        onClick={() => {\r\n                                                            setVariableSelectorState(false);\r\n                                                            let newObj = {};\r\n                                                            if (input.default && input.default.length) {\r\n                                                                newObj = input.default[0];\r\n                                                            } else {\r\n                                                                for (let i = 0; i < templateArray.length; i += 1) {\r\n                                                                    newObj[templateArray[i].name] = templateArray[i].default || '';\r\n                                                                }\r\n                                                            }\r\n                                                            arrayItemsValues.push(newObj);\r\n                                                            onAddArrayItem(values, arrayItemsValues, inputName);\r\n                                                        }}\r\n                                                    >\r\n                                                        Add {input.label}\r\n                                                    </Button>\r\n                                                </AnimateButton>\r\n                                            </Box>\r\n                                        </Stack>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        Continue\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nInputParameters.propTypes = {\r\n    params: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object,\r\n    nodeParamsValidation: PropTypes.object,\r\n    nodeFlowData: PropTypes.object,\r\n    valueChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n    setVariableSelectorState: PropTypes.func,\r\n    onEditVariableDialogOpen: PropTypes.func\r\n};\r\n\r\nexport default InputParameters;\r\n","import client from './client';\r\n\r\nconst getCredentials = (nodeCredentialName) => client.get('/credentials', { params: { nodeCredentialName } });\r\n\r\nconst getCredentialParams = (name) => client.get(`/node-credentials/${name}`);\r\n\r\nconst getSpecificCredential = (id, isEncrypted) => client.get(`/credentials/${id}`, { params: { isEncrypted } });\r\n\r\nconst createNewCredential = (credentialBody) => client.post(`/credentials`, credentialBody); //credentialBody: ICredential\r\n\r\nconst updateCredential = (id, credentialBody) => client.put(`/credentials/${id}`, credentialBody); //credentialBody: ICredential\r\n\r\nconst deleteCredential = (id) => client.delete(`/credentials/${id}`);\r\n\r\nexport default {\r\n    getCredentials,\r\n    getCredentialParams,\r\n    getSpecificCredential,\r\n    createNewCredential,\r\n    updateCredential,\r\n    deleteCredential\r\n};\r\n","import client from './client';\r\n\r\nconst geOAuth2PopupURL = (credentialId) => client.get('/oauth2', { params: { credentialId } });\r\nconst geOAuth2RedirectURL = () => client.get('/oauth2-redirecturl');\r\n\r\nexport default {\r\n    geOAuth2PopupURL,\r\n    geOAuth2RedirectURL\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Button, FormControl, Stack, OutlinedInput, Popper, TextField, Typography, IconButton, Switch, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/components/prism-json';\r\nimport 'prismjs/components/prism-markup';\r\nimport 'prismjs/themes/prism.css';\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// API\r\nimport credentialApi from 'api/credential';\r\nimport oauth2Api from 'api/oauth2';\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi';\r\nimport useScriptRef from 'hooks/useScriptRef';\r\n\r\n// icons\r\nimport { IconTrash, IconCopy } from '@tabler/icons';\r\n\r\n//css\r\nimport './InputParameters.css';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10\r\n        }\r\n    }\r\n});\r\n\r\nconst ADD_NEW_CREDENTIAL = '+ Add New Credential';\r\n\r\n// ==============================|| CREDENTIAL INPUT ||============================== //\r\n\r\nconst CredentialInput = ({\r\n    initialParams,\r\n    paramsType,\r\n    initialValues,\r\n    initialValidation,\r\n    valueChanged,\r\n    paramsChanged,\r\n    onSubmit,\r\n    ...others\r\n}) => {\r\n    const scriptedRef = useScriptRef();\r\n    const theme = useTheme();\r\n\r\n    const [credentialValidation, setCredentialValidation] = useState({});\r\n    const [credentialValues, setCredentialValues] = useState({});\r\n    const [nodeCredentialName, setNodeCredentialName] = useState('');\r\n    const [credentialParams, setCredentialParams] = useState([]);\r\n    const [credentialOptions, setCredentialOptions] = useState([]);\r\n    const [oAuth2RedirectURL, setOAuth2RedirectURL] = useState('');\r\n\r\n    const getCredentialParamsApi = useApi(credentialApi.getCredentialParams);\r\n    const getRegisteredCredentialsApi = useApi(credentialApi.getCredentials);\r\n    const getSpecificCredentialApi = useApi(credentialApi.getSpecificCredential);\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const getCredentialRequestBody = (values) => {\r\n        if (credentialParams.length === 0) throw new Error('Credential params empty');\r\n\r\n        const credentialData = {};\r\n        for (let i = 0; i < credentialParams.length; i += 1) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in values) credentialData[credParamName] = values[credParamName];\r\n        }\r\n        delete credentialData.name;\r\n\r\n        const credBody = {\r\n            name: values.name,\r\n            nodeCredentialName: values.credentialMethod,\r\n            credentialData\r\n        };\r\n\r\n        return credBody;\r\n    };\r\n\r\n    const updateYupValidation = (inputName, validationKey) => {\r\n        const updateValidation = {\r\n            ...credentialValidation,\r\n            [inputName]: Yup.object({ [validationKey]: Yup.string().required(`${inputName} is required`) })\r\n        };\r\n        setCredentialValidation(updateValidation);\r\n    };\r\n\r\n    const clearCredentialParams = () => {\r\n        const updateParams = initialParams.filter((item) => credentialParams.every((paramItem) => item.name !== paramItem.name));\r\n        setCredentialParams([]);\r\n        setOAuth2RedirectURL('');\r\n\r\n        paramsChanged(updateParams, paramsType);\r\n    };\r\n\r\n    const clearCredentialParamsValues = (value) => {\r\n        let updateValues = JSON.parse(JSON.stringify(credentialValues));\r\n\r\n        for (let i = 0; i < credentialParams.length; i += 1) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in updateValues) delete updateValues[credParamName];\r\n        }\r\n        updateValues = {\r\n            ...updateValues,\r\n            registeredCredential: value\r\n        };\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const onDeleteCredential = async (credentialId) => {\r\n        const response = await credentialApi.deleteCredential(credentialId);\r\n        if (response.data) {\r\n            clearCredentialParams();\r\n            clearCredentialParamsValues('');\r\n        }\r\n    };\r\n\r\n    const openOAuth2PopUpWindow = (oAuth2PopupURL) => {\r\n        const windowWidth = 500;\r\n        const windowHeight = 400;\r\n        const left = window.screenX + (window.outerWidth - windowWidth) / 2;\r\n        const top = window.screenY + (window.outerHeight - windowHeight) / 2.5;\r\n        const title = `Connect Credential`;\r\n        const url = oAuth2PopupURL;\r\n        const popup = window.open(url, title, `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`);\r\n        return popup;\r\n    };\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => '';\r\n\r\n    // getRegisteredCredentialsApi successful\r\n    useEffect(() => {\r\n        if (getRegisteredCredentialsApi.data) {\r\n            const credentialOptions = [];\r\n            if (getRegisteredCredentialsApi.data.length) {\r\n                for (let i = 0; i < getRegisteredCredentialsApi.data.length; i += 1) {\r\n                    credentialOptions.push({\r\n                        _id: getRegisteredCredentialsApi.data[i]._id,\r\n                        name: getRegisteredCredentialsApi.data[i].name\r\n                    });\r\n                }\r\n            }\r\n            credentialOptions.push({\r\n                name: ADD_NEW_CREDENTIAL\r\n            });\r\n            setCredentialOptions(credentialOptions);\r\n            if (initialParams.find((prm) => prm.name === 'registeredCredential')) {\r\n                updateYupValidation('registeredCredential', 'name');\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getRegisteredCredentialsApi.data]);\r\n\r\n    // getCredentialParamsApi successful\r\n    useEffect(() => {\r\n        if (getCredentialParamsApi.data) {\r\n            const newCredentialParams = getCredentialParamsApi.data.credentials;\r\n\r\n            const credentialNameParam = {\r\n                label: 'Credential Name',\r\n                name: 'name',\r\n                type: 'string',\r\n                default: ''\r\n            };\r\n\r\n            newCredentialParams.unshift(credentialNameParam);\r\n\r\n            setCredentialParams(newCredentialParams);\r\n\r\n            const updateParams = initialParams;\r\n\r\n            for (let i = 0; i < newCredentialParams.length; i += 1) {\r\n                const credParamName = newCredentialParams[i].name;\r\n                if (initialParams.find((prm) => prm.name === credParamName) === undefined) {\r\n                    updateParams.push(newCredentialParams[i]);\r\n                }\r\n            }\r\n            paramsChanged(updateParams, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getCredentialParamsApi.data]);\r\n\r\n    // getSpecificCredentialApi successful\r\n    useEffect(() => {\r\n        if (getSpecificCredentialApi.data) {\r\n            const updateValues = {\r\n                ...credentialValues,\r\n                ...getSpecificCredentialApi.data.credentialData,\r\n                name: getSpecificCredentialApi.data.name\r\n            };\r\n            valueChanged(updateValues, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificCredentialApi.data]);\r\n\r\n    // Initialize values\r\n    useEffect(() => {\r\n        setCredentialValues(initialValues);\r\n        if (initialValues && initialValues.credentialMethod) {\r\n            getRegisteredCredentialsApi.request(initialValues.credentialMethod);\r\n            setNodeCredentialName(initialValues.credentialMethod);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [initialValues]);\r\n\r\n    // Initialize validation\r\n    useEffect(() => {\r\n        setCredentialValidation(initialValidation);\r\n    }, [initialValidation]);\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                <Formik\r\n                    enableReinitialize\r\n                    initialValues={credentialValues}\r\n                    validationSchema={Yup.object().shape(credentialValidation)}\r\n                    onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                        try {\r\n                            if (scriptedRef.current) {\r\n                                const isAddNewCredential =\r\n                                    values && values.registeredCredential && values.registeredCredential.name === ADD_NEW_CREDENTIAL;\r\n\r\n                                if (!isAddNewCredential && (credentialParams.length === 0 || !values.credentialMethod)) {\r\n                                    onSubmit(values.credentialMethod ? { ...values, submit: true } : { submit: true }, paramsType);\r\n                                    setStatus({ success: true });\r\n                                    setSubmitting(false);\r\n                                } else {\r\n                                    const body = getCredentialRequestBody(values);\r\n                                    let response;\r\n                                    if (isAddNewCredential) {\r\n                                        response = await credentialApi.createNewCredential(body);\r\n                                    } else {\r\n                                        response = await credentialApi.updateCredential(values.registeredCredential._id, body);\r\n                                    }\r\n                                    if (response.data) {\r\n                                        // Open oAuth2 window\r\n                                        if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                            const oAuth2PopupURL = await oauth2Api.geOAuth2PopupURL(response.data._id);\r\n                                            const popUpWindow = openOAuth2PopUpWindow(oAuth2PopupURL.data);\r\n\r\n                                            const oAuth2Completed = async (event) => {\r\n                                                if (event.data === 'success') {\r\n                                                    window.removeEventListener('message', oAuth2Completed, false);\r\n\r\n                                                    const submitValues = {\r\n                                                        credentialMethod: values.credentialMethod,\r\n                                                        registeredCredential: {\r\n                                                            _id: response.data._id,\r\n                                                            name: response.data.name\r\n                                                        },\r\n                                                        submit: true\r\n                                                    };\r\n                                                    clearCredentialParams();\r\n                                                    onSubmit(submitValues, paramsType);\r\n                                                    setStatus({ success: true });\r\n                                                    setSubmitting(false);\r\n\r\n                                                    if (popUpWindow) {\r\n                                                        popUpWindow.close();\r\n                                                    }\r\n                                                }\r\n                                            };\r\n                                            window.addEventListener('message', oAuth2Completed, false);\r\n                                            return;\r\n                                        }\r\n\r\n                                        const submitValues = {\r\n                                            credentialMethod: values.credentialMethod,\r\n                                            registeredCredential: {\r\n                                                _id: response.data._id,\r\n                                                name: response.data.name\r\n                                            },\r\n                                            submit: true\r\n                                        };\r\n                                        clearCredentialParams();\r\n                                        onSubmit(submitValues, paramsType);\r\n                                        setStatus({ success: true });\r\n                                        setSubmitting(false);\r\n                                    } else {\r\n                                        throw new Error(response);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } catch (err) {\r\n                            console.error(err);\r\n                            if (scriptedRef.current) {\r\n                                setStatus({ success: false });\r\n                                setErrors({ submit: err.message });\r\n                                setSubmitting(false);\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                        <form noValidate onSubmit={handleSubmit} {...others}>\r\n                            {initialParams.map((input) => {\r\n                                if (input.type === 'options') {\r\n                                    const inputName = input.name;\r\n                                    const availableOptions = input.options || [];\r\n\r\n                                    return (\r\n                                        <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                            <Stack direction=\"row\">\r\n                                                <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                {input.description && (\r\n                                                    <Tooltip title={input.description} placement=\"right\">\r\n                                                        <IconButton>\r\n                                                            <Info style={{ height: 18, width: 18 }} />\r\n                                                        </IconButton>\r\n                                                    </Tooltip>\r\n                                                )}\r\n                                            </Stack>\r\n                                            <Autocomplete\r\n                                                id={inputName}\r\n                                                freeSolo\r\n                                                options={availableOptions}\r\n                                                value={findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()}\r\n                                                onChange={(e, selection) => {\r\n                                                    const value = selection ? selection.name : '';\r\n                                                    setFieldValue(inputName, value);\r\n                                                    const overwriteValues = {\r\n                                                        [inputName]: value\r\n                                                    };\r\n                                                    onChanged(overwriteValues);\r\n                                                    clearCredentialParams();\r\n                                                    if (selection) {\r\n                                                        getRegisteredCredentialsApi.request(value);\r\n                                                        setNodeCredentialName(value);\r\n                                                    } else {\r\n                                                        setCredentialOptions([]);\r\n                                                    }\r\n                                                }}\r\n                                                onBlur={handleBlur}\r\n                                                PopperComponent={StyledPopper}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField {...params} value={values[inputName]} error={Boolean(errors[inputName])} />\r\n                                                )}\r\n                                                renderOption={(props, option) => (\r\n                                                    <Box component=\"li\" {...props}>\r\n                                                        <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                            <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                                {option.label}\r\n                                                            </Typography>\r\n                                                            {option.description && (\r\n                                                                <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                            )}\r\n                                                        </div>\r\n                                                    </Box>\r\n                                                )}\r\n                                            />\r\n                                            {errors[inputName] && (\r\n                                                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                    *{errors[inputName]}\r\n                                                </span>\r\n                                            )}\r\n                                        </FormControl>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })}\r\n\r\n                            {initialParams.find((prm) => prm.name === 'registeredCredential') && (\r\n                                <FormControl fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">Registered Credential</Typography>\r\n                                        <Tooltip title=\"Select previously registered credential OR add new credential\" placement=\"right\">\r\n                                            <IconButton>\r\n                                                <Info style={{ height: 18, width: 18 }} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id=\"registered-credential\"\r\n                                        freeSolo\r\n                                        options={credentialOptions}\r\n                                        value={values.registeredCredential && values.credentialMethod ? values.registeredCredential : ' '}\r\n                                        getOptionLabel={(option) => option.name || ' '}\r\n                                        onChange={async (e, selectedCredential) => {\r\n                                            setFieldValue(\r\n                                                'registeredCredential',\r\n                                                selectedCredential !== null ? selectedCredential : initialValues.registeredCredential\r\n                                            );\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                registeredCredential: selectedCredential\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                            if (selectedCredential) {\r\n                                                if (selectedCredential.name !== ADD_NEW_CREDENTIAL) {\r\n                                                    getSpecificCredentialApi.request(selectedCredential._id);\r\n                                                } else {\r\n                                                    clearCredentialParamsValues(selectedCredential);\r\n                                                }\r\n                                                getCredentialParamsApi.request(nodeCredentialName);\r\n                                                if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                                    const redirectURLResp = await oauth2Api.geOAuth2RedirectURL();\r\n                                                    if (redirectURLResp.data) setOAuth2RedirectURL(redirectURLResp.data);\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                        onInputChange={(e, value) => {\r\n                                            if (!value) {\r\n                                                clearCredentialParams();\r\n                                                clearCredentialParamsValues('');\r\n                                            }\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                value={values.registeredCredential}\r\n                                                error={Boolean(errors.registeredCredential)}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                    <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                        {option.name}\r\n                                                    </Typography>\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors.registeredCredential && (\r\n                                        <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                            *Registered Credential is required\r\n                                        </span>\r\n                                    )}\r\n                                </FormControl>\r\n                            )}\r\n\r\n                            {values && values.registeredCredential && values.registeredCredential._id && (\r\n                                <Button\r\n                                    sx={{ mb: 2 }}\r\n                                    size=\"small\"\r\n                                    variant=\"outlined\"\r\n                                    startIcon={<IconTrash size={15} />}\r\n                                    onClick={() => onDeleteCredential(values.registeredCredential._id)}\r\n                                >\r\n                                    Delete Credential\r\n                                </Button>\r\n                            )}\r\n\r\n                            {oAuth2RedirectURL && (\r\n                                <div>\r\n                                    <Typography variant=\"overline\">OAuth2 Redirect URL</Typography>\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography\r\n                                            sx={{\r\n                                                p: 1,\r\n                                                borderRadius: 10,\r\n                                                backgroundColor: theme.palette.primary.light,\r\n                                                width: 'max-content',\r\n                                                height: 'max-content'\r\n                                            }}\r\n                                            variant=\"h5\"\r\n                                        >\r\n                                            {oAuth2RedirectURL}\r\n                                        </Typography>\r\n                                        <IconButton\r\n                                            title=\"Copy URL\"\r\n                                            color=\"primary\"\r\n                                            onClick={() => navigator.clipboard.writeText(oAuth2RedirectURL)}\r\n                                        >\r\n                                            <IconCopy />\r\n                                        </IconButton>\r\n                                    </Stack>\r\n                                </div>\r\n                            )}\r\n\r\n                            {values.credentialMethod &&\r\n                                credentialParams.map((input) => {\r\n                                    if (input.type === 'json') {\r\n                                        const inputName = input.name;\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction=\"row\">\r\n                                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                    {input.description && (\r\n                                                        <Tooltip title={input.description} placement=\"right\">\r\n                                                            <IconButton>\r\n                                                                <Info style={{ height: 18, width: 18 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                </Stack>\r\n                                                <PerfectScrollbar\r\n                                                    style={{\r\n                                                        border: '1px solid',\r\n                                                        borderColor: theme.palette.grey['500'],\r\n                                                        borderRadius: '12px',\r\n                                                        height: '200px',\r\n                                                        maxHeight: '200px',\r\n                                                        overflowX: 'hidden',\r\n                                                        backgroundColor: 'white'\r\n                                                    }}\r\n                                                    onScroll={(e) => e.stopPropagation()}\r\n                                                >\r\n                                                    <Editor\r\n                                                        placeholder={input.placeholder}\r\n                                                        value={values[inputName] || ''}\r\n                                                        onBlur={(e) => {\r\n                                                            const overwriteValues = {\r\n                                                                ...values,\r\n                                                                [inputName]: e.target.value\r\n                                                            };\r\n                                                            onChanged(overwriteValues);\r\n                                                        }}\r\n                                                        onValueChange={(code) => {\r\n                                                            setFieldValue(inputName, code);\r\n                                                        }}\r\n                                                        highlight={(code) => highlight(code, languages.json)}\r\n                                                        padding={10}\r\n                                                        style={{\r\n                                                            fontSize: '0.875rem',\r\n                                                            minHeight: '200px',\r\n                                                            width: '100%'\r\n                                                        }}\r\n                                                        textareaClassName=\"editor__textarea\"\r\n                                                    />\r\n                                                </PerfectScrollbar>\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        );\r\n                                    }\r\n\r\n                                    if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n                                        const inputName = input.name;\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction=\"row\">\r\n                                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                    {input.description && (\r\n                                                        <Tooltip title={input.description} placement=\"right\">\r\n                                                            <IconButton>\r\n                                                                <Info style={{ height: 18, width: 18 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                </Stack>\r\n                                                <OutlinedInput\r\n                                                    id={inputName}\r\n                                                    type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                                    value={values[inputName] || ''}\r\n                                                    placeholder={input.placeholder}\r\n                                                    name={inputName}\r\n                                                    onBlur={(e) => {\r\n                                                        handleBlur(e);\r\n                                                        onChanged(values);\r\n                                                    }}\r\n                                                    onChange={handleChange}\r\n                                                />\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        );\r\n                                    }\r\n\r\n                                    if (input.type === 'boolean') {\r\n                                        const inputName = input.name;\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }} error={Boolean(errors[inputName])}>\r\n                                                <Stack direction=\"row\">\r\n                                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                    {input.description && (\r\n                                                        <Tooltip title={input.description} placement=\"right\">\r\n                                                            <IconButton>\r\n                                                                <Info style={{ height: 18, width: 18 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                </Stack>\r\n                                                <Switch\r\n                                                    checked={!!values[inputName]}\r\n                                                    onChange={(event) => {\r\n                                                        setFieldValue(inputName, event.target.checked);\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: event.target.checked\r\n                                                        };\r\n                                                        onChanged(overwriteValues);\r\n                                                    }}\r\n                                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                                />\r\n                                            </FormControl>\r\n                                        );\r\n                                    }\r\n\r\n                                    if (input.type === 'options') {\r\n                                        const inputName = input.name;\r\n                                        const availableOptions = input.options || [];\r\n\r\n                                        return (\r\n                                            <FormControl key={inputName} fullWidth sx={{ mb: 1, mt: 1 }}>\r\n                                                <Stack direction=\"row\">\r\n                                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                                    {input.description && (\r\n                                                        <Tooltip title={input.description} placement=\"right\">\r\n                                                            <IconButton>\r\n                                                                <Info style={{ height: 18, width: 18 }} />\r\n                                                            </IconButton>\r\n                                                        </Tooltip>\r\n                                                    )}\r\n                                                </Stack>\r\n                                                <Autocomplete\r\n                                                    id={inputName}\r\n                                                    freeSolo\r\n                                                    options={availableOptions}\r\n                                                    value={\r\n                                                        findMatchingOptions(availableOptions, values[inputName]) || getDefaultOptionValue()\r\n                                                    }\r\n                                                    onChange={(e, selection) => {\r\n                                                        const value = selection ? selection.name : '';\r\n                                                        setFieldValue(inputName, value);\r\n                                                        const overwriteValues = {\r\n                                                            ...values,\r\n                                                            [inputName]: value\r\n                                                        };\r\n                                                        onChanged(overwriteValues);\r\n                                                    }}\r\n                                                    onBlur={handleBlur}\r\n                                                    PopperComponent={StyledPopper}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            value={values[inputName]}\r\n                                                            error={Boolean(errors[inputName])}\r\n                                                        />\r\n                                                    )}\r\n                                                    renderOption={(props, option) => (\r\n                                                        <Box component=\"li\" {...props}>\r\n                                                            <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                                                                <Typography sx={{ p: 1 }} variant=\"h5\">\r\n                                                                    {option.label}\r\n                                                                </Typography>\r\n                                                                {option.description && (\r\n                                                                    <Typography sx={{ p: 1 }}>{option.description}</Typography>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </Box>\r\n                                                    )}\r\n                                                />\r\n                                                {errors[inputName] && (\r\n                                                    <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>\r\n                                                        *{errors[inputName]}\r\n                                                    </span>\r\n                                                )}\r\n                                            </FormControl>\r\n                                        );\r\n                                    }\r\n                                    return null;\r\n                                })}\r\n\r\n                            <Box sx={{ mt: 2 }}>\r\n                                <AnimateButton>\r\n                                    <Button\r\n                                        disableElevation\r\n                                        disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                    >\r\n                                        {values &&\r\n                                        values.registeredCredential &&\r\n                                        (values.registeredCredential.name === ADD_NEW_CREDENTIAL || credentialParams.length)\r\n                                            ? 'Save and Continue'\r\n                                            : 'Continue'}\r\n                                    </Button>\r\n                                </AnimateButton>\r\n                            </Box>\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nCredentialInput.propTypes = {\r\n    initialParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object,\r\n    initialValidation: PropTypes.object,\r\n    valueChanged: PropTypes.func,\r\n    paramsChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func\r\n};\r\n\r\nexport default CredentialInput;\r\n","import client from './client';\r\n\r\nconst getAllContracts = () => client.get('/contracts');\r\n\r\nconst getSpecificContract = (id) => client.get(`/contracts/${id}`);\r\n\r\nconst createNewContract = (body) => client.post(`/contracts`, body); // body: IContract\r\n\r\nconst updateContract = (id, body) => client.put(`/contracts/${id}`, body); // body: IContract\r\n\r\nconst getContractABI = (body) => client.post(`/contracts/getabi`, body); //body: IContractRequestBody\r\n\r\nconst deleteContract = (id) => client.delete(`/contracts/${id}`);\r\n\r\nexport default {\r\n    getAllContracts,\r\n    getSpecificContract,\r\n    createNewContract,\r\n    updateContract,\r\n    getContractABI,\r\n    deleteContract\r\n};\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions';\r\n\r\nimport {\r\n    Avatar,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Divider,\r\n    Chip,\r\n    Typography,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Stack,\r\n    IconButton\r\n} from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport * as Yup from 'yup';\r\nimport lodash from 'lodash';\r\nimport { ethers } from 'ethers';\r\n\r\n// project imports\r\nimport InputParameters from 'views/inputs/InputParameters';\r\nimport CredentialInput from 'views/inputs/CredentialInput';\r\nimport EditVariableDialog from 'ui-component/dialog/EditVariableDialog';\r\n\r\n// Icons\r\nimport { IconExclamationMark, IconCheck, IconX, IconArrowUpRightCircle, IconCopy } from '@tabler/icons';\r\n\r\n// API\r\nimport contractsApi from 'api/contracts';\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi';\r\n\r\n// Const\r\nimport { contract_details, networks, networkExplorers } from 'store/constant';\r\n\r\n// utils\r\nimport { handleCredentialParams, initializeNodeData } from 'utils/genericHelper';\r\nimport useNotifier from 'utils/useNotifier';\r\n\r\nconst ContractDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier();\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args));\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args));\r\n\r\n    const [contractDetails, setContractDetails] = useState(contract_details);\r\n    const [contractData, setContractData] = useState({});\r\n    const [contractParams, setContractParams] = useState([]);\r\n    const [contractValues, setContractValues] = useState({});\r\n    const [contractValidation, setContractValidation] = useState({});\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [invalidAddress, setInvalidAddress] = useState(false);\r\n    const [invalidABI, setInvalidABI] = useState('');\r\n    const [isReadyToAdd, setIsReadyToAdd] = useState(false);\r\n    const [isEditVariableDialogOpen, setEditVariableDialog] = useState(false);\r\n    const [editVariableDialogProps, setEditVariableDialogProps] = useState({});\r\n    const contractParamsType = ['networks', 'credentials', 'contractInfo'];\r\n\r\n    const getSpecificContractApi = useApi(contractsApi.getSpecificContract);\r\n\r\n    const handleAccordionChange = (expanded) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? expanded : false);\r\n    };\r\n\r\n    const reset = () => {\r\n        setContractData({});\r\n        setContractParams([]);\r\n        setContractValues({});\r\n        setContractValidation({});\r\n        setInvalidAddress(false);\r\n        setInvalidABI('');\r\n        setIsReadyToAdd(false);\r\n        setExpanded(false);\r\n    };\r\n\r\n    const checkIsReadyToAdd = () => {\r\n        for (let i = 0; i < contractParamsType.length; i += 1) {\r\n            const paramType = contractParamsType[i];\r\n            if (!contractData[paramType] || !contractData[paramType].submit) {\r\n                setIsReadyToAdd(false);\r\n                return;\r\n            }\r\n        }\r\n        setIsReadyToAdd(true);\r\n    };\r\n\r\n    const onEditVariableDialogOpen = (input, values, arrayItemBody) => {\r\n        const dialogProps = {\r\n            input,\r\n            values,\r\n            arrayItemBody,\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            hideVariables: true\r\n        };\r\n\r\n        setEditVariableDialogProps(dialogProps);\r\n        setEditVariableDialog(true);\r\n    };\r\n\r\n    const addNewContract = async () => {\r\n        const createNewContractBody = {\r\n            network: contractData.networks.network,\r\n            name: contractData.contractInfo.name,\r\n            abi: contractData.contractInfo.abi,\r\n            address: contractData.contractInfo.address,\r\n            providerCredential: JSON.stringify(contractData.credentials)\r\n        };\r\n        const createResp = await contractsApi.createNewContract(createNewContractBody);\r\n        if (createResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'New contract added',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to add new contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    const saveContract = async () => {\r\n        const saveContractBody = {\r\n            network: contractData.networks.network,\r\n            name: contractData.contractInfo.name,\r\n            abi: contractData.contractInfo.abi,\r\n            address: contractData.contractInfo.address,\r\n            providerCredential: JSON.stringify(contractData.credentials)\r\n        };\r\n        const saveResp = await contractsApi.updateContract(dialogProps.id, saveContractBody);\r\n        if (saveResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Contract saved',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to save contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    const deleteContract = async () => {\r\n        const deleteResp = await contractsApi.deleteContract(dialogProps.id);\r\n        if (deleteResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Contract deleted',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to delete contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            });\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    const fetchABI = async (formValues, paramsType) => {\r\n        const selectedNetwork = networks.find((network) => network.name === contractData.networks.network);\r\n        if (!selectedNetwork) return;\r\n\r\n        const body = {\r\n            ...contractData,\r\n            networks: {\r\n                ...contractData.networks,\r\n                uri: selectedNetwork.uri || ''\r\n            }\r\n        };\r\n\r\n        const resp = await contractsApi.getContractABI(body);\r\n        if (!resp.data) {\r\n            const updateContractData = {\r\n                ...contractData,\r\n                [paramsType]: { ...formValues, submit: null }\r\n            };\r\n            setContractData(updateContractData);\r\n            setInvalidABI('Unable to fetch ABI');\r\n            return;\r\n        } else {\r\n            const status = resp.data.status;\r\n            if (status === '0') {\r\n                setInvalidABI('Unable to fetch ABI');\r\n                return;\r\n            }\r\n            const abi = resp.data.result;\r\n            setInvalidABI('');\r\n            return abi === 'Invalid API Key' ? undefined : abi;\r\n        }\r\n    };\r\n\r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateContractData = {\r\n            ...contractData,\r\n            [paramsType]: formValues\r\n        };\r\n\r\n        const index = contractParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== contractParamsType.length - 1) {\r\n            for (let i = index + 1; i < contractParamsType.length; i += 1) {\r\n                const paramType = contractParamsType[i];\r\n                if (updateContractData[paramType]) updateContractData[paramType].submit = null;\r\n            }\r\n        }\r\n\r\n        setContractData(updateContractData);\r\n    };\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n        // Because formParams options can be changed due to show hide options,\r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod');\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod');\r\n\r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = contractDetails[paramsType].find((param) => param.name === 'credentialMethod');\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options;\r\n            }\r\n        }\r\n\r\n        const updateContractDetails = {\r\n            ...contractDetails,\r\n            [paramsType]: formParams\r\n        };\r\n        setContractDetails(updateContractDetails);\r\n    };\r\n\r\n    const onSubmit = async (formValues, paramsType) => {\r\n        if (formValues.address) {\r\n            if (ethers.utils.isAddress(formValues.address)) {\r\n                setInvalidAddress(false);\r\n                const abi = await fetchABI(formValues, paramsType);\r\n                if (abi) {\r\n                    const updateFormValues = {\r\n                        submit: true,\r\n                        ...formValues\r\n                    };\r\n                    updateFormValues.abi = abi;\r\n                    const updateContractData = {\r\n                        ...contractData,\r\n                        [paramsType]: updateFormValues\r\n                    };\r\n                    setContractData(updateContractData);\r\n                } else {\r\n                    const updateContractData = {\r\n                        ...contractData,\r\n                        [paramsType]: { ...formValues, submit: null }\r\n                    };\r\n                    setContractData(updateContractData);\r\n                }\r\n            } else {\r\n                setInvalidAddress(true);\r\n                const updateContractData = {\r\n                    ...contractData,\r\n                    [paramsType]: { ...formValues, submit: null }\r\n                };\r\n                setContractData(updateContractData);\r\n            }\r\n        } else {\r\n            const updateContractData = {\r\n                ...contractData,\r\n                [paramsType]: formValues\r\n            };\r\n            setContractData(updateContractData);\r\n        }\r\n\r\n        const index = contractParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== contractParamsType.length - 1) {\r\n            setExpanded(contractParamsType[index + 1]);\r\n        }\r\n    };\r\n\r\n    const showHideOptions = (displayType, options) => {\r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n\r\n        for (let i = 0; i < returnOptions.length; i += 1) {\r\n            const option = returnOptions[i];\r\n            const displayOptions = option[displayType];\r\n\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n                    const comparisonValue = displayOptions[path];\r\n                    const groundValue = lodash.get(contractData, path, '');\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    };\r\n\r\n    const displayOptions = (params) => {\r\n        let clonedParams = params;\r\n\r\n        for (let i = 0; i < clonedParams.length; i += 1) {\r\n            const input = clonedParams[i];\r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', input.options);\r\n                input.options = showHideOptions('hide', input.options);\r\n            }\r\n        }\r\n\r\n        return clonedParams;\r\n    };\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {};\r\n        for (let i = 0; i < params.length; i += 1) {\r\n            const input = params[i];\r\n            if (input.type === 'string' && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if (input.type === 'number' && !input.optional) {\r\n                validationSchema[input.name] = Yup.number().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if ((input.type === 'options' || input.type === 'asyncOptions') && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            }\r\n        }\r\n        return validationSchema;\r\n    };\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n        const initialValues = {};\r\n        let contractParams = displayOptions(lodash.cloneDeep(contractDetails[paramsType] || []));\r\n        contractParams = handleCredentialParams(contractParams, paramsType, contractDetails[paramsType], contractData);\r\n\r\n        for (let i = 0; i < contractParams.length; i += 1) {\r\n            const input = contractParams[i];\r\n\r\n            // Load from contractData values\r\n            if (paramsType in contractData && input.name in contractData[paramsType]) {\r\n                initialValues[input.name] = contractData[paramsType][input.name];\r\n\r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name]);\r\n                    if (!optionVal) delete initialValues[input.name];\r\n                }\r\n            } else {\r\n                // Load from contractParams default values\r\n                initialValues[input.name] = input.default || '';\r\n            }\r\n        }\r\n\r\n        initialValues.submit = null;\r\n\r\n        setContractValues(initialValues);\r\n        setContractValidation(setYupValidation(contractParams));\r\n        setContractParams(contractParams);\r\n    };\r\n\r\n    const transformContractResponse = (contractResponseData, contractDetails) => {\r\n        const contractData = {\r\n            networks: {},\r\n            credentials: {},\r\n            contractInfo: {}\r\n        };\r\n\r\n        if (contractResponseData) {\r\n            contractData.networks = { network: contractResponseData.network, submit: true };\r\n            contractData.contractInfo = { ...contractResponseData, submit: true };\r\n            if (contractResponseData.providerCredential) {\r\n                try {\r\n                    contractData.credentials = JSON.parse(contractResponseData.providerCredential);\r\n                } catch (e) {\r\n                    console.error(e);\r\n                }\r\n            }\r\n        } else {\r\n            contractData.networks = initializeNodeData(contractDetails.networks);\r\n            contractData.credentials = initializeNodeData(contractDetails.credentials);\r\n            contractData.contractInfo = initializeNodeData(contractDetails.contractInfo);\r\n        }\r\n        return contractData;\r\n    };\r\n\r\n    // Get Contract Details from API\r\n    useEffect(() => {\r\n        if (getSpecificContractApi.data) {\r\n            const contractResponseData = getSpecificContractApi.data;\r\n            setContractData(transformContractResponse(contractResponseData));\r\n            setExpanded('networks');\r\n        }\r\n    }, [getSpecificContractApi.data]);\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (show && dialogProps.type === 'ADD') {\r\n            reset();\r\n            setContractData(transformContractResponse(null, contractDetails));\r\n            setExpanded('networks');\r\n        } else if (show && dialogProps.type === 'EDIT' && dialogProps.id) {\r\n            reset();\r\n            getSpecificContractApi.request(dialogProps.id);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show, dialogProps]);\r\n\r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (contractDetails && contractData && expanded) {\r\n            initializeFormValuesAndParams(expanded);\r\n            checkIsReadyToAdd();\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [contractDetails, contractData, expanded]);\r\n\r\n    const component = show ? (\r\n        <Dialog open={show} onClose={onCancel} aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {dialogProps.type === 'ADD' && (\r\n                    <Chip\r\n                        sx={{ mb: 1 }}\r\n                        icon={<IconExclamationMark />}\r\n                        label=\"You can only add contract which has been publicly verified\"\r\n                        color=\"warning\"\r\n                    />\r\n                )}\r\n\r\n                {contractData && contractData.contractInfo && contractData.contractInfo.address && dialogProps.type === 'EDIT' && (\r\n                    <Box sx={{ p: 2 }}>\r\n                        <Typography sx={{ p: 1 }} variant=\"overline\">\r\n                            ADDRESS\r\n                        </Typography>\r\n                        <Stack direction=\"row\" sx={{ p: 1 }}>\r\n                            <Typography\r\n                                sx={{\r\n                                    p: 1,\r\n                                    borderRadius: 10,\r\n                                    backgroundColor: theme.palette.primary.light,\r\n                                    width: 'max-content',\r\n                                    height: 'max-content'\r\n                                }}\r\n                                variant=\"h5\"\r\n                            >\r\n                                {contractData.contractInfo.address}\r\n                            </Typography>\r\n                            <IconButton\r\n                                title=\"Copy Address\"\r\n                                color=\"primary\"\r\n                                onClick={() => navigator.clipboard.writeText(contractData.contractInfo.address)}\r\n                            >\r\n                                <IconCopy />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                title=\"Open in Block Explorer\"\r\n                                color=\"primary\"\r\n                                onClick={() =>\r\n                                    window.open(\r\n                                        `${networkExplorers[contractData.networks.network]}/address/${contractData.contractInfo.address}`,\r\n                                        '_blank'\r\n                                    )\r\n                                }\r\n                            >\r\n                                <IconArrowUpRightCircle />\r\n                            </IconButton>\r\n                        </Stack>\r\n                    </Box>\r\n                )}\r\n\r\n                {/* networks */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"networks-content\" id=\"networks-header\">\r\n                            <Typography variant=\"h4\">Networks</Typography>\r\n                            {contractData && contractData.networks && contractData.networks.submit && (\r\n                                <Avatar\r\n                                    variant=\"rounded\"\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters\r\n                                paramsType=\"networks\"\r\n                                params={contractParams}\r\n                                initialValues={contractValues}\r\n                                nodeParamsValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* credentials */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'credentials'} onChange={handleAccordionChange('credentials')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"credentials-content\" id=\"credentials-header\">\r\n                            <Typography variant=\"h4\">Credentials</Typography>\r\n                            {contractData && contractData.credentials && contractData.credentials.submit && (\r\n                                <Avatar\r\n                                    variant=\"rounded\"\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <CredentialInput\r\n                                paramsType=\"credentials\"\r\n                                initialParams={contractParams}\r\n                                initialValues={contractValues}\r\n                                initialValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                paramsChanged={paramsChanged}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* contractInfo */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'contractInfo'} onChange={handleAccordionChange('contractInfo')}>\r\n                        <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"contractInfo-content\" id=\"contractInfo-header\">\r\n                            <Typography variant=\"h4\">Contract Details</Typography>\r\n                            {contractData && contractData.contractInfo && contractData.contractInfo.submit && (\r\n                                <Avatar\r\n                                    variant=\"rounded\"\r\n                                    sx={{\r\n                                        ...theme.typography.smallAvatar,\r\n                                        borderRadius: '50%',\r\n                                        background: theme.palette.success.dark,\r\n                                        color: 'white',\r\n                                        ml: 2\r\n                                    }}\r\n                                >\r\n                                    <IconCheck />\r\n                                </Avatar>\r\n                            )}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters\r\n                                paramsType=\"contractInfo\"\r\n                                params={contractParams}\r\n                                initialValues={contractValues}\r\n                                nodeParamsValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                                onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                            />\r\n                            {invalidAddress && (\r\n                                <Chip sx={{ mt: 2, mb: 1 }} icon={<IconX />} label=\"Invalid Contract Address\" color=\"error\" />\r\n                            )}\r\n                            {invalidABI && (\r\n                                <Chip sx={{ mt: 2, mb: 1, ml: invalidAddress ? 2 : 0 }} icon={<IconX />} label={invalidABI} color=\"error\" />\r\n                            )}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n                <EditVariableDialog\r\n                    key={JSON.stringify(editVariableDialogProps)}\r\n                    show={isEditVariableDialogOpen}\r\n                    dialogProps={editVariableDialogProps}\r\n                    onCancel={() => setEditVariableDialog(false)}\r\n                    onConfirm={(updateValues) => {\r\n                        valueChanged(updateValues, expanded);\r\n                        setEditVariableDialog(false);\r\n                    }}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                {dialogProps.type === 'EDIT' && (\r\n                    <Button variant=\"contained\" color=\"error\" onClick={() => deleteContract()}>\r\n                        Delete\r\n                    </Button>\r\n                )}\r\n                <Button\r\n                    variant=\"contained\"\r\n                    disabled={!isReadyToAdd}\r\n                    onClick={() => (dialogProps.type === 'ADD' ? addNewContract() : saveContract())}\r\n                >\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n};\r\n\r\nContractDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n};\r\n\r\nexport default ContractDialog;\r\n","export default __webpack_public_path__ + \"static/media/contract_empty.2c9c811e.svg\";","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ItemCard from 'ui-component/cards/ItemCard';\r\nimport ContractDialog from './ContractDialog';\r\nimport ContractEmptySVG from 'assets/images/contract_empty.svg';\r\n\r\n// const\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// API\r\nimport contractsApi from 'api/contracts';\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi';\r\n\r\n// ==============================|| CONTRACTS ||============================== //\r\n\r\nconst Contracts = () => {\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [showDialog, setShowDialog] = useState(false);\r\n    const [dialogProps, setDialogProps] = useState({});\r\n\r\n    const getAllContractsApi = useApi(contractsApi.getAllContracts);\r\n\r\n    const addNew = () => {\r\n        const dialogProp = {\r\n            title: 'Add New Contract',\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add'\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const edit = (id) => {\r\n        const dialogProp = {\r\n            title: 'Edit Contract',\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            id\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const onConfirm = () => {\r\n        setShowDialog(false);\r\n        getAllContractsApi.request();\r\n    };\r\n\r\n    useEffect(() => {\r\n        getAllContractsApi.request();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllContractsApi.loading);\r\n    }, [getAllContractsApi.loading]);\r\n\r\n    return (\r\n        <>\r\n            <MainCard>\r\n                <Stack flexDirection=\"row\">\r\n                    <h1>Contracts</h1>\r\n                    <Grid sx={{ mb: 1.25 }} container direction=\"row\">\r\n                        <Box sx={{ flexGrow: 1 }} />\r\n                        <Grid item>\r\n                            <Button variant=\"contained\" sx={{ color: 'white' }} onClick={addNew}>\r\n                                Add New\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Stack>\r\n                <Grid container spacing={gridSpacing}>\r\n                    {!isLoading &&\r\n                        getAllContractsApi.data &&\r\n                        getAllContractsApi.data.map((data, index) => (\r\n                            <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                                <ItemCard isLoading={isLoading} onClick={() => edit(data._id)} data={data} />\r\n                            </Grid>\r\n                        ))}\r\n                </Grid>\r\n                {!isLoading && (!getAllContractsApi.data || getAllContractsApi.data.length === 0) && (\r\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection=\"column\">\r\n                        <Box sx={{ p: 2, height: 'auto' }}>\r\n                            <img\r\n                                style={{ objectFit: 'cover', height: '30vh', width: 'auto' }}\r\n                                src={ContractEmptySVG}\r\n                                alt=\"ContractEmptySVG\"\r\n                            />\r\n                        </Box>\r\n                        <div>No Contracts Yet</div>\r\n                    </Stack>\r\n                )}\r\n            </MainCard>\r\n            <ContractDialog\r\n                show={showDialog}\r\n                dialogProps={dialogProps}\r\n                onCancel={() => setShowDialog(false)}\r\n                onConfirm={onConfirm}\r\n            ></ContractDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Contracts;\r\n"],"sourceRoot":""}