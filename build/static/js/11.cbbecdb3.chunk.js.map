{"version":3,"sources":["api/workflows.js","utils/usePrompt.js","views/canvas/CanvasNode.js","views/canvas/ButtonEdge.js","ui-component/extended/Transitions.js","ui-component/dialog/AttachmentDialog.js","ui-component/dialog/HTMLDialog.js","hooks/useConfirm.js","api/executions.js","views/executions/index.js","menu-items/settings.js","views/settings/index.js","ui-component/dialog/SaveWorkflowDialog.js","views/canvas/CanvasHeader.js","views/canvas/AddNodes.js","api/nodes.js","views/output/OutputResponses.js","views/canvas/VariableSelector.js","views/canvas/EditNodes.js","ui-component/dialog/ConfirmDialog.js","ui-component/dialog/TestWorkflowDialog.js","api/webhooks.js","views/canvas/index.js"],"names":["getAllWorkflows","client","get","getSpecificWorkflow","shortId","createNewWorkflow","body","post","updateWorkflow","put","deployWorkflow","deleteWorkflow","delete","testWorkflow","startingNodeId","useBlocker","blocker","when","useContext","NavigationContext","navigator","useEffect","unblock","block","tx","autoUnblockingTx","retry","CardWrapper","styled","MainCard","theme","backgroundColor","border","color","darkTextPrimary","width","height","padding","boxShadow","borderColor","palette","primary","main","handlerPosition","CanvasNode","data","useTheme","content","sx","selected","text","secondary","outputResponses","submit","Avatar","variant","typography","smallAvatar","borderRadius","background","success","dark","ml","position","top","right","needRetest","warning","Box","inputAnchors","map","inputAnchor","index","type","Position","Top","id","style","left","length","display","flexDirection","alignItems","item","marginRight","commonAvatar","largeAvatar","cursor","src","baseURL","name","alt","Typography","fontSize","fontWeight","label","outputAnchors","outputAnchor","Bottom","bottom","ButtonEdge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","markerEnd","edgePath","getBezierPath","getEdgeCenter","edgeCenterX","edgeCenterY","dispatch","useDispatch","className","d","x","y","labelStyle","fill","labelBgStyle","labelBgPadding","labelBgBorderRadius","foreignObjectSize","requiredExtensions","onClick","event","evt","stopPropagation","REMOVE_EDGE","edgeId","onEdgeClick","Transitions","forwardRef","ref","children","direction","others","positionSX","transformOrigin","Grow","Collapse","Fade","timeout","appear","enter","exit","Slide","Zoom","defaultProps","TabPanel","props","value","other","role","hidden","p","AttachmentDialog","show","dialogProps","onCancel","portalElement","document","getElementById","useState","setValue","formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","component","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","title","DialogContent","Tabs","onChange","newValue","executionData","execObj","execObjIndex","Tab","attachments","attachment","attchIndex","marginBottom","justifyContent","filename","contentType","size","href","download","rel","target","borderStyle","minHeight","minWidth","createPortal","resolveCallback","HTMLDialog","html","overflow","dangerouslySetInnerHTML","__html","useConfirm","ConfirmContext","confirmState","closeConfirm","HIDE_CONFIRM","confirm","confirmPayload","SHOW_CONFIRM","payload","Promise","res","onConfirm","Executions","workflowShortId","execution","executionCount","isExecutionOpen","anchorEl","expanded","setExpanded","setOpen","showHTMLDialog","setShowHTMLDialog","HTMLDialogProps","setHTMLDialogProps","showAttachmentDialog","setShowAttachmentDialog","attachmentDialogProps","setAttachmentDialogProps","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","varPrevOpen","useRef","useNotifier","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","setChipBgColor","execState","light","error","grey","deleteExecution","e","executionShortId","description","confirmButtonName","cancelButtonName","executionsApi","workflowsApi","workflowResponse","SET_WORKFLOW","workflow","message","options","key","Date","getTime","random","action","Button","errorData","response","status","statusText","persist","current","Popper","placement","undefined","transition","disablePortal","popperOptions","modifiers","offset","zIndex","TransitionProps","in","Paper","elevation","shadow","shadows","Stack","maxHeight","overflowX","List","py","breakpoints","down","my","pl","exec","Accordion","isExpanded","AccordionSummary","expandIcon","mr","mb","state","Chip","moment","createdDate","format","IconButton","JSON","parse","execData","execDataIndex","AccordionDetails","nodeLabel","collapsed","enableClipboard","copyToClipboard","dialogProp","onExpandDialogClicked","mt","pb","ExpandDataDialog","icons","IconTrash","IconFileUpload","IconFileExport","settings","url","icon","Settings","isSettingsOpen","onSettingsItemClick","onUploadFile","settingsMenu","setSettingsMenu","filter","menu","items","NavItem","level","navType","SaveWorkflowDialog","workflowName","setWorkflowName","isReadyToSave","setIsReadyToSave","OutlinedInput","placeholder","DialogActions","disabled","CanvasHeader","handleSaveFlow","handleDeployWorkflow","handleStopWorkflow","handleDeleteWorkflow","handleLoadWorkflow","navigate","useNavigate","workflowNameRef","viewExecutionRef","settingsRef","isEditingWorkflowName","setEditingWorkflowName","setExecutionOpen","setSettingsOpen","workfowDialogOpen","setWorkfowDialogOpen","updateWorkflowApi","useApi","canvas","useSelector","ButtonBase","mediumAvatar","stroke","flexGrow","isDirty","orange","deployed","TextField","inputRef","defaultValue","updateBody","request","setting","flowData","dataStr","stringify","generateExportFlowData","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","console","file","AddNodes","nodesData","node","customization","searchValue","setSearchValue","nodes","setNodes","anchorRef","prevOpen","handleClose","contains","focus","Fab","ClickAwayListener","onClickAway","pr","setTimeout","returnData","nd","toLowerCase","includes","startAdornment","InputAdornment","inputProps","Divider","onDragStart","dataTransfer","setData","effectAllowed","draggable","ListItemButton","ListItem","ListItemAvatar","objectFit","ListItemText","OutputResponses","nodeId","nodeParamsType","nodeFlowData","edges","onSubmit","outputResponse","setOutputResponse","errorResponse","setErrorResponse","nodeName","setNodeName","nodeType","setNodeType","setNodeLabel","isTestNodeBtnDisabled","disableTestNodeBtn","testNodeLoading","setTestNodeLoading","testNodeApi","nodesApi","output","paramsTypes","paramType","checkIfTestNodeValid","selectedNode","find","testNodeData","errorMessage","loading","webhookEndpoint","spacing","startIcon","clipboard","writeText","window","respObj","respObjIndex","openAttachmentDialog","AnimateButton","disableElevation","alert","testNodeBody","socket","socketIOClient","on","clientId","disconnect","onTestNodeClick","CircularProgress","marginTop","marginLeft","VariableSelector","isVariableSelectorOpen","onVariableSelected","onClipboardCopy","namespaces","namespace","returnVariablePath","test","endsWith","substring","onCopyClick","EditNodes","onNodeLabelUpdate","onNodeValuesUpdate","setNodeFlowData","nodeDetails","setNodeDetails","nodeParams","setNodeParams","setNodeParamsType","nodeParamsInitialValues","setNodeParamsInitialValues","nodeParamsValidation","setNodeParamsValidation","setVariableSelectorOpen","variableBody","setVariableBody","availableNodesForVariable","setAvailableNodesForVariable","isEditVariableDialogOpen","setEditVariableDialog","editVariableDialogProps","setEditVariableDialogProps","ps","getSpecificNodeApi","scrollTop","curr","handleAccordionChange","paramsType","handleNodeLabelChange","saveNodeLabel","onEditVariableDialogOpen","input","values","arrayItemBody","variableNodesIds","getAvailableNodeIdsForVariable","nodesForVariable","push","setVariableSelectorState","variableSelectorState","paramsChanged","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","originalParam","updateNodeDetails","valueChanged","formValues","updateNodeFlowData","outputResponsesFlowData","indexOf","showHideParameters","displayType","toBeDeleteParams","displayOptions","Object","keys","forEach","path","comparisonValue","replace","groundValue","lodash","Array","isArray","RegExp","displayParameters","params","arrayIndex","arrayInitialValue","inputArray","j","array","arrayParams","hide","returnParams","prm","showHideOptions","returnOptions","toBeDeleteOptions","option","opt","clonedParams","initializeFormValuesAndParams","initialValues","reorganizedParams","cloneDeep","handleCredentialParams","default","newObj","validationSchema","inputOptional","optional","Yup","required","matches","numberOrExpressionRegex","setYupValidation","actions","networks","credentials","inputParameters","containerRef","el","pt","textAlign","InputParameters","CredentialInput","initialParams","initialValidation","newInput","textBeforeCursorPosition","textAfterCursorPosition","clonedNodeFlowData","set","EditVariableDialog","updateValues","ConfirmDialog","DialogContentText","TestWorkflowDialog","onItemClick","nodeTypes","customNode","edgeTypes","buttonedge","Canvas","URLpath","location","pathname","toString","split","startsWith","canvasDataStore","setCanvasDataStore","setWorkflow","isTestWorkflowDialogOpen","setTestWorkflowDialogOpen","testWorkflowDialogProps","setTestWorkflowDialogProps","isTestingWorkflow","setIsTestingWorkflow","useNodesState","onNodesChange","useEdgesState","setEdges","onEdgesChange","rfInstance","setRfInstance","setSelectedNode","reactFlowWrapper","getNodesApi","removeTestTriggersApi","deleteAllTestWebhooksApi","webhooksApi","createNewWorkflowApi","testWorkflowApi","getSpecificWorkflowApi","rfInstanceObject","toObject","newWorkflowBody","savedWorkflowResponse","REMOVE_DIRTY","deployedWorkflowResponse","halt","stoppedWorkflowResponse","onNodeDoubleClick","useCallback","clickedNode","nds","checkIfNodeLabelUnique","getNodes","setDirty","onDragOver","preventDefault","dropEffect","onDrop","reactFlowBounds","getBoundingClientRect","nodeData","getData","checkMultipleTriggers","generateWebhookEndpoint","project","clientX","clientY","newNodeId","getUniqueNodeId","newNode","addAnchors","concat","saveWorkflowSuccess","SET_DIRTY","initialFlow","history","replaceState","getEdges","edge","removeEdgeId","usePrompt","AppBar","enableColorOnDark","bgcolor","Toolbar","onNodeDragStop","onConnect","newEdge","source","sourceHandle","targetHandle","getEdgeLabelName","eds","addEdge","onInit","fitView","nodeStrokeColor","nodeColor","nodeBorderRadius","transform","gap","outputValues"],"mappings":"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","file":"static/js/11.cbbecdb3.chunk.js","sourcesContent":["import client from './client'\r\n\r\nconst getAllWorkflows = () => client.get('/workflows')\r\n\r\nconst getSpecificWorkflow = (shortId) => client.get(`/workflows/${shortId}`)\r\n\r\nconst createNewWorkflow = (body) => client.post(`/workflows`, body) //body: IWorkflow\r\n\r\nconst updateWorkflow = (shortId, body) => client.put(`/workflows/${shortId}`, body) //body: IWorkflow\r\n\r\nconst deployWorkflow = (shortId, body) => client.post(`/workflows/deploy/${shortId}`, body || {}) //body: { halt: boolean }\r\n\r\nconst testWorkflow = (startingNodeId, body) => client.post(`/workflows/test/${startingNodeId}`, body) //body: ITestWorkflowBody\r\n\r\nconst deleteWorkflow = (shortId) => client.delete(`/workflows/${shortId}`)\r\n\r\nexport default {\r\n    getAllWorkflows,\r\n    getSpecificWorkflow,\r\n    createNewWorkflow,\r\n    updateWorkflow,\r\n    deployWorkflow,\r\n    deleteWorkflow,\r\n    testWorkflow\r\n}\r\n","import { useCallback, useContext, useEffect } from 'react'\r\nimport { UNSAFE_NavigationContext as NavigationContext } from 'react-router-dom'\r\n\r\n// https://stackoverflow.com/questions/71572678/react-router-v-6-useprompt-typescript\r\n\r\nexport function useBlocker(blocker, when = true) {\r\n    const { navigator } = useContext(NavigationContext)\r\n\r\n    useEffect(() => {\r\n        if (!when) return\r\n\r\n        const unblock = navigator.block((tx) => {\r\n            const autoUnblockingTx = {\r\n                ...tx,\r\n                retry() {\r\n                    unblock()\r\n                    tx.retry()\r\n                }\r\n            }\r\n\r\n            blocker(autoUnblockingTx)\r\n        })\r\n\r\n        return unblock\r\n    }, [navigator, blocker, when])\r\n}\r\n\r\nexport function usePrompt(message, when = true) {\r\n    const blocker = useCallback(\r\n        (tx) => {\r\n            if (window.confirm(message)) tx.retry()\r\n        },\r\n        [message]\r\n    )\r\n\r\n    useBlocker(blocker, when)\r\n}\r\n","import PropTypes from 'prop-types'\r\nimport { Handle, Position } from 'react-flow-renderer'\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles'\r\nimport { Avatar, Box, Typography } from '@mui/material'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\n\r\n// icons\r\nimport { IconCheck, IconExclamationMark } from '@tabler/icons'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    border: 'solid 1px',\r\n    color: theme.darkTextPrimary,\r\n    width: '200px',\r\n    height: 'auto',\r\n    padding: '10px',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    '&:hover': {\r\n        borderColor: theme.palette.primary.main\r\n    }\r\n}))\r\n\r\nconst handlerPosition = [[['50%']], [['30%'], ['70%']]]\r\n\r\n// ===========================|| CANVAS NODE ||=========================== //\r\n\r\nconst CanvasNode = ({ data }) => {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <>\r\n            <CardWrapper\r\n                content={false}\r\n                sx={{\r\n                    borderColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary\r\n                }}\r\n                border={false}\r\n            >\r\n                {data && data.outputResponses && data.outputResponses.submit && (\r\n                    <Avatar\r\n                        variant='rounded'\r\n                        sx={{\r\n                            ...theme.typography.smallAvatar,\r\n                            borderRadius: '50%',\r\n                            background: theme.palette.success.dark,\r\n                            color: 'white',\r\n                            ml: 2,\r\n                            position: 'absolute',\r\n                            top: -10,\r\n                            right: -10\r\n                        }}\r\n                    >\r\n                        <IconCheck />\r\n                    </Avatar>\r\n                )}\r\n\r\n                {data && data.outputResponses && data.outputResponses.needRetest && (\r\n                    <Avatar\r\n                        variant='rounded'\r\n                        sx={{\r\n                            ...theme.typography.smallAvatar,\r\n                            borderRadius: '50%',\r\n                            background: theme.palette.warning.dark,\r\n                            color: 'white',\r\n                            ml: 2,\r\n                            position: 'absolute',\r\n                            top: -10,\r\n                            right: -10\r\n                        }}\r\n                    >\r\n                        <IconExclamationMark />\r\n                    </Avatar>\r\n                )}\r\n\r\n                <Box>\r\n                    {data.inputAnchors.map((inputAnchor, index) => (\r\n                        <Handle\r\n                            type='target'\r\n                            position={Position.Top}\r\n                            key={inputAnchor.id}\r\n                            id={inputAnchor.id}\r\n                            style={{\r\n                                height: 15,\r\n                                width: 15,\r\n                                top: -7.5,\r\n                                backgroundColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary,\r\n                                left: handlerPosition[data.inputAnchors.length - 1][index]\r\n                            }}\r\n                        />\r\n                    ))}\r\n                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Box item style={{ width: 50, marginRight: 10 }}>\r\n                            <div\r\n                                style={{\r\n                                    ...theme.typography.commonAvatar,\r\n                                    ...theme.typography.largeAvatar,\r\n                                    backgroundColor: 'white',\r\n                                    cursor: 'grab'\r\n                                }}\r\n                            >\r\n                                <img\r\n                                    style={{ width: '100%', height: '100%' }}\r\n                                    src={`${baseURL}/api/v1/node-icon/${data.name}`}\r\n                                    alt='Notification'\r\n                                />\r\n                            </div>\r\n                        </Box>\r\n                        <Box>\r\n                            <Typography\r\n                                sx={{\r\n                                    fontSize: '1rem',\r\n                                    fontWeight: 500\r\n                                }}\r\n                            >\r\n                                {data.label}\r\n                            </Typography>\r\n                        </Box>\r\n                    </div>\r\n                    {data.outputAnchors.map((outputAnchor, index) => (\r\n                        <Handle\r\n                            type='source'\r\n                            position={Position.Bottom}\r\n                            key={outputAnchor.id}\r\n                            id={outputAnchor.id}\r\n                            style={{\r\n                                height: 15,\r\n                                width: 15,\r\n                                bottom: -7.5,\r\n                                backgroundColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary,\r\n                                left: handlerPosition[data.outputAnchors.length - 1][index]\r\n                            }}\r\n                        />\r\n                    ))}\r\n                </Box>\r\n            </CardWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nCanvasNode.propTypes = {\r\n    data: PropTypes.object\r\n}\r\n\r\nexport default CanvasNode\r\n","import { getBezierPath, getEdgeCenter, EdgeText } from 'react-flow-renderer'\r\nimport PropTypes from 'prop-types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { REMOVE_EDGE } from 'store/actions'\r\n\r\nimport './index.css'\r\n\r\nconst foreignObjectSize = 40\r\n\r\nconst ButtonEdge = ({ id, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, style = {}, data, markerEnd }) => {\r\n    const edgePath = getBezierPath({\r\n        sourceX,\r\n        sourceY,\r\n        sourcePosition,\r\n        targetX,\r\n        targetY,\r\n        targetPosition\r\n    })\r\n\r\n    const [edgeCenterX, edgeCenterY] = getEdgeCenter({\r\n        sourceX,\r\n        sourceY,\r\n        targetX,\r\n        targetY\r\n    })\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onEdgeClick = (evt, id) => {\r\n        evt.stopPropagation()\r\n        dispatch({ type: REMOVE_EDGE, edgeId: id })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <path id={id} style={style} className='react-flow__edge-path' d={edgePath} markerEnd={markerEnd} />\r\n            {data && data.label && (\r\n                <EdgeText\r\n                    x={sourceX + 10}\r\n                    y={sourceY + 10}\r\n                    label={data.label}\r\n                    labelStyle={{ fill: 'black' }}\r\n                    labelBgStyle={{ fill: 'transparent' }}\r\n                    labelBgPadding={[2, 4]}\r\n                    labelBgBorderRadius={2}\r\n                />\r\n            )}\r\n            <foreignObject\r\n                width={foreignObjectSize}\r\n                height={foreignObjectSize}\r\n                x={edgeCenterX - foreignObjectSize / 2}\r\n                y={edgeCenterY - foreignObjectSize / 2}\r\n                className='edgebutton-foreignobject'\r\n                requiredExtensions='http://www.w3.org/1999/xhtml'\r\n            >\r\n                <div>\r\n                    <button type='button' className='edgebutton' onClick={(event) => onEdgeClick(event, id)}>\r\n                        ×\r\n                    </button>\r\n                </div>\r\n            </foreignObject>\r\n        </>\r\n    )\r\n}\r\n\r\nButtonEdge.propTypes = {\r\n    id: PropTypes.string,\r\n    sourceX: PropTypes.number,\r\n    sourceY: PropTypes.number,\r\n    targetX: PropTypes.number,\r\n    targetY: PropTypes.number,\r\n    sourcePosition: PropTypes.any,\r\n    targetPosition: PropTypes.any,\r\n    style: PropTypes.object,\r\n    data: PropTypes.object,\r\n    markerEnd: PropTypes.any\r\n}\r\n\r\nexport default ButtonEdge\r\n","import PropTypes from 'prop-types'\r\nimport { forwardRef } from 'react'\r\n\r\n// material-ui\r\nimport { Collapse, Fade, Box, Grow, Slide, Zoom } from '@mui/material'\r\n\r\n// ==============================|| TRANSITIONS ||============================== //\r\n\r\nconst Transitions = forwardRef(function Transitions({ children, position, type, direction, ...others }, ref) {\r\n    let positionSX = {\r\n        transformOrigin: '0 0 0'\r\n    }\r\n\r\n    switch (position) {\r\n        case 'top-right':\r\n            positionSX = {\r\n                transformOrigin: 'top right'\r\n            }\r\n            break\r\n        case 'top':\r\n            positionSX = {\r\n                transformOrigin: 'top'\r\n            }\r\n            break\r\n        case 'bottom-left':\r\n            positionSX = {\r\n                transformOrigin: 'bottom left'\r\n            }\r\n            break\r\n        case 'bottom-right':\r\n            positionSX = {\r\n                transformOrigin: 'bottom right'\r\n            }\r\n            break\r\n        case 'bottom':\r\n            positionSX = {\r\n                transformOrigin: 'bottom'\r\n            }\r\n            break\r\n        case 'top-left':\r\n        default:\r\n            positionSX = {\r\n                transformOrigin: '0 0 0'\r\n            }\r\n            break\r\n    }\r\n\r\n    return (\r\n        <Box ref={ref}>\r\n            {type === 'grow' && (\r\n                <Grow {...others}>\r\n                    <Box sx={positionSX}>{children}</Box>\r\n                </Grow>\r\n            )}\r\n            {type === 'collapse' && (\r\n                <Collapse {...others} sx={positionSX}>\r\n                    {children}\r\n                </Collapse>\r\n            )}\r\n            {type === 'fade' && (\r\n                <Fade\r\n                    {...others}\r\n                    timeout={{\r\n                        appear: 500,\r\n                        enter: 600,\r\n                        exit: 400\r\n                    }}\r\n                >\r\n                    <Box sx={positionSX}>{children}</Box>\r\n                </Fade>\r\n            )}\r\n            {type === 'slide' && (\r\n                <Slide\r\n                    {...others}\r\n                    timeout={{\r\n                        appear: 0,\r\n                        enter: 400,\r\n                        exit: 200\r\n                    }}\r\n                    direction={direction}\r\n                >\r\n                    <Box sx={positionSX}>{children}</Box>\r\n                </Slide>\r\n            )}\r\n            {type === 'zoom' && (\r\n                <Zoom {...others}>\r\n                    <Box sx={positionSX}>{children}</Box>\r\n                </Zoom>\r\n            )}\r\n        </Box>\r\n    )\r\n})\r\n\r\nTransitions.propTypes = {\r\n    children: PropTypes.node,\r\n    type: PropTypes.oneOf(['grow', 'fade', 'collapse', 'slide', 'zoom']),\r\n    position: PropTypes.oneOf(['top-left', 'top-right', 'top', 'bottom-left', 'bottom-right', 'bottom']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right'])\r\n}\r\n\r\nTransitions.defaultProps = {\r\n    type: 'grow',\r\n    position: 'top-left',\r\n    direction: 'up'\r\n}\r\n\r\nexport default Transitions\r\n","import { createPortal } from 'react-dom'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Dialog, DialogContent, DialogTitle, Tabs, Tab, Box, Typography } from '@mui/material'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n    return (\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`attachment-tabpanel-${index}`}\r\n            aria-labelledby={`attachment-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `attachment-tab-${index}`,\r\n        'aria-controls': `attachment-tabpanel-${index}`\r\n    }\r\n}\r\n\r\nconst AttachmentDialog = ({ show, dialogProps, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    const formatBytes = (bytes, decimals = 2) => {\r\n        if (bytes === 0) return '0 Bytes'\r\n\r\n        const k = 1024\r\n        const dm = decimals < 0 ? 0 : decimals\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n\r\n        const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n\r\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\r\n    }\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            onClose={onCancel}\r\n            fullWidth\r\n            maxWidth='lg'\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Tabs value={value} onChange={handleChange} aria-label='attachment tabs'>\r\n                    {dialogProps.executionData.map((execObj, execObjIndex) => (\r\n                        <Tab key={execObjIndex} label={`Item ${execObjIndex}`} {...a11yProps(execObjIndex)} />\r\n                    ))}\r\n                </Tabs>\r\n                {dialogProps.executionData.map((execObj, execObjIndex) => (\r\n                    <TabPanel key={execObjIndex} value={value} index={execObjIndex}>\r\n                        {execObj.attachments &&\r\n                            execObj.attachments.map((attachment, attchIndex) => (\r\n                                <div key={attchIndex} style={{ marginBottom: 10 }}>\r\n                                    <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'space-between' }}>\r\n                                        <Typography sx={{ p: 1 }} variant='h5'>\r\n                                            {attachment.filename ? attachment.filename : `Attachment ${attchIndex}`} |{' '}\r\n                                            {attachment.contentType} {attachment.size ? ` | ${formatBytes(attachment.size)}` : ''}\r\n                                        </Typography>\r\n                                        <a href={attachment.content} download rel='noopener noreferrer' target='_blank'>\r\n                                            Download File\r\n                                        </a>\r\n                                    </div>\r\n                                    <embed\r\n                                        src={attachment.content}\r\n                                        width='100%'\r\n                                        height='100%'\r\n                                        type={attachment.contentType}\r\n                                        style={{ borderStyle: 'solid', minHeight: '100vh', minWidth: '100vh' }}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        {!execObj.attachments && <div>No Attachment</div>}\r\n                    </TabPanel>\r\n                ))}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nAttachmentDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default AttachmentDialog\r\n","import { createPortal } from 'react-dom'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Dialog, DialogContent, DialogTitle, Tabs, Tab, Box } from '@mui/material'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n    return (\r\n        <div\r\n            role='tabpanel'\r\n            hidden={value !== index}\r\n            id={`attachment-tabpanel-${index}`}\r\n            aria-labelledby={`attachment-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\r\n        </div>\r\n    )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.number.isRequired,\r\n    value: PropTypes.number.isRequired\r\n}\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `attachment-tab-${index}`,\r\n        'aria-controls': `attachment-tabpanel-${index}`\r\n    }\r\n}\r\n\r\nconst HTMLDialog = ({ show, dialogProps, onCancel }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const [value, setValue] = useState(0)\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            onClose={onCancel}\r\n            fullWidth\r\n            maxWidth='lg'\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Tabs value={value} onChange={handleChange} aria-label='attachment tabs'>\r\n                    {dialogProps.executionData.map((execObj, execObjIndex) => (\r\n                        <Tab key={execObjIndex} label={`Item ${execObjIndex}`} {...a11yProps(execObjIndex)} />\r\n                    ))}\r\n                </Tabs>\r\n                {dialogProps.executionData.map((execObj, execObjIndex) => (\r\n                    <TabPanel key={execObjIndex} value={value} index={execObjIndex}>\r\n                        {execObj.html && (\r\n                            <div\r\n                                style={{ width: '100%', height: '100%', overflow: 'auto' }}\r\n                                dangerouslySetInnerHTML={{ __html: execObj.html }}\r\n                            />\r\n                        )}\r\n                        {!execObj.html && <div>No HTML</div>}\r\n                    </TabPanel>\r\n                ))}\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nHTMLDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func\r\n}\r\n\r\nexport default HTMLDialog\r\n","import { useContext } from 'react'\r\nimport ConfirmContext from 'store/context/ConfirmContext'\r\nimport { HIDE_CONFIRM, SHOW_CONFIRM } from 'store/actions'\r\n\r\nlet resolveCallback\r\nconst useConfirm = () => {\r\n    const [confirmState, dispatch] = useContext(ConfirmContext)\r\n\r\n    const closeConfirm = () => {\r\n        dispatch({\r\n            type: HIDE_CONFIRM\r\n        })\r\n    }\r\n\r\n    const onConfirm = () => {\r\n        closeConfirm()\r\n        resolveCallback(true)\r\n    }\r\n\r\n    const onCancel = () => {\r\n        closeConfirm()\r\n        resolveCallback(false)\r\n    }\r\n    const confirm = (confirmPayload) => {\r\n        dispatch({\r\n            type: SHOW_CONFIRM,\r\n            payload: confirmPayload\r\n        })\r\n        return new Promise((res) => {\r\n            resolveCallback = res\r\n        })\r\n    }\r\n\r\n    return { confirm, onConfirm, onCancel, confirmState }\r\n}\r\n\r\nexport default useConfirm\r\n","import client from './client'\r\n\r\nconst getAllExecutions = () => client.get('/executions')\r\n\r\nconst getSpecificExecution = (shortId) => client.get(`/executions/${shortId}`)\r\n\r\nconst createNewExecution = (body) => client.post(`/executions`, body) //body: IExecution\r\n\r\nconst updateExecution = (shortId, body) => client.put(`/executions/${shortId}`, body) //body: IExecution\r\n\r\nconst deleteExecution = (shortId) => client.delete(`/executions/${shortId}`)\r\n\r\nexport default {\r\n    getAllExecutions,\r\n    getSpecificExecution,\r\n    createNewExecution,\r\n    updateExecution,\r\n    deleteExecution\r\n}\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { SET_WORKFLOW, enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport {\r\n    Box,\r\n    List,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Paper,\r\n    Popper,\r\n    Chip,\r\n    Stack,\r\n    Typography,\r\n    Button,\r\n    IconButton\r\n} from '@mui/material'\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport moment from 'moment'\r\nimport ReactJson from 'react-json-view'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport Transitions from 'ui-component/extended/Transitions'\r\nimport AttachmentDialog from 'ui-component/dialog/AttachmentDialog'\r\nimport HTMLDialog from 'ui-component/dialog/HTMLDialog'\r\nimport ExpandDataDialog from 'ui-component/dialog/ExpandDataDialog'\r\n\r\n// hooks\r\nimport useConfirm from 'hooks/useConfirm'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// icon\r\nimport { IconTrash, IconX, IconArrowsMaximize } from '@tabler/icons'\r\n\r\n// API\r\nimport executionsApi from 'api/executions'\r\nimport workflowsApi from 'api/workflows'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper'\r\n\r\n// ==============================|| EXECUTIONS ||============================== //\r\n\r\nconst Executions = ({ workflowShortId, execution, executionCount, isExecutionOpen, anchorEl }) => {\r\n    const theme = useTheme()\r\n    const [expanded, setExpanded] = useState(false)\r\n    const [open, setOpen] = useState(false)\r\n    const [showHTMLDialog, setShowHTMLDialog] = useState(false)\r\n    const [HTMLDialogProps, setHTMLDialogProps] = useState({})\r\n    const [showAttachmentDialog, setShowAttachmentDialog] = useState(false)\r\n    const [attachmentDialogProps, setAttachmentDialogProps] = useState({})\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\r\n    const [expandDialogProps, setExpandDialogProps] = useState({})\r\n\r\n    const dispatch = useDispatch()\r\n    const varPrevOpen = useRef(open)\r\n    const { confirm } = useConfirm()\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    const handleAccordionChange = (executionShortId) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? executionShortId : false)\r\n    }\r\n\r\n    const setChipColor = (execState) => {\r\n        if (execState === 'INPROGRESS') return theme.palette.warning.dark\r\n        if (execState === 'FINISHED') return theme.palette.success.dark\r\n        if (execState === 'ERROR') return theme.palette.error.dark\r\n        if (execState === 'TERMINATED' || execState === 'TIMEOUT') return theme.palette.grey['700']\r\n        return theme.palette.primary.dark\r\n    }\r\n\r\n    const setChipBgColor = (execState) => {\r\n        if (execState === 'INPROGRESS') return theme.palette.warning.light\r\n        if (execState === 'FINISHED') return theme.palette.success.light\r\n        if (execState === 'ERROR') return theme.palette.error.light\r\n        if (execState === 'TERMINATED' || execState === 'TIMEOUT') return theme.palette.grey['300']\r\n        return theme.palette.primary.light\r\n    }\r\n\r\n    const openAttachmentDialog = (executionData) => {\r\n        const dialogProp = {\r\n            title: 'Attachments',\r\n            executionData\r\n        }\r\n        setAttachmentDialogProps(dialogProp)\r\n        setShowAttachmentDialog(true)\r\n    }\r\n\r\n    const openHTMLDialog = (executionData) => {\r\n        const dialogProp = {\r\n            title: 'HTML',\r\n            executionData\r\n        }\r\n        setHTMLDialogProps(dialogProp)\r\n        setShowHTMLDialog(true)\r\n    }\r\n\r\n    const onExpandDialogClicked = (executionData, nodeLabel) => {\r\n        const dialogProp = {\r\n            title: `Execution Data: ${nodeLabel}`,\r\n            data: executionData\r\n        }\r\n        setExpandDialogProps(dialogProp)\r\n        setShowExpandDialog(true)\r\n    }\r\n\r\n    const deleteExecution = async (e, executionShortId) => {\r\n        e.stopPropagation()\r\n        const confirmPayload = {\r\n            title: `Delete`,\r\n            description: `Delete execution ${executionShortId}?`,\r\n            confirmButtonName: 'Delete',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload)\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                const executionResp = await executionsApi.deleteExecution(executionShortId)\r\n                if (executionResp.data) {\r\n                    const workflowResponse = await workflowsApi.getSpecificWorkflow(workflowShortId)\r\n                    if (workflowResponse.data) dispatch({ type: SET_WORKFLOW, workflow: workflowResponse.data })\r\n                }\r\n                enqueueSnackbar({\r\n                    message: 'Execution deleted!',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    // Handle Accordian\r\n    useEffect(() => {\r\n        varPrevOpen.current = open\r\n    }, [open])\r\n\r\n    useEffect(() => {\r\n        setOpen(isExecutionOpen)\r\n    }, [isExecutionOpen])\r\n\r\n    return (\r\n        <>\r\n            <Popper\r\n                placement='bottom-end'\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [170, 20]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{ zIndex: 1000 }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                <Box sx={{ p: 2 }}>\r\n                                    <Stack>\r\n                                        <Typography variant='h4'>{executionCount} Executions</Typography>\r\n                                    </Stack>\r\n                                </Box>\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                    {executionCount === 0 && execution.length === 0 && <Box sx={{ p: 2 }}>No executions yet</Box>}\r\n\r\n                                    {executionCount > 0 && execution.length > 0 && (\r\n                                        <Box sx={{ p: 2 }}>\r\n                                            <List\r\n                                                sx={{\r\n                                                    width: '100%',\r\n                                                    maxWidth: 330,\r\n                                                    py: 0,\r\n                                                    borderRadius: '10px',\r\n                                                    [theme.breakpoints.down('md')]: {\r\n                                                        maxWidth: 300\r\n                                                    },\r\n                                                    '& .MuiListItemSecondaryAction-root': {\r\n                                                        top: 22\r\n                                                    },\r\n                                                    '& .MuiDivider-root': {\r\n                                                        my: 0\r\n                                                    },\r\n                                                    '& .list-container': {\r\n                                                        pl: 7\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {execution &&\r\n                                                    execution.map((exec, index) => (\r\n                                                        <Box key={index}>\r\n                                                            <Accordion\r\n                                                                expanded={expanded === exec.shortId}\r\n                                                                onChange={handleAccordionChange(exec.shortId)}\r\n                                                            >\r\n                                                                <AccordionSummary\r\n                                                                    expandIcon={<ExpandMoreIcon />}\r\n                                                                    aria-controls={`${exec.shortId}-content`}\r\n                                                                    id={`${exec.shortId}-header`}\r\n                                                                >\r\n                                                                    <Stack sx={{ p: 1, mr: 1 }} direction='column'>\r\n                                                                        <Stack sx={{ mb: 1, alignItems: 'center' }} direction='row'>\r\n                                                                            <Typography variant='h5'>{exec.shortId}</Typography>\r\n                                                                            {exec.state && (\r\n                                                                                <Chip\r\n                                                                                    sx={{\r\n                                                                                        color: setChipColor(exec.state),\r\n                                                                                        backgroundColor: setChipBgColor(exec.state),\r\n                                                                                        ml: 1\r\n                                                                                    }}\r\n                                                                                    label={exec.state}\r\n                                                                                />\r\n                                                                            )}\r\n                                                                        </Stack>\r\n                                                                        <Stack sx={{ mb: -1, alignItems: 'center' }} direction='row'>\r\n                                                                            <Typography\r\n                                                                                variant='h6'\r\n                                                                                sx={{ color: theme.palette.grey['500'] }}\r\n                                                                            >\r\n                                                                                {moment(exec.createdDate).format(\r\n                                                                                    'MMMM Do YYYY, h:mm:ss A z'\r\n                                                                                )}\r\n                                                                            </Typography>\r\n                                                                            <IconButton\r\n                                                                                size='small'\r\n                                                                                sx={{ height: 25, width: 25, ml: 1 }}\r\n                                                                                title='Delete Execution'\r\n                                                                                color='error'\r\n                                                                                onClick={(e) => deleteExecution(e, exec.shortId)}\r\n                                                                            >\r\n                                                                                <IconTrash />\r\n                                                                            </IconButton>\r\n                                                                        </Stack>\r\n                                                                    </Stack>\r\n                                                                </AccordionSummary>\r\n                                                                {JSON.parse(exec.executionData).map((execData, execDataIndex) => (\r\n                                                                    <AccordionDetails key={execDataIndex}>\r\n                                                                        <Box\r\n                                                                            sx={{\r\n                                                                                p: 2,\r\n                                                                                backgroundColor: theme.palette.secondary.light,\r\n                                                                                borderRadius: `15px`,\r\n                                                                                position: 'relative'\r\n                                                                            }}\r\n                                                                            key={execDataIndex}\r\n                                                                        >\r\n                                                                            <Typography sx={{ p: 1 }} variant='h5'>\r\n                                                                                {execData.nodeLabel}\r\n                                                                            </Typography>\r\n                                                                            <ReactJson\r\n                                                                                collapsed\r\n                                                                                src={execData.data}\r\n                                                                                enableClipboard={(e) => copyToClipboard(e)}\r\n                                                                            />\r\n                                                                            <IconButton\r\n                                                                                size='small'\r\n                                                                                sx={{\r\n                                                                                    height: 25,\r\n                                                                                    width: 25,\r\n                                                                                    position: 'absolute',\r\n                                                                                    top: 5,\r\n                                                                                    right: 5\r\n                                                                                }}\r\n                                                                                title='Expand Data'\r\n                                                                                color='primary'\r\n                                                                                onClick={() =>\r\n                                                                                    onExpandDialogClicked(execData.data, execData.nodeLabel)\r\n                                                                                }\r\n                                                                            >\r\n                                                                                <IconArrowsMaximize />\r\n                                                                            </IconButton>\r\n                                                                            <div>\r\n                                                                                {execData.data.map((execObj, execObjIndex) => (\r\n                                                                                    <div key={execObjIndex}>\r\n                                                                                        {execObj.html && (\r\n                                                                                            <Typography sx={{ p: 1, mt: 2 }} variant='h5'>\r\n                                                                                                HTML\r\n                                                                                            </Typography>\r\n                                                                                        )}\r\n                                                                                        {execObj.html && (\r\n                                                                                            <div\r\n                                                                                                style={{\r\n                                                                                                    width: '100%',\r\n                                                                                                    height: '100%',\r\n                                                                                                    maxHeight: 400,\r\n                                                                                                    overflow: 'auto',\r\n                                                                                                    backgroundColor: 'white',\r\n                                                                                                    borderRadius: 5\r\n                                                                                                }}\r\n                                                                                                dangerouslySetInnerHTML={{\r\n                                                                                                    __html: execObj.html\r\n                                                                                                }}\r\n                                                                                            />\r\n                                                                                        )}\r\n                                                                                        {execObj.html && (\r\n                                                                                            <Button\r\n                                                                                                sx={{ mt: 1 }}\r\n                                                                                                size='small'\r\n                                                                                                variant='contained'\r\n                                                                                                onClick={() =>\r\n                                                                                                    openHTMLDialog(execData.data)\r\n                                                                                                }\r\n                                                                                            >\r\n                                                                                                View HTML\r\n                                                                                            </Button>\r\n                                                                                        )}\r\n\r\n                                                                                        {execObj.attachments && (\r\n                                                                                            <Typography\r\n                                                                                                sx={{ p: 1, pb: 0, mt: 2 }}\r\n                                                                                                variant='h5'\r\n                                                                                            >\r\n                                                                                                Attachments\r\n                                                                                            </Typography>\r\n                                                                                        )}\r\n                                                                                        {execObj.attachments &&\r\n                                                                                            execObj.attachments.map(\r\n                                                                                                (attachment, attchIndex) => (\r\n                                                                                                    <div key={attchIndex}>\r\n                                                                                                        <Typography\r\n                                                                                                            sx={{ p: 1 }}\r\n                                                                                                            variant='h6'\r\n                                                                                                        >\r\n                                                                                                            Item {execObjIndex} |{' '}\r\n                                                                                                            {attachment.filename\r\n                                                                                                                ? attachment.filename\r\n                                                                                                                : `Attachment ${attchIndex}`}\r\n                                                                                                        </Typography>\r\n                                                                                                        <embed\r\n                                                                                                            src={attachment.content}\r\n                                                                                                            width='100%'\r\n                                                                                                            height='100%'\r\n                                                                                                            style={{ borderStyle: 'solid' }}\r\n                                                                                                            type={attachment.contentType}\r\n                                                                                                        />\r\n                                                                                                        <Button\r\n                                                                                                            size='small'\r\n                                                                                                            variant='contained'\r\n                                                                                                            onClick={() =>\r\n                                                                                                                openAttachmentDialog(\r\n                                                                                                                    execData.data\r\n                                                                                                                )\r\n                                                                                                            }\r\n                                                                                                        >\r\n                                                                                                            View Attachment\r\n                                                                                                        </Button>\r\n                                                                                                    </div>\r\n                                                                                                )\r\n                                                                                            )}\r\n                                                                                    </div>\r\n                                                                                ))}\r\n                                                                            </div>\r\n                                                                        </Box>\r\n                                                                    </AccordionDetails>\r\n                                                                ))}\r\n                                                            </Accordion>\r\n                                                        </Box>\r\n                                                    ))}\r\n                                            </List>\r\n                                        </Box>\r\n                                    )}\r\n                                </PerfectScrollbar>\r\n                            </MainCard>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n            <AttachmentDialog\r\n                show={showAttachmentDialog}\r\n                dialogProps={attachmentDialogProps}\r\n                onCancel={() => setShowAttachmentDialog(false)}\r\n            ></AttachmentDialog>\r\n            <HTMLDialog show={showHTMLDialog} dialogProps={HTMLDialogProps} onCancel={() => setShowHTMLDialog(false)}></HTMLDialog>\r\n            <ExpandDataDialog\r\n                show={showExpandDialog}\r\n                dialogProps={expandDialogProps}\r\n                onCancel={() => setShowExpandDialog(false)}\r\n            ></ExpandDataDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nExecutions.propTypes = {\r\n    workflowShortId: PropTypes.string,\r\n    execution: PropTypes.array,\r\n    executionCount: PropTypes.number,\r\n    isExecutionOpen: PropTypes.bool,\r\n    anchorEl: PropTypes.any\r\n}\r\n\r\nexport default Executions\r\n","// assets\r\nimport { IconTrash, IconFileUpload, IconFileExport } from '@tabler/icons'\r\n\r\n// constant\r\nconst icons = { IconTrash, IconFileUpload, IconFileExport }\r\n\r\n// ==============================|| SETTINGS MENU ITEMS ||============================== //\r\n\r\nconst settings = {\r\n    id: 'settings',\r\n    title: '',\r\n    type: 'group',\r\n    children: [\r\n        {\r\n            id: 'loadWorkflow',\r\n            title: 'Load Workflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconFileUpload\r\n        },\r\n        {\r\n            id: 'exportWorkflow',\r\n            title: 'Export Workflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconFileExport\r\n        },\r\n        {\r\n            id: 'deleteWorkflow',\r\n            title: 'Delete Workflow',\r\n            type: 'item',\r\n            url: '',\r\n            icon: icons.IconTrash\r\n        }\r\n    ]\r\n}\r\n\r\nexport default settings\r\n","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { Box, List, Paper, Popper } from '@mui/material'\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport Transitions from 'ui-component/extended/Transitions'\r\nimport NavItem from 'layout/MainLayout/Sidebar/MenuList/NavItem'\r\n\r\nimport settings from 'menu-items/settings'\r\n\r\n// ==============================|| SETTINGS ||============================== //\r\n\r\nconst Settings = ({ workflow, isSettingsOpen, anchorEl, onSettingsItemClick, onUploadFile }) => {\r\n    const theme = useTheme()\r\n    const [settingsMenu, setSettingsMenu] = useState([])\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (workflow && !workflow.shortId) {\r\n            const settingsMenu = settings.children.filter((menu) => menu.id === 'loadWorkflow')\r\n            setSettingsMenu(settingsMenu)\r\n        } else if (workflow && workflow.shortId) {\r\n            const settingsMenu = settings.children\r\n            setSettingsMenu(settingsMenu)\r\n        }\r\n    }, [workflow])\r\n\r\n    useEffect(() => {\r\n        setOpen(isSettingsOpen)\r\n    }, [isSettingsOpen])\r\n\r\n    // settings list items\r\n    const items = settingsMenu.map((menu) => {\r\n        return (\r\n            <NavItem\r\n                key={menu.id}\r\n                item={menu}\r\n                level={1}\r\n                navType='SETTINGS'\r\n                onClick={(id) => onSettingsItemClick(id)}\r\n                onUploadFile={onUploadFile}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Popper\r\n                placement='bottom-end'\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [170, 20]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{ zIndex: 1000 }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <List>{items}</List>\r\n                                    </Box>\r\n                                </PerfectScrollbar>\r\n                            </MainCard>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    )\r\n}\r\n\r\nSettings.propTypes = {\r\n    workflow: PropTypes.object,\r\n    isSettingsOpen: PropTypes.bool,\r\n    anchorEl: PropTypes.any,\r\n    onSettingsItemClick: PropTypes.func,\r\n    onUploadFile: PropTypes.func\r\n}\r\n\r\nexport default Settings\r\n","import { createPortal } from 'react-dom'\r\nimport { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Button, Dialog, DialogActions, DialogContent, OutlinedInput, DialogTitle } from '@mui/material'\r\n\r\nconst SaveWorkflowDialog = ({ show, dialogProps, onCancel, onConfirm }) => {\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const [workflowName, setWorkflowName] = useState('')\r\n    const [isReadyToSave, setIsReadyToSave] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (workflowName) setIsReadyToSave(true)\r\n        else setIsReadyToSave(false)\r\n    }, [workflowName])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='xs'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <OutlinedInput\r\n                    sx={{ mt: 1 }}\r\n                    id='workflow-name'\r\n                    type='text'\r\n                    fullWidth\r\n                    placeholder='My New Workflow'\r\n                    value={workflowName}\r\n                    onChange={(e) => setWorkflowName(e.target.value)}\r\n                />\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{dialogProps.cancelButtonName}</Button>\r\n                <Button disabled={!isReadyToSave} variant='contained' onClick={() => onConfirm(workflowName)}>\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nSaveWorkflowDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func\r\n}\r\n\r\nexport default SaveWorkflowDialog\r\n","import PropTypes from 'prop-types'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\nimport { useEffect, useRef, useState } from 'react'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport { Avatar, Box, ButtonBase, Typography, Stack, TextField, Chip } from '@mui/material'\r\n\r\n// icons\r\nimport {\r\n    IconSettings,\r\n    IconChevronLeft,\r\n    IconDeviceFloppy,\r\n    IconRocket,\r\n    IconPencil,\r\n    IconCheck,\r\n    IconX,\r\n    IconPlayerPause,\r\n    IconListCheck\r\n} from '@tabler/icons'\r\n\r\n// project imports\r\nimport Executions from 'views/executions'\r\nimport Settings from 'views/settings'\r\nimport SaveWorkflowDialog from 'ui-component/dialog/SaveWorkflowDialog'\r\n\r\n// API\r\nimport workflowsApi from 'api/workflows'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// utils\r\nimport { generateExportFlowData } from 'utils/genericHelper'\r\n\r\n// ==============================|| CANVAS HEADER ||============================== //\r\n\r\nconst CanvasHeader = ({ workflow, handleSaveFlow, handleDeployWorkflow, handleStopWorkflow, handleDeleteWorkflow, handleLoadWorkflow }) => {\r\n    const theme = useTheme()\r\n    const navigate = useNavigate()\r\n    const workflowNameRef = useRef()\r\n    const viewExecutionRef = useRef()\r\n    const settingsRef = useRef()\r\n\r\n    const [isEditingWorkflowName, setEditingWorkflowName] = useState(null)\r\n    const [workflowName, setWorkflowName] = useState('')\r\n    const [isExecutionOpen, setExecutionOpen] = useState(false)\r\n    const [isSettingsOpen, setSettingsOpen] = useState(false)\r\n    const [workfowDialogOpen, setWorkfowDialogOpen] = useState(false)\r\n\r\n    const updateWorkflowApi = useApi(workflowsApi.updateWorkflow)\r\n    const canvas = useSelector((state) => state.canvas)\r\n\r\n    const onSettingsItemClick = (setting) => {\r\n        setSettingsOpen(false)\r\n\r\n        if (setting === 'deleteWorkflow') {\r\n            handleDeleteWorkflow()\r\n        } else if (setting === 'exportWorkflow') {\r\n            try {\r\n                const flowData = JSON.parse(workflow.flowData)\r\n                let dataStr = JSON.stringify(generateExportFlowData(flowData))\r\n                let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\r\n\r\n                let exportFileDefaultName = `${workflow.name} Workflow.json`\r\n\r\n                let linkElement = document.createElement('a')\r\n                linkElement.setAttribute('href', dataUri)\r\n                linkElement.setAttribute('download', exportFileDefaultName)\r\n                linkElement.click()\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }\r\n    }\r\n\r\n    const onUploadFile = (file) => {\r\n        setSettingsOpen(false)\r\n        handleLoadWorkflow(file)\r\n    }\r\n\r\n    const submitWorkflowName = () => {\r\n        if (workflow.shortId) {\r\n            const updateBody = {\r\n                name: workflowNameRef.current.value\r\n            }\r\n            updateWorkflowApi.request(workflow.shortId, updateBody)\r\n        }\r\n    }\r\n\r\n    const onSaveWorkflowClick = () => {\r\n        if (workflow.shortId) handleSaveFlow(workflow.name)\r\n        else setWorkfowDialogOpen(true)\r\n    }\r\n\r\n    const onConfirmSaveName = (workflowName) => {\r\n        setWorkfowDialogOpen(false)\r\n        handleSaveFlow(workflowName)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (updateWorkflowApi.data) {\r\n            setWorkflowName(updateWorkflowApi.data.name)\r\n        }\r\n        setEditingWorkflowName(false)\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateWorkflowApi.data])\r\n\r\n    useEffect(() => {\r\n        if (workflow) {\r\n            setWorkflowName(workflow.name)\r\n        }\r\n    }, [workflow])\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <ButtonBase title='Back' sx={{ borderRadius: '50%' }}>\r\n                    <Avatar\r\n                        variant='rounded'\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.secondary.light,\r\n                            color: theme.palette.secondary.dark,\r\n                            '&:hover': {\r\n                                background: theme.palette.secondary.dark,\r\n                                color: theme.palette.secondary.light\r\n                            }\r\n                        }}\r\n                        color='inherit'\r\n                        onClick={() => navigate(-1)}\r\n                    >\r\n                        <IconChevronLeft stroke={1.5} size='1.3rem' />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n                {!isEditingWorkflowName && (\r\n                    <Stack flexDirection='row'>\r\n                        <Typography\r\n                            sx={{\r\n                                fontSize: '1.5rem',\r\n                                fontWeight: 600,\r\n                                ml: 2\r\n                            }}\r\n                        >\r\n                            {canvas.isDirty && <strong style={{ color: theme.palette.orange.main }}>*</strong>} {workflowName}\r\n                        </Typography>\r\n                        {workflow?.shortId && (\r\n                            <ButtonBase title='Edit Name' sx={{ borderRadius: '50%' }}>\r\n                                <Avatar\r\n                                    variant='rounded'\r\n                                    sx={{\r\n                                        ...theme.typography.commonAvatar,\r\n                                        ...theme.typography.mediumAvatar,\r\n                                        transition: 'all .2s ease-in-out',\r\n                                        background: 'white',\r\n                                        color: theme.palette.text.dark,\r\n                                        ml: 1,\r\n                                        '&:hover': {\r\n                                            background: theme.palette.secondary.light,\r\n                                            color: theme.palette.secondary.dark\r\n                                        }\r\n                                    }}\r\n                                    color='inherit'\r\n                                    onClick={() => setEditingWorkflowName(true)}\r\n                                >\r\n                                    <IconPencil stroke={1.5} size='1.3rem' />\r\n                                </Avatar>\r\n                            </ButtonBase>\r\n                        )}\r\n                        {workflow?.deployed && (\r\n                            <Chip\r\n                                sx={{\r\n                                    color: theme.palette.success.dark,\r\n                                    backgroundColor: theme.palette.success.light,\r\n                                    ml: 1\r\n                                }}\r\n                                label='Deployed'\r\n                                color='success'\r\n                            />\r\n                        )}\r\n                    </Stack>\r\n                )}\r\n                {isEditingWorkflowName && (\r\n                    <Stack flexDirection='row'>\r\n                        <TextField\r\n                            size='small'\r\n                            inputRef={workflowNameRef}\r\n                            sx={{\r\n                                width: '50%',\r\n                                ml: 2\r\n                            }}\r\n                            defaultValue={workflowName}\r\n                        />\r\n                        <ButtonBase title='Save Name' sx={{ borderRadius: '50%' }}>\r\n                            <Avatar\r\n                                variant='rounded'\r\n                                sx={{\r\n                                    ...theme.typography.commonAvatar,\r\n                                    ...theme.typography.mediumAvatar,\r\n                                    transition: 'all .2s ease-in-out',\r\n                                    background: 'white',\r\n                                    color: theme.palette.text.dark,\r\n                                    ml: 1,\r\n                                    '&:hover': {\r\n                                        background: theme.palette.secondary.light,\r\n                                        color: theme.palette.secondary.dark\r\n                                    }\r\n                                }}\r\n                                color='inherit'\r\n                                onClick={submitWorkflowName}\r\n                            >\r\n                                <IconCheck stroke={1.5} size='1.3rem' />\r\n                            </Avatar>\r\n                        </ButtonBase>\r\n                        <ButtonBase title='Cancel' sx={{ borderRadius: '50%' }}>\r\n                            <Avatar\r\n                                variant='rounded'\r\n                                sx={{\r\n                                    ...theme.typography.commonAvatar,\r\n                                    ...theme.typography.mediumAvatar,\r\n                                    transition: 'all .2s ease-in-out',\r\n                                    background: 'white',\r\n                                    color: theme.palette.text.dark,\r\n                                    ml: 1,\r\n                                    '&:hover': {\r\n                                        background: theme.palette.error.light,\r\n                                        color: theme.palette.error.dark\r\n                                    }\r\n                                }}\r\n                                color='inherit'\r\n                                onClick={() => setEditingWorkflowName(false)}\r\n                            >\r\n                                <IconX stroke={1.5} size='1.3rem' />\r\n                            </Avatar>\r\n                        </ButtonBase>\r\n                    </Stack>\r\n                )}\r\n            </Box>\r\n            <Box>\r\n                {workflow?.shortId && (\r\n                    <ButtonBase ref={viewExecutionRef} title='View Executions' sx={{ borderRadius: '50%', mr: 2 }}>\r\n                        <Avatar\r\n                            variant='rounded'\r\n                            sx={{\r\n                                ...theme.typography.commonAvatar,\r\n                                ...theme.typography.mediumAvatar,\r\n                                width: '54px',\r\n                                transition: 'all .2s ease-in-out',\r\n                                background: theme.palette.success.light,\r\n                                color: theme.palette.success.dark,\r\n                                '&:hover': {\r\n                                    background: theme.palette.success.dark,\r\n                                    color: theme.palette.success.light\r\n                                }\r\n                            }}\r\n                            color='inherit'\r\n                            onClick={() => setExecutionOpen(!isExecutionOpen)}\r\n                        >\r\n                            <h6>{workflow?.executionCount}</h6>&nbsp;\r\n                            <IconListCheck stroke={1.5} size='1.3rem' />\r\n                        </Avatar>\r\n                    </ButtonBase>\r\n                )}\r\n                {workflow?.shortId && (\r\n                    <ButtonBase title={workflow?.deployed ? 'Stop Workflow' : 'Deploy Workflow'} sx={{ borderRadius: '50%', mr: 2 }}>\r\n                        <Avatar\r\n                            variant='rounded'\r\n                            sx={{\r\n                                ...theme.typography.commonAvatar,\r\n                                ...theme.typography.mediumAvatar,\r\n                                transition: 'all .2s ease-in-out',\r\n                                background: theme.palette.primary.light,\r\n                                color: theme.palette.primary.dark,\r\n                                '&:hover': {\r\n                                    background: theme.palette.primary.dark,\r\n                                    color: theme.palette.primary.light\r\n                                }\r\n                            }}\r\n                            color='inherit'\r\n                            onClick={workflow?.deployed ? handleStopWorkflow : handleDeployWorkflow}\r\n                        >\r\n                            {workflow?.deployed ? (\r\n                                <IconPlayerPause stroke={1.5} size='1.3rem' />\r\n                            ) : (\r\n                                <IconRocket stroke={1.5} size='1.3rem' />\r\n                            )}\r\n                        </Avatar>\r\n                    </ButtonBase>\r\n                )}\r\n                <ButtonBase title='Save Workflow' sx={{ borderRadius: '50%', mr: 2 }}>\r\n                    <Avatar\r\n                        variant='rounded'\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.secondary.light,\r\n                            color: theme.palette.secondary.dark,\r\n                            '&:hover': {\r\n                                background: theme.palette.secondary.dark,\r\n                                color: theme.palette.secondary.light\r\n                            }\r\n                        }}\r\n                        color='inherit'\r\n                        onClick={onSaveWorkflowClick}\r\n                    >\r\n                        <IconDeviceFloppy stroke={1.5} size='1.3rem' />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n                <ButtonBase ref={settingsRef} title='Settings' sx={{ borderRadius: '50%' }}>\r\n                    <Avatar\r\n                        variant='rounded'\r\n                        sx={{\r\n                            ...theme.typography.commonAvatar,\r\n                            ...theme.typography.mediumAvatar,\r\n                            transition: 'all .2s ease-in-out',\r\n                            background: theme.palette.grey[300],\r\n                            color: theme.palette.grey[700],\r\n                            '&:hover': {\r\n                                background: theme.palette.grey[700],\r\n                                color: theme.palette.grey[300]\r\n                            }\r\n                        }}\r\n                        onClick={() => setSettingsOpen(!isSettingsOpen)}\r\n                    >\r\n                        <IconSettings stroke={1.5} size='1.3rem' />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n            {workflow?.shortId && (\r\n                <Executions\r\n                    workflowShortId={workflow?.shortId}\r\n                    execution={workflow?.execution}\r\n                    executionCount={workflow?.executionCount}\r\n                    isExecutionOpen={isExecutionOpen}\r\n                    anchorEl={viewExecutionRef.current}\r\n                />\r\n            )}\r\n            <Settings\r\n                workflow={workflow}\r\n                isSettingsOpen={isSettingsOpen}\r\n                anchorEl={settingsRef.current}\r\n                onSettingsItemClick={onSettingsItemClick}\r\n                onUploadFile={onUploadFile}\r\n            />\r\n            <SaveWorkflowDialog\r\n                show={workfowDialogOpen}\r\n                dialogProps={{\r\n                    title: `Save New Workflow`,\r\n                    confirmButtonName: 'Save',\r\n                    cancelButtonName: 'Cancel'\r\n                }}\r\n                onCancel={() => setWorkfowDialogOpen(false)}\r\n                onConfirm={onConfirmSaveName}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nCanvasHeader.propTypes = {\r\n    workflow: PropTypes.object,\r\n    handleSaveFlow: PropTypes.func,\r\n    handleDeployWorkflow: PropTypes.func,\r\n    handleStopWorkflow: PropTypes.func,\r\n    handleDeleteWorkflow: PropTypes.func,\r\n    handleLoadWorkflow: PropTypes.func\r\n}\r\n\r\nexport default CanvasHeader\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport {\r\n    Box,\r\n    Fab,\r\n    ClickAwayListener,\r\n    Divider,\r\n    InputAdornment,\r\n    List,\r\n    ListItemButton,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    OutlinedInput,\r\n    Paper,\r\n    Popper,\r\n    Stack,\r\n    Typography\r\n} from '@mui/material'\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport Transitions from 'ui-component/extended/Transitions'\r\n\r\n// icons\r\nimport { IconPlus, IconSearch, IconMinus } from '@tabler/icons'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\n// ==============================|| ADD NODES||============================== //\r\n\r\nconst AddNodes = ({ nodesData, node }) => {\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [nodes, setNodes] = useState([])\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const anchorRef = useRef(null)\r\n    const prevOpen = useRef(open)\r\n\r\n    const filterSearch = (value) => {\r\n        setSearchValue(value)\r\n        setTimeout(() => {\r\n            if (value) {\r\n                const returnData = nodesData.filter((nd) => nd.name.toLowerCase().includes(value.toLowerCase()))\r\n                setNodes(returnData)\r\n            } else if (value === '') {\r\n                setNodes(nodesData)\r\n            }\r\n        }, 500)\r\n    }\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return\r\n        }\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen)\r\n    }\r\n\r\n    const onDragStart = (event, node) => {\r\n        event.dataTransfer.setData('application/reactflow', JSON.stringify(node))\r\n        event.dataTransfer.effectAllowed = 'move'\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus()\r\n        }\r\n\r\n        prevOpen.current = open\r\n    }, [open])\r\n\r\n    useEffect(() => {\r\n        if (node) setOpen(false)\r\n    }, [node])\r\n\r\n    useEffect(() => {\r\n        if (nodesData) setNodes(nodesData)\r\n    }, [nodesData])\r\n\r\n    return (\r\n        <>\r\n            <Fab\r\n                sx={{ left: 20, top: 20 }}\r\n                ref={anchorRef}\r\n                size='small'\r\n                color='primary'\r\n                aria-label='add'\r\n                title='Add Node'\r\n                onClick={handleToggle}\r\n            >\r\n                {open ? <IconMinus /> : <IconPlus />}\r\n            </Fab>\r\n            <Popper\r\n                placement='bottom-end'\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [-40, 14]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{ zIndex: 1000 }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <Stack>\r\n                                            <Typography variant='h4'>Add Nodes</Typography>\r\n                                        </Stack>\r\n                                        <OutlinedInput\r\n                                            sx={{ width: '100%', pr: 1, pl: 2, my: 2 }}\r\n                                            id='input-search-node'\r\n                                            value={searchValue}\r\n                                            onChange={(e) => filterSearch(e.target.value)}\r\n                                            placeholder='Search nodes'\r\n                                            startAdornment={\r\n                                                <InputAdornment position='start'>\r\n                                                    <IconSearch stroke={1.5} size='1rem' color={theme.palette.grey[500]} />\r\n                                                </InputAdornment>\r\n                                            }\r\n                                            aria-describedby='search-helper-text'\r\n                                            inputProps={{\r\n                                                'aria-label': 'weight'\r\n                                            }}\r\n                                        />\r\n                                        <Divider />\r\n                                    </Box>\r\n                                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                        <Box sx={{ p: 2 }}>\r\n                                            <List\r\n                                                sx={{\r\n                                                    width: '100%',\r\n                                                    maxWidth: 330,\r\n                                                    py: 0,\r\n                                                    borderRadius: '10px',\r\n                                                    [theme.breakpoints.down('md')]: {\r\n                                                        maxWidth: 300\r\n                                                    },\r\n                                                    '& .MuiListItemSecondaryAction-root': {\r\n                                                        top: 22\r\n                                                    },\r\n                                                    '& .MuiDivider-root': {\r\n                                                        my: 0\r\n                                                    },\r\n                                                    '& .list-container': {\r\n                                                        pl: 7\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {nodes.map((node) => (\r\n                                                    <div key={node.name} onDragStart={(event) => onDragStart(event, node)} draggable>\r\n                                                        <ListItemButton\r\n                                                            sx={{ p: 0, borderRadius: `${customization.borderRadius}px`, cursor: 'move' }}\r\n                                                        >\r\n                                                            <ListItem alignItems='center'>\r\n                                                                <ListItemAvatar>\r\n                                                                    <div\r\n                                                                        style={{\r\n                                                                            width: 50,\r\n                                                                            height: 50,\r\n                                                                            borderRadius: '50%',\r\n                                                                            backgroundColor: 'white'\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <img\r\n                                                                            style={{\r\n                                                                                width: '100%',\r\n                                                                                height: '100%',\r\n                                                                                padding: 10,\r\n                                                                                objectFit: 'contain'\r\n                                                                            }}\r\n                                                                            alt={node.name}\r\n                                                                            src={`${baseURL}/api/v1/node-icon/${node.name}`}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                </ListItemAvatar>\r\n                                                                <ListItemText\r\n                                                                    sx={{ ml: 1 }}\r\n                                                                    primary={node.label}\r\n                                                                    secondary={node.description}\r\n                                                                />\r\n                                                            </ListItem>\r\n                                                        </ListItemButton>\r\n                                                        <Divider />\r\n                                                    </div>\r\n                                                ))}\r\n                                            </List>\r\n                                        </Box>\r\n                                    </PerfectScrollbar>\r\n                                </MainCard>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    )\r\n}\r\n\r\nAddNodes.propTypes = {\r\n    nodesData: PropTypes.array,\r\n    node: PropTypes.object\r\n}\r\n\r\nexport default AddNodes\r\n","import client from './client'\r\n\r\nconst getAllNodes = () => client.get('/nodes')\r\n\r\nconst getSpecificNode = (name) => client.get(`/nodes/${name}`)\r\n\r\nconst testNode = (name, body) => client.post(`/node-test/${name}`, body) //body: ITestNodeBody\r\n\r\nconst loadMethodNode = (name, nodeData) => client.post(`/node-load-method/${name}`, nodeData) //nodeData: INodeData\r\n\r\nconst removeTestTriggers = () => client.post(`/remove-test-triggers`)\r\n\r\nexport default {\r\n    getAllNodes,\r\n    getSpecificNode,\r\n    testNode,\r\n    loadMethodNode,\r\n    removeTestTriggers\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { Box, Button, Chip, CircularProgress, Stack, Typography, IconButton } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view'\r\nimport socketIOClient from 'socket.io-client'\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton'\r\nimport AttachmentDialog from 'ui-component/dialog/AttachmentDialog'\r\nimport HTMLDialog from 'ui-component/dialog/HTMLDialog'\r\nimport ExpandDataDialog from 'ui-component/dialog/ExpandDataDialog'\r\n\r\n// API\r\nimport nodesApi from 'api/nodes'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// icons\r\nimport { IconExclamationMark, IconCopy, IconArrowUpRightCircle, IconX, IconArrowsMaximize } from '@tabler/icons'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper'\r\n\r\n// ==============================|| OUTPUT RESPONSES ||============================== //\r\n\r\nconst OutputResponses = ({ nodeId, nodeParamsType, nodeFlowData, nodes, edges, workflow, onSubmit }) => {\r\n    const theme = useTheme()\r\n\r\n    const [outputResponse, setOutputResponse] = useState([])\r\n    const [errorResponse, setErrorResponse] = useState(null)\r\n    const [nodeName, setNodeName] = useState(null)\r\n    const [nodeType, setNodeType] = useState(null)\r\n    const [nodeLabel, setNodeLabel] = useState(null)\r\n    const [isTestNodeBtnDisabled, disableTestNodeBtn] = useState(true)\r\n    const [testNodeLoading, setTestNodeLoading] = useState(null)\r\n    const [showHTMLDialog, setShowHTMLDialog] = useState(false)\r\n    const [HTMLDialogProps, setHTMLDialogProps] = useState({})\r\n    const [showAttachmentDialog, setShowAttachmentDialog] = useState(false)\r\n    const [attachmentDialogProps, setAttachmentDialogProps] = useState({})\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\r\n    const [expandDialogProps, setExpandDialogProps] = useState({})\r\n\r\n    const testNodeApi = useApi(nodesApi.testNode)\r\n\r\n    const onTestNodeClick = (nodeType) => {\r\n        /* If workflow is already deployed, stop it first to be safe.\r\n         *  Because it could cause throttled calls\r\n         */\r\n        if (workflow.deployed) {\r\n            setTestNodeLoading(false)\r\n            alert('Testing trigger requires stopping workflow. Please stop workflow first')\r\n            return\r\n        }\r\n\r\n        const testNodeBody = {\r\n            nodes,\r\n            edges,\r\n            nodeId\r\n        }\r\n\r\n        try {\r\n            setTestNodeLoading(true)\r\n\r\n            if (nodeType === 'webhook') {\r\n                const socket = socketIOClient(baseURL)\r\n\r\n                socket.on('connect', async () => {\r\n                    testNodeBody.clientId = socket.id\r\n                    testNodeApi.request(nodeFlowData.name, testNodeBody)\r\n                })\r\n\r\n                socket.on('testWebhookNodeResponse', (data) => {\r\n                    setOutputResponse(data)\r\n                    setTestNodeLoading(false)\r\n                    const formValues = {\r\n                        submit: true,\r\n                        needRetest: null,\r\n                        output: data\r\n                    }\r\n                    onSubmit(formValues, 'outputResponses')\r\n                    socket.disconnect()\r\n                })\r\n            } else {\r\n                testNodeApi.request(nodeFlowData.name, testNodeBody)\r\n            }\r\n        } catch (error) {\r\n            setTestNodeLoading(false)\r\n            setOutputResponse([])\r\n            setErrorResponse(error)\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const checkIfTestNodeValid = () => {\r\n        const paramsTypes = nodeParamsType.filter((type) => type !== 'outputResponses')\r\n        for (let i = 0; i < paramsTypes.length; i += 1) {\r\n            const paramType = paramsTypes[i]\r\n\r\n            if (!nodeFlowData[paramType] || !nodeFlowData[paramType].submit) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    const openAttachmentDialog = (outputResponse) => {\r\n        const dialogProp = {\r\n            title: 'Attachments',\r\n            executionData: outputResponse\r\n        }\r\n        setAttachmentDialogProps(dialogProp)\r\n        setShowAttachmentDialog(true)\r\n    }\r\n\r\n    const openHTMLDialog = (executionData) => {\r\n        const dialogProp = {\r\n            title: 'HTML',\r\n            executionData\r\n        }\r\n        setHTMLDialogProps(dialogProp)\r\n        setShowHTMLDialog(true)\r\n    }\r\n\r\n    const onExpandDialogClicked = (executionData) => {\r\n        const dialogProp = {\r\n            title: `Output Responses: ${nodeLabel} `,\r\n            data: executionData\r\n        }\r\n        setExpandDialogProps(dialogProp)\r\n        setShowExpandDialog(true)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (nodeFlowData && nodeFlowData.outputResponses && nodeFlowData.outputResponses.output) {\r\n            setOutputResponse(nodeFlowData.outputResponses.output)\r\n        } else {\r\n            setOutputResponse([])\r\n        }\r\n\r\n        disableTestNodeBtn(checkIfTestNodeValid())\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [nodeFlowData, nodeParamsType])\r\n\r\n    useEffect(() => {\r\n        if (nodes && nodeId) {\r\n            const selectedNode = nodes.find((nd) => nd.id === nodeId)\r\n            if (selectedNode) {\r\n                setNodeName(selectedNode.data.name)\r\n                setNodeType(selectedNode.data.type)\r\n                setNodeLabel(selectedNode.data.label)\r\n            }\r\n        }\r\n    }, [nodes, nodeId])\r\n\r\n    // Test node successful\r\n    useEffect(() => {\r\n        if (testNodeApi.data && nodeType && nodeType !== 'webhook') {\r\n            const testNodeData = testNodeApi.data\r\n            setOutputResponse(testNodeData)\r\n            setErrorResponse(null)\r\n            const formValues = {\r\n                submit: true,\r\n                needRetest: null,\r\n                output: testNodeData\r\n            }\r\n            onSubmit(formValues, 'outputResponses')\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testNodeApi.data])\r\n\r\n    // Test node error\r\n    useEffect(() => {\r\n        if (testNodeApi.error && nodeType && nodeType !== 'webhook') {\r\n            let errorMessage = 'Unexpected Error.'\r\n\r\n            if (testNodeApi.error.response && testNodeApi.error.response.data) {\r\n                errorMessage = testNodeApi.error.response.data\r\n            } else if (testNodeApi.error.message) {\r\n                errorMessage = testNodeApi.error.message\r\n            }\r\n\r\n            setErrorResponse(errorMessage)\r\n            setOutputResponse([])\r\n            const formValues = {\r\n                submit: null,\r\n                needRetest: null,\r\n                output: []\r\n            }\r\n            onSubmit(formValues, 'outputResponses')\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testNodeApi.error])\r\n\r\n    // Test node loading\r\n    useEffect(() => {\r\n        if (nodeType && nodeType !== 'webhook') setTestNodeLoading(testNodeApi.loading)\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testNodeApi.loading])\r\n\r\n    return (\r\n        <>\r\n            <Box sx={{ width: 400 }}>\r\n                {nodeFlowData && nodeFlowData.outputResponses && nodeFlowData.outputResponses.needRetest && (\r\n                    <Chip sx={{ mb: 2 }} icon={<IconExclamationMark />} label='Retest the node for updated parameters' color='warning' />\r\n                )}\r\n                {nodeName && nodeName === 'webhook' && (\r\n                    <Box sx={{ mb: 3 }}>\r\n                        <Typography variant='h5' sx={{ mb: 1 }}>{`${baseURL}/api/v1/webhook/${nodeFlowData.webhookEndpoint}`}</Typography>\r\n                        <Stack direction='row' spacing={2}>\r\n                            <Button\r\n                                size='small'\r\n                                variant='outlined'\r\n                                startIcon={<IconCopy />}\r\n                                onClick={() => navigator.clipboard.writeText(`${baseURL}/api/v1/webhook/${nodeFlowData.webhookEndpoint}`)}\r\n                            >\r\n                                Copy URL\r\n                            </Button>\r\n                            <Button\r\n                                size='small'\r\n                                variant='outlined'\r\n                                startIcon={<IconArrowUpRightCircle />}\r\n                                onClick={() => window.open(`${baseURL}/api/v1/webhook/${nodeFlowData.webhookEndpoint}`, '_blank')}\r\n                            >\r\n                                Open in New Tab\r\n                            </Button>\r\n                        </Stack>\r\n                    </Box>\r\n                )}\r\n                {errorResponse && (\r\n                    <Box sx={{ mb: 2 }}>\r\n                        <Chip sx={{ mb: 2 }} icon={<IconX />} label='Error' color='error' />\r\n                        <div style={{ color: 'red' }}>{errorResponse}</div>\r\n                    </Box>\r\n                )}\r\n                <Box sx={{ position: 'relative' }}>\r\n                    <ReactJson collapsed src={outputResponse} enableClipboard={(e) => copyToClipboard(e)} />\r\n                    <IconButton\r\n                        size='small'\r\n                        sx={{\r\n                            height: 25,\r\n                            width: 25,\r\n                            position: 'absolute',\r\n                            top: -5,\r\n                            right: 5\r\n                        }}\r\n                        title='Expand Data'\r\n                        color='primary'\r\n                        onClick={() => onExpandDialogClicked(outputResponse)}\r\n                    >\r\n                        <IconArrowsMaximize />\r\n                    </IconButton>\r\n                    <div>\r\n                        {outputResponse.map((respObj, respObjIndex) => (\r\n                            <div key={respObjIndex}>\r\n                                {respObj.html && (\r\n                                    <Typography sx={{ p: 1, mt: 2 }} variant='h5'>\r\n                                        HTML\r\n                                    </Typography>\r\n                                )}\r\n                                {respObj.html && (\r\n                                    <div\r\n                                        style={{\r\n                                            width: '100%',\r\n                                            height: '100%',\r\n                                            maxHeight: 400,\r\n                                            overflow: 'auto',\r\n                                            backgroundColor: 'white',\r\n                                            borderRadius: 5\r\n                                        }}\r\n                                        dangerouslySetInnerHTML={{ __html: respObj.html }}\r\n                                    />\r\n                                )}\r\n                                {respObj.html && (\r\n                                    <Button sx={{ mt: 1 }} size='small' variant='contained' onClick={() => openHTMLDialog(outputResponse)}>\r\n                                        View HTML\r\n                                    </Button>\r\n                                )}\r\n\r\n                                {respObj.attachments && (\r\n                                    <Typography sx={{ p: 1, mt: 2, pb: 0 }} variant='h5'>\r\n                                        Attachments\r\n                                    </Typography>\r\n                                )}\r\n                                {respObj.attachments &&\r\n                                    respObj.attachments.map((attachment, attchIndex) => (\r\n                                        <div key={attchIndex}>\r\n                                            <Typography sx={{ p: 1 }} variant='h6'>\r\n                                                Item {respObjIndex} |{' '}\r\n                                                {attachment.filename ? attachment.filename : `Attachment ${attchIndex}`}\r\n                                            </Typography>\r\n                                            <embed\r\n                                                src={attachment.content}\r\n                                                width='100%'\r\n                                                height='100%'\r\n                                                style={{ borderStyle: 'solid' }}\r\n                                                type={attachment.contentType}\r\n                                            />\r\n                                            <Button size='small' variant='contained' onClick={() => openAttachmentDialog(outputResponse)}>\r\n                                                View Attachment\r\n                                            </Button>\r\n                                        </div>\r\n                                    ))}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </Box>\r\n                <Box sx={{ mt: 2, position: 'relative' }}>\r\n                    <AnimateButton>\r\n                        <Button\r\n                            disableElevation\r\n                            disabled={isTestNodeBtnDisabled || testNodeLoading}\r\n                            fullWidth\r\n                            size='large'\r\n                            type='submit'\r\n                            variant='contained'\r\n                            color='secondary'\r\n                            onClick={() => onTestNodeClick(nodeType)}\r\n                        >\r\n                            Test Node\r\n                        </Button>\r\n                    </AnimateButton>\r\n                    {testNodeLoading && (\r\n                        <CircularProgress\r\n                            size={24}\r\n                            sx={{\r\n                                color: theme.palette.secondary.main,\r\n                                position: 'absolute',\r\n                                top: '50%',\r\n                                left: '50%',\r\n                                marginTop: '-12px',\r\n                                marginLeft: '-12px'\r\n                            }}\r\n                        />\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n            <AttachmentDialog\r\n                show={showAttachmentDialog}\r\n                dialogProps={attachmentDialogProps}\r\n                onCancel={() => setShowAttachmentDialog(false)}\r\n            ></AttachmentDialog>\r\n            <HTMLDialog show={showHTMLDialog} dialogProps={HTMLDialogProps} onCancel={() => setShowHTMLDialog(false)}></HTMLDialog>\r\n            <ExpandDataDialog\r\n                show={showExpandDialog}\r\n                dialogProps={expandDialogProps}\r\n                onCancel={() => setShowExpandDialog(false)}\r\n            ></ExpandDataDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nOutputResponses.propTypes = {\r\n    nodeId: PropTypes.string,\r\n    nodeParamsType: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    nodes: PropTypes.array,\r\n    edges: PropTypes.array,\r\n    workflow: PropTypes.object,\r\n    onSubmit: PropTypes.func\r\n}\r\n\r\nexport default OutputResponses\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\nimport { Box, Fab, List, Accordion, AccordionSummary, AccordionDetails, Paper, Popper, Stack, Typography, IconButton } from '@mui/material'\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport ReactJson from 'react-json-view'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport Transitions from 'ui-component/extended/Transitions'\r\nimport ExpandDataDialog from 'ui-component/dialog/ExpandDataDialog'\r\n\r\n// icons\r\nimport { IconX, IconArrowsMaximize } from '@tabler/icons'\r\n\r\n// ==============================|| VARIABLE SELECTOR ||============================== //\r\n\r\nconst isPositiveNumeric = (value) => /^\\d+$/.test(value)\r\n\r\nconst VariableSelector = ({ nodes, isVariableSelectorOpen, anchorEl, onVariableSelected, handleClose }) => {\r\n    const theme = useTheme()\r\n    const [expanded, setExpanded] = useState(false)\r\n    const [open, setOpen] = useState(false)\r\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\r\n    const [expandDialogProps, setExpandDialogProps] = useState({})\r\n\r\n    const varPrevOpen = useRef(open)\r\n\r\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? nodeLabel : false)\r\n    }\r\n\r\n    const onClipboardCopy = (e, node) => {\r\n        const namespaces = e.namespace\r\n        let returnVariablePath = `${node.id}`\r\n        for (let i = 0; i < namespaces.length; i += 1) {\r\n            const namespace = namespaces[i]\r\n            if (namespace !== 'root') {\r\n                if (isPositiveNumeric(namespace)) {\r\n                    if (returnVariablePath.endsWith('.')) {\r\n                        returnVariablePath = returnVariablePath.substring(0, returnVariablePath.length - 1)\r\n                    }\r\n                    returnVariablePath += `[${namespace}]`\r\n                } else {\r\n                    returnVariablePath += namespace\r\n                }\r\n                if (i !== namespaces.length - 1) {\r\n                    returnVariablePath += '.'\r\n                }\r\n            }\r\n        }\r\n        onVariableSelected(returnVariablePath)\r\n    }\r\n\r\n    const onExpandDialogClicked = (data, node) => {\r\n        const dialogProp = {\r\n            title: `Variable Data: ${node.data.label}`,\r\n            data,\r\n            node\r\n        }\r\n        setExpandDialogProps(dialogProp)\r\n        setShowExpandDialog(true)\r\n    }\r\n\r\n    // Handle Accordian\r\n    useEffect(() => {\r\n        varPrevOpen.current = open\r\n    }, [open])\r\n\r\n    useEffect(() => {\r\n        setOpen(isVariableSelectorOpen)\r\n    }, [isVariableSelectorOpen])\r\n\r\n    return (\r\n        <>\r\n            <Popper\r\n                placement='right-start'\r\n                open={open}\r\n                role={undefined}\r\n                transition\r\n                anchorEl={anchorEl}\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [55, 350]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{ zIndex: 900, width: 350 }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <Fab\r\n                                sx={{\r\n                                    minHeight: 30,\r\n                                    height: 30,\r\n                                    width: 30,\r\n                                    backgroundColor: theme.palette.secondary.light,\r\n                                    color: theme.palette.secondary.main,\r\n                                    position: 'absolute',\r\n                                    right: -10,\r\n                                    top: -10\r\n                                }}\r\n                                size='small'\r\n                                onClick={handleClose}\r\n                            >\r\n                                <IconX />\r\n                            </Fab>\r\n                            <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                <Box sx={{ p: 2 }}>\r\n                                    <Stack>\r\n                                        <Typography variant='h4'>Variable Selector</Typography>\r\n                                    </Stack>\r\n                                </Box>\r\n                                <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>\r\n                                    {nodes && nodes.length === 0 && <Box sx={{ p: 2 }}>No variables</Box>}\r\n\r\n                                    {nodes && nodes.length > 0 && (\r\n                                        <Box sx={{ p: 2 }}>\r\n                                            <List\r\n                                                sx={{\r\n                                                    width: '100%',\r\n                                                    maxWidth: 330,\r\n                                                    py: 0,\r\n                                                    borderRadius: '10px',\r\n                                                    [theme.breakpoints.down('md')]: {\r\n                                                        maxWidth: 300\r\n                                                    },\r\n                                                    '& .MuiListItemSecondaryAction-root': {\r\n                                                        top: 22\r\n                                                    },\r\n                                                    '& .MuiDivider-root': {\r\n                                                        my: 0\r\n                                                    },\r\n                                                    '& .list-container': {\r\n                                                        pl: 7\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {nodes.map((node, index) => (\r\n                                                    <Box key={index}>\r\n                                                        <Accordion\r\n                                                            expanded={expanded === node.data.label}\r\n                                                            onChange={handleAccordionChange(node.data.label)}\r\n                                                        >\r\n                                                            <AccordionSummary\r\n                                                                expandIcon={<ExpandMoreIcon />}\r\n                                                                aria-controls={`${node.data.label}-content`}\r\n                                                                id={`${node.data.label}-header`}\r\n                                                            >\r\n                                                                <Typography variant='h5'>{node.data.label}</Typography>\r\n                                                            </AccordionSummary>\r\n                                                            <AccordionDetails>\r\n                                                                <div style={{ position: 'relative' }}>\r\n                                                                    <ReactJson\r\n                                                                        collapsed\r\n                                                                        src={\r\n                                                                            node.data.outputResponses && node.data.outputResponses.output\r\n                                                                                ? node.data.outputResponses.output\r\n                                                                                : {}\r\n                                                                        }\r\n                                                                        enableClipboard={(e) => onClipboardCopy(e, node)}\r\n                                                                    />\r\n                                                                    <IconButton\r\n                                                                        size='small'\r\n                                                                        sx={{\r\n                                                                            height: 25,\r\n                                                                            width: 25,\r\n                                                                            position: 'absolute',\r\n                                                                            top: -5,\r\n                                                                            right: 5\r\n                                                                        }}\r\n                                                                        title='Expand Variable'\r\n                                                                        color='primary'\r\n                                                                        onClick={() =>\r\n                                                                            onExpandDialogClicked(\r\n                                                                                node.data.outputResponses &&\r\n                                                                                    node.data.outputResponses.output\r\n                                                                                    ? node.data.outputResponses.output\r\n                                                                                    : {},\r\n                                                                                node\r\n                                                                            )\r\n                                                                        }\r\n                                                                    >\r\n                                                                        <IconArrowsMaximize />\r\n                                                                    </IconButton>\r\n                                                                </div>\r\n                                                            </AccordionDetails>\r\n                                                        </Accordion>\r\n                                                    </Box>\r\n                                                ))}\r\n                                            </List>\r\n                                        </Box>\r\n                                    )}\r\n                                </PerfectScrollbar>\r\n                            </MainCard>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n            <ExpandDataDialog\r\n                enableClipboard\r\n                show={showExpandDialog}\r\n                dialogProps={expandDialogProps}\r\n                onCancel={() => setShowExpandDialog(false)}\r\n                onCopyClick={(e, node) => {\r\n                    onClipboardCopy(e, node)\r\n                    setShowExpandDialog(false)\r\n                }}\r\n            ></ExpandDataDialog>\r\n        </>\r\n    )\r\n}\r\n\r\nVariableSelector.propTypes = {\r\n    nodes: PropTypes.array,\r\n    isVariableSelectorOpen: PropTypes.bool,\r\n    anchorEl: PropTypes.any,\r\n    onVariableSelected: PropTypes.func,\r\n    handleClose: PropTypes.func\r\n}\r\n\r\nexport default VariableSelector\r\n","import { useState, useRef, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles'\r\nimport {\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Fab,\r\n    ClickAwayListener,\r\n    Divider,\r\n    Paper,\r\n    Stack,\r\n    Popper,\r\n    Typography,\r\n    TextField,\r\n    Avatar\r\n} from '@mui/material'\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport * as Yup from 'yup'\r\nimport lodash from 'lodash'\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard'\r\nimport Transitions from 'ui-component/extended/Transitions'\r\nimport InputParameters from 'views/inputs/InputParameters'\r\nimport CredentialInput from 'views/inputs/CredentialInput'\r\nimport OutputResponses from 'views/output/OutputResponses'\r\nimport VariableSelector from './VariableSelector'\r\nimport EditVariableDialog from 'ui-component/dialog/EditVariableDialog'\r\n\r\n// API\r\nimport nodesApi from 'api/nodes'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\n\r\n// icons\r\nimport { IconPencil, IconMinus, IconCheck } from '@tabler/icons'\r\n\r\n// utils\r\nimport { getAvailableNodeIdsForVariable, numberOrExpressionRegex, handleCredentialParams } from 'utils/genericHelper'\r\n\r\n// ==============================|| EDIT NODES||============================== //\r\n\r\nconst EditNodes = ({ node, nodes, edges, workflow, onNodeLabelUpdate, onNodeValuesUpdate }) => {\r\n    const theme = useTheme()\r\n\r\n    const [nodeFlowData, setNodeFlowData] = useState(null)\r\n    const [nodeLabel, setNodeLabel] = useState('')\r\n    const [expanded, setExpanded] = useState(false)\r\n    const [open, setOpen] = useState(false)\r\n    const [nodeDetails, setNodeDetails] = useState(null)\r\n    const [nodeParams, setNodeParams] = useState([])\r\n    const [nodeParamsType, setNodeParamsType] = useState([])\r\n    const [nodeParamsInitialValues, setNodeParamsInitialValues] = useState({})\r\n    const [nodeParamsValidation, setNodeParamsValidation] = useState({})\r\n    const [isVariableSelectorOpen, setVariableSelectorOpen] = useState(false)\r\n    const [variableBody, setVariableBody] = useState({})\r\n    const [availableNodesForVariable, setAvailableNodesForVariable] = useState(null)\r\n    const [isEditVariableDialogOpen, setEditVariableDialog] = useState(false)\r\n    const [editVariableDialogProps, setEditVariableDialogProps] = useState({})\r\n\r\n    const anchorRef = useRef(null)\r\n    const ps = useRef()\r\n\r\n    const getSpecificNodeApi = useApi(nodesApi.getSpecificNode)\r\n\r\n    const scrollTop = () => {\r\n        const curr = ps.current\r\n        if (curr) {\r\n            curr.scrollTop = 0\r\n        }\r\n    }\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return\r\n        }\r\n        setOpen(false)\r\n        setVariableSelectorOpen(false)\r\n    }\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen)\r\n        if (open) setVariableSelectorOpen(false)\r\n    }\r\n\r\n    const handleAccordionChange = (paramsType) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? paramsType : false)\r\n        scrollTop()\r\n    }\r\n\r\n    const handleNodeLabelChange = (event) => {\r\n        setNodeLabel(event.target.value)\r\n    }\r\n\r\n    const saveNodeLabel = () => {\r\n        onNodeLabelUpdate(nodeLabel)\r\n    }\r\n\r\n    const onEditVariableDialogOpen = (input, values, arrayItemBody) => {\r\n        const variableNodesIds = getAvailableNodeIdsForVariable(nodes, edges, node.id)\r\n\r\n        const nodesForVariable = []\r\n        for (let i = 0; i < variableNodesIds.length; i += 1) {\r\n            const nodeId = variableNodesIds[i]\r\n            const node = nodes.find((nd) => nd.id === nodeId)\r\n            nodesForVariable.push(node)\r\n        }\r\n\r\n        const dialogProps = {\r\n            input,\r\n            values,\r\n            arrayItemBody,\r\n            availableNodesForVariable: nodesForVariable,\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save'\r\n        }\r\n\r\n        setEditVariableDialogProps(dialogProps)\r\n        setEditVariableDialog(true)\r\n    }\r\n\r\n    const setVariableSelectorState = (variableSelectorState, body) => {\r\n        setVariableSelectorOpen(variableSelectorState)\r\n        if (body) {\r\n            setVariableBody(body)\r\n            const variableNodesIds = getAvailableNodeIdsForVariable(nodes, edges, node.id)\r\n\r\n            const nodesForVariable = []\r\n            for (let i = 0; i < variableNodesIds.length; i += 1) {\r\n                const nodeId = variableNodesIds[i]\r\n                const node = nodes.find((nd) => nd.id === nodeId)\r\n                nodesForVariable.push(node)\r\n            }\r\n            setAvailableNodesForVariable(nodesForVariable)\r\n        }\r\n    }\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n        // Because formParams options can be changed due to show hide options,\r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod')\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod')\r\n\r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = nodeDetails[paramsType].find((param) => param.name === 'credentialMethod')\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options\r\n            }\r\n        }\r\n\r\n        const updateNodeDetails = {\r\n            ...nodeDetails,\r\n            [paramsType]: formParams\r\n        }\r\n        setNodeDetails(updateNodeDetails)\r\n    }\r\n\r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateNodeFlowData = {\r\n            ...nodeFlowData,\r\n            [paramsType]: formValues\r\n        }\r\n        // If input parameters change, notify output has to be retest\r\n        if (nodeFlowData.outputResponses) {\r\n            const outputResponsesFlowData = nodeFlowData.outputResponses\r\n            outputResponsesFlowData.submit = null\r\n            outputResponsesFlowData.needRetest = true\r\n            updateNodeFlowData.outputResponses = outputResponsesFlowData\r\n        }\r\n\r\n        setNodeFlowData(updateNodeFlowData)\r\n        onNodeValuesUpdate(updateNodeFlowData)\r\n    }\r\n\r\n    const onVariableSelected = (returnVariablePath) => {\r\n        if (variableBody) {\r\n            const path = variableBody.path\r\n            const paramsType = variableBody.paramsType\r\n            const newInput = `${variableBody.textBeforeCursorPosition}{{${returnVariablePath}}}${variableBody.textAfterCursorPosition}`\r\n            const clonedNodeFlowData = lodash.cloneDeep(nodeFlowData)\r\n            lodash.set(clonedNodeFlowData, path, newInput)\r\n            valueChanged(clonedNodeFlowData[paramsType], paramsType)\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formValues, paramsType) => {\r\n        const updateNodeFlowData = {\r\n            ...nodeFlowData,\r\n            [paramsType]: formValues\r\n        }\r\n        setNodeFlowData(updateNodeFlowData)\r\n        onNodeValuesUpdate(updateNodeFlowData)\r\n\r\n        const index = nodeParamsType.indexOf(paramsType)\r\n        if (index >= 0 && index !== nodeParamsType.length - 1) {\r\n            setExpanded(nodeParamsType[index + 1])\r\n            scrollTop()\r\n        }\r\n    }\r\n\r\n    const showHideParameters = (input, displayType, index, toBeDeleteParams) => {\r\n        const displayOptions = input[displayType]\r\n        Object.keys(displayOptions).forEach((path) => {\r\n            const comparisonValue = displayOptions[path]\r\n            if (path.includes('$index')) {\r\n                path = path.replace('$index', index)\r\n            }\r\n            const groundValue = lodash.get(nodeFlowData, path, '')\r\n\r\n            if (Array.isArray(comparisonValue)) {\r\n                if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                    toBeDeleteParams.push(input)\r\n                }\r\n                if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                    toBeDeleteParams.push(input)\r\n                }\r\n            } else if (typeof comparisonValue === 'string') {\r\n                if (displayType === 'show' && !(comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))) {\r\n                    toBeDeleteParams.push(input)\r\n                }\r\n                if (displayType === 'hide' && (comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))) {\r\n                    toBeDeleteParams.push(input)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const displayParameters = (params, paramsType, arrayIndex) => {\r\n        const toBeDeleteParams = []\r\n\r\n        for (let i = 0; i < params.length; i += 1) {\r\n            const input = params[i]\r\n\r\n            if (input.type === 'array') {\r\n                const arrayInitialValue = lodash.get(nodeFlowData, `${paramsType}.${input.name}`, [])\r\n                const inputArray = []\r\n                for (let j = arrayIndex; j < arrayInitialValue.length; j += 1) {\r\n                    inputArray.push(displayParameters(input.array || [], paramsType, j))\r\n                }\r\n                input.arrayParams = inputArray\r\n            }\r\n            if (input.show) {\r\n                showHideParameters(input, 'show', arrayIndex, toBeDeleteParams)\r\n            }\r\n            if (input.hide) {\r\n                showHideParameters(input, 'hide', arrayIndex, toBeDeleteParams)\r\n            }\r\n        }\r\n\r\n        let returnParams = params\r\n        for (let i = 0; i < toBeDeleteParams.length; i += 1) {\r\n            returnParams = returnParams.filter((prm) => JSON.stringify(prm) !== JSON.stringify(toBeDeleteParams[i]))\r\n        }\r\n        return returnParams\r\n    }\r\n\r\n    const showHideOptions = (displayType, index, options) => {\r\n        let returnOptions = options\r\n        const toBeDeleteOptions = []\r\n\r\n        for (let i = 0; i < returnOptions.length; i += 1) {\r\n            const option = returnOptions[i]\r\n            const displayOptions = option[displayType]\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n                    const comparisonValue = displayOptions[path]\r\n\r\n                    if (path.includes('$index')) {\r\n                        path = path.replace('$index', index)\r\n                    }\r\n                    const groundValue = lodash.get(nodeFlowData, path, '')\r\n\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option)\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option)\r\n                        }\r\n                    } else if (typeof comparisonValue === 'string') {\r\n                        if (displayType === 'show' && !(comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))) {\r\n                            toBeDeleteOptions.push(option)\r\n                        }\r\n                        if (displayType === 'hide' && (comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))) {\r\n                            toBeDeleteOptions.push(option)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i += 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]))\r\n        }\r\n\r\n        return returnOptions\r\n    }\r\n\r\n    const displayOptions = (params, paramsType, arrayIndex) => {\r\n        let clonedParams = params\r\n\r\n        for (let i = 0; i < clonedParams.length; i += 1) {\r\n            const input = clonedParams[i]\r\n\r\n            if (input.type === 'array') {\r\n                const arrayInitialValue = lodash.get(nodeFlowData, `${paramsType}.${input.name}`, [])\r\n                const inputArray = []\r\n                for (let j = arrayIndex; j < arrayInitialValue.length; j += 1) {\r\n                    inputArray.push(displayOptions(input.arrayParams[j] || [], paramsType, j))\r\n                }\r\n                input.arrayParams = inputArray\r\n            }\r\n\r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', arrayIndex, input.options)\r\n                input.options = showHideOptions('hide', arrayIndex, input.options)\r\n            }\r\n        }\r\n\r\n        return clonedParams\r\n    }\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {}\r\n        for (let i = 0; i < params.length; i += 1) {\r\n            const input = params[i]\r\n            let inputOptional = input.optional\r\n\r\n            if (typeof input.optional === 'object' && input.optional !== null) {\r\n                const keys = Object.keys(input.optional)\r\n                inputOptional = true\r\n                for (let j = 0; j < keys.length; j += 1) {\r\n                    const path = keys[j]\r\n                    const comparisonValue = input.optional[path]\r\n                    const groundValue = lodash.get(nodeFlowData, path, '')\r\n\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        inputOptional = inputOptional && comparisonValue.includes(groundValue)\r\n                    } else if (typeof comparisonValue === 'string') {\r\n                        inputOptional = inputOptional && (comparisonValue === groundValue || new RegExp(comparisonValue).test(groundValue))\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (\r\n                (input.type === 'string' ||\r\n                    input.type === 'password' ||\r\n                    input.type === 'date' ||\r\n                    input.type === 'code' ||\r\n                    input.type === 'json' ||\r\n                    input.type === 'file' ||\r\n                    input.type === 'options' ||\r\n                    input.type === 'asyncOptions') &&\r\n                !inputOptional\r\n            ) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`)\r\n            } else if (input.type === 'number' && !inputOptional) {\r\n                validationSchema[input.name] = Yup.string()\r\n                    .required(`${input.label} is required. Type: ${input.type}`)\r\n                    .matches(numberOrExpressionRegex, `${input.label} must be numbers or a variable expression.`)\r\n            } else if (input.type === 'array' && !inputOptional) {\r\n                /*\r\n                ************\r\n                * Limitation on different object shape within array: https://github.com/jquense/yup/issues/757\r\n                ************\r\n                const innerValidationSchema = setYupValidation(input.arrayParams);\r\n                validationSchema[input.name] = Yup.array(Yup.object(innerValidationSchema)).required(`Must have ${input.label}`).min(1, `Minimum of 1 ${input.label}`);\r\n                */\r\n            }\r\n        }\r\n        return validationSchema\r\n    }\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n        const initialValues = {}\r\n\r\n        const reorganizedParams = displayParameters(nodeDetails[paramsType] || [], paramsType, 0)\r\n        let nodeParams = displayOptions(lodash.cloneDeep(reorganizedParams), paramsType, 0)\r\n\r\n        nodeParams = handleCredentialParams(nodeParams, paramsType, reorganizedParams, nodeFlowData)\r\n\r\n        for (let i = 0; i < nodeParams.length; i += 1) {\r\n            const input = nodeParams[i]\r\n\r\n            // Load from nodeFlowData values\r\n            if (paramsType in nodeFlowData && input.name in nodeFlowData[paramsType]) {\r\n                initialValues[input.name] = nodeFlowData[paramsType][input.name]\r\n\r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name])\r\n                    if (!optionVal) delete initialValues[input.name]\r\n                }\r\n            } else {\r\n                // Load from nodeParams default values\r\n                initialValues[input.name] = input.default || ''\r\n\r\n                // Special case for array, always initialize the item if default is not set\r\n                if (input.type === 'array' && !input.default) {\r\n                    const newObj = {}\r\n                    for (let j = 0; j < input.array.length; j += 1) {\r\n                        newObj[input.array[j].name] = input.array[j].default || ''\r\n                    }\r\n                    initialValues[input.name] = [newObj]\r\n                }\r\n            }\r\n        }\r\n\r\n        initialValues.submit = null\r\n\r\n        setNodeParamsInitialValues(initialValues)\r\n        setNodeParamsValidation(setYupValidation(nodeParams))\r\n        setNodeParams(nodeParams)\r\n    }\r\n\r\n    // Handle Accordian\r\n    const prevOpen = useRef(open)\r\n    useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus()\r\n        }\r\n\r\n        prevOpen.current = open\r\n    }, [open])\r\n\r\n    // Get Node Details from API\r\n    useEffect(() => {\r\n        if (getSpecificNodeApi.data) {\r\n            const nodeDetails = getSpecificNodeApi.data\r\n\r\n            setNodeDetails(nodeDetails)\r\n\r\n            const nodeParamsType = []\r\n\r\n            if (nodeDetails.actions) nodeParamsType.push('actions')\r\n            if (nodeDetails.networks) nodeParamsType.push('networks')\r\n            if (nodeDetails.credentials) nodeParamsType.push('credentials')\r\n            if (nodeDetails.inputParameters) nodeParamsType.push('inputParameters')\r\n            nodeParamsType.push('outputResponses')\r\n\r\n            setNodeParamsType(nodeParamsType)\r\n\r\n            if (nodeParamsType.length) {\r\n                setExpanded(nodeParamsType[0])\r\n                scrollTop()\r\n            }\r\n        }\r\n    }, [getSpecificNodeApi.data])\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (node) {\r\n            setOpen(true)\r\n            setNodeLabel(node.data.label)\r\n            setNodeFlowData(node.data)\r\n            getSpecificNodeApi.request(node.data.name)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [node])\r\n\r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (nodeDetails && nodeFlowData && expanded) {\r\n            initializeFormValuesAndParams(expanded)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [nodeDetails, nodeFlowData, expanded])\r\n\r\n    return (\r\n        <>\r\n            <Fab sx={{ left: 40, top: 20 }} ref={anchorRef} size='small' color='secondary' onClick={handleToggle} title='Edit Node'>\r\n                {open ? <IconMinus /> : <IconPencil />}\r\n            </Fab>\r\n            <Popper\r\n                placement='bottom-end'\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [-80, 14]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n                sx={{ zIndex: 1000 }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                    <Box sx={{ p: 2 }}>\r\n                                        <Stack>\r\n                                            <Typography variant='h4'>Edit Nodes</Typography>\r\n                                        </Stack>\r\n                                    </Box>\r\n                                    <PerfectScrollbar\r\n                                        containerRef={(el) => {\r\n                                            ps.current = el\r\n                                        }}\r\n                                        style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}\r\n                                    >\r\n                                        {!node && <Box sx={{ p: 2 }}>No data</Box>}\r\n\r\n                                        {nodeFlowData && nodeFlowData.label && (\r\n                                            <Box\r\n                                                sx={{\r\n                                                    pl: 4,\r\n                                                    pr: 4,\r\n                                                    pt: 2,\r\n                                                    pb: 2,\r\n                                                    textAlign: 'center',\r\n                                                    display: 'flex',\r\n                                                    flexDirection: 'row',\r\n                                                    alignItems: 'center'\r\n                                                }}\r\n                                            >\r\n                                                <TextField\r\n                                                    id={nodeFlowData.name}\r\n                                                    label='Node Label'\r\n                                                    variant='outlined'\r\n                                                    value={nodeLabel}\r\n                                                    onChange={handleNodeLabelChange}\r\n                                                    fullWidth\r\n                                                />\r\n                                                <Fab\r\n                                                    sx={{\r\n                                                        minHeight: 10,\r\n                                                        height: 27,\r\n                                                        width: 30,\r\n                                                        backgroundColor: theme.palette.secondary.light,\r\n                                                        color: theme.palette.secondary.main,\r\n                                                        ml: 2\r\n                                                    }}\r\n                                                    size='small'\r\n                                                    title='Validate and Save'\r\n                                                    onClick={saveNodeLabel}\r\n                                                >\r\n                                                    <IconCheck />\r\n                                                </Fab>\r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {/* actions */}\r\n                                        {nodeParamsType.includes('actions') && (\r\n                                            <Box sx={{ p: 2 }}>\r\n                                                <Accordion expanded={expanded === 'actions'} onChange={handleAccordionChange('actions')}>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls='actions-content'\r\n                                                        id='actions-header'\r\n                                                    >\r\n                                                        <Typography variant='h4'>Actions</Typography>\r\n                                                        {nodeFlowData && nodeFlowData.actions && nodeFlowData.actions.submit && (\r\n                                                            <Avatar\r\n                                                                variant='rounded'\r\n                                                                sx={{\r\n                                                                    ...theme.typography.smallAvatar,\r\n                                                                    borderRadius: '50%',\r\n                                                                    background: theme.palette.success.dark,\r\n                                                                    color: 'white',\r\n                                                                    ml: 2\r\n                                                                }}\r\n                                                            >\r\n                                                                <IconCheck />\r\n                                                            </Avatar>\r\n                                                        )}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <InputParameters\r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            params={nodeParams}\r\n                                                            paramsType='actions'\r\n                                                            initialValues={nodeParamsInitialValues}\r\n                                                            nodeParamsValidation={nodeParamsValidation}\r\n                                                            nodeFlowData={nodeFlowData}\r\n                                                            setVariableSelectorState={setVariableSelectorState}\r\n                                                            onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                                                            valueChanged={valueChanged}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {/* networks */}\r\n                                        {nodeParamsType.includes('networks') && (\r\n                                            <Box sx={{ p: 2 }}>\r\n                                                <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls='networks-content'\r\n                                                        id='networks-header'\r\n                                                    >\r\n                                                        <Typography variant='h4'>Networks</Typography>\r\n                                                        {nodeFlowData && nodeFlowData.networks && nodeFlowData.networks.submit && (\r\n                                                            <Avatar\r\n                                                                variant='rounded'\r\n                                                                sx={{\r\n                                                                    ...theme.typography.smallAvatar,\r\n                                                                    borderRadius: '50%',\r\n                                                                    background: theme.palette.success.dark,\r\n                                                                    color: 'white',\r\n                                                                    ml: 2\r\n                                                                }}\r\n                                                            >\r\n                                                                <IconCheck />\r\n                                                            </Avatar>\r\n                                                        )}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <InputParameters\r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            params={nodeParams}\r\n                                                            paramsType='networks'\r\n                                                            initialValues={nodeParamsInitialValues}\r\n                                                            nodeParamsValidation={nodeParamsValidation}\r\n                                                            nodeFlowData={nodeFlowData}\r\n                                                            setVariableSelectorState={setVariableSelectorState}\r\n                                                            onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                                                            valueChanged={valueChanged}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {/* credentials */}\r\n                                        {nodeParamsType.includes('credentials') && (\r\n                                            <Box sx={{ p: 2 }}>\r\n                                                <Accordion\r\n                                                    expanded={expanded === 'credentials'}\r\n                                                    onChange={handleAccordionChange('credentials')}\r\n                                                >\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls='credentials-content'\r\n                                                        id='credentials-header'\r\n                                                    >\r\n                                                        <Typography variant='h4'>Credentials</Typography>\r\n                                                        {nodeFlowData && nodeFlowData.credentials && nodeFlowData.credentials.submit && (\r\n                                                            <Avatar\r\n                                                                variant='rounded'\r\n                                                                sx={{\r\n                                                                    ...theme.typography.smallAvatar,\r\n                                                                    borderRadius: '50%',\r\n                                                                    background: theme.palette.success.dark,\r\n                                                                    color: 'white',\r\n                                                                    ml: 2\r\n                                                                }}\r\n                                                            >\r\n                                                                <IconCheck />\r\n                                                            </Avatar>\r\n                                                        )}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <CredentialInput\r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            initialParams={nodeParams}\r\n                                                            paramsType='credentials'\r\n                                                            initialValues={nodeParamsInitialValues}\r\n                                                            initialValidation={nodeParamsValidation}\r\n                                                            valueChanged={valueChanged}\r\n                                                            paramsChanged={paramsChanged}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {/* inputParameters */}\r\n                                        {nodeParamsType.includes('inputParameters') && (\r\n                                            <Box sx={{ p: 2 }}>\r\n                                                <Accordion\r\n                                                    expanded={expanded === 'inputParameters'}\r\n                                                    onChange={handleAccordionChange('inputParameters')}\r\n                                                >\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls='inputParameters-content'\r\n                                                        id='inputParameters-header'\r\n                                                    >\r\n                                                        <Typography variant='h4'>Input Parameters</Typography>\r\n                                                        {nodeFlowData &&\r\n                                                            nodeFlowData.inputParameters &&\r\n                                                            nodeFlowData.inputParameters.submit && (\r\n                                                                <Avatar\r\n                                                                    variant='rounded'\r\n                                                                    sx={{\r\n                                                                        ...theme.typography.smallAvatar,\r\n                                                                        borderRadius: '50%',\r\n                                                                        background: theme.palette.success.dark,\r\n                                                                        color: 'white',\r\n                                                                        ml: 2\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <IconCheck />\r\n                                                                </Avatar>\r\n                                                            )}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <InputParameters\r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            params={nodeParams}\r\n                                                            paramsType='inputParameters'\r\n                                                            initialValues={nodeParamsInitialValues}\r\n                                                            nodeParamsValidation={nodeParamsValidation}\r\n                                                            nodeFlowData={nodeFlowData}\r\n                                                            setVariableSelectorState={setVariableSelectorState}\r\n                                                            onEditVariableDialogOpen={onEditVariableDialogOpen}\r\n                                                            valueChanged={valueChanged}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>\r\n                                        )}\r\n\r\n                                        {/* outputResponses */}\r\n                                        {nodeDetails && nodeFlowData && (\r\n                                            <Box sx={{ p: 2 }}>\r\n                                                <Accordion\r\n                                                    expanded={expanded === 'outputResponses'}\r\n                                                    onChange={handleAccordionChange('outputResponses')}\r\n                                                >\r\n                                                    <AccordionSummary\r\n                                                        expandIcon={<ExpandMoreIcon />}\r\n                                                        aria-controls='outputResponses-content'\r\n                                                        id='outputResponses-header'\r\n                                                    >\r\n                                                        <Typography variant='h4'>Output Responses</Typography>\r\n                                                        {nodeFlowData &&\r\n                                                            nodeFlowData.outputResponses &&\r\n                                                            nodeFlowData.outputResponses.submit && (\r\n                                                                <Avatar\r\n                                                                    variant='rounded'\r\n                                                                    sx={{\r\n                                                                        ...theme.typography.smallAvatar,\r\n                                                                        borderRadius: '50%',\r\n                                                                        background: theme.palette.success.dark,\r\n                                                                        color: 'white',\r\n                                                                        ml: 2\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <IconCheck />\r\n                                                                </Avatar>\r\n                                                            )}\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <OutputResponses\r\n                                                            key={node.id} // to reload whenever node changed\r\n                                                            nodeId={node.id}\r\n                                                            nodeParamsType={nodeParamsType}\r\n                                                            nodeFlowData={nodeFlowData}\r\n                                                            nodes={nodes}\r\n                                                            edges={edges}\r\n                                                            workflow={workflow}\r\n                                                            onSubmit={onSubmit}\r\n                                                        />\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n                                                <Divider />\r\n                                            </Box>\r\n                                        )}\r\n                                    </PerfectScrollbar>\r\n                                    <VariableSelector\r\n                                        key={JSON.stringify(availableNodesForVariable)}\r\n                                        nodes={availableNodesForVariable}\r\n                                        isVariableSelectorOpen={isVariableSelectorOpen}\r\n                                        anchorEl={anchorRef.current}\r\n                                        onVariableSelected={(returnVariablePath) => onVariableSelected(returnVariablePath)}\r\n                                        handleClose={() => setVariableSelectorOpen(false)}\r\n                                    />\r\n                                    <EditVariableDialog\r\n                                        key={JSON.stringify(editVariableDialogProps)}\r\n                                        show={isEditVariableDialogOpen}\r\n                                        dialogProps={editVariableDialogProps}\r\n                                        onCancel={() => setEditVariableDialog(false)}\r\n                                        onConfirm={(updateValues) => {\r\n                                            valueChanged(updateValues, expanded)\r\n                                            setEditVariableDialog(false)\r\n                                        }}\r\n                                    />\r\n                                </MainCard>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    )\r\n}\r\n\r\nEditNodes.propTypes = {\r\n    node: PropTypes.object,\r\n    nodes: PropTypes.array,\r\n    edges: PropTypes.array,\r\n    workflow: PropTypes.object,\r\n    onNodeLabelUpdate: PropTypes.func,\r\n    onNodeValuesUpdate: PropTypes.func\r\n}\r\n\r\nexport default EditNodes\r\n","import { createPortal } from 'react-dom'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@mui/material'\r\nimport useConfirm from 'hooks/useConfirm'\r\n\r\nconst ConfirmDialog = () => {\r\n    const { onConfirm, onCancel, confirmState } = useConfirm()\r\n    const portalElement = document.getElementById('portal')\r\n\r\n    const component = confirmState.show ? (\r\n        <Dialog\r\n            fullWidth\r\n            maxWidth='xs'\r\n            open={confirmState.show}\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {confirmState.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText sx={{ color: 'black' }} id='alert-dialog-description'>\r\n                    {confirmState.description}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>{confirmState.cancelButtonName}</Button>\r\n                <Button variant='contained' onClick={onConfirm}>\r\n                    {confirmState.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nexport default ConfirmDialog\r\n","import { createPortal } from 'react-dom'\r\nimport PropTypes from 'prop-types'\r\nimport { useSelector } from 'react-redux'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Box,\r\n    Divider,\r\n    InputAdornment,\r\n    List,\r\n    ListItemButton,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    OutlinedInput,\r\n    Stack\r\n} from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// icons\r\nimport { IconSearch } from '@tabler/icons'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst TestWorkflowDialog = ({ show, dialogProps, onCancel, onItemClick }) => {\r\n    const portalElement = document.getElementById('portal')\r\n    const theme = useTheme()\r\n    const customization = useSelector((state) => state.customization)\r\n\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [nodes, setNodes] = useState([])\r\n\r\n    const filterSearch = (value) => {\r\n        setSearchValue(value)\r\n        setTimeout(() => {\r\n            if (value) {\r\n                const returnData = dialogProps.nodes.filter((nd) => nd.data.label.toLowerCase().includes(value.toLowerCase()))\r\n                setNodes(returnData)\r\n            } else if (value === '') {\r\n                setNodes(dialogProps.nodes)\r\n            }\r\n        }, 500)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dialogProps.nodes) {\r\n            setNodes(dialogProps.nodes)\r\n        }\r\n    }, [dialogProps])\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            fullWidth\r\n            maxWidth='md'\r\n            onClose={onCancel}\r\n            aria-labelledby='alert-dialog-title'\r\n            aria-describedby='alert-dialog-description'\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Stack>\r\n                    <span>Select a starting point to test from. Workflow will be executed from the starting point till the end.</span>\r\n                </Stack>\r\n                <Box sx={{ p: 2 }}>\r\n                    <OutlinedInput\r\n                        sx={{ width: '100%', pr: 1, pl: 2, my: 2 }}\r\n                        id='input-search-node'\r\n                        value={searchValue}\r\n                        onChange={(e) => filterSearch(e.target.value)}\r\n                        placeholder='Search nodes'\r\n                        startAdornment={\r\n                            <InputAdornment position='start'>\r\n                                <IconSearch stroke={1.5} size='1rem' color={theme.palette.grey[500]} />\r\n                            </InputAdornment>\r\n                        }\r\n                        aria-describedby='search-helper-text'\r\n                        inputProps={{\r\n                            'aria-label': 'weight'\r\n                        }}\r\n                    />\r\n                    <Divider />\r\n                </Box>\r\n                <div>\r\n                    <Box sx={{ p: 2 }}>\r\n                        <List\r\n                            sx={{\r\n                                width: '100%',\r\n                                py: 0,\r\n                                borderRadius: '10px',\r\n                                [theme.breakpoints.down('md')]: {\r\n                                    maxWidth: 300\r\n                                },\r\n                                '& .MuiListItemSecondaryAction-root': {\r\n                                    top: 22\r\n                                },\r\n                                '& .MuiDivider-root': {\r\n                                    my: 0\r\n                                },\r\n                                '& .list-container': {\r\n                                    pl: 7\r\n                                }\r\n                            }}\r\n                        >\r\n                            {nodes.map((node) => (\r\n                                <div key={node.id}>\r\n                                    <ListItemButton\r\n                                        sx={{ p: 0, borderRadius: `${customization.borderRadius}px` }}\r\n                                        onClick={() => onItemClick(node.id)}\r\n                                    >\r\n                                        <ListItem alignItems='center'>\r\n                                            <ListItemAvatar>\r\n                                                <div style={{ width: 50, height: 50, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                                    <img\r\n                                                        style={{ width: '100%', height: '100%', padding: 10, objectFit: 'contain' }}\r\n                                                        alt={node.data.name}\r\n                                                        src={`${baseURL}/api/v1/node-icon/${node.data.name}`}\r\n                                                    />\r\n                                                </div>\r\n                                            </ListItemAvatar>\r\n                                            <ListItemText sx={{ ml: 1 }} primary={node.data.label} secondary={node.data.description} />\r\n                                        </ListItem>\r\n                                    </ListItemButton>\r\n                                    <Divider />\r\n                                </div>\r\n                            ))}\r\n                        </List>\r\n                    </Box>\r\n                </div>\r\n            </DialogContent>\r\n        </Dialog>\r\n    ) : null\r\n\r\n    return createPortal(component, portalElement)\r\n}\r\n\r\nTestWorkflowDialog.propTypes = {\r\n    show: PropTypes.bool,\r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onItemClick: PropTypes.func\r\n}\r\n\r\nexport default TestWorkflowDialog\r\n","import client from './client'\r\n\r\nconst deleteAllTestWebhooks = () => client.post(`/remove-test-webhooks`)\r\n\r\nexport default {\r\n    deleteAllTestWebhooks\r\n}\r\n","import { useEffect, useRef, useState, useCallback } from 'react'\r\nimport ReactFlow, { ReactFlowProvider, addEdge, MiniMap, Controls, Background, useNodesState, useEdgesState } from 'react-flow-renderer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { usePrompt } from '../../utils/usePrompt'\r\nimport {\r\n    REMOVE_DIRTY,\r\n    SET_DIRTY,\r\n    SET_WORKFLOW,\r\n    enqueueSnackbar as enqueueSnackbarAction,\r\n    closeSnackbar as closeSnackbarAction\r\n} from 'store/actions'\r\n\r\n// material-ui\r\nimport { Toolbar, Box, AppBar, Button, Fab, CircularProgress } from '@mui/material'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\n// project imports\r\nimport CanvasNode from './CanvasNode'\r\nimport ButtonEdge from './ButtonEdge'\r\nimport CanvasHeader from './CanvasHeader'\r\nimport AddNodes from './AddNodes'\r\nimport EditNodes from './EditNodes'\r\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\r\nimport TestWorkflowDialog from 'ui-component/dialog/TestWorkflowDialog'\r\n\r\n// API\r\nimport nodesApi from 'api/nodes'\r\nimport workflowsApi from 'api/workflows'\r\nimport webhooksApi from 'api/webhooks'\r\n\r\n// Hooks\r\nimport useApi from 'hooks/useApi'\r\nimport useConfirm from 'hooks/useConfirm'\r\n\r\n// icons\r\nimport { IconX, IconBolt } from '@tabler/icons'\r\n\r\n// third party\r\nimport socketIOClient from 'socket.io-client'\r\n\r\n// utils\r\nimport {\r\n    generateWebhookEndpoint,\r\n    getUniqueNodeId,\r\n    checkIfNodeLabelUnique,\r\n    addAnchors,\r\n    getEdgeLabelName,\r\n    checkMultipleTriggers\r\n} from 'utils/genericHelper'\r\nimport useNotifier from 'utils/useNotifier'\r\n\r\n// const\r\nimport { baseURL } from 'store/constant'\r\n\r\nconst nodeTypes = { customNode: CanvasNode }\r\nconst edgeTypes = { buttonedge: ButtonEdge }\r\n\r\n// ==============================|| CANVAS ||============================== //\r\n\r\nconst Canvas = () => {\r\n    const theme = useTheme()\r\n    const navigate = useNavigate()\r\n\r\n    const URLpath = document.location.pathname.toString().split('/')\r\n    const workflowShortId = URLpath[URLpath.length - 1] && URLpath[URLpath.length - 1].startsWith('W') ? URLpath[URLpath.length - 1] : ''\r\n\r\n    const { confirm } = useConfirm()\r\n\r\n    const dispatch = useDispatch()\r\n    const canvas = useSelector((state) => state.canvas)\r\n    const [canvasDataStore, setCanvasDataStore] = useState(canvas)\r\n    const [workflow, setWorkflow] = useState(null)\r\n    const [isTestWorkflowDialogOpen, setTestWorkflowDialogOpen] = useState(false)\r\n    const [testWorkflowDialogProps, setTestWorkflowDialogProps] = useState({})\r\n    const [isTestingWorkflow, setIsTestingWorkflow] = useState(false)\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier()\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\r\n\r\n    // ==============================|| ReactFlow ||============================== //\r\n\r\n    const [nodes, setNodes, onNodesChange] = useNodesState()\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState()\r\n\r\n    const [rfInstance, setRfInstance] = useState(null)\r\n    const [selectedNode, setSelectedNode] = useState(null)\r\n\r\n    const reactFlowWrapper = useRef(null)\r\n\r\n    // ==============================|| Workflow API ||============================== //\r\n\r\n    const getNodesApi = useApi(nodesApi.getAllNodes)\r\n    const removeTestTriggersApi = useApi(nodesApi.removeTestTriggers)\r\n    const deleteAllTestWebhooksApi = useApi(webhooksApi.deleteAllTestWebhooks)\r\n    const createNewWorkflowApi = useApi(workflowsApi.createNewWorkflow)\r\n    const testWorkflowApi = useApi(workflowsApi.testWorkflow)\r\n    const updateWorkflowApi = useApi(workflowsApi.updateWorkflow)\r\n    const getSpecificWorkflowApi = useApi(workflowsApi.getSpecificWorkflow)\r\n\r\n    // ==============================|| Events & Actions ||============================== //\r\n\r\n    const onConnect = (params) => {\r\n        const newEdge = {\r\n            ...params,\r\n            type: 'buttonedge',\r\n            id: `${params.source}-${params.sourceHandle}-${params.target}-${params.targetHandle}`,\r\n            data: { label: getEdgeLabelName(params.sourceHandle) }\r\n        }\r\n        setEdges((eds) => addEdge(newEdge, eds))\r\n        setDirty()\r\n    }\r\n\r\n    const handleTestWorkflow = () => {\r\n        try {\r\n            if (workflow.deployed) {\r\n                alert('Testing workflow requires stopping deployed workflow. Please stop deployed workflow first')\r\n                return\r\n            }\r\n            const rfInstanceObject = rfInstance.toObject()\r\n            const nodes = rfInstanceObject.nodes || []\r\n            setTestWorkflowDialogOpen(true)\r\n            setTestWorkflowDialogProps({\r\n                title: 'Test Workflow',\r\n                nodes: nodes.filter((nd) => !nd.id.includes('ifElse'))\r\n            })\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    const onStartingPointClick = (startingNodeId) => {\r\n        try {\r\n            const socket = socketIOClient(baseURL)\r\n            const rfInstanceObject = rfInstance.toObject()\r\n            const nodes = rfInstanceObject.nodes || []\r\n            const edges = rfInstanceObject.edges || []\r\n            setTestWorkflowDialogOpen(false)\r\n\r\n            socket.on('connect', () => {\r\n                const clientId = socket.id\r\n                const node = nodes.find((nd) => nd.id === startingNodeId)\r\n                const nodeData = node.data\r\n                const body = {\r\n                    nodes,\r\n                    edges,\r\n                    clientId,\r\n                    nodeData\r\n                }\r\n                testWorkflowApi.request(startingNodeId, body)\r\n                setNodes((nds) =>\r\n                    nds.map((node) => {\r\n                        node.data = {\r\n                            ...node.data,\r\n                            outputResponses: {\r\n                                ...node.data.outputResponses,\r\n                                submit: null,\r\n                                needRetest: null\r\n                            },\r\n                            selected: false\r\n                        }\r\n                        return node\r\n                    })\r\n                )\r\n                setIsTestingWorkflow(true)\r\n            })\r\n\r\n            socket.on('testWorkflowNodeResponse', (value) => {\r\n                const { nodeId, data, status } = value\r\n\r\n                const node = nodes.find((nd) => nd.id === nodeId)\r\n                if (node) {\r\n                    const outputValues = {\r\n                        submit: status === 'FINISHED' ? true : null,\r\n                        needRetest: status === 'FINISHED' ? null : true,\r\n                        output: data\r\n                    }\r\n                    const nodeData = node.data\r\n                    nodeData['outputResponses'] = outputValues\r\n                    setNodes((nds) =>\r\n                        nds.map((node) => {\r\n                            if (node.id === nodeId) {\r\n                                node.data = {\r\n                                    ...nodeData,\r\n                                    selected: false\r\n                                }\r\n                            }\r\n                            return node\r\n                        })\r\n                    )\r\n                }\r\n            })\r\n\r\n            socket.on('testWorkflowNodeFinish', () => {\r\n                setIsTestingWorkflow(false)\r\n                socket.disconnect()\r\n            })\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    const handleLoadWorkflow = (file) => {\r\n        try {\r\n            const flowData = JSON.parse(file)\r\n            const nodes = flowData.nodes || []\r\n\r\n            for (let i = 0; i < nodes.length; i += 1) {\r\n                const nodeData = nodes[i].data\r\n                if (nodeData.type === 'webhook') nodeData.webhookEndpoint = generateWebhookEndpoint()\r\n            }\r\n\r\n            setNodes(nodes)\r\n            setEdges(flowData.edges || [])\r\n            setDirty()\r\n        } catch (e) {\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    const handleDeployWorkflow = async () => {\r\n        if (rfInstance) {\r\n            const rfInstanceObject = rfInstance.toObject()\r\n            const flowData = JSON.stringify(rfInstanceObject)\r\n\r\n            try {\r\n                // Always save workflow first\r\n                let savedWorkflowResponse\r\n                if (!workflow.shortId) {\r\n                    const newWorkflowBody = {\r\n                        name: workflow.name,\r\n                        deployed: false,\r\n                        flowData\r\n                    }\r\n                    const response = await workflowsApi.createNewWorkflow(newWorkflowBody)\r\n                    savedWorkflowResponse = response.data\r\n                } else {\r\n                    const updateBody = {\r\n                        flowData\r\n                    }\r\n                    const response = await workflowsApi.updateWorkflow(workflow.shortId, updateBody)\r\n                    savedWorkflowResponse = response.data\r\n                }\r\n\r\n                dispatch({ type: REMOVE_DIRTY })\r\n\r\n                // Then deploy\r\n                const response = await workflowsApi.deployWorkflow(savedWorkflowResponse.shortId)\r\n                const deployedWorkflowResponse = response.data\r\n                dispatch({ type: SET_WORKFLOW, workflow: deployedWorkflowResponse })\r\n\r\n                enqueueSnackbar({\r\n                    message: 'Workflow deployed!',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'success',\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleStopWorkflow = async () => {\r\n        try {\r\n            const response = await workflowsApi.deployWorkflow(workflow.shortId, { halt: true })\r\n            const stoppedWorkflowResponse = response.data\r\n            dispatch({ type: SET_WORKFLOW, workflow: stoppedWorkflowResponse })\r\n\r\n            enqueueSnackbar({\r\n                message: 'Workflow stopped',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        } catch (error) {\r\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n            enqueueSnackbar({\r\n                message: errorData,\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleDeleteWorkflow = async () => {\r\n        const confirmPayload = {\r\n            title: `Delete`,\r\n            description: `Delete workflow ${workflow.name}?`,\r\n            confirmButtonName: 'Delete',\r\n            cancelButtonName: 'Cancel'\r\n        }\r\n        const isConfirmed = await confirm(confirmPayload)\r\n\r\n        if (isConfirmed) {\r\n            try {\r\n                await workflowsApi.deleteWorkflow(workflow.shortId)\r\n                navigate(-1)\r\n            } catch (error) {\r\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\r\n                enqueueSnackbar({\r\n                    message: errorData,\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSaveFlow = (workflowName) => {\r\n        if (rfInstance) {\r\n            setNodes((nds) =>\r\n                nds.map((node) => {\r\n                    node.data = {\r\n                        ...node.data,\r\n                        selected: false\r\n                    }\r\n                    return node\r\n                })\r\n            )\r\n\r\n            const rfInstanceObject = rfInstance.toObject()\r\n            const flowData = JSON.stringify(rfInstanceObject)\r\n\r\n            if (!workflow.shortId) {\r\n                const newWorkflowBody = {\r\n                    name: workflowName,\r\n                    deployed: false,\r\n                    flowData\r\n                }\r\n                createNewWorkflowApi.request(newWorkflowBody)\r\n            } else {\r\n                const updateBody = {\r\n                    name: workflowName,\r\n                    flowData\r\n                }\r\n                updateWorkflowApi.request(workflow.shortId, updateBody)\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n    const onNodeDoubleClick = useCallback((event, clickedNode) => {\r\n        setSelectedNode(clickedNode)\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === clickedNode.id) {\r\n                    node.data = {\r\n                        ...node.data,\r\n                        selected: true\r\n                    }\r\n                } else {\r\n                    node.data = {\r\n                        ...node.data,\r\n                        selected: false\r\n                    }\r\n                }\r\n\r\n                return node\r\n            })\r\n        )\r\n    })\r\n\r\n    // eslint-disable-next-line\r\n    const onNodeLabelUpdate = useCallback((nodeLabel) => {\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === selectedNode.id) {\r\n                    if (!checkIfNodeLabelUnique(nodeLabel, rfInstance.getNodes())) {\r\n                        enqueueSnackbar({\r\n                            message: 'Duplicated node label',\r\n                            options: {\r\n                                key: new Date().getTime() + Math.random(),\r\n                                variant: 'error',\r\n                                persist: true,\r\n                                action: (key) => (\r\n                                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                        <IconX />\r\n                                    </Button>\r\n                                )\r\n                            }\r\n                        })\r\n                    } else {\r\n                        if (node.data.label !== nodeLabel) {\r\n                            setTimeout(() => setDirty(), 0)\r\n                        }\r\n                        node.data = {\r\n                            ...node.data,\r\n                            label: nodeLabel\r\n                        }\r\n                    }\r\n                }\r\n                return node\r\n            })\r\n        )\r\n    })\r\n\r\n    // eslint-disable-next-line\r\n    const onNodeValuesUpdate = useCallback((nodeFlowData) => {\r\n        setNodes((nds) =>\r\n            nds.map((node) => {\r\n                if (node.id === selectedNode.id) {\r\n                    setTimeout(() => setDirty(), 0)\r\n                    node.data = {\r\n                        ...node.data,\r\n                        ...nodeFlowData,\r\n                        selected: true\r\n                    }\r\n                }\r\n                return node\r\n            })\r\n        )\r\n    })\r\n\r\n    const onDragOver = useCallback((event) => {\r\n        event.preventDefault()\r\n        event.dataTransfer.dropEffect = 'move'\r\n    }, [])\r\n\r\n    const onDrop = useCallback(\r\n        (event) => {\r\n            event.preventDefault()\r\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect()\r\n            let nodeData = event.dataTransfer.getData('application/reactflow')\r\n\r\n            // check if the dropped element is valid\r\n            if (typeof nodeData === 'undefined' || !nodeData) {\r\n                return\r\n            }\r\n\r\n            nodeData = JSON.parse(nodeData)\r\n\r\n            // check if workflow contains multiple triggers/webhooks\r\n            if ((nodeData.type === 'webhook' || nodeData.type === 'trigger') && checkMultipleTriggers(rfInstance.getNodes())) {\r\n                enqueueSnackbar({\r\n                    message: 'Workflow can only contains 1 trigger or webhook node',\r\n                    options: {\r\n                        key: new Date().getTime() + Math.random(),\r\n                        variant: 'error',\r\n                        persist: true,\r\n                        action: (key) => (\r\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                                <IconX />\r\n                            </Button>\r\n                        )\r\n                    }\r\n                })\r\n                return\r\n            }\r\n\r\n            if (nodeData.type === 'webhook') nodeData.webhookEndpoint = generateWebhookEndpoint()\r\n\r\n            const position = rfInstance.project({\r\n                x: event.clientX - reactFlowBounds.left - 100,\r\n                y: event.clientY - reactFlowBounds.top - 50\r\n            })\r\n\r\n            const newNodeId = getUniqueNodeId(nodeData, rfInstance.getNodes())\r\n\r\n            const newNode = {\r\n                id: newNodeId,\r\n                position,\r\n                type: 'customNode',\r\n                data: addAnchors(nodeData, rfInstance.getNodes(), newNodeId)\r\n            }\r\n\r\n            setSelectedNode(newNode)\r\n            setNodes((nds) =>\r\n                nds.concat(newNode).map((node) => {\r\n                    if (node.id === newNode.id) {\r\n                        node.data = {\r\n                            ...node.data,\r\n                            selected: true\r\n                        }\r\n                    } else {\r\n                        node.data = {\r\n                            ...node.data,\r\n                            selected: false\r\n                        }\r\n                    }\r\n\r\n                    return node\r\n                })\r\n            )\r\n            setTimeout(() => setDirty(), 0)\r\n        },\r\n\r\n        // eslint-disable-next-line\r\n        [rfInstance]\r\n    )\r\n\r\n    const saveWorkflowSuccess = () => {\r\n        dispatch({ type: REMOVE_DIRTY })\r\n        enqueueSnackbar({\r\n            message: 'Workflow saved',\r\n            options: {\r\n                key: new Date().getTime() + Math.random(),\r\n                variant: 'success',\r\n                action: (key) => (\r\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                        <IconX />\r\n                    </Button>\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    const setDirty = () => {\r\n        dispatch({ type: SET_DIRTY })\r\n    }\r\n\r\n    // ==============================|| useEffect ||============================== //\r\n\r\n    // Get specific workflow successful\r\n    useEffect(() => {\r\n        if (getSpecificWorkflowApi.data) {\r\n            const workflow = getSpecificWorkflowApi.data\r\n            const initialFlow = workflow.flowData ? JSON.parse(workflow.flowData) : []\r\n            setNodes(initialFlow.nodes || [])\r\n            setEdges(initialFlow.edges || [])\r\n            dispatch({ type: SET_WORKFLOW, workflow })\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificWorkflowApi.data])\r\n\r\n    // Create new workflow successful\r\n    useEffect(() => {\r\n        if (createNewWorkflowApi.data) {\r\n            const workflow = createNewWorkflowApi.data\r\n            dispatch({ type: SET_WORKFLOW, workflow })\r\n            saveWorkflowSuccess()\r\n            window.history.replaceState(null, null, `/canvas/${workflow.shortId}`)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [createNewWorkflowApi.data])\r\n\r\n    // Update workflow successful\r\n    useEffect(() => {\r\n        if (updateWorkflowApi.data) {\r\n            dispatch({ type: SET_WORKFLOW, workflow: updateWorkflowApi.data })\r\n            saveWorkflowSuccess()\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [updateWorkflowApi.data])\r\n\r\n    // Test workflow failed\r\n    useEffect(() => {\r\n        if (testWorkflowApi.error) {\r\n            enqueueSnackbar({\r\n                message: 'Test workflow failed',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: (key) => (\r\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [testWorkflowApi.error])\r\n\r\n    // Listen to edge button click remove redux event\r\n    useEffect(() => {\r\n        if (rfInstance) {\r\n            const edges = rfInstance.getEdges()\r\n            setEdges(edges.filter((edge) => edge.id !== canvasDataStore.removeEdgeId))\r\n            setDirty()\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [canvasDataStore.removeEdgeId])\r\n\r\n    useEffect(() => setWorkflow(canvasDataStore.workflow), [canvasDataStore.workflow])\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        removeTestTriggersApi.request()\r\n        deleteAllTestWebhooksApi.request()\r\n\r\n        if (workflowShortId) {\r\n            getSpecificWorkflowApi.request(workflowShortId)\r\n        } else {\r\n            setNodes([])\r\n            setEdges([])\r\n            dispatch({\r\n                type: SET_WORKFLOW,\r\n                workflow: {\r\n                    name: 'Untitled workflow'\r\n                }\r\n            })\r\n        }\r\n\r\n        getNodesApi.request()\r\n\r\n        // Clear dirty state before leaving and remove any ongoing test triggers and webhooks\r\n        return () => {\r\n            removeTestTriggersApi.request()\r\n            deleteAllTestWebhooksApi.request()\r\n\r\n            setTimeout(() => dispatch({ type: REMOVE_DIRTY }), 0)\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setCanvasDataStore(canvas)\r\n    }, [canvas])\r\n\r\n    usePrompt('You have unsaved changes! Do you want to navigate away?', canvasDataStore.isDirty)\r\n\r\n    return (\r\n        <>\r\n            <Box>\r\n                <AppBar\r\n                    enableColorOnDark\r\n                    position='fixed'\r\n                    color='inherit'\r\n                    elevation={1}\r\n                    sx={{\r\n                        bgcolor: theme.palette.background.default\r\n                    }}\r\n                >\r\n                    <Toolbar>\r\n                        <CanvasHeader\r\n                            workflow={workflow}\r\n                            handleSaveFlow={handleSaveFlow}\r\n                            handleDeployWorkflow={handleDeployWorkflow}\r\n                            handleStopWorkflow={handleStopWorkflow}\r\n                            handleDeleteWorkflow={handleDeleteWorkflow}\r\n                            handleLoadWorkflow={handleLoadWorkflow}\r\n                        />\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Box sx={{ marginTop: '70px', height: '90vh', width: '100%' }}>\r\n                    <div className='reactflow-parent-wrapper'>\r\n                        <ReactFlowProvider>\r\n                            <div className='reactflow-wrapper' ref={reactFlowWrapper}>\r\n                                <ReactFlow\r\n                                    nodes={nodes}\r\n                                    edges={edges}\r\n                                    onNodesChange={onNodesChange}\r\n                                    onNodeDoubleClick={onNodeDoubleClick}\r\n                                    onEdgesChange={onEdgesChange}\r\n                                    onDrop={onDrop}\r\n                                    onDragOver={onDragOver}\r\n                                    onNodeDragStop={setDirty}\r\n                                    nodeTypes={nodeTypes}\r\n                                    edgeTypes={edgeTypes}\r\n                                    onConnect={onConnect}\r\n                                    onInit={setRfInstance}\r\n                                    fitView\r\n                                >\r\n                                    <MiniMap\r\n                                        nodeStrokeColor={() => theme.palette.primary.main}\r\n                                        nodeColor={() => theme.palette.primary.main}\r\n                                        nodeBorderRadius={2}\r\n                                    />\r\n                                    <Controls\r\n                                        style={{\r\n                                            display: 'flex',\r\n                                            flexDirection: 'row',\r\n                                            left: '50%',\r\n                                            transform: 'translate(-50%, -50%)'\r\n                                        }}\r\n                                    />\r\n                                    <Background color='#aaa' gap={16} />\r\n                                    <AddNodes nodesData={getNodesApi.data} node={selectedNode} />\r\n                                    <EditNodes\r\n                                        nodes={nodes}\r\n                                        edges={edges}\r\n                                        node={selectedNode}\r\n                                        workflow={workflow}\r\n                                        onNodeLabelUpdate={onNodeLabelUpdate}\r\n                                        onNodeValuesUpdate={onNodeValuesUpdate}\r\n                                    />\r\n                                    <Fab\r\n                                        sx={{ position: 'absolute', right: 20, top: 20 }}\r\n                                        size='small'\r\n                                        color='warning'\r\n                                        aria-label='test'\r\n                                        title='Test Workflow'\r\n                                        disabled={isTestingWorkflow}\r\n                                        onClick={handleTestWorkflow}\r\n                                    >\r\n                                        {<IconBolt />}\r\n                                    </Fab>\r\n                                    {isTestingWorkflow && (\r\n                                        <CircularProgress\r\n                                            size={50}\r\n                                            sx={{\r\n                                                color: theme.palette.warning.dark,\r\n                                                position: 'absolute',\r\n                                                right: 15,\r\n                                                top: 15\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                </ReactFlow>\r\n                            </div>\r\n                        </ReactFlowProvider>\r\n                    </div>\r\n                </Box>\r\n                <ConfirmDialog />\r\n                <TestWorkflowDialog\r\n                    show={isTestWorkflowDialogOpen}\r\n                    dialogProps={testWorkflowDialogProps}\r\n                    onCancel={() => setTestWorkflowDialogOpen(false)}\r\n                    onItemClick={onStartingPointClick}\r\n                />\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Canvas\r\n"],"sourceRoot":""}