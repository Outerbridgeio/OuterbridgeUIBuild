{"version":3,"sources":["utils/genericHelper.js","ui-component/cards/MainCard.js","api/client.js","hooks/useApi.js","ui-component/extended/AnimateButton.js","hooks/useScriptRef.js","utils/useNotifier.js","ui-component/cards/Skeleton/WorkflowCard.js","ui-component/cards/ItemCard.js","views/inputs/ArrayInputParameters.js","views/inputs/OptionParamsResponse.js","views/inputs/AsyncSelectWrapper.js","views/inputs/InputParameters.js","api/credential.js","api/oauth2.js","views/inputs/CredentialInput.js","api/contracts.js","views/contracts/ContractDialog.js","assets/images/contract_empty.svg","views/contracts/index.js"],"names":["numberOrExpressionRegex","getAvailableNodeIdsForVariable","nodes","edges","targetNodeId","reverse","graph","nodeDependencies","i","length","nodeId","id","source","target","Object","prototype","hasOwnProperty","call","push","constructNodeDirectedGraph","exploreNodes","nodeQueue","exploredNodes","shift","parentNodeIds","inputEdges","filter","edg","targetHandle","includes","j","neighbourNodeIds","neighNodeId","getAllConnectedNodesFromTarget","setPath","Set","delete","generateWebhookEndpoint","characters","Array","from","map","charAt","Math","floor","random","join","getUniqueNodeId","nodeData","totalSameNodes","data","name","checkIfNodeLabelUnique","nodeLabel","label","initializeNodeData","nodeParams","initialValues","input","default","type","newObj","array","submit","addAnchors","newNodeId","incoming","outgoing","inputAnchors","newInput","outputAnchors","newOutput","getUniqueNodeLabel","actions","credentials","networks","inputParameters","getEdgeLabelName","sourceSplit","split","checkMultipleTriggers","node","convertDateStringToDateObject","dateString","undefined","date","moment","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","splitDataURI","getFolderName","base64ArrayStr","base64Array","JSON","parse","filenames","filename","e","generateExportFlowData","flowData","selected","newNodeData","isHideRegisteredCredential","params","paramsType","nodeFlowData","clonedParams","selectedCredentialMethodOption","options","find","opt","hideRegisteredCredential","handleCredentialParams","reorganizedParams","nPrm","lodash","cloneDeep","prm","copyToClipboard","src","isArray","navigator","clipboard","writeText","stringify","headerSX","mr","MainCard","forwardRef","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","borderColor","palette","primary","action","variant","className","apiClient","axios","create","baseURL","headers","apiFunc","useState","setData","error","setError","loading","setLoading","request","result","AnimateButton","offset1","offset2","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","defaultProps","useScriptRef","scripted","useRef","useEffect","current","displayed","useNotifier","dispatch","useDispatch","notifications","useSelector","state","notifier","useSnackbar","enqueueSnackbar","closeSnackbar","React","forEach","key","message","dismissed","onClose","event","reason","myKey","onExited","removeSnackbar","WorkflowCard","Card","CardContent","Grid","container","item","justifyContent","Skeleton","width","height","my","CardWrapper","styled","backgroundColor","color","darkTextPrimary","overflow","position","cursor","ItemCard","isLoading","images","onClick","chipSX","padding","activeWorkflowSX","success","dark","light","getNetworkItem","network","ntw","Box","p","style","display","flexDirection","alignItems","address","borderRadius","marginRight","diameter","seed","jsNumberForAddress","Typography","fontSize","fontWeight","mt","mb","flexGrow","whiteSpace","textOverflow","maxWidth","substring","slice","executionCount","deployed","Chip","marginTop","img","objectFit","alt","StyledPopper","Popper","autocompleteClasses","listbox","boxSizing","margin","DateCustomInput","value","paddingTop","paddingBottom","paddingRight","paddingLeft","textAlign","opacity","propTypes","PropTypes","string","func","ArrayInputParameters","arrayParams","arrayGroupName","errors","onArrayInputChange","onArrayInputBlur","onArrayItemRemove","onArrayItemMouseUp","customization","processUpdateValues","inputValue","inputName","values","index","updateArrayValues","updateInitialValues","onInputChange","onInputBlur","onMouseUp","valueIndex","cursorPosition","selectionEnd","textBeforeCursorPosition","textAfterCursorPosition","path","_","Fab","minHeight","main","right","top","size","splice","onRemoveClick","paramIndex","FormControl","fullWidth","Boolean","Stack","description","Tooltip","placement","IconButton","Info","grey","marginBottom","Button","component","startIcon","hidden","onChange","files","file","reader","FileReader","onload","evt","readAsDataURL","handleFileUpload","setFieldValue","directory","webkitdirectory","readFile","fileIndex","webkitRelativePath","handleFolderUpload","placeholder","locale","body","onBlur","json","onValueChange","code","highlight","languages","js","customInput","showTimeSelect","isClearable","timeInputLabel","dateFormat","toISOString","OutlinedInput","Switch","checked","inputProps","availableOptions","Autocomplete","freeSolo","onOpen","option","selection","PopperComponent","renderInput","TextField","renderOption","props","OptionParamsResponse","getSelectedValue","getSelectedOptionInputParams","selectedOption","getSelectedOptionExampleParams","exampleParameters","getSelectedOptionExampleResponse","exampleResponse","dangerouslySetInnerHTML","__html","collapsed","enableClipboard","AsyncSelectWrapper","loadMethod","loadFromDbCollections","onMenuOpen","onSetError","customStyles","provided","isSelected","control","singleValue","menuList","asyncOptions","setAsyncOptions","styles","formatOptionLabel","context","getOptionLabel","getOptionValue","loadOptions","callback","post","then","response","returnOptions","toBeDeleteOptions","displayTypes","displayType","displayOptions","keys","comparisonValue","replace","groundValue","get","RegExp","test","showHideOptions","toLowerCase","defaultOptions","bottom","fontStyle","formatErrorMessage","InputParameters","nodeParamsValidation","valueChanged","onSubmit","setVariableSelectorState","scriptedRef","onChanged","updateValues","findMatchingOptions","enableReinitialize","validationSchema","Yup","shape","setErrors","setStatus","setSubmitting","err","console","handleBlur","handleChange","handleSubmit","isSubmitting","noValidate","overwriteValues","multiline","rows","maxRows","minRows","arrayParamItems","templateArray","arrayItemsValues","variableState","disableElevation","arrayItems","arrayName","onAddArrayItem","disabled","nodeCredentialName","client","isEncrypted","credentialBody","put","credentialId","ADD_NEW_CREDENTIAL","CredentialInput","initialParams","initialValidation","paramsChanged","credentialValidation","setCredentialValidation","credentialValues","setCredentialValues","setNodeCredentialName","credentialParams","setCredentialParams","credentialOptions","setCredentialOptions","oAuth2RedirectURL","setOAuth2RedirectURL","getCredentialParamsApi","useApi","credentialApi","getRegisteredCredentialsApi","getSpecificCredentialApi","getCredentialRequestBody","Error","credentialData","credParamName","credentialMethod","clearCredentialParams","updateParams","every","paramItem","clearCredentialParamsValues","registeredCredential","onDeleteCredential","openOAuth2PopUpWindow","oAuth2PopupURL","left","window","screenX","outerWidth","screenY","outerHeight","url","open","_id","validationKey","updateValidation","required","updateYupValidation","newCredentialParams","unshift","isAddNewCredential","oauth2Api","popUpWindow","oAuth2Completed","removeEventListener","submitValues","close","addEventListener","selectedCredential","redirectURLResp","ContractDialog","show","dialogProps","onCancel","onConfirm","portalElement","document","getElementById","enqueueSnackbarAction","closeSnackbarAction","contract_details","contractDetails","setContractDetails","contractData","setContractData","contractParams","setContractParams","contractValues","setContractValues","contractValidation","setContractValidation","expanded","setExpanded","invalidAddress","setInvalidAddress","invalidABI","setInvalidABI","isReadyToAdd","setIsReadyToAdd","contractParamsType","getSpecificContractApi","contractsApi","handleAccordionChange","isExpanded","reset","addNewContract","createNewContractBody","contractInfo","abi","providerCredential","getTime","persist","saveContract","saveContractBody","deleteContract","fetchABI","formValues","selectedNetwork","uri","resp","updateContractData","status","indexOf","paramType","ethers","utils","isAddress","updateFormValues","initializeFormValuesAndParams","optional","setYupValidation","transformContractResponse","contractResponseData","checkIsReadyToAdd","Dialog","DialogTitle","DialogContent","icon","networkExplorers","Accordion","AccordionSummary","expandIcon","Avatar","typography","smallAvatar","background","ml","AccordionDetails","Divider","formParams","credentialMethodParam","param","credentialMethodParamIndex","findIndex","originalParam","updateContractDetails","DialogActions","cancelButtonName","confirmButtonName","createPortal","Contracts","showDialog","setShowDialog","setDialogProps","getAllContractsApi","spacing","gridSpacing","lg","md","sm","xs","ContractEmptySVG"],"mappings":"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","file":"static/js/9.f3aeed6b.chunk.js","sourcesContent":["import lodash from 'lodash';\r\nimport moment from 'moment';\r\n\r\nexport const numberOrExpressionRegex = /^(\\d+\\.?\\d*|{{.*}})$/; //return true if string consists only numbers OR expression {{}}\r\n\r\nexport const constructNodeDirectedGraph = (nodes, edges, reverse=false) => {\r\n\r\n    const graph = {};\r\n    const nodeDependencies = {};\r\n\r\n    // Initialize node dependencies and graph\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const nodeId = nodes[i].id;\r\n        nodeDependencies[nodeId] = 0;\r\n        graph[nodeId] = [];\r\n    }\r\n\r\n    for (let i = 0; i < edges.length; i+=1 ) {\r\n        const source = edges[i].source;\r\n        const target = edges[i].target;\r\n\r\n        if (Object.prototype.hasOwnProperty.call(graph, source)) {\r\n            graph[source].push(target);\r\n        } else {\r\n            graph[source] = [target];\r\n        }\r\n\r\n        if (reverse) {\r\n            if (Object.prototype.hasOwnProperty.call(graph, target)) {\r\n                graph[target].push(source);\r\n            } else {\r\n                graph[target] = [source];\r\n            }\r\n        }\r\n\r\n        nodeDependencies[target] += 1;\r\n    }\r\n\r\n    return { graph, nodeDependencies };\r\n}\r\n\r\n// Find starting node with 0 dependencies\r\nexport const findStartingNodeIds = (nodes, nodeDependencies) => {\r\n    const startingNodeIds = [];\r\n    Object.keys(nodeDependencies).forEach((nodeId) => {\r\n        if (nodeDependencies[nodeId] === 0) {\r\n            const node = nodes.find((nd) => nd.id === nodeId);\r\n            if (node && node.data && node.data.type && (node.data.type === 'trigger' || node.data.type === 'webhook')) {\r\n                startingNodeIds.push(nodeId);\r\n            }\r\n        }\r\n    });\r\n\r\n    return startingNodeIds;\r\n}\r\n\r\n// Backtrack function to find all paths from start to target node\r\nexport const getAllPathsFromStartToTarget = (startNodeId, targetNodeId, graph) => {\r\n    const paths = [];\r\n    const visitedNodeIds = new Set();\r\n\r\n    const DFS = (currentNodeId, endNodeId, tempPath) => {\r\n        if (currentNodeId === endNodeId) {\r\n            paths.push(lodash.cloneDeep(tempPath));\r\n            return;\r\n        }\r\n\r\n        const neighbourNodeIds = graph[currentNodeId];\r\n        visitedNodeIds.add(currentNodeId);\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i+=1 ) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (!visitedNodeIds.has(neighNodeId)) {\r\n                tempPath.push(neighNodeId);\r\n                DFS(neighNodeId, endNodeId, tempPath);\r\n                tempPath.pop();\r\n            }\r\n        }\r\n        visitedNodeIds.delete(currentNodeId);\r\n    }\r\n\r\n    DFS(startNodeId, targetNodeId, [startNodeId]);\r\n    return paths;\r\n}\r\n\r\n// Breadth First Search to get all connected parent nodes from target\r\nexport const getAllConnectedNodesFromTarget = (targetNodeId, edges, graph) => {\r\n\r\n    const nodeQueue = [];\r\n    const exploredNodes = [];\r\n\r\n    nodeQueue.push(targetNodeId);\r\n    exploredNodes.push(targetNodeId);\r\n\r\n    while (nodeQueue.length) {\r\n\r\n        const nodeId = nodeQueue.shift() || '';\r\n        const parentNodeIds = [];\r\n\r\n        const inputEdges = edges.filter((edg) => (edg.target === nodeId && edg.targetHandle.includes('-input-')));\r\n        if (inputEdges && inputEdges.length) {\r\n            for (let j = 0; j < inputEdges.length; j+=1 ) {\r\n                parentNodeIds.push(inputEdges[j].source);\r\n            }\r\n        }\r\n\r\n        const neighbourNodeIds = graph[nodeId];\r\n\r\n        for (let i = 0; i < neighbourNodeIds.length; i+=1 ) {\r\n            const neighNodeId = neighbourNodeIds[i];\r\n            if (parentNodeIds.includes(neighNodeId)) {\r\n                if (!exploredNodes.includes(neighNodeId)) {\r\n                    exploredNodes.push(neighNodeId);\r\n                    nodeQueue.push(neighNodeId);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return exploredNodes;\r\n}\r\n\r\nexport const getAvailableNodeIdsForVariable = (nodes, edges, targetNodeId) => {\r\n    const { graph } = constructNodeDirectedGraph(nodes, edges, true);\r\n    const exploreNodes = getAllConnectedNodesFromTarget(targetNodeId, edges, graph);\r\n    const setPath = new Set(exploreNodes);\r\n    setPath.delete(targetNodeId);\r\n    return [...setPath];\r\n}\r\n\r\nexport const generateWebhookEndpoint = () => {\r\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\n    const webhookEndpoint = Array.from({ length: 15 }).map(() => {\r\n        return characters.charAt(\r\n            Math.floor(Math.random() * characters.length),\r\n        );\r\n    }).join('');\r\n    return webhookEndpoint;\r\n}\r\n\r\nexport const getUniqueNodeId = (nodeData, nodes) => {\r\n\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique id\r\n    let nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.id === nodeId) {\r\n            totalSameNodes += 1;\r\n            nodeId = `${nodeData.name}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return nodeId;\r\n};\r\n\r\nconst getUniqueNodeLabel = (nodeData, nodes) => {\r\n\r\n    // Get amount of same nodes\r\n    let totalSameNodes = 0;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.name === nodeData.name) {\r\n            totalSameNodes += 1;\r\n        }\r\n    }\r\n\r\n    // Get unique label\r\n    let nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            totalSameNodes += 1;\r\n            nodeLabel = `${nodeData.label}_${totalSameNodes}`;\r\n        }\r\n    }\r\n    return totalSameNodes === 0 ? nodeData.label : nodeLabel;\r\n};\r\n\r\nexport const checkIfNodeLabelUnique = (nodeLabel, nodes) => {\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.label === nodeLabel) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\n\r\nexport const initializeNodeData = (nodeParams) => {\r\n\r\n    const initialValues = {};\r\n\r\n    for (let i = 0; i < nodeParams.length; i+= 1) {\r\n        const input = nodeParams[i];\r\n\r\n        // Load from nodeParams default values\r\n        initialValues[input.name] = input.default || ''; \r\n\r\n        // Special case for array, always initialize the item if default is not set\r\n        if (input.type === 'array' && !input.default) {\r\n            const newObj = {};\r\n            for (let j = 0; j < input.array.length; j+= 1) {\r\n                newObj[input.array[j].name] = input.array[j].default || '';\r\n            }\r\n            initialValues[input.name] = [newObj];\r\n        }\r\n    }\r\n    \r\n    initialValues.submit = null;\r\n    \r\n    return initialValues;\r\n};\r\n\r\nexport const addAnchors = (nodeData, nodes, newNodeId) => {\r\n    const incoming = nodeData.incoming || 0;\r\n    const outgoing = nodeData.outgoing || 0;\r\n\r\n    const inputAnchors = [];\r\n    for (let i = 0; i < incoming; i+=1 ) {\r\n        const newInput = {\r\n            id: `${newNodeId}-input-${i}`\r\n        };\r\n        inputAnchors.push(newInput);\r\n    }\r\n\r\n    const outputAnchors = [];\r\n    for (let i = 0; i < outgoing; i+=1 ) {\r\n        const newOutput = {\r\n            id: `${newNodeId}-output-${i}`\r\n        };\r\n        outputAnchors.push(newOutput);\r\n    }\r\n    \r\n    nodeData.inputAnchors = inputAnchors;\r\n    nodeData.outputAnchors = outputAnchors;\r\n    nodeData.label = getUniqueNodeLabel(nodeData, nodes);\r\n    \r\n    if (nodeData.actions) nodeData.actions = initializeNodeData(nodeData.actions);\r\n    if (nodeData.credentials) nodeData.credentials = initializeNodeData(nodeData.credentials);\r\n    if (nodeData.networks) nodeData.networks = initializeNodeData(nodeData.networks);\r\n    if (nodeData.inputParameters) nodeData.inputParameters = initializeNodeData(nodeData.inputParameters);\r\n\r\n    return nodeData;\r\n};\r\n\r\nexport const getEdgeLabelName = (source) => {\r\n    const sourceSplit = source.split(\"-\");\r\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\r\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length-1];\r\n        return outputAnchorsIndex === '0' ? 'true' : 'false';\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const checkMultipleTriggers = (nodes) => {\r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        const node = nodes[i];\r\n        if (node.data.type === 'webhook' || node.data.type === 'trigger') {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const convertDateStringToDateObject = (dateString) => {\r\n    if (dateString === undefined || !dateString) return undefined;\r\n\r\n    const date = moment(dateString);\r\n    if (!date.isValid) return undefined;\r\n\r\n    // Sat Sep 24 2022 07:30:14\r\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes());\r\n}\r\n\r\nexport const getFileName = (fileBase64) => {\r\n    const splitDataURI = fileBase64.split(',');\r\n    const filename = splitDataURI[splitDataURI.length-1].split(':')[1];\r\n    return filename;\r\n}\r\n\r\nexport const getFolderName = (base64ArrayStr) => {\r\n    try {\r\n        const base64Array = JSON.parse(base64ArrayStr);\r\n        const filenames = [];\r\n        for (let i = 0; i < base64Array.length; i+=1 ) {\r\n            const fileBase64 = base64Array[i];\r\n            const splitDataURI = fileBase64.split(',');\r\n            const filename = splitDataURI[splitDataURI.length-1].split(':')[1];\r\n            filenames.push(filename);\r\n        }\r\n        return filenames.length ? filenames.join(',') : '';\r\n    } catch(e) {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const generateExportFlowData = (flowData) => {\r\n    const nodes = flowData.nodes;\r\n    const edges = flowData.edges;\r\n    \r\n    for (let i = 0; i < nodes.length; i+=1 ) {\r\n        nodes[i].selected = false;\r\n        const node = nodes[i];\r\n        const newNodeData = {\r\n            label: node.data.label,\r\n            name: node.data.name,\r\n            type: node.data.type,\r\n            inputAnchors: node.data.inputAnchors,\r\n            outputAnchors: node.data.outputAnchors,\r\n            selected: false,\r\n        }\r\n        nodes[i].data = newNodeData;\r\n    }\r\n    const exportJson = {\r\n        nodes,\r\n        edges\r\n    };\r\n    return exportJson;\r\n}\r\n\r\nconst isHideRegisteredCredential = (params, paramsType, nodeFlowData) => {\r\n\r\n    if (!nodeFlowData[paramsType] || !nodeFlowData[paramsType]['credentialMethod']) return undefined;\r\n    let clonedParams = params;\r\n\r\n    for (let i = 0; i < clonedParams.length; i+= 1) {\r\n        const input = clonedParams[i];\r\n        if (input.type === 'options') {\r\n            const selectedCredentialMethodOption = input.options.find((opt) => opt.name === nodeFlowData[paramsType]['credentialMethod']);\r\n            if (\r\n                selectedCredentialMethodOption && \r\n                selectedCredentialMethodOption !== undefined && \r\n                selectedCredentialMethodOption.hideRegisteredCredential\r\n            ) return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const handleCredentialParams = (nodeParams, paramsType, reorganizedParams, nodeFlowData) => {\r\n    if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') === undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        !isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Add hard-coded registeredCredential params\r\n        nodeParams.push({\r\n            name: 'registeredCredential',\r\n        });\r\n\r\n    } else if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'registeredCredential') !== undefined &&\r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') !== undefined &&\r\n        isHideRegisteredCredential(lodash.cloneDeep(reorganizedParams), paramsType, nodeFlowData)\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n\r\n    } else if (\r\n        paramsType === 'credentials' && \r\n        nodeParams.find((nPrm) => nPrm.name === 'credentialMethod') === undefined\r\n    ) {\r\n        // Delete registeredCredential params\r\n        nodeParams = nodeParams.filter((prm) => prm.name !== 'registeredCredential');\r\n    }\r\n    return nodeParams;\r\n}\r\n\r\nexport const copyToClipboard = (e) => {\r\n    const src = e.src;\r\n    if (Array.isArray(src) || typeof src === 'object') {\r\n        navigator.clipboard.writeText(JSON.stringify(src, null, '  '));\r\n    } else {\r\n        navigator.clipboard.writeText(src);\r\n    }\r\n}","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\r\n\r\n// constant\r\nconst headerSX = {\r\n    '& .MuiCardHeader-action': { mr: 0 }\r\n};\r\n\r\n// ==============================|| CUSTOM MAIN CARD ||============================== //\r\n\r\nconst MainCard = forwardRef(\r\n    (\r\n        {\r\n            border = true,\r\n            boxShadow,\r\n            children,\r\n            content = true,\r\n            contentClass = '',\r\n            contentSX = {},\r\n            darkTitle,\r\n            secondary,\r\n            shadow,\r\n            sx = {},\r\n            title,\r\n            ...others\r\n        },\r\n        ref\r\n    ) => {\r\n        const theme = useTheme();\r\n\r\n        return (\r\n            <Card\r\n                ref={ref}\r\n                {...others}\r\n                sx={{\r\n                    border: border ? '1px solid' : 'none',\r\n                    borderColor: theme.palette.primary[200] + 75,\r\n                    ':hover': {\r\n                        boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\r\n                    },\r\n                    ...sx\r\n                }}\r\n            >\r\n                {/* card header and action */}\r\n                {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}\r\n                {darkTitle && title && (\r\n                    <CardHeader sx={headerSX} title={<Typography variant=\"h3\">{title}</Typography>} action={secondary} />\r\n                )}\r\n\r\n                {/* content & header divider */}\r\n                {title && <Divider />}\r\n\r\n                {/* card content */}\r\n                {content && (\r\n                    <CardContent sx={contentSX} className={contentClass}>\r\n                        {children}\r\n                    </CardContent>\r\n                )}\r\n                {!content && children}\r\n            </Card>\r\n        );\r\n    }\r\n);\r\n\r\nMainCard.propTypes = {\r\n    border: PropTypes.bool,\r\n    boxShadow: PropTypes.bool,\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    contentSX: PropTypes.object,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    shadow: PropTypes.string,\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nexport default MainCard;\r\n","import axios from \"axios\";\r\nimport { baseURL } from 'store/constant';\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: `${baseURL}/api/v1`,\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n});\r\n\r\nexport default apiClient;\r\n","import { useState } from \"react\";\r\n\r\nexport default (apiFunc) => {\r\n    const [data, setData] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const request = async (...args) => {\r\n        setLoading(true);\r\n        try {\r\n            const result = await apiFunc(...args);\r\n            setData(result.data);\r\n        } catch (err) {\r\n            setError(err || \"Unexpected Error!\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return {\r\n        data,\r\n        error,\r\n        loading,\r\n        request\r\n    };\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\n// ==============================|| ANIMATION BUTTON ||============================== //\r\n\r\nconst AnimateButton = forwardRef(({ children, type, direction, offset, scale }, ref) => {\r\n    let offset1;\r\n    let offset2;\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset;\r\n            offset2 = 0;\r\n            break;\r\n        case 'right':\r\n        case 'down':\r\n        default:\r\n            offset1 = 0;\r\n            offset2 = offset;\r\n            break;\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2);\r\n    const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div\r\n                        ref={ref}\r\n                        animate={{ y: y !== undefined ? y : '' }}\r\n                        onHoverEnd={() => cycleY()}\r\n                        onHoverStart={() => cycleY()}\r\n                    >\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            }\r\n            return (\r\n                <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                };\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n    }\r\n});\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n};\r\n\r\nexport default AnimateButton;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// ==============================|| ELEMENT REFERENCE HOOKS  ||============================== //\r\n\r\nconst useScriptRef = () => {\r\n    const scripted = useRef(true);\r\n\r\n    useEffect(\r\n        () => () => {\r\n            scripted.current = false;\r\n        },\r\n        []\r\n    );\r\n\r\n    return scripted;\r\n};\r\n\r\nexport default useScriptRef;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useSnackbar } from 'notistack';\r\nimport { removeSnackbar } from 'store/actions';\r\n\r\nlet displayed = [];\r\n\r\nconst useNotifier = () => {\r\n    const dispatch = useDispatch();\r\n    const notifier = useSelector((state) => state.notifier);\r\n    const { notifications } = notifier;\r\n\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const storeDisplayed = (id) => {\r\n        displayed = [...displayed, id];\r\n    };\r\n\r\n    const removeDisplayed = (id) => {\r\n        displayed = [...displayed.filter(key => id !== key)];\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        notifications.forEach(({ key, message, options = {}, dismissed = false }) => {\r\n            if (dismissed) {\r\n                // dismiss snackbar using notistack\r\n                closeSnackbar(key);\r\n                return;\r\n            }\r\n\r\n            // do nothing if snackbar is already displayed\r\n            if (displayed.includes(key)) return;\r\n\r\n            // display snackbar using notistack\r\n            enqueueSnackbar(message, {\r\n                key,\r\n                ...options,\r\n                onClose: (event, reason, myKey) => {\r\n                    if (options.onClose) {\r\n                        options.onClose(event, reason, myKey);\r\n                    }\r\n                },\r\n                onExited: (event, myKey) => {\r\n                    // remove this snackbar from redux store\r\n                    dispatch(removeSnackbar(myKey));\r\n                    removeDisplayed(myKey);\r\n                },\r\n            });\r\n\r\n            // keep track of snackbars that we've displayed\r\n            storeDisplayed(key);\r\n        });\r\n    }, [notifications, closeSnackbar, enqueueSnackbar, dispatch]);\r\n};\r\n\r\nexport default useNotifier;","// material-ui\r\nimport { Card, CardContent, Grid } from '@mui/material';\r\nimport Skeleton from '@mui/material/Skeleton';\r\n\r\n// ==============================|| SKELETON - BRIDGE CARD ||============================== //\r\n\r\nconst WorkflowCard = () => (\r\n    <Card>\r\n        <CardContent>\r\n            <Grid container direction=\"column\">\r\n                <Grid item>\r\n                    <Grid container justifyContent=\"space-between\">\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={44} height={44} />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Skeleton variant=\"rectangular\" width={34} height={34} />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" sx={{ my: 2 }} height={40} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Skeleton variant=\"rectangular\" height={30} />\r\n                </Grid>\r\n            </Grid>\r\n        </CardContent>\r\n    </Card>\r\n);\r\n\r\nexport default WorkflowCard;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Box, Grid, Chip, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonWorkflowCard from 'ui-component/cards/Skeleton/WorkflowCard';\r\n\r\n// Const\r\nimport { networks } from \"store/constant\";\r\n\r\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon';\r\n\r\nconst CardWrapper = styled(MainCard)(({ theme }) => ({\r\n    backgroundColor: '#ffffff',\r\n    color: theme.darkTextPrimary,\r\n    overflow: 'hidden',\r\n    position: 'relative',\r\n    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\r\n    cursor: 'pointer',\r\n    '&:hover': {\r\n        boxShadow: '0 2px 14px 0 rgb(32 40 45 / 20%)'\r\n    }\r\n}));\r\n\r\n// ===========================|| CONTRACT CARD ||=========================== //\r\n\r\nconst ItemCard = ({ isLoading, data, images, onClick }) => {\r\n    const theme = useTheme();\r\n\r\n    const chipSX = {\r\n        height: 24,\r\n        padding: '0 6px'\r\n    };\r\n\r\n    const activeWorkflowSX = {\r\n        ...chipSX,\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.success.light\r\n    };\r\n\r\n    const getNetworkItem = (network) => {\r\n        return networks.find((ntw) => ntw.name === network);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? (\r\n                <SkeletonWorkflowCard />\r\n            ) : (\r\n                <CardWrapper border={false} content={false} onClick={onClick}>\r\n                    <Box sx={{ p: 2.25 }}>\r\n                        <Grid container direction=\"column\">\r\n                            <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n                                {data.address && <div style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white', marginRight: 10 }}>\r\n                                    <Jazzicon diameter={40} seed={jsNumberForAddress(data.address)} />\r\n                                </div>}\r\n                                <Typography sx={{ fontSize: '1.5rem', fontWeight: 500 }}>{data.name}</Typography>\r\n                            </div>\r\n                            <Grid sx={{ mt: 1, mb: 1 }} container direction=\"row\">\r\n                                <Grid item sx={{ flexGrow: 1 }}>\r\n                                    {data.address && (\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontSize: '1rem',\r\n                                            fontWeight: 500,\r\n                                            color: theme.palette.secondary[200],\r\n                                            overflow: 'hidden',\r\n                                            whiteSpace: 'nowrap',\r\n                                            textOverflow: 'ellipsis',\r\n                                            maxWidth: 250\r\n                                        }}\r\n                                    >\r\n                                        {`${data.address.substring(0,8)}...${data.address.slice(-4)}`}\r\n                                    </Typography>)}\r\n                                    {data.flowData && (\r\n                                    <Typography\r\n                                        sx={{\r\n                                            fontSize: '1rem',\r\n                                            fontWeight: 500,\r\n                                            color: theme.palette.secondary[200]\r\n                                        }}\r\n                                    >\r\n                                        Total Executions: {data.executionCount || '0'}\r\n                                    </Typography>)}\r\n                                </Grid>\r\n                                {data.deployed && (\r\n                                    <Grid item>\r\n                                        <Chip label=\"Deployed\" sx={activeWorkflowSX} />\r\n                                    </Grid>\r\n                                )}\r\n                            </Grid>\r\n                            {data.network && (\r\n                                <Grid item>\r\n                                    <Chip label={getNetworkItem(data.network).label} sx={{...chipSX, backgroundColor: getNetworkItem(data.network).color, color: 'white' }} />\r\n                                </Grid>\r\n                            )}\r\n                            {images && <div style={{ display: 'flex', flexDirection: 'row', marginTop: 10 }}>\r\n                                {images.map((img) => (\r\n                                    <div key={img} style={{ width: 40, height: 40, borderRadius: '50%', backgroundColor: 'white' }}>\r\n                                        <img style={{ width: '100%', height: '100%', padding: 5, objectFit: 'contain' }} alt='' src={img} />\r\n                                    </div>\r\n                                ))}\r\n                            </div>}\r\n                            \r\n                        </Grid>\r\n                    </Box>\r\n                </CardWrapper>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nItemCard.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    data: PropTypes.object,\r\n    images: PropTypes.array,\r\n    onClick: PropTypes.func\r\n};\r\n\r\nexport default ItemCard;\r\n","import { useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Switch,\r\n    Fab,\r\n    FormControl,\r\n    Tooltip,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Stack,\r\n    IconButton,\r\n    Button,\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// icons\r\nimport { IconX, IconUpload } from '@tabler/icons';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport JSONInput from \"react-json-editor-ajrm\";\r\nimport locale from \"react-json-editor-ajrm/locale/en\";\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button \r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type='button'\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n    {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string, \r\n    onClick: PropTypes.func, \r\n};\r\n\r\n// ==============================|| ARRAY INPUT PARAMETERS ||============================== //\r\n\r\nconst ArrayInputParameters = ({ \r\n    initialValues, \r\n    arrayParams,\r\n    paramsType,\r\n    arrayGroupName,\r\n    errors, \r\n    onArrayInputChange, \r\n    onArrayInputBlur, \r\n    onArrayItemRemove,\r\n    onArrayItemMouseUp\r\n}) => {\r\n     \r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    const processUpdateValues = (inputValue, inputName, values, index) => {\r\n        const updateArrayValues = {\r\n            ...values,\r\n            [inputName]: inputValue\r\n        };\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues[index] = updateArrayValues;\r\n        return updateInitialValues;\r\n    };\r\n\r\n    const onInputChange = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputChange(updateInitialValues);\r\n    }\r\n\r\n    const onInputBlur = (inputValue, inputName, values, index) => {\r\n        const updateInitialValues = processUpdateValues(inputValue, inputName, values, index);\r\n        onArrayInputBlur(updateInitialValues);\r\n    }\r\n\r\n    const onRemoveClick = (index) => {\r\n        const updateInitialValues = initialValues;\r\n        updateInitialValues.splice(index, 1);\r\n        onArrayItemRemove(updateInitialValues);\r\n        onArrayItemMouseUp(false);\r\n    }\r\n\r\n    const onMouseUp = (e, inputName, valueIndex) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${arrayGroupName}[${valueIndex}].${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition, \r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType\r\n        };\r\n        onArrayItemMouseUp(true, body);\r\n    }\r\n\r\n    const handleFolderUpload = (e, onInputChange, values, inputName, index) => {\r\n\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if( fileIndex >= files.length ) {\r\n                onInputChange(JSON.stringify(base64Array), inputName, values, index)\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload= (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex+1, lodash.cloneDeep(base64Array));\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    };\r\n\r\n    const handleFileUpload = (e, onInputChange, values, inputName, index) => {\r\n\r\n        if (!e.target.files) {\r\n          return;\r\n        }\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n    \r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n            const value = result + `,filename:${name}`;\r\n            onInputChange(value, inputName, values, index)\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    return (\r\n        <>\r\n            {arrayParams.map((_, index) => {\r\n                \r\n                const params = arrayParams[index] || [];\r\n                const values = initialValues[index] || {};\r\n\r\n                return (\r\n                    <Box \r\n                        sx={{\r\n                            p: 2, \r\n                            mb: 2, \r\n                            backgroundColor: theme.palette.secondary.light, \r\n                            borderRadius: `${customization.borderRadius}px`,\r\n                            position: 'relative'\r\n                        }}\r\n                        key={index}\r\n                    >\r\n                        {arrayParams.length > 1 && (\r\n                        <Fab \r\n                            sx={{ \r\n                                minHeight: 30, \r\n                                height: 30, width: 30, \r\n                                backgroundColor: theme.palette.secondary.light, \r\n                                color: theme.palette.secondary.main, \r\n                                position: 'absolute', \r\n                                right: -10, top: -10 \r\n                            }} \r\n                            size=\"small\" \r\n                            onClick={() => onRemoveClick(index)}\r\n                        >\r\n                            <IconX />\r\n                        </Fab>\r\n                        )}\r\n\r\n                    {params.map((input, paramIndex) => {\r\n\r\n                        if (input.type === 'file' || input.type === 'folder') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n\r\n                                {input.type === 'file' && \r\n                                <span \r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        color: theme.palette.grey['800'],\r\n                                        marginBottom: '1rem'\r\n                                    }}>\r\n                                    {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload' }\r\n                                </span>}\r\n\r\n                                {input.type === 'folder' && \r\n                                <span \r\n                                    style={{\r\n                                        fontWeight: 'bold',\r\n                                        color: theme.palette.grey['800'],\r\n                                        marginBottom: '1rem'\r\n                                    }}>\r\n                                    {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload' }\r\n                                </span>}\r\n\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    component=\"label\"\r\n                                    fullWidth\r\n                                    startIcon={<IconUpload />}\r\n                                    sx={{ marginRight: \"1rem\" }}\r\n                                >\r\n                                    {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                    {input.type === 'file' && \r\n                                    <input\r\n                                        type=\"file\"\r\n                                        hidden\r\n                                        onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName, index)}\r\n                                    />}\r\n                                    {input.type === 'folder' && \r\n                                    <input\r\n                                        type=\"file\"\r\n                                        directory=\"\"\r\n                                        webkitdirectory=\"\"\r\n                                        hidden\r\n                                        onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName, index)}\r\n                                    />}\r\n                                </Button>\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'json') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <JSONInput\r\n                                    id={inputName}\r\n                                    placeholder={JSON.parse(values[inputName] || '{}') || JSON.parse(input.default || '{}') || {}}\r\n                                    theme=\"light_mitsuketa_tribute\"\r\n                                    locale={locale}\r\n                                    height=\"200px\"\r\n                                    width=\"100%\"\r\n                                    style={{\r\n                                        container: {\r\n                                            border: '1px solid',\r\n                                            borderColor: theme.palette.grey['500'],\r\n                                            borderRadius: '12px',\r\n                                        },\r\n                                        body: {\r\n                                            fontSize: '0.875rem'\r\n                                        }\r\n                                    }}\r\n                                    onBlur={e => {\r\n                                        if (!e.error) {\r\n                                            const inputValue = e.json;\r\n                                            onInputBlur(inputValue, inputName, values, index);\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'code') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Editor\r\n                                    value={values[inputName] || ''}\r\n                                    onValueChange={code => onInputChange(code, inputName, values, index)}\r\n                                    highlight={code => highlight(code, languages.js)}\r\n                                    padding={10}\r\n                                    style={{\r\n                                        fontSize: '0.875rem',\r\n                                        border: '1px solid',\r\n                                        borderColor: theme.palette.grey['500'],\r\n                                        borderRadius: '12px',\r\n                                    }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'date') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <DatePicker \r\n                                    customInput={<DateCustomInput />}\r\n                                    selected={convertDateStringToDateObject(values[inputName]) || null} \r\n                                    showTimeSelect\r\n                                    isClearable\r\n                                    timeInputLabel=\"Time:\"\r\n                                    dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                    onChange={(date) => {\r\n                                        const inputValue = date ? date.toISOString() : null;\r\n                                        onInputChange(inputValue, inputName, values, index);\r\n                                    }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <OutlinedInput\r\n                                    id={inputName}\r\n                                    type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                    value={values[inputName] || ''}\r\n                                    placeholder={input.placeholder}\r\n                                    name={inputName}\r\n                                    onBlur={(e) => {\r\n                                        const inputValue = e.target.value;\r\n                                        onInputBlur(inputValue, inputName, values, index);\r\n                                        onMouseUp(e, inputName, index);\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        const inputValue = e.target.value;\r\n                                        onInputChange(inputValue, inputName, values, index);\r\n                                    }}\r\n                                    onMouseUp={(e) => onMouseUp(e, inputName, index)}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'boolean') {\r\n\r\n                            const inputName = input.name;\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth \r\n                                sx={{ mb: 1, mt: 1 }}\r\n                                error={errors && errors.length > 0 && errors[index] ?\r\n                                    Boolean(errors[index][inputName]) : false\r\n                                }\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Switch\r\n                                    checked={!!values[inputName]}\r\n                                    onChange={(event) => {\r\n                                        onInputChange(event.target.checked, inputName, values, index)\r\n                                    }}\r\n                                    inputProps={{ 'aria-label': 'controlled' }}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n\r\n                        if (input.type === 'options') {\r\n\r\n                            const inputName = input.name;\r\n                            const availableOptions = input.options || [];\r\n\r\n                            return (\r\n                            <FormControl \r\n                                key={`${inputName}_${paramIndex}`}\r\n                                fullWidth\r\n                                sx={{ mb: 1, mt: 1 }}\r\n                            >\r\n                                <Stack direction=\"row\">\r\n                                    <Typography variant=\"overline\">{input.label}</Typography>\r\n                                    {input.description && (\r\n                                    <Tooltip title={input.description} placement=\"right\">\r\n                                        <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                    </Tooltip>\r\n                                    )}\r\n                                </Stack>\r\n                                <Autocomplete\r\n                                    id={inputName}\r\n                                    freeSolo\r\n                                    onOpen={() => onArrayItemMouseUp(false)}\r\n                                    options={availableOptions}\r\n                                    value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                    onChange={(e, selection) => {\r\n                                        const value = selection ? selection.name : \"\";\r\n                                        onInputBlur(value, inputName, values, index)\r\n                                    }}\r\n                                    PopperComponent={StyledPopper}\r\n                                    renderInput={(params) => (\r\n                                        <TextField \r\n                                            {...params}\r\n                                            value={values[inputName]}\r\n                                            error={errors && errors.length > 0 && errors[index] ?\r\n                                                Boolean(errors[index][inputName]) : false\r\n                                            }\r\n                                        />\r\n                                    )}\r\n                                    renderOption={(props, option) => (\r\n                                        <Box component=\"li\" {...props}>\r\n                                            <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                    {option.label} \r\n                                                </Typography>\r\n                                                {option.description &&\r\n                                                    <Typography sx={{p: 1}}>\r\n                                                        {option.description} \r\n                                                    </Typography>\r\n                                                }\r\n                                            </div>\r\n                                        </Box>\r\n                                    )}\r\n                                />\r\n                            </FormControl>)\r\n                        }\r\n                        return null\r\n                    })}\r\n                    </Box>\r\n                )}\r\n            )} \r\n        </>\r\n    );\r\n};\r\n\r\nArrayInputParameters.propTypes = {\r\n    initialValues: PropTypes.array, \r\n    arrayParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    arrayGroupName: PropTypes.string,\r\n    errors: PropTypes.array, \r\n    onArrayInputChange: PropTypes.func, \r\n    onArrayInputBlur: PropTypes.func,\r\n    onArrayItemRemove: PropTypes.func,\r\n    onArrayItemMouseUp: PropTypes.func,\r\n};\r\n\r\nexport default ArrayInputParameters;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Box, Typography } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport ReactJson from 'react-json-view';\r\n\r\n// utils\r\nimport { copyToClipboard } from 'utils/genericHelper';\r\n\r\n\r\n// ==============================|| OPTION PARAMS RESPONSE ||============================== //\r\n\r\nconst OptionParamsResponse = ({\r\n    value,\r\n    options,\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const getSelectedValue = (value) => options.find((option) => option.name === value);\r\n\r\n    const getSelectedOptionInputParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.inputParameters || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getSelectedOptionExampleParams = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleParameters || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    const getSelectedOptionExampleResponse = (value) => {\r\n        const selectedOption = options.find((option) => option.name === value);\r\n        if (selectedOption) {\r\n            return selectedOption.exampleResponse || '';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getSelectedValue(value) && getSelectedOptionInputParams(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2,\r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Parameters\r\n                    </Typography>\r\n                    <div dangerouslySetInnerHTML={{ __html: getSelectedOptionInputParams(value) }} />\r\n                </Box>\r\n            )}\r\n            \r\n            {getSelectedValue(value) && getSelectedOptionExampleParams(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2, \r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Example Parameters\r\n                    </Typography>\r\n                    <ReactJson \r\n                        collapsed \r\n                        src={JSON.parse(getSelectedOptionExampleParams(value))}\r\n                        enableClipboard={e => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n\r\n            {getSelectedValue(value) && getSelectedOptionExampleResponse(value) && (\r\n                <Box \r\n                    sx={{\r\n                        p: 1,\r\n                        mt: 2, \r\n                        backgroundColor: theme.palette.secondary.light, \r\n                        borderRadius: `15px`,\r\n                        position: 'relative'\r\n                    }}\r\n                >\r\n                    <Typography sx={{p: 1}} variant=\"h6\">\r\n                        Example Response\r\n                    </Typography>\r\n                    <ReactJson \r\n                        collapsed \r\n                        src={getSelectedOptionExampleResponse(value)}\r\n                        enableClipboard={e => copyToClipboard(e)}\r\n                    />\r\n                </Box>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nOptionParamsResponse.propTypes = {\r\n    value: PropTypes.string,\r\n    options: PropTypes.array,\r\n};\r\n\r\nexport default OptionParamsResponse;\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Typography, Stack, IconButton, Tooltip } from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// project imports\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport AsyncSelect from 'react-select/async';\r\nimport axios from \"axios\";\r\n\r\n// icons\r\nimport { IconX } from '@tabler/icons';\r\n\r\n// Constant\r\nimport { baseURL } from 'store/constant';\r\n\r\n\r\n// ==============================|| ASYNC SELECT WRAPPER ||============================== //\r\n\r\nconst AsyncSelectWrapper = ({\r\n    title,\r\n    description,\r\n    value,\r\n    loadMethod,\r\n    loadFromDbCollections,\r\n    nodeFlowData,\r\n    error,\r\n    onChange,\r\n    onMenuOpen,\r\n    onSetError,\r\n}) => {\r\n\r\n    const theme = useTheme();\r\n\r\n    const customStyles = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            paddingTop: 15,\r\n            paddingBottom: 15,\r\n            paddingLeft: 20,\r\n            paddingRight: 20,\r\n            cursor: 'pointer',\r\n            fontWeight: '500',\r\n            backgroundColor: state.isSelected ? theme.palette.primary.light : '',\r\n            color: 'black',\r\n            \"&:hover\": {\r\n                backgroundColor: theme.palette.grey['200']\r\n            },\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            cursor: 'text',\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 6,\r\n            paddingLeft: 6,\r\n            borderRadius: 12,\r\n            \"&:hover\": {\r\n                borderColor: theme.palette.grey['700']\r\n            },\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            fontWeight: '600',\r\n        }),\r\n        menuList: (provided) => ({\r\n            ...provided,\r\n            boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n            borderRadius: '10px',\r\n        }),\r\n    }\r\n    \r\n    const [asyncOptions, setAsyncOptions] = useState([]);\r\n\r\n    const getSelectedValue = (value) => asyncOptions.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n  \r\n    const formatErrorMessage = (error) => {\r\n        if (error) return `*${error.replace(/[\"]/g, \"\")}`;\r\n        return \"\"\r\n    }\r\n\r\n    const showHideOptions = (options) => {\r\n\r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n        const displayTypes = ['show', 'hide'];\r\n\r\n        for (let x = 0; x < displayTypes.length; x+= 1) {\r\n            const displayType = displayTypes[x];\r\n\r\n            for (let i = 0; i < returnOptions.length; i+= 1) {\r\n                const option = returnOptions[i];\r\n                const displayOptions = option[displayType];\r\n        \r\n                if (displayOptions) {\r\n                    Object.keys(displayOptions).forEach((path) => {\r\n                        const comparisonValue = displayOptions[path];\r\n\r\n                        if (path.includes(\"$index\")) {\r\n                            path = path.replace(\"$index\", index);\r\n                        }\r\n                        const groundValue = lodash.get(nodeFlowData, path, '');\r\n\r\n                        if (Array.isArray(comparisonValue)) {\r\n                            if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        } else if (typeof comparisonValue === 'string') {\r\n                            if (displayType === 'show' && !((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                            if (displayType === 'hide' && ((comparisonValue === groundValue) || (new RegExp(comparisonValue).test(groundValue)))) {\r\n                                toBeDeleteOptions.push(option);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i+= 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    }\r\n\r\n    const loadOptions = (inputValue, callback) => {\r\n        axios.post(\r\n            `${baseURL}/api/v1/node-load-method/${nodeFlowData.name}`,\r\n            {...nodeFlowData, loadMethod, loadFromDbCollections}\r\n        ).then((response) => {\r\n            const data = response.data;\r\n            const filteredOption = (data || []).filter((i) =>\r\n                i.label.toLowerCase().includes(inputValue.toLowerCase())\r\n            );\r\n            const options = showHideOptions(filteredOption);\r\n            setAsyncOptions(options);\r\n            callback(options);\r\n        });\r\n    }\r\n\r\n    const formatOptionLabel = ({ label, description }, {context}) => (\r\n        <>\r\n        {context === 'menu' && <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>{label}</div>\r\n            {description && <span style={{ fontWeight: 400, paddingTop: 10, paddingBottom: 10 }}>{description}</span>}\r\n        </div>}\r\n        {context === 'value' && <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <div>{label}</div>\r\n        </div>}\r\n        </>\r\n    );\r\n\r\n    useEffect(() => () => setAsyncOptions([]), []);\r\n\r\n    useEffect(() => {\r\n        if (value !== undefined) {\r\n            const selectedOption = asyncOptions.find((option) => option.name === value)\r\n            if (!selectedOption) {\r\n                onSetError();\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [asyncOptions]); \r\n\r\n    return (\r\n        <>\r\n            <Stack direction=\"row\">\r\n                <Typography variant=\"overline\">{title}</Typography>\r\n                {description && (\r\n                <Tooltip title={description} placement=\"right\">\r\n                    <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                </Tooltip>\r\n                )}\r\n            </Stack>\r\n            <div style={{position: 'relative'}}>\r\n                <AsyncSelect\r\n                    key={JSON.stringify(nodeFlowData)} // to reload async select whenever flowdata changed\r\n                    styles={customStyles}\r\n                    value={getSelectedValue(value) || getDefaultOptionValue()}\r\n                    formatOptionLabel={formatOptionLabel}\r\n                    getOptionLabel={(option) => option.label}\r\n                    getOptionValue={(option) => option.name}\r\n                    loadOptions={loadOptions}\r\n                    defaultOptions\r\n                    onChange={onChange}\r\n                    onMenuOpen={onMenuOpen}\r\n                />\r\n                <button \r\n                    style={{ \r\n                        minHeight: 10, \r\n                        height: 27, width: 30, \r\n                        backgroundColor: '#FAFAFA',\r\n                        color: theme.palette.grey['500'], \r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        top: 0,\r\n                        bottom: 0,\r\n                        margin: 'auto',\r\n                        border: 'none',\r\n                        cursor: 'pointer'                        \r\n                    }} \r\n                    title=\"Clear Selection\"\r\n                    type='button'\r\n                    onClick={() => onChange(null)}\r\n                >\r\n                    <IconX />\r\n                </button>\r\n            </div> \r\n            {error && (\r\n                <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>{formatErrorMessage(error)}</span>\r\n            )}\r\n\r\n            <OptionParamsResponse value={value} options={asyncOptions} />\r\n        </>\r\n    );\r\n}\r\n\r\nAsyncSelectWrapper.propTypes = {\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    value: PropTypes.string,\r\n    loadMethod: PropTypes.string,\r\n    loadFromDbCollections: PropTypes.array,\r\n    nodeFlowData: PropTypes.object,\r\n    error: PropTypes.string,\r\n    onChange: PropTypes.func,\r\n    onMenuOpen: PropTypes.func,\r\n    onSetError: PropTypes.func,\r\n};\r\n\r\nexport default AsyncSelectWrapper;\r\n","import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    Stack,\r\n    FormControl,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    Switch,\r\n    IconButton,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { styled, useTheme } from '@mui/material/styles';\r\n\r\n// third party\r\nimport lodash from 'lodash';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport JSONInput from \"react-json-editor-ajrm\";\r\nimport locale from \"react-json-editor-ajrm/locale/en\";\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport 'prismjs/themes/prism.css';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// project imports\r\nimport useScriptRef from 'hooks/useScriptRef';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport ArrayInputParameters from './ArrayInputParameters';\r\nimport OptionParamsResponse from './OptionParamsResponse';\r\nimport AsyncSelectWrapper from './AsyncSelectWrapper';\r\n\r\n// icons\r\nimport { IconPlus, IconUpload } from '@tabler/icons';\r\n\r\n// utils\r\nimport { convertDateStringToDateObject, getFileName, getFolderName } from 'utils/genericHelper';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\n\r\nconst DateCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <button \r\n        style={{\r\n            backgroundColor: '#fafafa',\r\n            paddingTop: 8,\r\n            paddingBottom: 8,\r\n            paddingRight: 12,\r\n            paddingLeft: 12,\r\n            borderRadius: 12,\r\n            width: '100%',\r\n            height: 50,\r\n            border: `1px solid #BDBDBD`,\r\n            cursor: 'pointer',\r\n            fontWeight: 'bold',\r\n            textAlign: 'start',\r\n            color: '#212121',\r\n            opacity: 0.9\r\n        }}\r\n        type='button'\r\n        onClick={onClick}\r\n        ref={ref}\r\n    >\r\n    {value}\r\n    </button>\r\n));\r\n\r\nDateCustomInput.propTypes = {\r\n    value: PropTypes.string, \r\n    onClick: PropTypes.func, \r\n};\r\n\r\n// ==============================|| INPUT PARAMETERS ||============================== //\r\n\r\nconst InputParameters = ({ \r\n    params, \r\n    paramsType, \r\n    initialValues, \r\n    nodeParamsValidation, \r\n    nodeFlowData,\r\n    valueChanged, \r\n    onSubmit,\r\n    setVariableSelectorState,\r\n    ...others \r\n}) => {\r\n    const theme = useTheme();\r\n\r\n    const scriptedRef = useScriptRef();\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const onMouseUp = (e, inputName) => {\r\n        const cursorPosition = e.target.selectionEnd;\r\n        const textBeforeCursorPosition = e.target.value.substring(0, cursorPosition);\r\n        const textAfterCursorPosition = e.target.value.substring(cursorPosition, e.target.value.length);\r\n        const path = `${paramsType}.${inputName}`;\r\n        const body = {\r\n            textBeforeCursorPosition, \r\n            textAfterCursorPosition,\r\n            path,\r\n            paramsType,\r\n        }\r\n        setVariableSelectorState(true, body);\r\n    }\r\n\r\n    const onAddArrayItem = (values, arrayItems, arrayName) => {\r\n        const updateValues = {\r\n            ...values,\r\n            [arrayName]: arrayItems\r\n        }\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const handleFolderUpload = (e, setFieldValue, values, inputName) => {\r\n\r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n        const files = e.target.files;\r\n        const reader = new FileReader();\r\n\r\n        function readFile(fileIndex, base64Array) {\r\n            if( fileIndex >= files.length ) {\r\n                setFieldValue(inputName, JSON.stringify(base64Array));\r\n                const overwriteValues = {\r\n                    ...values,\r\n                    [inputName]: JSON.stringify(base64Array)\r\n                };\r\n                onChanged(overwriteValues);\r\n                return;\r\n            }\r\n            const file = files[fileIndex];\r\n            reader.onload= (evt) => {\r\n                if (!evt?.target?.result) {\r\n                    return;\r\n                }\r\n                const { result } = evt.target;\r\n                const value = result + `,filepath:${file.webkitRelativePath}`;\r\n                base64Array.push(value);\r\n                readFile(fileIndex+1, lodash.cloneDeep(base64Array));\r\n            }\r\n            reader.readAsDataURL(file);\r\n        }\r\n        readFile(0, []);\r\n    }\r\n\r\n    const handleFileUpload = (e, setFieldValue, values, inputName) => {\r\n        \r\n        setVariableSelectorState(false);\r\n        if (!e.target.files) return;\r\n\r\n        const file = e.target.files[0];\r\n        const { name } = file;\r\n    \r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => {\r\n            if (!evt?.target?.result) {\r\n                return;\r\n            }\r\n            const { result } = evt.target;\r\n\r\n            const value = result + `,filename:${name}`;\r\n            setFieldValue(inputName, value);\r\n            const overwriteValues = {\r\n                ...values,\r\n                [inputName]: value\r\n            };\r\n            onChanged(overwriteValues);\r\n        };\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const findMatchingOptions = (options = [], value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={initialValues}\r\n                validationSchema={Yup.object().shape(nodeParamsValidation)}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    setVariableSelectorState(false);\r\n                    try {\r\n                        if (scriptedRef.current) {\r\n                            values.submit = true;\r\n                            setStatus({ success: true });\r\n                            setSubmitting(false);\r\n                            onSubmit(values, paramsType);\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n                        {params.map((input) => {\r\n\r\n                            if (input.type === 'file' || input.type === 'folder') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    \r\n                                    {input.type === 'file' && \r\n                                    <span \r\n                                        style={{\r\n                                            fontWeight: 'bold',\r\n                                            color: theme.palette.grey['800'],\r\n                                            marginBottom: '1rem'\r\n                                        }}>\r\n                                        {values[inputName] ? getFileName(values[inputName]) : 'Choose a file to upload' }\r\n                                    </span>}\r\n\r\n                                    {input.type === 'folder' && \r\n                                    <span \r\n                                        style={{\r\n                                            fontWeight: 'bold',\r\n                                            color: theme.palette.grey['800'],\r\n                                            marginBottom: '1rem'\r\n                                        }}>\r\n                                        {values[inputName] ? getFolderName(values[inputName]) : 'Choose a folder to upload' }\r\n                                    </span>}\r\n\r\n                                    <Button\r\n                                        variant=\"outlined\"\r\n                                        component=\"label\"\r\n                                        fullWidth\r\n                                        startIcon={<IconUpload />}\r\n                                        sx={{ marginRight: \"1rem\" }}\r\n                                    >\r\n                                        {input.type === 'folder' ? 'Upload Folder' : 'Upload File'}\r\n                                        {input.type === 'file' && \r\n                                        <input\r\n                                            type=\"file\"\r\n                                            hidden\r\n                                            onChange={(e) => handleFileUpload(e, setFieldValue, values, inputName)}\r\n                                        />}\r\n                                        {input.type === 'folder' && \r\n                                        <input\r\n                                            type=\"file\"\r\n                                            directory=\"\"\r\n                                            webkitdirectory=\"\"\r\n                                            hidden\r\n                                            onChange={(e) => handleFolderUpload(e, setFieldValue, values, inputName)}\r\n                                        />}\r\n                                    </Button>\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'json') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <JSONInput\r\n                                        id={inputName}\r\n                                        placeholder={JSON.parse(values[inputName] || '{}') || JSON.parse(input.default || '{}') || {}}\r\n                                        theme=\"light_mitsuketa_tribute\"\r\n                                        locale={locale}\r\n                                        height=\"200px\"\r\n                                        width=\"100%\"\r\n                                        style={{\r\n                                            container: {\r\n                                                border: '1px solid',\r\n                                                borderColor: theme.palette.grey['500'],\r\n                                                borderRadius: '12px',\r\n                                            },\r\n                                            body: {\r\n                                                fontSize: '0.875rem'\r\n                                            }\r\n                                        }}\r\n                                        onBlur={e => {\r\n                                            if (!e.error) {\r\n                                                const value = e.json;\r\n                                                setFieldValue(inputName, value);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }\r\n                                        }}\r\n                                        onChange={() => setVariableSelectorState(false)}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'code') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Editor\r\n                                        value={values[inputName] || ''}\r\n                                        onValueChange={code => {\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, code);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: code\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        highlight={code => highlight(code, languages.js)}\r\n                                        padding={10}\r\n                                        style={{\r\n                                            fontSize: '0.875rem',\r\n                                            border: '1px solid',\r\n                                            borderColor: theme.palette.grey['500'],\r\n                                            borderRadius: '12px',\r\n                                        }}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'date') {\r\n\r\n                                const inputName = input.name;\r\n   \r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <DatePicker \r\n                                        customInput={<DateCustomInput />}\r\n                                        selected={convertDateStringToDateObject(values[inputName]) || null} \r\n                                        showTimeSelect\r\n                                        isClearable\r\n                                        timeInputLabel=\"Time:\"\r\n                                        dateFormat=\"MM/dd/yyyy h:mm aa\"\r\n                                        onChange={(date) => {\r\n                                            const value = date ? date.toISOString() : null;\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                           \r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <OutlinedInput\r\n                                        id={inputName}\r\n                                        type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                        placeholder={input.placeholder}\r\n                                        multiline={!!input.rows}\r\n                                        maxRows={input.rows || 0}\r\n                                        minRows={input.rows || 0}\r\n                                        value={values[inputName] || ''}\r\n                                        name={inputName}\r\n                                        onBlur={e => {\r\n                                            handleBlur(e);\r\n                                            onChanged(values);\r\n                                            onMouseUp(e, inputName);\r\n                                        }}\r\n                                        onMouseUp={(e) => onMouseUp(e, inputName)}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Switch\r\n                                        checked={!!values[inputName]}\r\n                                        onChange={(event) => {\r\n                                            setVariableSelectorState(false);\r\n                                            setFieldValue(inputName, event.target.checked);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: event.target.checked\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'asyncOptions') {\r\n                                const inputName = input.name;\r\n                                return (\r\n                                    <FormControl \r\n                                        key={inputName}\r\n                                        fullWidth\r\n                                        sx={{ mb: 1, mt: 1 }}\r\n                                    >\r\n                                        <AsyncSelectWrapper \r\n                                            title={input.label}\r\n                                            description={input.description}\r\n                                            value={values[inputName]}\r\n                                            loadMethod={input.loadMethod}\r\n                                            loadFromDbCollections={input.loadFromDbCollections || []}\r\n                                            nodeFlowData={nodeFlowData}\r\n                                            error={JSON.stringify(errors[inputName])}\r\n                                            onChange={(selection) => {\r\n                                                const value = selection ? selection.name : \"\";\r\n                                                setFieldValue(inputName, value);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onMenuOpen={() => setVariableSelectorState(false)}\r\n                                            onSetError={() => {\r\n                                                const value = \"\";\r\n                                                setFieldValue(inputName, value);\r\n                                            }}\r\n                                        />\r\n                                    </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n                                const inputName = input.name;\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        onOpen={() => setVariableSelectorState(false)}\r\n                                        options={input.options || []}\r\n                                        value={findMatchingOptions(input.options, values[inputName]) || getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        onInputChange={(e, value) => {\r\n                                            if (!value) setFieldValue(inputName, \"\");\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                    <OptionParamsResponse value={values[inputName]} options={input.options || []} />\r\n                                </FormControl>)\r\n                            }\r\n                            \r\n                            if (input.type === 'array') {\r\n\r\n                                const arrayParamItems = input.arrayParams;\r\n                                const templateArray = input.array;\r\n                                const inputName = input.name;\r\n                                const arrayItemsValues = values[inputName] || [];\r\n\r\n                                return (\r\n                                    <Stack sx={{mt: 1}} key={inputName}>\r\n                                        <Stack direction=\"row\">\r\n                                            <Typography variant=\"overline\">{input.label}</Typography>\r\n                                            {input.description && (\r\n                                            <Tooltip title={input.description} placement=\"right\">\r\n                                                <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                            </Tooltip>\r\n                                            )}\r\n                                        </Stack>\r\n                                        <ArrayInputParameters \r\n                                            initialValues={arrayItemsValues}\r\n                                            arrayParams={arrayParamItems}\r\n                                            paramsType={paramsType}\r\n                                            arrayGroupName={inputName}\r\n                                            errors={errors[inputName] ? errors[inputName] : []} \r\n                                            onArrayInputChange={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                            }}\r\n                                            onArrayInputBlur={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: updateInitialValues\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onArrayItemRemove={(updateInitialValues) => {\r\n                                                setFieldValue(inputName, updateInitialValues);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: updateInitialValues\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }}\r\n                                            onArrayItemMouseUp={(variableState, body) => {\r\n                                                if (body) setVariableSelectorState(variableState, body);\r\n                                                else setVariableSelectorState(variableState);\r\n                                            }}\r\n                                        />\r\n                                        <Box key={inputName} sx={{ mb: 2 }}>\r\n                                            <AnimateButton>\r\n                                                <Button\r\n                                                    disableElevation\r\n                                                    fullWidth\r\n                                                    size=\"small\"\r\n                                                    variant=\"outlined\"\r\n                                                    color=\"secondary\"\r\n                                                    startIcon={<IconPlus />}\r\n                                                    onClick={() => {\r\n                                                        setVariableSelectorState(false);\r\n                                                        let newObj = {};\r\n                                                        if (input.default && input.default.length) {\r\n                                                            newObj = input.default[0];\r\n                                                        } else {\r\n                                                            for (let i = 0; i < templateArray.length; i+= 1) {\r\n                                                                newObj[templateArray[i].name] = templateArray[i].default || '';\r\n                                                            }\r\n                                                        }\r\n                                                        arrayItemsValues.push(newObj);\r\n                                                        onAddArrayItem(values, arrayItemsValues, inputName);\r\n                                                    }}\r\n                                                >\r\n                                                    Add {input.label}\r\n                                                </Button>\r\n                                            </AnimateButton>\r\n                                        </Box>\r\n                                    </Stack>\r\n                                )\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    Continue\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nInputParameters.propTypes = {\r\n    params: PropTypes.array, \r\n    paramsType: PropTypes.string, \r\n    initialValues: PropTypes.object,\r\n    nodeParamsValidation: PropTypes.object, \r\n    nodeFlowData: PropTypes.object,\r\n    valueChanged: PropTypes.func, \r\n    onSubmit: PropTypes.func, \r\n    setVariableSelectorState: PropTypes.func, \r\n};\r\n\r\nexport default InputParameters;\r\n","import client from \"./client\";\r\n\r\nconst getCredentials = (nodeCredentialName) => client.get(\"/credentials\", { params: { nodeCredentialName } });\r\n\r\nconst getCredentialParams = (name) => client.get(`/node-credentials/${name}`);\r\n\r\nconst getSpecificCredential = (id, isEncrypted) => client.get(`/credentials/${id}`, { params: { isEncrypted } });\r\n\r\nconst createNewCredential = (credentialBody) => client.post(`/credentials`, credentialBody); //credentialBody: ICredential \r\n\r\nconst updateCredential = (id, credentialBody) => client.put(`/credentials/${id}`, credentialBody); //credentialBody: ICredential\r\n\r\nconst deleteCredential = (id) => client.delete(`/credentials/${id}`);\r\n\r\nexport default {\r\n    getCredentials,\r\n    getCredentialParams,\r\n    getSpecificCredential,\r\n    createNewCredential,\r\n    updateCredential,\r\n    deleteCredential,\r\n};\r\n","import client from \"./client\";\r\n\r\nconst geOAuth2PopupURL = (credentialId) => client.get(\"/oauth2\", { params: { credentialId } });\r\nconst geOAuth2RedirectURL = () => client.get(\"/oauth2-redirecturl\");\r\n\r\nexport default {\r\n    geOAuth2PopupURL,\r\n    geOAuth2RedirectURL,\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControl,\r\n    Stack,\r\n    OutlinedInput,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    IconButton,\r\n    Switch,\r\n    Tooltip\r\n} from '@mui/material';\r\nimport { Info } from '@mui/icons-material';\r\nimport Autocomplete, { autocompleteClasses } from '@mui/material/Autocomplete';\r\nimport { useTheme, styled } from '@mui/material/styles';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport JSONInput from \"react-json-editor-ajrm\";\r\nimport locale from \"react-json-editor-ajrm/locale/en\";\r\n\r\n// project imports\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// API\r\nimport credentialApi from \"api/credential\";\r\nimport oauth2Api from \"api/oauth2\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\nimport useScriptRef from 'hooks/useScriptRef';\r\n\r\n// icons\r\nimport { IconTrash, IconCopy } from '@tabler/icons';\r\n\r\nconst StyledPopper = styled(Popper)({\r\n    boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)',\r\n    borderRadius: '10px',\r\n    [`& .${autocompleteClasses.listbox}`]: {\r\n        boxSizing: 'border-box',\r\n        '& ul': {\r\n            padding: 10,\r\n            margin: 10,\r\n        },\r\n    },\r\n});\r\n\r\nconst ADD_NEW_CREDENTIAL = '+ Add New Credential';\r\n\r\n// ==============================|| CREDENTIAL INPUT ||============================== //\r\n\r\nconst CredentialInput = ({ \r\n    initialParams,\r\n    paramsType,\r\n    initialValues, \r\n    initialValidation, \r\n    valueChanged, \r\n    paramsChanged,\r\n    onSubmit,\r\n    ...others \r\n}) => {\r\n    const scriptedRef = useScriptRef();\r\n    const theme = useTheme();\r\n\r\n    const [credentialValidation, setCredentialValidation] = useState({});\r\n    const [credentialValues, setCredentialValues] = useState({});\r\n    const [nodeCredentialName, setNodeCredentialName] = useState('');\r\n    const [credentialParams, setCredentialParams] = useState([]);\r\n    const [credentialOptions, setCredentialOptions] = useState([]);\r\n    const [oAuth2RedirectURL, setOAuth2RedirectURL] = useState('');\r\n\r\n    const getCredentialParamsApi = useApi(credentialApi.getCredentialParams);\r\n    const getRegisteredCredentialsApi = useApi(credentialApi.getCredentials);\r\n    const getSpecificCredentialApi = useApi(credentialApi.getSpecificCredential);\r\n\r\n    const onChanged = (values) => {\r\n        const updateValues = values;\r\n        updateValues.submit = null;\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n\r\n    const getCredentialRequestBody = (values) => {\r\n        if (credentialParams.length === 0) throw new Error('Credential params empty');\r\n        \r\n        const credentialData = {};\r\n        for (let i = 0; i < credentialParams.length; i+=1 ) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in values) credentialData[credParamName] = values[credParamName];\r\n        }\r\n        delete credentialData.name;\r\n\r\n        const credBody = {\r\n            name: values.name,\r\n            nodeCredentialName: values.credentialMethod,\r\n            credentialData\r\n        };\r\n\r\n        return credBody;\r\n    }\r\n\r\n    const updateYupValidation = (inputName, validationKey) => {\r\n        const updateValidation = {\r\n            ...credentialValidation,\r\n            [inputName]: Yup.object({[validationKey]: Yup.string().required(`${inputName} is required`) })\r\n        };\r\n        setCredentialValidation(updateValidation);\r\n    };\r\n\r\n    const clearCredentialParams = () => {\r\n        const updateParams = initialParams.filter(item => credentialParams.every(paramItem => item.name !== paramItem.name));\r\n        setCredentialParams([]);\r\n        setOAuth2RedirectURL('');\r\n\r\n        paramsChanged(updateParams, paramsType);\r\n    }\r\n\r\n    const clearCredentialParamsValues = (value) => {\r\n        let updateValues = JSON.parse(JSON.stringify(credentialValues));\r\n        \r\n        for (let i = 0; i < credentialParams.length; i+=1 ) {\r\n            const credParamName = credentialParams[i].name;\r\n            if (credParamName in updateValues) delete updateValues[credParamName];\r\n        }\r\n        updateValues = {\r\n            ...updateValues,\r\n            registeredCredential: value\r\n        };\r\n        valueChanged(updateValues, paramsType);\r\n    };\r\n    \r\n    const onDeleteCredential = async(credentialId) => {\r\n        const response = await credentialApi.deleteCredential(credentialId);\r\n        if (response.data) {\r\n            clearCredentialParams();\r\n            clearCredentialParamsValues('');\r\n        }\r\n    }\r\n\r\n    const openOAuth2PopUpWindow = (oAuth2PopupURL) => {\r\n        const windowWidth = 500;\r\n        const windowHeight = 400;\r\n        const left = window.screenX + (window.outerWidth - windowWidth) / 2;\r\n        const top = window.screenY + (window.outerHeight - windowHeight) / 2.5;\r\n        const title = `Connect Credential`;\r\n        const url = oAuth2PopupURL;\r\n        const popup = window.open(url, title, `width=${windowWidth},height=${windowHeight},left=${left},top=${top}`);\r\n        return popup;\r\n    }\r\n\r\n    const findMatchingOptions = (options, value) => options.find((option) => option.name === value);\r\n\r\n    const getDefaultOptionValue = () => ('');\r\n\r\n    // getRegisteredCredentialsApi successful\r\n    useEffect(() => {\r\n        if (getRegisteredCredentialsApi.data) {\r\n            const credentialOptions = [];\r\n            if (getRegisteredCredentialsApi.data.length) {\r\n                for (let i = 0; i < getRegisteredCredentialsApi.data.length; i+=1 ) {\r\n                    credentialOptions.push({\r\n                        _id: getRegisteredCredentialsApi.data[i]._id,\r\n                        name: getRegisteredCredentialsApi.data[i].name,\r\n                    });\r\n                }\r\n            }\r\n            credentialOptions.push({\r\n                name: ADD_NEW_CREDENTIAL\r\n            });\r\n            setCredentialOptions(credentialOptions);\r\n            if (initialParams.find((prm) => prm.name === 'registeredCredential')) {\r\n                updateYupValidation('registeredCredential', 'name');\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getRegisteredCredentialsApi.data]);\r\n\r\n\r\n    // getCredentialParamsApi successful\r\n    useEffect(() => {\r\n        if (getCredentialParamsApi.data) {\r\n\r\n            const newCredentialParams = getCredentialParamsApi.data.credentials;\r\n\r\n            const credentialNameParam = {\r\n\t\t\t\tlabel: 'Credential Name',\r\n\t\t\t\tname: 'name',\r\n\t\t\t\ttype: 'string',\r\n\t\t\t\tdefault: '',\r\n            };\r\n\r\n            newCredentialParams.unshift(credentialNameParam);\r\n\r\n            setCredentialParams(newCredentialParams);\r\n\r\n            const updateParams = initialParams;\r\n\r\n            for (let i = 0; i < newCredentialParams.length; i+=1 ) {\r\n                const credParamName = newCredentialParams[i].name;\r\n                if (initialParams.find((prm) => prm.name === credParamName) === undefined) {\r\n                    updateParams.push(newCredentialParams[i]);\r\n                }\r\n            }\r\n            paramsChanged(updateParams, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getCredentialParamsApi.data]);\r\n\r\n\r\n    // getSpecificCredentialApi successful\r\n    useEffect(() => {\r\n        if (getSpecificCredentialApi.data) {\r\n            const updateValues = {\r\n                ...credentialValues,\r\n                ...getSpecificCredentialApi.data.credentialData,\r\n                name: getSpecificCredentialApi.data.name,\r\n            };\r\n            valueChanged(updateValues, paramsType);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [getSpecificCredentialApi.data]);\r\n\r\n\r\n    // Initialize values\r\n    useEffect(() => {\r\n        setCredentialValues(initialValues);\r\n        if (initialValues && initialValues.credentialMethod) {\r\n            getRegisteredCredentialsApi.request(initialValues.credentialMethod);\r\n            setNodeCredentialName(initialValues.credentialMethod);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [initialValues]);\r\n\r\n\r\n    // Initialize validation\r\n    useEffect(() => {\r\n        setCredentialValidation(initialValidation);\r\n    \r\n    }, [initialValidation]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{ width: 400 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={credentialValues}\r\n                validationSchema={Yup.object().shape(credentialValidation)}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    try {\r\n                        if (scriptedRef.current) {\r\n                            const isAddNewCredential = values && values.registeredCredential && values.registeredCredential.name === ADD_NEW_CREDENTIAL;\r\n                          \r\n                            if (!isAddNewCredential && (credentialParams.length === 0 || !values.credentialMethod)) {\r\n                                onSubmit(values.credentialMethod ? {...values, submit: true} : {submit: true}, paramsType);\r\n                                setStatus({ success: true });\r\n                                setSubmitting(false);\r\n                            \r\n                            } else {\r\n                                const body = getCredentialRequestBody(values);\r\n                                let response;\r\n                                if (isAddNewCredential) {\r\n                                    response = await credentialApi.createNewCredential(body);\r\n                                } else {\r\n                                    response = await credentialApi.updateCredential(values.registeredCredential._id, body);\r\n                                }\r\n                                if (response.data) {\r\n\r\n                                    // Open oAuth2 window\r\n                                    if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                        const oAuth2PopupURL = await oauth2Api.geOAuth2PopupURL(response.data._id);\r\n                                        const popUpWindow = openOAuth2PopUpWindow(oAuth2PopupURL.data);\r\n\r\n                                        const oAuth2Completed = async(event) => {\r\n                                            if (event.data === 'success') {\r\n                                                window.removeEventListener('message', oAuth2Completed, false);\r\n\r\n                                                const submitValues = {\r\n                                                    credentialMethod: values.credentialMethod,\r\n                                                    registeredCredential: {\r\n                                                        _id: response.data._id,\r\n                                                        name: response.data.name,\r\n                                                    },\r\n                                                    submit: true\r\n                                                }\r\n                                                clearCredentialParams();\r\n                                                onSubmit(submitValues, paramsType);\r\n                                                setStatus({ success: true });\r\n                                                setSubmitting(false);\r\n\r\n                                                if (popUpWindow) {\r\n                                                    popUpWindow.close();\r\n                                                }\r\n                                            }\r\n                                        };\r\n                                        window.addEventListener('message', oAuth2Completed, false);\r\n                                        return;\r\n                                    }\r\n\r\n                                    const submitValues = {\r\n                                        credentialMethod: values.credentialMethod,\r\n                                        registeredCredential: {\r\n                                            _id: response.data._id,\r\n                                            name: response.data.name,\r\n                                        },\r\n                                        submit: true\r\n                                    }\r\n                                    clearCredentialParams();\r\n                                    onSubmit(submitValues, paramsType);\r\n                                    setStatus({ success: true });\r\n                                    setSubmitting(false);\r\n                                } else {\r\n                                    throw new Error(response);\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, setFieldValue, isSubmitting, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n\r\n                        {initialParams.map((input) => {\r\n\r\n                            if (input.type === 'options') {\r\n\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        options={availableOptions}\r\n                                        value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                            clearCredentialParams();\r\n                                            if (selection) {\r\n                                                getRegisteredCredentialsApi.request(value);\r\n                                                setNodeCredentialName(value);\r\n                                            } else {\r\n                                                setCredentialOptions([]);\r\n                                            }\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        {initialParams.find((prm) => prm.name === 'registeredCredential') && (\r\n                        <FormControl \r\n                            fullWidth\r\n                            sx={{ mb: 1, mt: 1 }}\r\n                        >\r\n                            <Stack direction=\"row\">\r\n                                <Typography variant=\"overline\">Registered Credential</Typography>\r\n                                <Tooltip title=\"Select previously registered credential OR add new credential\" placement=\"right\">\r\n                                    <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                </Tooltip>\r\n                            </Stack>\r\n                            <Autocomplete\r\n                                id=\"registered-credential\"\r\n                                freeSolo\r\n                                options={credentialOptions}\r\n                                value={values.registeredCredential && values.credentialMethod ? values.registeredCredential : \" \"}\r\n                                getOptionLabel={(option) => option.name || \" \"}\r\n                                onChange={async(e, selectedCredential) => {\r\n                                    setFieldValue('registeredCredential', selectedCredential !== null ? selectedCredential : initialValues.registeredCredential);\r\n                                    const overwriteValues = {\r\n                                        ...values,\r\n                                        registeredCredential: selectedCredential\r\n                                    };\r\n                                    onChanged(overwriteValues);\r\n                                    if (selectedCredential) {\r\n                                        if (selectedCredential.name !== ADD_NEW_CREDENTIAL) {\r\n                                            getSpecificCredentialApi.request(selectedCredential._id);\r\n                                        } else {\r\n                                            clearCredentialParamsValues(selectedCredential);\r\n                                        }\r\n                                        getCredentialParamsApi.request(nodeCredentialName);\r\n                                        if (values.credentialMethod.toLowerCase().includes('oauth2')) {\r\n                                            const redirectURLResp = await oauth2Api.geOAuth2RedirectURL();\r\n                                            if (redirectURLResp.data) setOAuth2RedirectURL(redirectURLResp.data);\r\n                                        }\r\n                                    }\r\n                                }}\r\n                                onInputChange={(e, value) => {\r\n                                    if (!value) {\r\n                                        clearCredentialParams();\r\n                                        clearCredentialParamsValues('');\r\n                                    }\r\n                                }}\r\n                                onBlur={handleBlur}\r\n                                PopperComponent={StyledPopper}\r\n                                renderInput={(params) => (\r\n                                    <TextField \r\n                                        {...params}\r\n                                        value={values.registeredCredential}\r\n                                        error={Boolean(errors.registeredCredential)}\r\n                                    />\r\n                                )}\r\n                                renderOption={(props, option) => (\r\n                                    <Box component=\"li\" {...props}>\r\n                                        <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                            <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                {option.name} \r\n                                            </Typography>\r\n                                        </div>\r\n                                    </Box>\r\n                                )}\r\n                            />\r\n                            {errors.registeredCredential && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*Registered Credential is required</span>}\r\n                        </FormControl>\r\n                        )}\r\n\r\n                        {values && values.registeredCredential && values.registeredCredential._id && (\r\n                        <Button sx={{ mb: 2 }} size=\"small\" variant=\"outlined\" startIcon={<IconTrash size={15} />} onClick={() => onDeleteCredential(values.registeredCredential._id)}>\r\n                            Delete Credential\r\n                        </Button>)}\r\n\r\n                        {oAuth2RedirectURL &&\r\n                        <div>\r\n                            <Typography variant=\"overline\">OAuth2 Redirect URL</Typography>\r\n                            <Stack direction=\"row\">\r\n                                <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{oAuth2RedirectURL}</Typography>\r\n                                <IconButton title=\"Copy URL\" color=\"primary\" onClick={() => navigator.clipboard.writeText(oAuth2RedirectURL)}>\r\n                                    <IconCopy />\r\n                                </IconButton>\r\n                            </Stack>\r\n                        </div>}\r\n\r\n                        {values.credentialMethod && credentialParams.map((input) => {\r\n\r\n                            if (input.type === 'json') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <JSONInput\r\n                                        id={inputName}\r\n                                        placeholder={JSON.parse(values[inputName] || '{}') || JSON.parse(input.default || '{}') || {}}\r\n                                        theme=\"light_mitsuketa_tribute\"\r\n                                        locale={locale}\r\n                                        height=\"200px\"\r\n                                        width=\"100%\"\r\n                                        style={{\r\n                                            container: {\r\n                                                border: '1px solid',\r\n                                                borderColor: theme.palette.grey['500'],\r\n                                                borderRadius: '12px',\r\n                                            },\r\n                                            body: {\r\n                                                fontSize: '0.875rem'\r\n                                            }\r\n                                        }}\r\n                                        onBlur={e => {\r\n                                            if (!e.error) {\r\n                                                const value = e.json;\r\n                                                setFieldValue(inputName, value);\r\n                                                const overwriteValues = {\r\n                                                    ...values,\r\n                                                    [inputName]: value\r\n                                                };\r\n                                                onChanged(overwriteValues);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'string' || input.type === 'password' || input.type === 'number') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <OutlinedInput\r\n                                        id={inputName}\r\n                                        type={input.type === 'string' || input.type === 'number' ? 'text' : input.type}\r\n                                        value={values[inputName] || ''}\r\n                                        placeholder={input.placeholder}\r\n                                        name={inputName}\r\n                                        onBlur={e => {\r\n                                            handleBlur(e);\r\n                                            onChanged(values);\r\n                                        }}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>\r\n                                )\r\n                            }\r\n\r\n                            if (input.type === 'boolean') {\r\n\r\n                                const inputName = input.name;\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth \r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                    error={Boolean(errors[inputName])}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Switch\r\n                                        checked={!!values[inputName]}\r\n                                        onChange={(event) => {\r\n                                            setFieldValue(inputName, event.target.checked);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: event.target.checked\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        inputProps={{ 'aria-label': 'controlled' }}\r\n                                    />\r\n                                </FormControl>)\r\n                            }\r\n\r\n                            if (input.type === 'options') {\r\n\r\n                                const inputName = input.name;\r\n                                const availableOptions = input.options || [];\r\n\r\n                                return (\r\n                                <FormControl \r\n                                    key={inputName}\r\n                                    fullWidth\r\n                                    sx={{ mb: 1, mt: 1 }}\r\n                                >\r\n                                    <Stack direction=\"row\">\r\n                                        <Typography variant=\"overline\">{input.label}</Typography>\r\n                                        {input.description && (\r\n                                        <Tooltip title={input.description} placement=\"right\">\r\n                                            <IconButton ><Info style={{ height: 18, width: 18 }}/></IconButton>\r\n                                        </Tooltip>\r\n                                        )}\r\n                                    </Stack>\r\n                                    <Autocomplete\r\n                                        id={inputName}\r\n                                        freeSolo\r\n                                        options={availableOptions}\r\n                                        value={findMatchingOptions(availableOptions, values[inputName]) ||  getDefaultOptionValue()}\r\n                                        onChange={(e, selection) => {\r\n                                            const value = selection ? selection.name : \"\";\r\n                                            setFieldValue(inputName, value);\r\n                                            const overwriteValues = {\r\n                                                ...values,\r\n                                                [inputName]: value\r\n                                            };\r\n                                            onChanged(overwriteValues);\r\n                                        }}\r\n                                        onBlur={handleBlur}\r\n                                        PopperComponent={StyledPopper}\r\n                                        renderInput={(params) => (\r\n                                            <TextField \r\n                                                {...params}\r\n                                                value={values[inputName]}\r\n                                                error={Boolean(errors[inputName])}\r\n                                            />\r\n                                        )}\r\n                                        renderOption={(props, option) => (\r\n                                            <Box component=\"li\" {...props}>\r\n                                                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                                                    <Typography sx={{p: 1}} variant=\"h5\">\r\n                                                        {option.label} \r\n                                                    </Typography>\r\n                                                    {option.description &&\r\n                                                        <Typography sx={{p: 1}}>\r\n                                                            {option.description} \r\n                                                        </Typography>\r\n                                                    }\r\n                                                </div>\r\n                                            </Box>\r\n                                        )}\r\n                                    />\r\n                                    {errors[inputName] && <span style={{ color: 'red', fontSize: '0.7rem', fontStyle: 'italic' }}>*{errors[inputName]}</span>}\r\n                                </FormControl>)\r\n                            }\r\n                            return null\r\n                        })}\r\n\r\n                        <Box sx={{ mt: 2 }}>\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting || Object.keys(errors).length > 0}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    {values && values.registeredCredential && \r\n                                    (values.registeredCredential.name === ADD_NEW_CREDENTIAL || credentialParams.length) ? \r\n                                    'Save and Continue' : 'Continue'}\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nCredentialInput.propTypes = {\r\n    initialParams: PropTypes.array,\r\n    paramsType: PropTypes.string,\r\n    initialValues: PropTypes.object, \r\n    initialValidation: PropTypes.object, \r\n    valueChanged: PropTypes.func, \r\n    paramsChanged: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default CredentialInput;\r\n","import client from \"./client\";\r\n\r\nconst getAllContracts = () => client.get(\"/contracts\");\r\n\r\nconst getSpecificContract = (id) => client.get(`/contracts/${id}`);\r\n\r\nconst createNewContract = (body) => client.post(`/contracts`, body); // body: IContract\r\n\r\nconst updateContract = (id, body) => client.put(`/contracts/${id}`, body); // body: IContract\r\n\r\nconst getContractABI = (body) => client.post(`/contracts/getabi`, body); //body: IContractRequestBody\r\n\r\nconst deleteContract = (id) => client.delete(`/contracts/${id}`);\r\n\r\nexport default {\r\n    getAllContracts,\r\n    getSpecificContract,\r\n    createNewContract,\r\n    updateContract,\r\n    getContractABI,\r\n    deleteContract,\r\n};\r\n","import { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { \r\n    enqueueSnackbar as enqueueSnackbarAction,\r\n    closeSnackbar as closeSnackbarAction,\r\n} from 'store/actions';\r\n\r\nimport {\r\n    Avatar,\r\n    Accordion,\r\n    AccordionSummary,\r\n    AccordionDetails,\r\n    Box,\r\n    Divider,\r\n    Chip,\r\n    Typography,\r\n    Button, \r\n    Dialog, \r\n    DialogActions,\r\n    DialogContent, \r\n    DialogTitle,\r\n    Stack,\r\n    IconButton,\r\n} from '@mui/material';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport * as Yup from 'yup';\r\nimport lodash from 'lodash';\r\nimport { ethers } from 'ethers';\r\n\r\n// project imports\r\nimport InputParameters from 'views/inputs/InputParameters';\r\nimport CredentialInput from 'views/inputs/CredentialInput';\r\n\r\n// Icons\r\nimport { IconExclamationMark, IconCheck, IconX, IconArrowUpRightCircle, IconCopy } from '@tabler/icons';\r\n\r\n// API\r\nimport contractsApi from \"api/contracts\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// Const\r\nimport { contract_details, networks, networkExplorers } from \"store/constant\";\r\n\r\n// utils\r\nimport { handleCredentialParams, initializeNodeData } from 'utils/genericHelper';\r\nimport useNotifier from 'utils/useNotifier';\r\n\r\nconst ContractDialog = ({\r\n    show,\r\n    dialogProps,\r\n    onCancel,\r\n    onConfirm\r\n}) => {\r\n\r\n    const portalElement = document.getElementById('portal');\r\n\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    // ==============================|| Snackbar ||============================== //\r\n\r\n    useNotifier();\r\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args));\r\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args));\r\n\r\n    const [contractDetails, setContractDetails] = useState(contract_details);\r\n    const [contractData, setContractData] = useState({});\r\n    const [contractParams, setContractParams] = useState([]);\r\n    const [contractValues, setContractValues] = useState({});\r\n    const [contractValidation, setContractValidation] = useState({});\r\n    const [expanded, setExpanded] = useState(false);\r\n    const [invalidAddress, setInvalidAddress] = useState(false);\r\n    const [invalidABI, setInvalidABI] = useState('');\r\n    const [isReadyToAdd, setIsReadyToAdd] = useState(false);\r\n    const contractParamsType = ['networks', 'credentials', 'contractInfo'];\r\n\r\n    const getSpecificContractApi = useApi(contractsApi.getSpecificContract);\r\n    \r\n    const handleAccordionChange = (expanded) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? expanded : false);\r\n    };\r\n\r\n    const reset = () => {\r\n        setContractData({});\r\n        setContractParams([]);\r\n        setContractValues({});\r\n        setContractValidation({});\r\n        setInvalidAddress(false);\r\n        setInvalidABI('');\r\n        setIsReadyToAdd(false);\r\n        setExpanded(false);\r\n    }\r\n\r\n    const checkIsReadyToAdd = () => {\r\n        for (let i = 0; i < contractParamsType.length; i+= 1) {\r\n            const paramType = contractParamsType[i];\r\n            if (!contractData[paramType] || !contractData[paramType].submit) {\r\n                setIsReadyToAdd(false);\r\n                return;\r\n            }\r\n        }\r\n        setIsReadyToAdd(true);\r\n    };\r\n\r\n    const addNewContract = async() => {\r\n        const createNewContractBody = {\r\n            network: contractData.networks.network,\r\n            name: contractData.contractInfo.name,\r\n            abi: contractData.contractInfo.abi,\r\n            address: contractData.contractInfo.address,\r\n            providerCredential: JSON.stringify(contractData.credentials)\r\n        }\r\n        const createResp = await contractsApi.createNewContract(createNewContractBody);\r\n        if (createResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'New contract added',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to add new contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const saveContract = async() => {\r\n        const saveContractBody = {\r\n            network: contractData.networks.network,\r\n            name: contractData.contractInfo.name,\r\n            abi: contractData.contractInfo.abi,\r\n            address: contractData.contractInfo.address,\r\n            providerCredential: JSON.stringify(contractData.credentials)\r\n        }\r\n        const saveResp = await contractsApi.updateContract(dialogProps.id, saveContractBody);\r\n        if (saveResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Contract saved',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to save contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const deleteContract = async() => {\r\n        const deleteResp = await contractsApi.deleteContract(dialogProps.id);\r\n        if (deleteResp.data) {\r\n            enqueueSnackbar({\r\n                message: 'Contract deleted',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'success',\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onConfirm();\r\n        } else {\r\n            enqueueSnackbar({\r\n                message: 'Failed to delete contract',\r\n                options: {\r\n                    key: new Date().getTime() + Math.random(),\r\n                    variant: 'error',\r\n                    persist: true,\r\n                    action: key => (\r\n                        <Button style={{color: 'white'}} onClick={() => closeSnackbar(key)}>\r\n                            <IconX />\r\n                        </Button>\r\n                    ),\r\n                },\r\n            });\r\n            onCancel();\r\n        }\r\n    }\r\n\r\n    const fetchABI = async(formValues, paramsType) => {\r\n        const selectedNetwork = networks.find((network) => network.name === contractData.networks.network);\r\n        if (!selectedNetwork) return;\r\n\r\n        const body = {\r\n            ...contractData,\r\n            networks: {\r\n                ...contractData.networks,\r\n                uri: selectedNetwork.uri || ''\r\n            }\r\n        }\r\n\r\n        const resp = await contractsApi.getContractABI(body);\r\n        if (!resp.data) {\r\n            const updateContractData = {\r\n                ...contractData,\r\n                [paramsType]: {...formValues, submit: null}\r\n            };\r\n            setContractData(updateContractData);\r\n            setInvalidABI('Unable to fetch ABI');\r\n            return;\r\n        } else {\r\n            const status = resp.data.status;\r\n            if (status === '0') {\r\n                setInvalidABI('Unable to fetch ABI');\r\n                return;\r\n            }\r\n            const abi = resp.data.result;\r\n            setInvalidABI('');\r\n            return abi === 'Invalid API Key' ? undefined : abi;\r\n        }\r\n    }\r\n    \r\n    const valueChanged = (formValues, paramsType) => {\r\n        const updateContractData = {\r\n            ...contractData,\r\n            [paramsType]: formValues\r\n        };\r\n\r\n        const index = contractParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== contractParamsType.length - 1) {\r\n            for (let i = index+1; i < contractParamsType.length; i+= 1) {\r\n                const paramType = contractParamsType[i];\r\n                if (updateContractData[paramType]) updateContractData[paramType].submit = null;\r\n            }\r\n        }\r\n        \r\n        setContractData(updateContractData);\r\n    };\r\n\r\n    const paramsChanged = (formParams, paramsType) => {\r\n\r\n        // Because formParams options can be changed due to show hide options, \r\n        // To avoid that, replace with original details options\r\n\r\n        const credentialMethodParam = formParams.find((param) => param.name === 'credentialMethod');\r\n        const credentialMethodParamIndex = formParams.findIndex((param) => param.name === 'credentialMethod');\r\n        \r\n        if (credentialMethodParam !== undefined) {\r\n            const originalParam = contractDetails[paramsType].find((param) => param.name === 'credentialMethod');\r\n            if (originalParam !== undefined) {\r\n                formParams[credentialMethodParamIndex]['options'] = originalParam.options;\r\n            }\r\n        }\r\n\r\n        const updateContractDetails = {\r\n            ...contractDetails,\r\n            [paramsType]: formParams\r\n        };\r\n        setContractDetails(updateContractDetails);\r\n    };\r\n\r\n    const onSubmit = async(formValues, paramsType) => {\r\n        if (formValues.address) {\r\n            if (ethers.utils.isAddress(formValues.address)) {\r\n                setInvalidAddress(false);\r\n                const abi = await fetchABI(formValues, paramsType);\r\n                if (abi) {\r\n                    const updateFormValues = {\r\n                        submit: true,\r\n                        ...formValues\r\n                    };\r\n                    updateFormValues.abi = abi;\r\n                    const updateContractData = {\r\n                        ...contractData,\r\n                        [paramsType]: updateFormValues\r\n                    };\r\n                    setContractData(updateContractData);\r\n                } else {\r\n                    const updateContractData = {\r\n                        ...contractData,\r\n                        [paramsType]: {...formValues, submit: null}\r\n                    };\r\n                    setContractData(updateContractData);\r\n                }\r\n            }\r\n            else {\r\n                setInvalidAddress(true);\r\n                const updateContractData = {\r\n                    ...contractData,\r\n                    [paramsType]: {...formValues, submit: null}\r\n                };\r\n                setContractData(updateContractData);\r\n            }\r\n        } else {\r\n            const updateContractData = {\r\n                ...contractData,\r\n                [paramsType]: formValues\r\n            };\r\n            setContractData(updateContractData);\r\n        }\r\n\r\n        const index = contractParamsType.indexOf(paramsType);\r\n        if (index >= 0 && index !== contractParamsType.length - 1) {\r\n            setExpanded(contractParamsType[index+1]);\r\n        }\r\n    };\r\n\r\n    const showHideOptions = (displayType, options) => {\r\n       \r\n        let returnOptions = options;\r\n        const toBeDeleteOptions = [];\r\n\r\n        for (let i = 0; i < returnOptions.length; i+= 1) {\r\n            const option = returnOptions[i];\r\n            const displayOptions = option[displayType];\r\n\r\n            if (displayOptions) {\r\n                Object.keys(displayOptions).forEach((path) => {\r\n                    const comparisonValue = displayOptions[path];\r\n                    const groundValue = lodash.get(contractData, path, '');\r\n                    if (Array.isArray(comparisonValue)) {\r\n                        if (displayType === 'show' && !comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                        if (displayType === 'hide' && comparisonValue.includes(groundValue)) {\r\n                            toBeDeleteOptions.push(option);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < toBeDeleteOptions.length; i+= 1) {\r\n            returnOptions = returnOptions.filter((opt) => JSON.stringify(opt) !== JSON.stringify(toBeDeleteOptions[i]));\r\n        }\r\n\r\n        return returnOptions;\r\n    }\r\n\r\n    const displayOptions = (params) => {\r\n      \r\n        let clonedParams = params;\r\n\r\n        for (let i = 0; i < clonedParams.length; i+= 1) {\r\n            const input = clonedParams[i];\r\n            if (input.type === 'options') {\r\n                input.options = showHideOptions('show', input.options);\r\n                input.options = showHideOptions('hide', input.options);\r\n            }\r\n        }\r\n      \r\n        return clonedParams;\r\n    };\r\n\r\n    const setYupValidation = (params) => {\r\n        const validationSchema = {};\r\n        for (let i = 0; i < params.length; i+= 1) {\r\n            const input = params[i];\r\n            if (input.type === 'string' && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if (input.type === 'number' && !input.optional) {\r\n                validationSchema[input.name] = Yup.number().required(`${input.label} is required. Type: ${input.type}`);\r\n            } else if ((input.type === 'options' || input.type === 'asyncOptions') && !input.optional) {\r\n                validationSchema[input.name] = Yup.string().required(`${input.label} is required. Type: ${input.type}`);\r\n            }\r\n        }\r\n        return validationSchema;\r\n    };\r\n\r\n    const initializeFormValuesAndParams = (paramsType) => {\r\n\r\n        const initialValues = {};\r\n        let contractParams = displayOptions(lodash.cloneDeep(contractDetails[paramsType] || []));\r\n        contractParams = handleCredentialParams(contractParams, paramsType, contractDetails[paramsType], contractData);\r\n       \r\n        for (let i = 0; i < contractParams.length; i+= 1) {\r\n            const input = contractParams[i];\r\n\r\n            // Load from contractData values\r\n            if (paramsType in contractData && input.name in contractData[paramsType]) {\r\n                initialValues[input.name] = contractData[paramsType][input.name];\r\n         \r\n                // Check if option value is still available from the list of options\r\n                if (input.type === 'options') {\r\n                    const optionVal = input.options.find((option) => option.name === initialValues[input.name]);\r\n                    if (!optionVal) delete initialValues[input.name];\r\n                }\r\n            } else {\r\n                // Load from contractParams default values\r\n                initialValues[input.name] = input.default || '';\r\n            }\r\n        }\r\n        \r\n        initialValues.submit = null;\r\n        \r\n        setContractValues(initialValues);\r\n        setContractValidation(setYupValidation(contractParams));\r\n        setContractParams(contractParams);\r\n    };\r\n\r\n    const transformContractResponse = (contractResponseData, contractDetails) => {\r\n        const contractData = {\r\n            networks: {},\r\n            credentials: {},\r\n            contractInfo: {}\r\n        }\r\n\r\n        if (contractResponseData) {\r\n            contractData.networks = { network: contractResponseData.network, submit: true };\r\n            contractData.contractInfo = { ...contractResponseData, submit: true };\r\n            if (contractResponseData.providerCredential) {\r\n                try {\r\n                    contractData.credentials = JSON.parse(contractResponseData.providerCredential);\r\n                } catch(e) { \r\n                    console.error(e); \r\n                }\r\n            }\r\n        } else {\r\n            contractData.networks = initializeNodeData(contractDetails.networks);\r\n            contractData.credentials = initializeNodeData(contractDetails.credentials);\r\n            contractData.contractInfo = initializeNodeData(contractDetails.contractInfo);\r\n        }\r\n        return contractData;\r\n    }\r\n\r\n    // Get Contract Details from API\r\n    useEffect(() => {\r\n        if (getSpecificContractApi.data) {\r\n            const contractResponseData = getSpecificContractApi.data;\r\n            setContractData(transformContractResponse(contractResponseData));\r\n            setExpanded('networks');\r\n        }\r\n\r\n    }, [getSpecificContractApi.data]); \r\n\r\n\r\n    // Initialization\r\n    useEffect(() => {\r\n        if (show && dialogProps.type === 'ADD') {\r\n            reset();\r\n            setContractData(transformContractResponse(null, contractDetails));\r\n            setExpanded('networks');\r\n\r\n        } else if (show && dialogProps.type === 'EDIT' && dialogProps.id) {\r\n            reset();\r\n            getSpecificContractApi.request(dialogProps.id);\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [show, dialogProps]); \r\n\r\n    \r\n    // Initialize Parameters Initial Values & Validation\r\n    useEffect(() => {\r\n        if (contractDetails && contractData && expanded) {\r\n            initializeFormValuesAndParams(expanded);\r\n            checkIsReadyToAdd();\r\n        }\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [contractDetails, contractData, expanded]);\r\n\r\n\r\n    const component = show ? (\r\n        <Dialog\r\n            open={show}\r\n            onClose={onCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle sx={{ fontSize: '1rem' }} id=\"alert-dialog-title\">\r\n                {dialogProps.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n\r\n                {dialogProps.type === 'ADD' && <Chip sx={{mb: 1}} icon={<IconExclamationMark />} label=\"You can only add contract which has been publicly verified\" color=\"warning\" />}\r\n                \r\n                {contractData && contractData.contractInfo && contractData.contractInfo.address && dialogProps.type === 'EDIT' && \r\n                <Box sx={{ p: 2 }}>\r\n                    <Typography sx={{ p: 1 }} variant=\"overline\">ADDRESS</Typography>\r\n                    <Stack direction=\"row\" sx={{ p: 1 }}>\r\n                        <Typography sx={{ p: 1, borderRadius: 10, backgroundColor: theme.palette.primary.light, width: 'max-content', height: 'max-content' }} variant=\"h5\">{contractData.contractInfo.address}</Typography>\r\n                        <IconButton title=\"Copy Address\" color=\"primary\" onClick={() => navigator.clipboard.writeText(contractData.contractInfo.address)}>\r\n                            <IconCopy />\r\n                        </IconButton>\r\n                        <IconButton title=\"Open in Block Explorer\" color=\"primary\" onClick={() => window.open(`${networkExplorers[contractData.networks.network]}/address/${contractData.contractInfo.address}`, \"_blank\")}>\r\n                            <IconArrowUpRightCircle />\r\n                        </IconButton>\r\n                    </Stack>\r\n                </Box>}\r\n\r\n                {/* networks */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'networks'} onChange={handleAccordionChange('networks')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"networks-content\"\r\n                            id=\"networks-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Networks\r\n                            </Typography>\r\n                            {contractData && contractData.networks && contractData.networks.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters \r\n                                paramsType=\"networks\"\r\n                                params={contractParams} \r\n                                initialValues={contractValues} \r\n                                nodeParamsValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* credentials */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'credentials'} onChange={handleAccordionChange('credentials')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"credentials-content\"\r\n                            id=\"credentials-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Credentials\r\n                            </Typography>\r\n                            {contractData && contractData.credentials && contractData.credentials.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <CredentialInput \r\n                                paramsType=\"credentials\"\r\n                                initialParams={contractParams} \r\n                                initialValues={contractValues} \r\n                                initialValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                paramsChanged={paramsChanged}\r\n                                onSubmit={onSubmit}\r\n                            />\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                {/* contractInfo */}\r\n                <Box sx={{ p: 2 }}>\r\n                    <Accordion expanded={expanded === 'contractInfo'} onChange={handleAccordionChange('contractInfo')}>\r\n                        <AccordionSummary\r\n                            expandIcon={<ExpandMoreIcon />}\r\n                            aria-controls=\"contractInfo-content\"\r\n                            id=\"contractInfo-header\" \r\n                        >\r\n                            <Typography variant=\"h4\">\r\n                                Contract Details\r\n                            </Typography>\r\n                            {contractData && contractData.contractInfo && contractData.contractInfo.submit &&\r\n                            (<Avatar\r\n                                variant=\"rounded\"\r\n                                sx={{\r\n                                    ...theme.typography.smallAvatar,\r\n                                    borderRadius: '50%',\r\n                                    background: theme.palette.success.dark,\r\n                                    color: 'white',\r\n                                    ml: 2\r\n                                }}\r\n                            >\r\n                                <IconCheck />\r\n                            </Avatar>)}\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <InputParameters \r\n                                paramsType=\"contractInfo\"\r\n                                params={contractParams} \r\n                                initialValues={contractValues}\r\n                                nodeParamsValidation={contractValidation}\r\n                                valueChanged={valueChanged}\r\n                                onSubmit={onSubmit}\r\n                                setVariableSelectorState={() => null}\r\n                            />\r\n                            {invalidAddress && <Chip sx={{mt: 2, mb: 1}} icon={<IconX />} label=\"Invalid Contract Address\" color=\"error\" />}\r\n                            {invalidABI && <Chip sx={{mt: 2, mb: 1, ml: invalidAddress ? 2 : 0}} icon={<IconX />} label={invalidABI} color=\"error\" />}\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                    <Divider />\r\n                </Box>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={onCancel}>\r\n                    {dialogProps.cancelButtonName}\r\n                </Button>\r\n                {dialogProps.type === 'EDIT' && <Button \r\n                    variant=\"contained\"\r\n                    color=\"error\"\r\n                    onClick={() => deleteContract()}\r\n                >\r\n                    Delete\r\n                </Button>}\r\n                <Button \r\n                    variant=\"contained\" \r\n                    disabled={!isReadyToAdd} \r\n                    onClick={() => dialogProps.type === 'ADD' ? addNewContract() : saveContract()}\r\n                >\r\n                    {dialogProps.confirmButtonName}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    ) : null;\r\n\r\n    return createPortal(component, portalElement);\r\n}\r\n\r\nContractDialog.propTypes = {\r\n    show: PropTypes.bool, \r\n    dialogProps: PropTypes.object,\r\n    onCancel: PropTypes.func,\r\n    onConfirm: PropTypes.func,\r\n};\r\n\r\nexport default ContractDialog;\r\n\r\n","export default __webpack_public_path__ + \"static/media/contract_empty.2c9c811e.svg\";","import { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { Grid, Button, Box, Stack } from '@mui/material';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport ItemCard from 'ui-component/cards/ItemCard';\r\nimport ContractDialog from './ContractDialog';\r\nimport ContractEmptySVG from 'assets/images/contract_empty.svg';\r\n\r\n// const\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// API\r\nimport contractsApi from \"api/contracts\";\r\n\r\n// Hooks\r\nimport useApi from \"hooks/useApi\";\r\n\r\n// ==============================|| CONTRACTS ||============================== //\r\n\r\nconst Contracts = () => {\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [showDialog, setShowDialog] = useState(false);\r\n    const [dialogProps, setDialogProps] = useState({});\r\n\r\n    const getAllContractsApi = useApi(contractsApi.getAllContracts);\r\n\r\n    const addNew = () => {\r\n        const dialogProp = {\r\n            title: 'Add New Contract',\r\n            type: 'ADD',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Add'\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n\r\n    const edit = (id) => {\r\n        const dialogProp = {\r\n            title: 'Edit Contract',\r\n            type: 'EDIT',\r\n            cancelButtonName: 'Cancel',\r\n            confirmButtonName: 'Save',\r\n            id\r\n        };\r\n        setDialogProps(dialogProp);\r\n        setShowDialog(true);\r\n    };\r\n    \r\n    const onConfirm = () => {\r\n        setShowDialog(false);\r\n        getAllContractsApi.request();\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllContractsApi.request();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLoading(getAllContractsApi.loading);\r\n    }, [getAllContractsApi.loading]);\r\n\r\n\r\n    return (\r\n        <>\r\n        <MainCard>\r\n            <Stack flexDirection=\"row\">\r\n                <h1>Contracts</h1>\r\n                <Grid sx={{ mb: 1.25 }} container direction=\"row\">\r\n                    <Box sx={{ flexGrow: 1 }} />\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" sx={{ color: 'white' }} onClick={addNew}>\r\n                            Add New\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Stack>\r\n            <Grid container spacing={gridSpacing}>\r\n                {!isLoading && getAllContractsApi.data && getAllContractsApi.data.map((data, index) => (\r\n                    <Grid key={index} item lg={4} md={6} sm={6} xs={12}>\r\n                        <ItemCard \r\n                            isLoading={isLoading}\r\n                            onClick={() => edit(data._id)} \r\n                            data={data}\r\n                        />\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n            {!isLoading && (!getAllContractsApi.data || getAllContractsApi.data.length === 0) && (\r\n                <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection=\"column\">\r\n                    <Box sx={{ p: 2, height: 'auto' }}>\r\n                        <img style={{ objectFit: 'cover', height: '30vh', width: 'auto' }} src={ContractEmptySVG} alt=\"ContractEmptySVG\" />\r\n                    </Box>\r\n                    <div>No Contracts Yet</div>\r\n                </Stack>\r\n            )}\r\n        </MainCard>\r\n        <ContractDialog\r\n            show={showDialog}\r\n            dialogProps={dialogProps}\r\n            onCancel={() => setShowDialog(false)}\r\n            onConfirm={onConfirm}\r\n        >\r\n        </ContractDialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Contracts;\r\n"],"sourceRoot":""}